NL input,Key Values,Cypher Query
"The same person must not perform an activity of type ""Approve Refund"" more than 5 times.","Activity: [""Approve Refund""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Approve Refund""}) WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 5 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
"An event with activity ""Complete Payment"" must be performed by the same person no more than 5 times.","Activity: [""Complete Payment""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Complete Payment""}) WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 5 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
The same resource may not approve an order more than 2 times.,"Activity: [""Approve Order""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Approve Order""}) WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 2 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
"No individual may perform an event of type ""Process Order"" more than 10 times.","Activity: [""Process Order""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Process Order""}) WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 10 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
"The maximum number of times a customer may make a ""Submit Complaint"" event is 3.","Activity: [""submit complaint""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""submit complaint""}) WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 3 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
"The same actor may not perform more than 20 ""Log Activity"" actions.","Activity: [""log activity""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""log activity""}) WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 20 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
"The same resource must not perform an event with activity ""Verify Invoice"" more than 10 times.","Activity: [""verify invoice""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""verify invoice""}) WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 10 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
"An employee must not perform a ""Schedule Meeting"" more than 3 times.","Activity: [""schedule meeting""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""schedule meeting""}) WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 3 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
"The maximum number of times a manager may approve ""Vacation Request"" is 2.","Activity: [""approve vacation request""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""approve vacation request""}) WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 2 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
"The same employee may not log more than 5 ""Work Hours"".","Activity: [""log work hours""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""log work hours""}) WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 5 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
"A staff member must not submit ""Expense Claims"" more than 4 times.","Activity: [""submit expense claim""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""submit expense claim""}) WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 4 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
"An actor may not approve a ""Purchase Order"" more than 1 time.","Activity: [""approve purchase order""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""approve purchase order""}) WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 1 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
"The same person must not perform a ""Review Request"" event more than 4 times.","Activity: [""Review Request""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Review Request""}) WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 4 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
"No individual may perform a task of type ""Upload File"" more than 2 times.","Activity: [""Upload File""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Upload File""}) WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 2 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
An employee must not submit more than 5 reports.,"Activity: [""Submit Report""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Submit Report""}) WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 5 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
The same person must not interact with customers more than 20 times.,"Activity: [""Customer Interaction""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Customer Interaction""}) WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 20 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
A user may not review more than 10 feedback forms.,"Activity: [""Review Feedback""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Review Feedback""}) WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 10 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
No team member may finalize more than 3 projects.,"Activity: [""Finalize Project""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Finalize Project""}) WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 3 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
An employee must not submit more than 2 leave requests.,"Activity: [""Submit Leave Request""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Submit Leave Request""}) WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 2 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
The same person may not create more than 15 product listings.,"Activity: [""Create Product Listing""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Create Product Listing""}) WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 15 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
It is required that the same person answers at most 50 customer support requests.,"Activity: [""Answer Customer Support Request""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Answer Customer Support Request""}) WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 50 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
R1 must hand over work to R2 a minimum of 2 times.,"Activity: [], EntityType: [], Actor: [""R1"", ""R2""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'R1' AND e2.Actor = 'R2' WITH COUNT(*) AS handovers RETURN handovers >= 2 AS ruleSatisfied
John is required to transfer work to Susan no fewer than 5 times.,"Activity: [], EntityType: [], Actor: [""John"", ""Susan""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'John' AND e2.Actor = 'Susan' WITH COUNT(*) AS handovers RETURN handovers >= 5 AS ruleSatisfied
The work handover from Alice to Bob must occur at most 3 times.,"Activity: [], EntityType: [], Actor: [""Alice"", ""Bob""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'Alice' AND e2.Actor = 'Bob' WITH COUNT(*) AS handovers RETURN handovers <= 3 AS ruleSatisfied
It is necessary for Manager to hand over work to Assistant no less than 10 times.,"Activity: [], EntityType: [], Actor: [""Manager"", ""Assistant""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'Manager' AND e2.Actor = 'Assistant' WITH COUNT(*) AS handovers RETURN handovers >= 10 AS ruleSatisfied
It is required that an event performed by Paul is directly followed by an event by Mark at least 4 times.,"Activity: [], EntityType: [], Actor: [""Paul"", ""Mark""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'Paul' AND e2.Actor = 'Mark' WITH COUNT(*) AS handovers RETURN handovers >= 4 AS ruleSatisfied
It is required that an event performed by person Peter must be directly succeeded by a task performed by Susan at most 3 times.,"Activity: [], EntityType: [], Actor: [""Peter"", ""Susan""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'Peter' AND e2.Actor = 'Susan' WITH COUNT(*) AS handovers RETURN handovers <= 3 AS ruleSatisfied
Jack must transfer work to Jill at least 8 times.,"Activity: [], EntityType: [], Actor: [""Jack"", ""Jill""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'Jack' AND e2.Actor = 'Jill' WITH COUNT(*) AS handovers RETURN handovers >= 8 AS ruleSatisfied
It is required that an event performed by Alice is directly followed by an event performed by Bob at most 2 times.,"Activity: [], EntityType: [], Actor: [""alice"", ""bob""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'alice' AND e2.Actor = 'bob' WITH COUNT(*) AS handovers RETURN handovers <= 2 AS ruleSatisfied
At least 5 instances must occur where Sarah’s actions are immediately followed by John’s actions.,"Activity: [], EntityType: [], Actor: [""sarah"", ""john""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'sarah' AND e2.Actor = 'john' WITH COUNT(*) AS handovers RETURN handovers >= 5 AS ruleSatisfied
A task by Anna must immediately precede a task by Peter no fewer than 3 times.,"Activity: [], EntityType: [], Actor: [""anna"", ""peter""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'anna' AND e2.Actor = 'peter' WITH COUNT(*) AS handovers RETURN handovers >= 3 AS ruleSatisfied
Tom must hand over work to Jerry at least 6 times.,"Activity: [], EntityType: [], Actor: [""tom"", ""jerry""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'tom' AND e2.Actor = 'jerry' WITH COUNT(*) AS handovers RETURN handovers >= 6 AS ruleSatisfied
Linda is required to transfer work to Mark no more than 4 times.,"Activity: [], EntityType: [], Actor: [""linda"", ""mark""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'linda' AND e2.Actor = 'mark' WITH COUNT(*) AS handovers RETURN handovers <= 4 AS ruleSatisfied
The work handover from John to Alice must occur at most 3 times.,"Activity: [], EntityType: [], Actor: [""john"", ""alice""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'john' AND e2.Actor = 'alice' WITH COUNT(*) AS handovers RETURN handovers <= 3 AS ruleSatisfied
It is necessary for Mike to hand over work to Emma no fewer than 7 times.,"Activity: [], EntityType: [], Actor: [""mike"", ""emma""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'mike' AND e2.Actor = 'emma' WITH COUNT(*) AS handovers RETURN handovers >= 7 AS ruleSatisfied
It is required that an event performed by David is directly followed by an event performed by Susan at least 5 times.,"Activity: [], EntityType: [], Actor: [""david"", ""susan""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'david' AND e2.Actor = 'susan' WITH COUNT(*) AS handovers RETURN handovers >= 5 AS ruleSatisfied
It is required that an action performed by Sarah must be directly succeeded by an action performed by John at most 2 times.,"Activity: [], EntityType: [], Actor: [""Sarah"", ""John""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'Sarah' AND e2.Actor = 'John' WITH COUNT(*) AS handovers RETURN handovers <= 2 AS ruleSatisfied
At least 4 instances must occur where Rachel’s actions are immediately followed by Ross’s actions.,"Activity: [], EntityType: [], Actor: [""Rachel"", ""Ross""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'Rachel' AND e2.Actor = 'Ross' WITH COUNT(*) AS handovers RETURN handovers >= 4 AS ruleSatisfied
Mark’s event must immediately precede Peter’s event no fewer than 3 times.,"Activity: [], EntityType: [], Actor: [""Mark"", ""Peter""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'Mark' AND e2.Actor = 'Peter' WITH COUNT(*) AS handovers RETURN handovers >= 3 AS ruleSatisfied
Anna must hand over work to David at least 8 times.,"Activity: [], EntityType: [], Actor: [""Anna"", ""David""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'Anna' AND e2.Actor = 'David'  WITH COUNT(*) AS handovers RETURN handovers >= 8 AS ruleSatisfied
It is required that an event performed by Peter is directly followed by an event performed by Tom at most 3 times.,"Activity: [], EntityType: [], Actor: [""Peter"", ""Tom""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'Peter' AND e2.Actor = 'Tom' WITH COUNT(*) AS handovers RETURN handovers <= 3 AS ruleSatisfied
There are at least 5 instances where Peter hands over work to Susan.,"Activity: [], EntityType: [], Actor: [""Peter"", ""Susan""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'Peter' AND e2.Actor = 'Susan' WITH COUNT(*) AS handovers RETURN handovers >= 5 AS ruleSatisfied
There are at least 3 instances where Mark hands over work to John.,"Activity: [], EntityType: [], Actor: [""Mark"", ""John""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'Mark' AND e2.Actor = 'John' WITH COUNT(*) AS handovers RETURN handovers >= 3 AS ruleSatisfied
Peter never hands over work to Susan.,"Activity: [], EntityType: [], Actor: [""Peter"", ""Susan""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'Peter' AND e2.Actor = 'Susan' WITH count(*) AS pairCount RETURN pairCount = 0 AS ruleSatisfied
Mark is not allowed to hand over work to John.,"Activity: [], EntityType: [], Actor: [""Mark"", ""John""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'Mark' AND e2.Actor = 'John' WITH count(*) AS pairCount RETURN pairCount = 0 AS ruleSatisfied
Rachel must refrain from passing work to Ross.,"Activity: [], EntityType: [], Actor: [""Rachel"", ""Ross""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'Rachel' AND e2.Actor = 'Ross' WITH count(*) AS pairCount RETURN pairCount = 0 AS ruleSatisfied
Linda is prohibited from handing over work to Mike.,"Activity: [], EntityType: [], Actor: [""Linda"", ""Mike""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'Linda' AND e2.Actor = 'Mike' WITH count(*) AS pairCount RETURN pairCount = 0 AS ruleSatisfied
Tom must not immediately transfer work to Jerry.,"Activity: [], EntityType: [], Actor: [""Tom"", ""Jerry""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'Tom' AND e2.Actor = 'Jerry' WITH count(*) AS pairCount RETURN pairCount = 0 AS ruleSatisfied
There should be no instances where Peter hands over work to Susan.,"Activity: [], EntityType: [], Actor: [""Peter"", ""Susan""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'Peter' AND e2.Actor = 'Susan' WITH count(*) AS pairCount RETURN pairCount = 0 AS ruleSatisfied
It is required that no event performed by Peter is directly followed by an event performed by Susan.,"Activity: [], EntityType: [], Actor: [""Peter"", ""Susan""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'Peter' AND e2.Actor = 'Susan' WITH count(*) AS pairCount RETURN pairCount = 0 AS ruleSatisfied
Rachel never hands over work to Ross.,"Activity: [], EntityType: [], Actor: [""Rachel"", ""Ross""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'Rachel' AND e2.Actor = 'Ross' WITH count(*) AS pairCount RETURN pairCount = 0 AS ruleSatisfied
Tom is not allowed to hand over work to Jerry.,"Activity: [], EntityType: [], Actor: [""Tom"", ""Jerry""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'Tom' AND e2.Actor = 'Jerry' WITH count(*) AS pairCount RETURN pairCount = 0 AS ruleSatisfied
Linda must refrain from passing work to Mike.,"Activity: [], EntityType: [], Actor: [""Linda"", ""Mike""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'Linda' AND e2.Actor = 'Mike' WITH count(*) AS pairCount RETURN pairCount = 0 AS ruleSatisfied
John is prohibited from handing over work to Alice.,"Activity: [], EntityType: [], Actor: [""John"", ""Alice""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'John' AND e2.Actor = 'Alice' WITH count(*) AS pairCount RETURN pairCount = 0 AS ruleSatisfied
Anna must not immediately transfer work to Bob.,"Activity: [], EntityType: [], Actor: [""Anna"", ""Bob""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'Anna' AND e2.Actor = 'Bob' WITH count(*) AS pairCount RETURN pairCount = 0 AS ruleSatisfied
There should be no instances where David hands over work to Emily.,"Activity: [], EntityType: [], Actor: [""David"", ""Emily""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'David' AND e2.Actor = 'Emily' WITH count(*) AS pairCount RETURN pairCount = 0 AS ruleSatisfied
It is required that no task performed by Peter is directly followed by a task performed by George.,"Activity: [], EntityType: [], Actor: [""Peter"", ""George""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'Peter' AND e2.Actor = 'George' WITH count(*) AS pairCount RETURN pairCount = 0 AS ruleSatisfied
It is prohibited for Lisa to transfer work to Steve.,"Activity: [], EntityType: [], Actor: [""Lisa"", ""Steve""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'Lisa' AND e2.Actor = 'Steve' WITH count(*) AS pairCount RETURN pairCount = 0 AS ruleSatisfied
No instances are allowed where Adam performs an event directly followed by Carol performing another event.,"Activity: [], EntityType: [], Actor: [""Adam"", ""Carol""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'Adam' AND e2.Actor = 'Carol' WITH count(*) AS pairCount RETURN pairCount = 0 AS ruleSatisfied
It is required that no event performed by MIchael is directly followed by an event performed by Laura.,"Activity: [], EntityType: [], Actor: [""Michael"", ""Laura""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'Michael' AND e2.Actor = 'Laura' WITH count(*) AS pairCount RETURN pairCount = 0 AS ruleSatisfied
Sarah never hands over work to Victor.,"Activity: [], EntityType: [], Actor: [""Sarah"", ""Victor""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'Sarah' AND e2.Actor = 'Victor' WITH count(*) AS pairCount RETURN pairCount = 0 AS ruleSatisfied
Jack is prohibited from transferring work to Zoe.,"Activity: [], EntityType: [], Actor: [""Jack"", ""Zoe""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'Jack' AND e2.Actor = 'Zoe' WITH count(*) AS pairCount RETURN pairCount = 0 AS ruleSatisfied
Nancy must not hand over work to Greg.,"Activity: [], EntityType: [], Actor: [""Nancy"", ""Greg""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'Nancy' AND e2.Actor = 'Greg' WITH count(*) AS pairCount RETURN pairCount = 0 AS ruleSatisfied
There is no activity which Alex and Max both perform.,"Activity: [], EntityType: [], Actor: [""Alex"", ""Max""]","MATCH (e1:Event {Actor: 'Alex'}) WITH COLLECT(DISTINCT e1.Activity) AS Alex_activities MATCH (e2:Event {Actor: 'Max'}) WITH Alex_activities, COLLECT(DISTINCT e2.Activity) AS Max_activities RETURN CASE WHEN ANY(activity IN Alex_activities WHERE activity IN Max_activities) THEN false ELSE true END AS rule_satisfied"
Peter and Susan must not share any activities.,"Activity: [], EntityType: [], Actor: [""Peter"", ""Susan""]","MATCH (e1:Event {Actor: 'Peter'}) WITH COLLECT(DISTINCT e1.Activity) AS Peter_activities MATCH (e2:Event {Actor: 'Susan'}) WITH Peter_activities, COLLECT(DISTINCT e2.Activity) AS Susan_activities RETURN CASE WHEN ANY(activity IN Peter_activities WHERE activity IN Susan_activities) THEN false ELSE true END AS rule_satisfied"
Michael and Emily’s activities must not overlap.,"Activity: [], EntityType: [], Actor: [""Michael"", ""Emily""]","MATCH (e1:Event {Actor: 'Michael'}) WITH COLLECT(DISTINCT e1.Activity) AS Michael_activities MATCH (e2:Event {Actor: 'Emily'}) WITH Michael_activities, COLLECT(DISTINCT e2.Activity) AS Emily_activities RETURN CASE WHEN ANY(activity IN Michael_activities WHERE activity IN Emily_activities) THEN false ELSE true END AS rule_satisfied"
Olivia and James should work on completely separate activities.,"Activity: [], EntityType: [], Actor: [""Olivia"", ""James""]","MATCH (e1:Event {Actor: 'Olivia'}) WITH COLLECT(DISTINCT e1.Activity) AS Olivia_activities MATCH (e2:Event {Actor: 'James'}) WITH Olivia_activities, COLLECT(DISTINCT e2.Activity) AS James_activities RETURN CASE WHEN ANY(activity IN Olivia_activities WHERE activity IN James_activities) THEN false ELSE true END AS rule_satisfied"
Sarah and David must not perform the same activities.,"Activity: [], EntityType: [], Actor: [""sarah"", ""david""]","MATCH (e1:Event {Actor: 'sarah'}) WITH COLLECT(DISTINCT e1.Activity) AS sarah_activities MATCH (e2:Event {Actor: 'david'}) WITH sarah_activities, COLLECT(DISTINCT e2.Activity) AS david_activities RETURN CASE WHEN ANY(activity IN sarah_activities WHERE activity IN david_activities) THEN false ELSE true END AS rule_satisfied"
No activity performed by Richard can be performed by Anna.,"Activity: [], EntityType: [], Actor: [""richard"", ""anna""]","MATCH (e1:Event {Actor: 'richard'}) WITH COLLECT(DISTINCT e1.Activity) AS richard_activities MATCH (e2:Event {Actor: 'anna'}) WITH richard_activities, COLLECT(DISTINCT e2.Activity) AS anna_activities RETURN CASE WHEN ANY(activity IN richard_activities WHERE activity IN anna_activities) THEN false ELSE true END AS rule_satisfied"
Ethan and Chloe must work on completely distinct tasks.,"Activity: [], EntityType: [], Actor: [""ethan"", ""chloe""]","MATCH (e1:Event {Actor: 'ethan'}) WITH COLLECT(DISTINCT e1.Activity) AS ethan_activities MATCH (e2:Event {Actor: 'chloe'}) WITH ethan_activities, COLLECT(DISTINCT e2.Activity) AS chloe_activities RETURN CASE WHEN ANY(activity IN ethan_activities WHERE activity IN chloe_activities) THEN false ELSE true END AS rule_satisfied"
William and Jessica must handle completely separate tasks.,"Activity: [], EntityType: [], Actor: [""william"", ""jessica""]","MATCH (e1:Event {Actor: 'william'}) WITH COLLECT(DISTINCT e1.Activity) AS william_activities MATCH (e2:Event {Actor: 'jessica'}) WITH william_activities, COLLECT(DISTINCT e2.Activity) AS jessica_activities RETURN CASE WHEN ANY(activity IN william_activities WHERE activity IN jessica_activities) THEN false ELSE true END AS rule_satisfied"
Ben and Sophie must perform distinct sets of activities.,"Activity: [], EntityType: [], Actor: [""ben"", ""sophie""]","MATCH (e1:Event {Actor: 'ben'}) WITH COLLECT(DISTINCT e1.Activity) AS ben_activities MATCH (e2:Event {Actor: 'sophie'}) WITH ben_activities, COLLECT(DISTINCT e2.Activity) AS sophie_activities RETURN CASE WHEN ANY(activity IN ben_activities WHERE activity IN sophie_activities) THEN false ELSE true END AS rule_satisfied"
There should be no overlap in the activities between Jack and Lily.,"Activity: [], EntityType: [], Actor: [""jack"", ""lily""]","MATCH (e1:Event {Actor: 'jack'}) WITH COLLECT(DISTINCT e1.Activity) AS jack_activities MATCH (e2:Event {Actor: 'lily'}) WITH jack_activities, COLLECT(DISTINCT e2.Activity) AS lily_activities RETURN CASE WHEN ANY(activity IN jack_activities WHERE activity IN lily_activities) THEN false ELSE true END AS rule_satisfied"
Emma and John must not perform any overlapping tasks.,"Activity: [], EntityType: [], Actor: [""emma"", ""john""]","MATCH (e1:Event {Actor: 'emma'}) WITH COLLECT(DISTINCT e1.Activity) AS emma_activities MATCH (e2:Event {Actor: 'john'}) WITH emma_activities, COLLECT(DISTINCT e2.Activity) AS john_activities RETURN CASE WHEN ANY(activity IN emma_activities WHERE activity IN john_activities) THEN false ELSE true END AS rule_satisfied"
Sophia and Liam should not work on any of the same activities.,"Activity: [], EntityType: [], Actor: [""sophia"", ""liam""]","MATCH (e1:Event {Actor: 'sophia'}) WITH COLLECT(DISTINCT e1.Activity) AS sophia_activities MATCH (e2:Event {Actor: 'liam'}) WITH sophia_activities, COLLECT(DISTINCT e2.Activity) AS liam_activities RETURN CASE WHEN ANY(activity IN sophia_activities WHERE activity IN liam_activities) THEN false ELSE true END AS rule_satisfied"
Aiden and Mia should never perform the same activity.,"Activity: [], EntityType: [], Actor: [""aiden"", ""mia""]","MATCH (e1:Event {Actor: 'aiden'}) WITH COLLECT(DISTINCT e1.Activity) AS aiden_activities MATCH (e2:Event {Actor: 'mia'}) WITH aiden_activities, COLLECT(DISTINCT e2.Activity) AS mia_activities RETURN CASE WHEN ANY(activity IN aiden_activities WHERE activity IN mia_activities) THEN false ELSE true END AS rule_satisfied"
Ben and Chloe must perform completely different activities.,"Activity: [], EntityType: [], Actor: [""Ben"", ""Chloe""]","MATCH (e1:Event {Actor: 'Ben'}) WITH COLLECT(DISTINCT e1.Activity) AS Ben_activities MATCH (e2:Event {Actor: 'Chloe'}) WITH Ben_activities, COLLECT(DISTINCT e2.Activity) AS Chloe_activities RETURN CASE WHEN ANY(activity IN Ben_activities WHERE activity IN Chloe_activities) THEN false ELSE true END AS rule_satisfied"
Harry and Lily must not share any activities.,"Activity: [], EntityType: [], Actor: [""Harry"", ""Lily""]","MATCH (e1:Event {Actor: 'Harry'}) WITH COLLECT(DISTINCT e1.Activity) AS Harry_activities MATCH (e2:Event {Actor: 'Lily'}) WITH Harry_activities, COLLECT(DISTINCT e2.Activity) AS Lily_activities RETURN CASE WHEN ANY(activity IN Harry_activities WHERE activity IN Lily_activities) THEN false ELSE true END AS rule_satisfied"
Noah and Grace should work on distinct sets of activities.,"Activity: [], EntityType: [], Actor: [""Noah"", ""Grace""]","MATCH (e1:Event {Actor: 'Noah'}) WITH COLLECT(DISTINCT e1.Activity) AS Noah_activities MATCH (e2:Event {Actor: 'Grace'}) WITH Noah_activities, COLLECT(DISTINCT e2.Activity) AS Grace_activities RETURN CASE WHEN ANY(activity IN Noah_activities WHERE activity IN Grace_activities) THEN false ELSE true END AS rule_satisfied"
Olivia and Jack must handle entirely separate tasks.,"Activity: [], EntityType: [], Actor: [""Olivia"", ""Jack""]","MATCH (e1:Event {Actor: 'Olivia'}) WITH COLLECT(DISTINCT e1.Activity) AS Olivia_activities MATCH (e2:Event {Actor: 'Jack'}) WITH Olivia_activities, COLLECT(DISTINCT e2.Activity) AS Jack_activities RETURN CASE WHEN ANY(activity IN Olivia_activities WHERE activity IN Jack_activities) THEN false ELSE true END AS rule_satisfied"
James and Lily must not share any activities.,"Activity: [], EntityType: [], Actor: [""James"", ""Lily""]","MATCH (e1:Event {Actor: 'James'}) WITH COLLECT(DISTINCT e1.Activity) AS James_activities MATCH (e2:Event {Actor: 'Lily'}) WITH James_activities, COLLECT(DISTINCT e2.Activity) AS Lily_activities RETURN CASE WHEN ANY(activity IN James_activities WHERE activity IN Lily_activities) THEN false ELSE true END AS rule_satisfied"
Samuel and Rachel should not have any common activities.,"Activity: [], EntityType: [], Actor: [""Samuel"", ""Rachel""]","MATCH (e1:Event {Actor: 'Samuel'}) WITH COLLECT(DISTINCT e1.Activity) AS Samuel_activities MATCH (e2:Event {Actor: 'Rachel'}) WITH Samuel_activities, COLLECT(DISTINCT e2.Activity) AS Rachel_activities RETURN CASE WHEN ANY(activity IN Samuel_activities WHERE activity IN Rachel_activities) THEN false ELSE true END AS rule_satisfied"
Noah and Jessica must handle entirely separate tasks.,"Activity: [], EntityType: [], Actor: [""Noah"", ""Jessica""]","MATCH (e1:Event {Actor: 'Noah'}) WITH COLLECT(DISTINCT e1.Activity) AS Noah_activities MATCH (e2:Event {Actor: 'Jessica'}) WITH Noah_activities, COLLECT(DISTINCT e2.Activity) AS Jessica_activities RETURN CASE WHEN ANY(activity IN Noah_activities WHERE activity IN Jessica_activities) THEN false ELSE true END AS rule_satisfied"
Alex and Max must work on the exact same set of tasks.,"Activity: [], EntityType: [], Actor: [""Alex"", ""Max""]","MATCH (e1:Event {Actor: 'Alex'}) WITH COLLECT(DISTINCT e1.Activity) AS activitiesAlex MATCH (e2:Event {Actor: 'Max'}) WITH activitiesAlex, COLLECT(DISTINCT e2.Activity) AS activitiesMax RETURN activitiesAlex = activitiesMax AS sameActivities"
"Emma and Olivia must perform the same activities, reflecting identical roles.","Activity: [], EntityType: [], Actor: [""Emma"", ""Olivia""]","MATCH (e1:Event {Actor: 'Emma'}) WITH COLLECT(DISTINCT e1.Activity) AS activitiesEmma MATCH (e2:Event {Actor: 'Olivia'}) WITH activitiesEmma, COLLECT(DISTINCT e2.Activity) AS activitiesOlivia RETURN activitiesEmma = activitiesOlivia AS sameActivities"
"Every task performed by James must also be performed by Lily, and vice versa.","Activity: [], EntityType: [], Actor: [""James"", ""Lily""]","MATCH (e1:Event {Actor: 'James'}) WITH COLLECT(DISTINCT e1.Activity) AS activitiesJames MATCH (e2:Event {Actor: 'Lily'}) WITH activitiesJames, COLLECT(DISTINCT e2.Activity) AS activitiesLily RETURN activitiesJames = activitiesLily AS sameActivities"
"There must be no activity that Noah performs that Jack does not also perform, and vice versa.","Activity: [], EntityType: [], Actor: [""Noah"", ""Jack""]","MATCH (e1:Event {Actor: 'Noah'}) WITH COLLECT(DISTINCT e1.Activity) AS activitiesNoah MATCH (e2:Event {Actor: 'Jack'}) WITH activitiesNoah, COLLECT(DISTINCT e2.Activity) AS activitiesJack RETURN activitiesNoah = activitiesJack AS sameActivities"
Tasks handled by Sophia and Liam must completely overlap.,"Activity: [], EntityType: [], Actor: [""Sophia"", ""Liam""]","MATCH (e1:Event {Actor: 'Sophia'}) WITH COLLECT(DISTINCT e1.Activity) AS activitiesSophia MATCH (e2:Event {Actor: 'Liam'}) WITH activitiesSophia, COLLECT(DISTINCT e2.Activity) AS activitiesLiam RETURN activitiesSophia = activitiesLiam AS sameActivities"
"It is required that every task performed by Ben is also performed by Chloe, and vice versa.","Activity: [], EntityType: [], Actor: [""Ben"", ""Chloe""]","MATCH (e1:Event {Actor: 'Ben'}) WITH COLLECT(DISTINCT e1.Activity) AS activitiesBen MATCH (e2:Event {Actor: 'Chloe'}) WITH activitiesBen, COLLECT(DISTINCT e2.Activity) AS activitiesChloe RETURN activitiesBen = activitiesChloe AS sameActivities"
"Every activity performed by Harry must also be performed by Grace, and vice versa.","Activity: [], EntityType: [], Actor: [""Harry"", ""Grace""]","MATCH (e1:Event {Actor: 'Harry'}) WITH COLLECT(DISTINCT e1.Activity) AS activitiesHarry MATCH (e2:Event {Actor: 'Grace'}) WITH activitiesHarry, COLLECT(DISTINCT e2.Activity) AS activitiesGrace RETURN activitiesHarry = activitiesGrace AS sameActivities"
"Lily and Rachel must have the same role, performing identical activities.","Activity: [], EntityType: [], Actor: [""Lily"", ""Rachel""]","MATCH (e1:Event {Actor: 'Lily'}) WITH COLLECT(DISTINCT e1.Activity) AS activitiesLily MATCH (e2:Event {Actor: 'Rachel'}) WITH activitiesLily, COLLECT(DISTINCT e2.Activity) AS activitiesRachel RETURN activitiesLily = activitiesRachel AS sameActivities"
"No activity performed by Aiden should be missing from those performed by Mia, and vice versa.","Activity: [], EntityType: [], Actor: [""Aiden"", ""Mia""]","MATCH (e1:Event {Actor: 'Aiden'}) WITH COLLECT(DISTINCT e1.Activity) AS activitiesAiden MATCH (e2:Event {Actor: 'Mia'}) WITH activitiesAiden, COLLECT(DISTINCT e2.Activity) AS activitiesMia RETURN activitiesAiden = activitiesMia AS sameActivities"
"Every activity carried out by Samuel must also be carried out by Jessica, and vice versa.","Activity: [], EntityType: [], Actor: [""Samuel"", ""Jessica""]","MATCH (e1:Event {Actor: 'Samuel'}) WITH COLLECT(DISTINCT e1.Activity) AS activitiesSamuel MATCH (e2:Event {Actor: 'Jessica'}) WITH activitiesSamuel, COLLECT(DISTINCT e2.Activity) AS activitiesJessica RETURN activitiesSamuel = activitiesJessica AS sameActivities"
Ella and Ethan must handle an identical set of tasks in their roles.,"Activity: [], EntityType: [], Actor: [""Ella"", ""Ethan""]","MATCH (e1:Event {Actor: 'Ella'}) WITH COLLECT(DISTINCT e1.Activity) AS activitiesElla MATCH (e2:Event {Actor: 'Ethan'}) WITH activitiesElla, COLLECT(DISTINCT e2.Activity) AS activitiesEthan RETURN activitiesElla = activitiesEthan AS sameActivities"
Activities carried out by Ryan must be identical to those performed by Ava.,"Activity: [], EntityType: [], Actor: [""Ryan"", ""Ava""]","MATCH (e1:Event {Actor: 'Ryan'}) WITH COLLECT(DISTINCT e1.Activity) AS activitiesRyan MATCH (e2:Event {Actor: 'Ava'}) WITH activitiesRyan, COLLECT(DISTINCT e2.Activity) AS activitiesAva RETURN activitiesRyan = activitiesAva AS sameActivities"
"Any task performed by Adam must also be handled by Emily, and vice versa.","Activity: [], EntityType: [], Actor: [""Adam"", ""Emily""]","MATCH (e1:Event {Actor: 'Adam'}) WITH COLLECT(DISTINCT e1.Activity) AS activitiesAdam MATCH (e2:Event {Actor: 'Emily'}) WITH activitiesAdam, COLLECT(DISTINCT e2.Activity) AS activitiesEmily RETURN activitiesAdam = activitiesEmily AS sameActivities"
Tasks performed by Nathan and Hannah must overlap entirely with no differences.,"Activity: [], EntityType: [], Actor: [""Nathan"", ""Hannah""]","MATCH (e1:Event {Actor: 'Nathan'}) WITH COLLECT(DISTINCT e1.Activity) AS activitiesNathan MATCH (e2:Event {Actor: 'Hannah'}) WITH activitiesNathan, COLLECT(DISTINCT e2.Activity) AS activitiesHannah RETURN activitiesNathan = activitiesHannah AS sameActivities"
Jacob and Isabella must execute an identical set of responsibilities.,"Activity: [], EntityType: [], Actor: [""Jacob"", ""Isabella""]","MATCH (e1:Event {Actor: 'Jacob'}) WITH COLLECT(DISTINCT e1.Activity) AS activitiesJacob MATCH (e2:Event {Actor: 'Isabella'}) WITH activitiesJacob, COLLECT(DISTINCT e2.Activity) AS activitiesIsabella RETURN activitiesJacob = activitiesIsabella AS sameActivities"
Scarlett and Henry must be assigned identical activities to perform.,"Activity: [], EntityType: [], Actor: [""Scarlett"", ""Henry""]","MATCH (e1:Event {Actor: 'Scarlett'}) WITH COLLECT(DISTINCT e1.Activity) AS activitiesScarlett MATCH (e2:Event {Actor: 'Henry'}) WITH activitiesScarlett, COLLECT(DISTINCT e2.Activity) AS activitiesHenry RETURN activitiesScarlett = activitiesHenry AS sameActivities"
Grace and Daniel must not perform any task without the other also performing it.,"Activity: [], EntityType: [], Actor: [""Grace"", ""Daniel""]","MATCH (e1:Event {Actor: 'Grace'}) WITH COLLECT(DISTINCT e1.Activity) AS activitiesGrace MATCH (e2:Event {Actor: 'Daniel'}) WITH activitiesGrace, COLLECT(DISTINCT e2.Activity) AS activitiesDaniel RETURN activitiesGrace = activitiesDaniel AS sameActivities"
Zoe and Logan’s tasks must completely overlap.,"Activity: [], EntityType: [], Actor: [""Zoe"", ""Logan""]","MATCH (e1:Event {Actor: 'Zoe'}) WITH COLLECT(DISTINCT e1.Activity) AS activitiesZoe MATCH (e2:Event {Actor: 'Logan'}) WITH activitiesZoe, COLLECT(DISTINCT e2.Activity) AS activitiesLogan RETURN activitiesZoe = activitiesLogan AS sameActivities"
"Every action taken by Lily must also be taken by Noah, and vice versa.","Activity: [], EntityType: [], Actor: [""Lily"", ""Noah""]","MATCH (e1:Event {Actor: 'Lily'}) WITH COLLECT(DISTINCT e1.Activity) AS activitiesLily MATCH (e2:Event {Actor: 'Noah'}) WITH activitiesLily, COLLECT(DISTINCT e2.Activity) AS activitiesNoah RETURN activitiesLily = activitiesNoah AS sameActivities"
Olivia and Lucas must fulfill the same responsibilities in terms of activities performed.,"Activity: [], EntityType: [], Actor: [""Olivia"", ""Lucas""]","MATCH (e1:Event {Actor: 'Olivia'}) WITH COLLECT(DISTINCT e1.Activity) AS activitiesOlivia MATCH (e2:Event {Actor: 'Lucas'}) WITH activitiesOlivia, COLLECT(DISTINCT e2.Activity) AS activitiesLucas RETURN activitiesOlivia = activitiesLucas AS sameActivities"
Alice is restricted to working only on events related to invoices.,"Activity: [], EntityType: [""Invoice""], Actor: [""Alice""]",MATCH (e:Event {Actor: 'Alice'})-[:CORR]->(entity:Entity) WITH COLLECT(DISTINCT entity.EntityType) AS entityTypes RETURN CASE WHEN ALL(type IN entityTypes WHERE type = 'Invoice') THEN true ELSE false END AS ruleSatisfied
It is required that Daniel works exclusively on tasks related to shipments.,"Activity: [], EntityType: [""Shipment""], Actor: [""Daniel""]",MATCH (e:Event {Actor: 'Daniel'})-[:CORR]->(entity:Entity) WITH COLLECT(DISTINCT entity.EntityType) AS entityTypes RETURN CASE WHEN ALL(type IN entityTypes WHERE type = 'Shipment') THEN true ELSE false END AS ruleSatisfied
Every event handled by Emily must be associated with customer accounts.,"Activity: [], EntityType: [""Customer Account""], Actor: [""Emily""]",MATCH (e:Event {Actor: 'Emily'})-[:CORR]->(entity:Entity) WITH COLLECT(DISTINCT entity.EntityType) AS entityTypes RETURN CASE WHEN ALL(type IN entityTypes WHERE type = 'Customer Account') THEN true ELSE false END AS ruleSatisfied
Tasks performed by Sarah must pertain only to contracts.,"Activity: [], EntityType: [""contract""], Actor: [""sarah""]",MATCH (e:Event {Actor: 'sarah'})-[:CORR]->(entity:Entity) WITH COLLECT(DISTINCT entity.EntityType) AS entityTypes RETURN CASE WHEN ALL(type IN entityTypes WHERE type = 'contract') THEN true ELSE false END AS ruleSatisfied
No event unrelated to invoices may be performed by Chris.,"Activity: [], EntityType: [""invoice""], Actor: [""chris""]",MATCH (e:Event {Actor: 'chris'})-[:CORR]->(entity:Entity) WITH COLLECT(DISTINCT entity.EntityType) AS entityTypes RETURN CASE WHEN ALL(type IN entityTypes WHERE type = 'invoice') THEN true ELSE false END AS ruleSatisfied
James is required to focus solely on events connected to inventory.,"Activity: [], EntityType: [""inventory""], Actor: [""james""]",MATCH (e:Event {Actor: 'james'})-[:CORR]->(entity:Entity) WITH COLLECT(DISTINCT entity.EntityType) AS entityTypes RETURN CASE WHEN ALL(type IN entityTypes WHERE type = 'inventory') THEN true ELSE false END AS ruleSatisfied
Events managed by Natalie must always involve projects.,"Activity: [], EntityType: [""project""], Actor: [""natalie""]",MATCH (e:Event {Actor: 'natalie'})-[:CORR]->(entity:Entity) WITH COLLECT(DISTINCT entity.EntityType) AS entityTypes RETURN CASE WHEN ALL(type IN entityTypes WHERE type = 'project') THEN true ELSE false END AS ruleSatisfied
It is prohibited for Alex to work on tasks unrelated to payments.,"Activity: [], EntityType: [""payment""], Actor: [""alex""]",MATCH (e:Event {Actor: 'alex'})-[:CORR]->(entity:Entity) WITH COLLECT(DISTINCT entity.EntityType) AS entityTypes RETURN CASE WHEN ALL(type IN entityTypes WHERE type = 'payment') THEN true ELSE false END AS ruleSatisfied
Actions performed by Olivia must pertain exclusively to employee records.,"Activity: [], EntityType: [""employee record""], Actor: [""olivia""]",MATCH (e:Event {Actor: 'olivia'})-[:CORR]->(entity:Entity) WITH COLLECT(DISTINCT entity.EntityType) AS entityTypes RETURN CASE WHEN ALL(type IN entityTypes WHERE type = 'employee record') THEN true ELSE false END AS ruleSatisfied
Events executed by Leo must always relate to delivery orders.,"Activity: [], EntityType: [""delivery order""], Actor: [""leo""]",MATCH (e:Event {Actor: 'leo'})-[:CORR]->(entity:Entity) WITH COLLECT(DISTINCT entity.EntityType) AS entityTypes RETURN CASE WHEN ALL(type IN entityTypes WHERE type = 'delivery order') THEN true ELSE false END AS ruleSatisfied
Clara exclusively performs tasks related to financial accounts.,"Activity: [], EntityType: [""financial account""], Actor: [""clara""]",MATCH (e:Event {Actor: 'clara'})-[:CORR]->(entity:Entity) WITH COLLECT(DISTINCT entity.EntityType) AS entityTypes RETURN CASE WHEN ALL(type IN entityTypes WHERE type = 'financial account') THEN true ELSE false END AS ruleSatisfied
Henry must handle only events linked to equipment records.,"Activity: [], EntityType: [""Equipment Record""], Actor: [""Henry""]",MATCH (e:Event {Actor: 'Henry'})-[:CORR]->(entity:Entity) WITH COLLECT(DISTINCT entity.EntityType) AS entityTypes RETURN CASE WHEN ALL(type IN entityTypes WHERE type = 'Equipment Record') THEN true ELSE false END AS ruleSatisfied
Tasks completed by Rachel must pertain solely to customer feedback.,"Activity: [], EntityType: [""Customer Feedback""], Actor: [""Rachel""]",MATCH (e:Event {Actor: 'Rachel'})-[:CORR]->(entity:Entity) WITH COLLECT(DISTINCT entity.EntityType) AS entityTypes RETURN CASE WHEN ALL(type IN entityTypes WHERE type = 'Customer Feedback') THEN true ELSE false END AS ruleSatisfied
No events unrelated to procurement should be performed by Victor.,"Activity: [], EntityType: [""Procurement""], Actor: [""Victor""]",MATCH (e:Event {Actor: 'Victor'})-[:CORR]->(entity:Entity) WITH COLLECT(DISTINCT entity.EntityType) AS entityTypes RETURN CASE WHEN ALL(type IN entityTypes WHERE type = 'Procurement') THEN true ELSE false END AS ruleSatisfied
Tasks involving Paul must be strictly related to quality control processes.,"Activity: [], EntityType: [""Quality Control""], Actor: [""Paul""]",MATCH (e:Event {Actor: 'Paul'})-[:CORR]->(entity:Entity) WITH COLLECT(DISTINCT entity.EntityType) AS entityTypes RETURN CASE WHEN ALL(type IN entityTypes WHERE type = 'Quality Control') THEN true ELSE false END AS ruleSatisfied
Sophia’s responsibilities are confined to tasks involving shipments.,"Activity: [], EntityType: [""Shipment""], Actor: [""Sophia""]",MATCH (e:Event {Actor: 'Sophia'})-[:CORR]->(entity:Entity) WITH COLLECT(DISTINCT entity.EntityType) AS entityTypes RETURN CASE WHEN ALL(type IN entityTypes WHERE type = 'Shipment') THEN true ELSE false END AS ruleSatisfied
All events assigned to Ethan must relate exclusively to project milestones.,"Activity: [], EntityType: [""Project Milestone""], Actor: [""Ethan""]",MATCH (e:Event {Actor: 'Ethan'})-[:CORR]->(entity:Entity) WITH COLLECT(DISTINCT entity.EntityType) AS entityTypes RETURN CASE WHEN ALL(type IN entityTypes WHERE type = 'Project Milestone') THEN true ELSE false END AS ruleSatisfied
Maria is prohibited from handling events unrelated to payments.,"Activity: [], EntityType: [""Payment""], Actor: [""Maria""]",MATCH (e:Event {Actor: 'Maria'})-[:CORR]->(entity:Entity) WITH COLLECT(DISTINCT entity.EntityType) AS entityTypes RETURN CASE WHEN ALL(type IN entityTypes WHERE type = 'Payment') THEN true ELSE false END AS ruleSatisfied
Tasks performed by Logan must only involve vendor management activities.,"Activity: [], EntityType: [""Vendor Management""], Actor: [""Logan""]",MATCH (e:Event {Actor: 'Logan'})-[:CORR]->(entity:Entity) WITH COLLECT(DISTINCT entity.EntityType) AS entityTypes RETURN CASE WHEN ALL(type IN entityTypes WHERE type = 'Vendor Management') THEN true ELSE false END AS ruleSatisfied
Liam is only allowed to participate in events involving order processing.,"Activity: [], EntityType: [""Order""], Actor: [""Liam""]",MATCH (e:Event {Actor: 'Liam'})-[:CORR]->(entity:Entity) WITH COLLECT(DISTINCT entity.EntityType) AS entityTypes RETURN CASE WHEN ALL(type IN entityTypes WHERE type = 'Order') THEN true ELSE false END AS ruleSatisfied
No more than 4 different workers may handle each process related to a shipment.,"Activity: [], EntityType: [""Shipment""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType: ""Shipment""}) WITH ent, COLLECT(DISTINCT e.Actor) as actors WITH COLLECT(SIZE(actors)) as actorCounts RETURN CASE WHEN ANY(count IN actorCounts WHERE count > 4) THEN false ELSE true END AS ruleSatisfied"
At least 3 people must contribute to each order process.,"Activity: [], EntityType: [""Order""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType: ""Order""}) WITH ent, COLLECT(DISTINCT e.Actor) as actors WITH COLLECT(SIZE(actors)) as actorCounts RETURN CASE WHEN ANY(count IN actorCounts WHERE count < 3) THEN false ELSE true END AS ruleSatisfied"
Every invoice process must involve a maximum of 2 distinct approvers.,"Activity: [], EntityType: [""Invoice""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType: ""Invoice Process""}) WITH ent, COLLECT(DISTINCT e.Actor) as actors WITH COLLECT(SIZE(actors)) as actorCounts RETURN CASE WHEN ANY(count IN actorCounts WHERE count > 2) THEN false ELSE true END AS ruleSatisfied"
Every contract process must involve at least 4 distinct participants.,"Activity: [], EntityType: [""Contract""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType: ""Contract""}) WITH ent, COLLECT(DISTINCT e.Actor) as actors WITH COLLECT(SIZE(actors)) as actorCounts RETURN CASE WHEN ANY(count IN actorCounts WHERE count < 4) THEN false ELSE true END AS ruleSatisfied"
At least 3 workers must be involved in handling each procurement process.,"Activity: [], EntityType: [""Procurement""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType: ""Procurement""}) WITH ent, COLLECT(DISTINCT e.Actor) as actors WITH COLLECT(SIZE(actors)) as actorCounts RETURN CASE WHEN ANY(count IN actorCounts WHERE count < 3) THEN false ELSE true END AS ruleSatisfied"
No more than 5 employees can participate in handling each return process.,"Activity: [], EntityType: [""Returns""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType: ""Returns""}) WITH ent, COLLECT(DISTINCT e.Actor) as actors WITH COLLECT(SIZE(actors)) as actorCounts RETURN CASE WHEN ANY(count IN actorCounts WHERE count > 5) THEN false ELSE true END AS ruleSatisfied"
A minimum of 4 unique contributors must be involved in each delivery process.,"Activity: [], EntityType: [""delivery""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType: ""delivery""}) WITH ent, COLLECT(DISTINCT e.Actor) as actors WITH COLLECT(SIZE(actors)) as actorCounts RETURN CASE WHEN ANY(count IN actorCounts WHERE count < 4) THEN false ELSE true END AS ruleSatisfied"
No more than 4 different workers may handle each instance of an Order.,"Activity: [], EntityType: [""order""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType: ""order""}) WITH ent, COLLECT(DISTINCT e.Actor) as actors WITH COLLECT(SIZE(actors)) as actorCounts RETURN CASE WHEN ANY(count IN actorCounts WHERE count > 4) THEN false ELSE true END AS ruleSatisfied"
At least 3 unique employees must be involved in handling every Invoice object.,"Activity: [], EntityType: [""invoice""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType: ""invoice""}) WITH ent, COLLECT(DISTINCT e.Actor) as actors WITH COLLECT(SIZE(actors)) as actorCounts RETURN CASE WHEN ANY(count IN actorCounts WHERE count < 3) THEN false ELSE true END AS ruleSatisfied"
Every object of type Contract must involve exactly 2 distinct participants.,"Activity: [], EntityType: [""contract""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType: ""contract""}) WITH ent, COLLECT(DISTINCT e.Actor) as actors WITH COLLECT(SIZE(actors)) as actorCounts RETURN CASE WHEN ANY(count IN actorCounts WHERE count <> 2) THEN false ELSE true END AS ruleSatisfied"
At least 5 people must participate in the processing of each Shipment.,"Activity: [], EntityType: [""shipment""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType: ""shipment""}) WITH ent, COLLECT(DISTINCT e.Actor) as actors WITH COLLECT(SIZE(actors)) as actorCounts RETURN CASE WHEN ANY(count IN actorCounts WHERE count < 5) THEN false ELSE true END AS ruleSatisfied"
No delivery may involve more than 3 distinct workers.,"Activity: [], EntityType: [""delivery""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType: ""delivery""}) WITH ent, COLLECT(DISTINCT e.Actor) as actors WITH COLLECT(SIZE(actors)) as actorCounts RETURN CASE WHEN ANY(count IN actorCounts WHERE count > 3) THEN false ELSE true END AS ruleSatisfied"
Each instance of a Loan must involve exactly 4 unique employees.,"Activity: [], EntityType: [""loan""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType: ""loan""}) WITH ent, COLLECT(DISTINCT e.Actor) as actors WITH COLLECT(SIZE(actors)) as actorCounts RETURN CASE WHEN ANY(count IN actorCounts WHERE count <> 4) THEN false ELSE true END AS ruleSatisfied"
No Return entity may be handled by fewer than 2 distinct employees.,"Activity: [], EntityType: [""return""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType: ""return""}) WITH ent, COLLECT(DISTINCT e.Actor) as actors WITH COLLECT(SIZE(actors)) as actorCounts RETURN CASE WHEN ANY(count IN actorCounts WHERE count < 2) THEN false ELSE true END AS ruleSatisfied"
A maximum of 5 workers may process a single Packaging object.,"Activity: [], EntityType: [""Packaging""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType: ""Packaging""}) WITH ent, COLLECT(DISTINCT e.Actor) as actors WITH COLLECT(SIZE(actors)) as actorCounts RETURN CASE WHEN ANY(count IN actorCounts WHERE count > 5) THEN false ELSE true END AS ruleSatisfied"
Every entity of an Audit must involve at least 6 participants.,"Activity: [], EntityType: [""Audit""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType: ""Audit""}) WITH ent, COLLECT(DISTINCT e.Actor) as actors WITH COLLECT(SIZE(actors)) as actorCounts RETURN CASE WHEN ANY(count IN actorCounts WHERE count < 6) THEN false ELSE true END AS ruleSatisfied"
No single instance of a Refund may involve more than 2 employees.,"Activity: [], EntityType: [""Refund""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType: ""Refund""}) WITH ent, COLLECT(DISTINCT e.Actor) as actors WITH COLLECT(SIZE(actors)) as actorCounts RETURN CASE WHEN ANY(count IN actorCounts WHERE count > 2) THEN false ELSE true END AS ruleSatisfied"
No more than 3 employees may work on a single Customer Request.,"Activity: [], EntityType: [""Customer Request""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType: ""Customer Request""}) WITH ent, COLLECT(DISTINCT e.Actor) as actors WITH COLLECT(SIZE(actors)) as actorCounts RETURN CASE WHEN ANY(count IN actorCounts WHERE count > 3) THEN false ELSE true END AS ruleSatisfied"
At least 4 different employees must participate in the handling of each Inventory Record.,"Activity: [], EntityType: [""Inventory Record""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType: ""Inventory Record""}) WITH ent, COLLECT(DISTINCT e.Actor) as actors WITH COLLECT(SIZE(actors)) as actorCounts RETURN CASE WHEN ANY(count IN actorCounts WHERE count < 4) THEN false ELSE true END AS ruleSatisfied"
All Inspection objects must involve exactly 3 distinct resources.,"Activity: [], EntityType: [""Inspection""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType: ""Inspection""}) WITH ent, COLLECT(DISTINCT e.Actor) as actors WITH COLLECT(SIZE(actors)) as actorCounts RETURN CASE WHEN ANY(count IN actorCounts WHERE count <> 3) THEN false ELSE true END AS ruleSatisfied"
At least 2 people must be involved in every Maintenance Record.,"Activity: [], EntityType: [""Maintenance Record""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType: ""Maintenance Record""}) WITH ent, COLLECT(DISTINCT e.Actor) as actors WITH COLLECT(SIZE(actors)) as actorCounts RETURN CASE WHEN ANY(count IN actorCounts WHERE count < 2) THEN false ELSE true END AS ruleSatisfied"
No single Billing Record may involve more than 4 unique employees.,"Activity: [], EntityType: [""Billing Record""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType: ""Billing Record""}) WITH ent, COLLECT(DISTINCT e.Actor) as actors WITH COLLECT(SIZE(actors)) as actorCounts RETURN CASE WHEN ANY(count IN actorCounts WHERE count > 4) THEN false ELSE true END AS ruleSatisfied"
The same person must not perform an event of type 'Create Order' more than 3 times within 7 days.,"Activity: [""Create Order""], EntityType: [], Actor: []","MATCH (event:Event {Activity: ""Create Order""}) WITH event.Actor AS actor, event WITH actor, COLLECT(event.timestamp) AS timestamps WITH actor, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 7})]) <= 3) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS actorRules RETURN ALL(rule IN actorRules WHERE rule = true) AS ruleHoldsForAllActors"
An event with activity 'Approve Purchase' must be performed by the same person no more than 2 times within the span of 10 days.,"Activity: [""Approve Purchase""], EntityType: [], Actor: []","MATCH (event:Event {Activity: ""Approve Purchase""}) WITH event.Actor AS actor, event WITH actor, COLLECT(event.timestamp) AS timestamps WITH actor, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 10})]) <= 2) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS actorRules RETURN ALL(rule IN actorRules WHERE rule = true) AS ruleHoldsForAllActors"
No individual may perform a task of type 'Invoice Processing' more than 5 times within a 15-day period.,"Activity: [""Invoice Processing""], EntityType: [], Actor: []","MATCH (event:Event {Activity: ""Invoice Processing""}) WITH event.Actor AS actor, event WITH actor, COLLECT(event.timestamp) AS timestamps WITH actor, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 15})]) <= 5) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS actorRules RETURN ALL(rule IN actorRules WHERE rule = true) AS ruleHoldsForAllActors"
The same person must not perform the activity 'Request Payment' more than 2 times within 5 days.,"Activity: [""Request Payment""], EntityType: [], Actor: []","MATCH (event:Event {Activity: ""Request Payment""}) WITH event.Actor AS actor, event WITH actor, COLLECT(event.timestamp) AS timestamps WITH actor, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 5})]) <= 2) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS actorRules RETURN ALL(rule IN actorRules WHERE rule = true) AS ruleHoldsForAllActors"
The maximum number of times the same person may perform an event with activity 'Product Return' in 30 days is 4.,"Activity: [""Product Return""], EntityType: [], Actor: []","MATCH (event:Event {Activity: ""Product Return""}) WITH event.Actor AS actor, event WITH actor, COLLECT(event.timestamp) AS timestamps WITH actor, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 30})]) <= 4) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS actorRules RETURN ALL(rule IN actorRules WHERE rule = true) AS ruleHoldsForAllActors"
"During a time period of 14 days, the same actor may not perform an event of type 'Order Creation' more than 2 times.","Activity: [""Order Creation""], EntityType: [], Actor: []","MATCH (event:Event {Activity: ""Order Creation""}) WITH event.Actor AS actor, event WITH actor, COLLECT(event.timestamp) AS timestamps WITH actor, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 14})]) <= 2) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS actorRules RETURN ALL(rule IN actorRules WHERE rule = true) AS ruleHoldsForAllActors"
The same resource must not perform an event of type 'Approve Leave' more than once within 7 days.,"Activity: [""Approve Leave""], EntityType: [], Actor: []","MATCH (event:Event {Activity: ""Approve Leave""}) WITH event.Actor AS actor, event WITH actor, COLLECT(event.timestamp) AS timestamps WITH actor, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 7})]) <= 1) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS actorRules RETURN ALL(rule IN actorRules WHERE rule = true) AS ruleHoldsForAllActors"
"In a time period of 30 days, no individual is allowed to perform a 'Product Return' more than 4 times.","Activity: [""Product Return""], EntityType: [], Actor: []","MATCH (event:Event {Activity: ""Product Return""}) WITH event.Actor AS actor, event WITH actor, COLLECT(event.timestamp) AS timestamps WITH actor, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 30})]) <= 4) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS actorRules RETURN ALL(rule IN actorRules WHERE rule = true) AS ruleHoldsForAllActors"
"Within 1 month, the same person is not allowed to create more than 3 orders.","Activity: [""Create Order""], EntityType: [], Actor: []","MATCH (event:Event {Activity: ""Create Order""}) WITH event.Actor AS actor, event WITH actor, COLLECT(event.timestamp) AS timestamps WITH actor, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 30})]) <= 3) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS actorRules RETURN ALL(rule IN actorRules WHERE rule = true) AS ruleHoldsForAllActors"
An employee must not request more than 5 items within a 7-day period.,"Activity: [""Item Request""], EntityType: [], Actor: []","MATCH (event:Event {Activity: ""Item Request""}) WITH event.Actor AS actor, event WITH actor, COLLECT(event.timestamp) AS timestamps WITH actor, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 7})]) <= 5) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS actorRules RETURN ALL(rule IN actorRules WHERE rule = true) AS ruleHoldsForAllActors"
A team member may not approve more than 2 purchase requests within a 5-day period.,"Activity: [""Purchase Request Approval""], EntityType: [], Actor: []","MATCH (event:Event {Activity: ""Purchase Request Approval""}) WITH event.Actor AS actor, event WITH actor, COLLECT(event.timestamp) AS timestamps WITH actor, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 5})]) <= 2) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS actorRules RETURN ALL(rule IN actorRules WHERE rule = true) AS ruleHoldsForAllActors"
A customer support agent must not resolve more than 10 support tickets in a 14-day period.,"Activity: [""Support Ticket Resolution""], EntityType: [], Actor: []","MATCH (event:Event {Activity: ""Support Ticket Resolution""}) WITH event.Actor AS actor, event WITH actor, COLLECT(event.timestamp) AS timestamps WITH actor, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 14})]) <= 10) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS actorRules RETURN ALL(rule IN actorRules WHERE rule = true) AS ruleHoldsForAllActors"
"Within a month, the same person must not perform more than 7 product deliveries.","Activity: [""Product Delivery""], EntityType: [], Actor: []","MATCH (event:Event {Activity: ""Product Delivery""}) WITH event.Actor AS actor, event WITH actor, COLLECT(event.timestamp) AS timestamps WITH actor, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 30})]) <= 7) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS actorRules RETURN ALL(rule IN actorRules WHERE rule = true) AS ruleHoldsForAllActors"
A worker may not perform more than 5 data entries within a 2-week period.,"Activity: [""Data Entry""], EntityType: [], Actor: []","MATCH (event:Event {Activity: ""Data Entry""}) WITH event.Actor AS actor, event WITH actor, COLLECT(event.timestamp) AS timestamps WITH actor, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 14})]) <= 5) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS actorRules RETURN ALL(rule IN actorRules WHERE rule = true) AS ruleHoldsForAllActors"
A supervisor must not authorize more than 3 overtime requests in a 10-day span.,"Activity: [""Overtime Request Authorization""], EntityType: [], Actor: []","MATCH (event:Event {Activity: ""Overtime Request Authorization""}) WITH event.Actor AS actor, event WITH actor, COLLECT(event.timestamp) AS timestamps WITH actor, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 10})]) <= 3) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS actorRules RETURN ALL(rule IN actorRules WHERE rule = true) AS ruleHoldsForAllActors"
A project manager must not approve more than 4 project budget changes in a 30-day period.,"Activity: [""Project Budget Change Approval""], EntityType: [], Actor: []","MATCH (event:Event {Activity: ""Project Budget Change Approval""}) WITH event.Actor AS actor, event WITH actor, COLLECT(event.timestamp) AS timestamps WITH actor, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 30})]) <= 4) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS actorRules RETURN ALL(rule IN actorRules WHERE rule = true) AS ruleHoldsForAllActors"
A team member must not file more than 2 incident reports in a 5-day period.,"Activity: [""Incident Report Filing""], EntityType: [], Actor: []","MATCH (event:Event {Activity: ""Incident Report Filing""}) WITH event.Actor AS actor, event WITH actor, COLLECT(event.timestamp) AS timestamps WITH actor, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 5})]) <= 2) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS actorRules RETURN ALL(rule IN actorRules WHERE rule = true) AS ruleHoldsForAllActors"
No employee is allowed to conduct more than 4 client consultations in a 10-day period.,"Activity: [""Client Consultation""], EntityType: [], Actor: []","MATCH (event:Event {Activity: ""Client Consultation""}) WITH event.Actor AS actor, event WITH actor, COLLECT(event.timestamp) AS timestamps WITH actor, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 10})]) <= 4) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS actorRules RETURN ALL(rule IN actorRules WHERE rule = true) AS ruleHoldsForAllActors"
"Between May 1st 2021 and May 15th 2021, the same person is not allowed to approve requests more than 3 times.","Activity: [""Approve Request""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Approve Request""}) WHERE e.timestamp >= datetime(""2021-05-01T00:00:00"") AND e.timestamp <= datetime(""2021-05-15T23:59:59"") WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 3 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
A user is not allowed to submit more than 5 support tickets between June 1st 2021 and June 30th 2021.,"Activity: [""support ticket submission""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""support ticket submission""}) WHERE e.timestamp >= datetime(""2021-06-01T00:00:00"") AND e.timestamp <= datetime(""2021-06-30T23:59:59"") WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 5 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
"No individual may perform the task ""Data Entry"" more than 2 times between July 1st 2021 9am and July 1st 2021 5pm.","Activity: [""data entry""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""data entry""}) WHERE e.timestamp >= datetime(""2021-07-01T09:00:00"") AND e.timestamp <= datetime(""2021-07-01T17:00:00"") WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 2 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
A person is prohibited from making more than 1 product return between May 1st 2021 12pm and May 2nd 2021 12pm.,"Activity: [""product return""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""product return""}) WHERE e.timestamp >= datetime(""2021-05-01T12:00:00"") AND e.timestamp <= datetime(""2021-05-02T12:00:00"") WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 1 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
A customer must not return more than 3 items between August 1st 2021 and August 31st 2021.,"Activity: [""product return""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""product return""}) WHERE e.timestamp >= datetime(""2021-08-01T00:00:00"") AND e.timestamp <= datetime(""2021-08-31T23:59:59"") WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 3 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
"Between December 1st 2021 and December 15th 2021, the same person cannot approve more than 5 requests for ""Overtime"" work.","Activity: [""overtime approval""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""overtime approval""}) WHERE e.timestamp >= datetime(""2021-12-01T00:00:00"") AND e.timestamp <= datetime(""2021-12-15T23:59:59"") WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 5 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
"A worker must not perform the ""Work Log Entry"" activity more than 4 times between January 1st 2021 and January 15th 2021.","Activity: [""work log entry""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""work log entry""}) WHERE e.timestamp >= datetime(""2021-01-01T00:00:00"") AND e.timestamp <= datetime(""2021-01-15T23:59:59"") WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 4 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
A manager must not authorize more than 2 vacation requests between April 1st 2021 and April 10th 2021.,"Activity: [""vacation request authorization""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""vacation request authorization""}) WHERE e.timestamp >= datetime(""2021-04-01T00:00:00"") AND e.timestamp <= datetime(""2021-04-10T23:59:59"") WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 2 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
A person may not make more than 6 purchases between March 1st 2021 and March 15th 2021.,"Activity: [""Purchase""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Purchase""}) WHERE e.timestamp >= datetime(""2021-03-01T00:00:00"") AND e.timestamp <= datetime(""2021-03-15T23:59:59"") WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 6 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
No employee may submit more than 10 incident reports between November 1st 2021 and November 30th 2021.,"Activity: [""Incident Report Submission""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Incident Report Submission""}) WHERE e.timestamp >= datetime(""2021-11-01T00:00:00"") AND e.timestamp <= datetime(""2021-11-30T23:59:59"") WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 10 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
An employee is not allowed to submit more than 3 leave requests between May 1st 2023 at 8:00am and May 15th 2023 at 6:00pm.,"Activity: [""Leave Request Submission""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Leave Request Submission""}) WHERE e.timestamp >= datetime(""2023-05-01T08:00:00"") AND e.timestamp <= datetime(""2023-05-15T18:00:00"") WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 3 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
A customer must not return more than 2 products between June 1st 2023 at 9:00am and June 10th 2023 at 5:00pm.,"Activity: [""Product Return""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Product Return""}) WHERE e.timestamp >= datetime(""2023-06-01T09:00:00"") AND e.timestamp <= datetime(""2023-06-10T17:00:00"") WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 2 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
No employee may file more than 2 expense reports between March 1st 2023 at 10:00am and March 7th 2023 at 4:00pm.,"Activity: [""Expense Report Submission""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Expense Report Submission""}) WHERE e.timestamp >= datetime(""2023-03-01T10:00:00"") AND e.timestamp <= datetime(""2023-03-07T16:00:00"") WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 2 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
A sales representative must not make more than 5 sales calls between October 1st 2023 at 8:00am and October 10th 2023 at 6:00pm.,"Activity: [""Sales Call""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Sales Call""}) WHERE e.timestamp >= datetime(""2023-10-01T08:00:00"") AND e.timestamp <= datetime(""2023-10-10T18:00:00"") WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 5 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
An employee must not clock in for work more than 1 time between August 1st 2023 at 9:00am and August 31st 2023 at 9:00pm.,"Activity: [""Clock In""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Clock In""}) WHERE e.timestamp >= datetime(""2023-08-01T09:00:00"") AND e.timestamp <= datetime(""2023-08-31T21:00:00"") WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 1 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
A person must not leave more than 5 feedback ratings between April 1st 2023 at 10:00am and April 15th 2023 at 7:00pm.,"Activity: [""Feedback Rating""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Feedback Rating""}) WHERE e.timestamp >= datetime(""2023-04-01T10:00:00"") AND e.timestamp <= datetime(""2023-04-15T19:00:00"") WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 5 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
A manager is not allowed to authorize more than 3 overtime requests between July 1st 2023 at 9:00am and July 10th 2023 at 6:00pm.,"Activity: [""Overtime Request Authorization""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Overtime Request Authorization""}) WHERE e.timestamp >= datetime(""2023-07-01T09:00:00"") AND e.timestamp <= datetime(""2023-07-10T18:00:00"") WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 3 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
A user may not reset their password more than once between January 1st 2023 at 9:00am and January 10th 2023 at 6:00pm.,"Activity: [""Password Reset""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Password Reset""}) WHERE e.timestamp >= datetime(""2023-01-01T09:00:00"") AND e.timestamp <= datetime(""2023-01-10T18:00:00"") WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 1 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
A person may not approve more than 4 vendor invoices between November 1st 2022 at 10:00am and November 15th 2022 at 6:00pm.,"Activity: [""Vendor Invoice Approval""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Vendor Invoice Approval""}) WHERE e.timestamp >= datetime(""2022-11-01T10:00:00"") AND e.timestamp <= datetime(""2022-11-15T18:00:00"") WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 4 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
"No individual is allowed to perform both an event of type ""Create Order"" and an event of type ""Sign Contract"".","Activity: [""Create Order"", ""Sign Contract""], EntityType: [], Actor: []","MATCH (createEvent:Event {Activity: 'Create Order'}) WITH COLLECT(DISTINCT createEvent.Actor) AS createOrderActors MATCH (signEvent:Event {Activity: 'Sign Contract'}) WITH createOrderActors, COLLECT(DISTINCT signEvent.Actor) AS signContractActors WITH createOrderActors, signContractActors, [actor IN createOrderActors WHERE actor IN signContractActors] AS commonActors RETURN CASE WHEN SIZE(commonActors) > 0 THEN false ELSE true END AS ruleSatisfied"
"A person must not be responsible for executing both of the activities ""Approve Purchase Order"" and ""Cancel Order"".","Activity: [""Approve Purchase Order"", ""Cancel Order""], EntityType: [], Actor: []","MATCH (purchaseEvent:Event {Activity: 'Approve Purchase Order'}) WITH COLLECT(DISTINCT purchaseEvent.Actor) AS approvePurchaseActors MATCH (cancelEvent:Event {Activity: 'Cancel Order'}) WITH approvePurchaseActors, COLLECT(DISTINCT cancelEvent.Actor) AS cancelOrderActors WITH approvePurchaseActors, cancelOrderActors, [actor IN approvePurchaseActors WHERE actor IN cancelOrderActors] AS commonActors RETURN CASE WHEN SIZE(commonActors) > 0 THEN false ELSE true END AS ruleSatisfied"
"It is prohibited for a single individual to carry out both an event of type ""Initiate Product Return"" and an event of type ""Process Refund"".","Activity: [""Initiate Product Return"", ""Process Refund""], EntityType: [], Actor: []","MATCH (returnEvent:Event {Activity: 'Initiate Product Return'}) WITH COLLECT(DISTINCT returnEvent.Actor) AS returnRequestActors MATCH (refundEvent:Event {Activity: 'Process Refund'}) WITH returnRequestActors, COLLECT(DISTINCT refundEvent.Actor) AS processRefundActors WITH returnRequestActors, processRefundActors, [actor IN returnRequestActors WHERE actor IN processRefundActors] AS commonActors RETURN CASE WHEN SIZE(commonActors) > 0 THEN false ELSE true END AS ruleSatisfied"
"A person cannot perform both the activities ""Approve Leave Request"" and ""Issue Payroll"".","Activity: [""Approve Leave Request"", ""Issue Payroll""], EntityType: [], Actor: []","MATCH (leaveEvent:Event {Activity: 'Approve Leave Request'}) WITH COLLECT(DISTINCT leaveEvent.Actor) AS approveLeaveActors MATCH (payrollEvent:Event {Activity: 'Issue Payroll'}) WITH approveLeaveActors, COLLECT(DISTINCT payrollEvent.Actor) AS issuePayrollActors WITH approveLeaveActors, issuePayrollActors, [actor IN approveLeaveActors WHERE actor IN issuePayrollActors] AS commonActors RETURN CASE WHEN SIZE(commonActors) > 0 THEN false ELSE true END AS ruleSatisfied"
"The execution of both events with activity ""Create Sales Order"" and ""Cancel Invoice"" by the same person is not allowed.","Activity: [""Create Sales Order"", ""Cancel Invoice""], EntityType: [], Actor: []","MATCH (salesEvent:Event {Activity: 'Create Sales Order'}) WITH COLLECT(DISTINCT salesEvent.Actor) AS salesOrderActors MATCH (cancelEvent:Event {Activity: 'Cancel Invoice'}) WITH salesOrderActors, COLLECT(DISTINCT cancelEvent.Actor) AS cancelInvoiceActors WITH salesOrderActors, cancelInvoiceActors, [actor IN salesOrderActors WHERE actor IN cancelInvoiceActors] AS commonActors RETURN CASE WHEN SIZE(commonActors) > 0 THEN false ELSE true END AS ruleSatisfied"
"No resource may be assigned to both a task of type ""Assign Task"" and a task of type ""Close Task"".","Activity: [""Assign Task"", ""Close Task""], EntityType: [], Actor: []","MATCH (assignEvent:Event {Activity: 'Assign Task'}) WITH COLLECT(DISTINCT assignEvent.Actor) AS assignTaskActors MATCH (closeEvent:Event {Activity: 'Close Task'}) WITH assignTaskActors, COLLECT(DISTINCT closeEvent.Actor) AS closeTaskActors WITH assignTaskActors, closeTaskActors, [actor IN assignTaskActors WHERE actor IN closeTaskActors] AS commonActors RETURN CASE WHEN SIZE(commonActors) > 0 THEN false ELSE true END AS ruleSatisfied"
"It is mandatory that a single person does not carry out both an event of type ""Process Return"" and an event of type ""Approve Invoice"".","Activity: [""Process Return"", ""Approve Invoice""], EntityType: [], Actor: []","MATCH (returnEvent:Event {Activity: 'Process Return'}) WITH COLLECT(DISTINCT returnEvent.Actor) AS processReturnActors MATCH (invoiceEvent:Event {Activity: 'Approve Invoice'}) WITH processReturnActors, COLLECT(DISTINCT invoiceEvent.Actor) AS approveInvoiceActors WITH processReturnActors, approveInvoiceActors, [actor IN processReturnActors WHERE actor IN approveInvoiceActors] AS commonActors RETURN CASE WHEN SIZE(commonActors) > 0 THEN false ELSE true END AS ruleSatisfied"
"A single person performing both ""Create Return Request"" and ""Process New Order"" events is strictly prohibited.","Activity: [""Create Return Request"", ""Process New Order""], EntityType: [], Actor: []","MATCH (returnEvent:Event {Activity: 'Create Return Request'}) WITH COLLECT(DISTINCT returnEvent.Actor) AS returnRequestActors MATCH (orderEvent:Event {Activity: 'Process New Order'}) WITH returnRequestActors, COLLECT(DISTINCT orderEvent.Actor) AS processNewOrderActors WITH returnRequestActors, processNewOrderActors, [actor IN returnRequestActors WHERE actor IN processNewOrderActors] AS commonActors RETURN CASE WHEN SIZE(commonActors) > 0 THEN false ELSE true END AS ruleSatisfied"
No individual is allowed to both perform a product inspection and approve a reimbursement.,"Activity: [""Product Inspection"", ""Approve Reimbursement""], EntityType: [], Actor: []","MATCH (inspectionEvent:Event) WHERE inspectionEvent.Activity = 'Product Inspection' WITH COLLECT(DISTINCT inspectionEvent.Actor) AS inspectionActors MATCH (reimbursementEvent:Event) WHERE reimbursementEvent.Activity = 'Approve Reimbursement' WITH inspectionActors, COLLECT(DISTINCT reimbursementEvent.Actor) AS reimbursementApprovers WITH inspectionActors, reimbursementApprovers, [actor IN inspectionActors WHERE actor IN reimbursementApprovers] AS commonActors RETURN CASE WHEN SIZE(commonActors) > 0 THEN false ELSE true END AS ruleSatisfied"
A person must not both create service requests and approve purchase orders.,"Activity: [""Create Service Request"", ""Approve Purchase Order""], EntityType: [], Actor: []","MATCH (serviceRequestEvent:Event) WHERE serviceRequestEvent.Activity = 'Create Service Request' WITH COLLECT(DISTINCT serviceRequestEvent.Actor) AS serviceRequestActors MATCH (purchaseOrderEvent:Event) WHERE purchaseOrderEvent.Activity = 'Approve Purchase Order' WITH serviceRequestActors, COLLECT(DISTINCT purchaseOrderEvent.Actor) AS purchaseOrderApprovers WITH serviceRequestActors, purchaseOrderApprovers, [actor IN serviceRequestActors WHERE actor IN purchaseOrderApprovers] AS commonActors RETURN CASE WHEN SIZE(commonActors) > 0 THEN false ELSE true END AS ruleSatisfied"
A person cannot process returns and create invoices at the same time.,"Activity: [""Process Return"", ""Create Invoice""], EntityType: [], Actor: []","MATCH (returnEvent:Event) WHERE returnEvent.Activity = 'Process Return' WITH COLLECT(DISTINCT returnEvent.Actor) AS returnActors MATCH (invoiceEvent:Event) WHERE invoiceEvent.Activity = 'Create Invoice' WITH returnActors, COLLECT(DISTINCT invoiceEvent.Actor) AS invoiceCreators WITH returnActors, invoiceCreators, [actor IN returnActors WHERE actor IN invoiceCreators] AS commonActors RETURN CASE WHEN SIZE(commonActors) > 0 THEN false ELSE true END AS ruleSatisfied"
A single person must not both approve loans and create customer support tickets.,"Activity: [""Approve Loan"", ""Create Support Ticket""], EntityType: [], Actor: []","MATCH (loanEvent:Event) WHERE loanEvent.Activity = 'Approve Loan' WITH COLLECT(DISTINCT loanEvent.Actor) AS loanApprovers MATCH (ticketEvent:Event) WHERE ticketEvent.Activity = 'Create Support Ticket' WITH loanApprovers, COLLECT(DISTINCT ticketEvent.Actor) AS supportTicketCreators WITH loanApprovers, supportTicketCreators, [actor IN loanApprovers WHERE actor IN supportTicketCreators] AS commonActors RETURN CASE WHEN SIZE(commonActors) > 0 THEN false ELSE true END AS ruleSatisfied"
No person should both submit an expense report and approve employee transfers.,"Activity: [""Submit Expense Report"", ""Approve Employee Transfer""], EntityType: [], Actor: []","MATCH (expenseEvent:Event) WHERE expenseEvent.Activity = 'Submit Expense Report' WITH COLLECT(DISTINCT expenseEvent.Actor) AS expenseReportSubmitters MATCH (transferEvent:Event) WHERE transferEvent.Activity = 'Approve Employee Transfer' WITH expenseReportSubmitters, COLLECT(DISTINCT transferEvent.Actor) AS transferApprovers WITH expenseReportSubmitters, transferApprovers, [actor IN expenseReportSubmitters WHERE actor IN transferApprovers] AS commonActors RETURN CASE WHEN SIZE(commonActors) > 0 THEN false ELSE true END AS ruleSatisfied"
A person cannot both submit an application and approve hiring decisions.,"Activity: [""Submit Application"", ""Approve Hiring Decision""], EntityType: [], Actor: []","MATCH (applicationEvent:Event) WHERE applicationEvent.Activity = 'Submit Application' WITH COLLECT(DISTINCT applicationEvent.Actor) AS applicationSubmitters MATCH (hiringEvent:Event) WHERE hiringEvent.Activity = 'Approve Hiring Decision' WITH applicationSubmitters, COLLECT(DISTINCT hiringEvent.Actor) AS hiringApprovers WITH applicationSubmitters, hiringApprovers, [actor IN applicationSubmitters WHERE actor IN hiringApprovers] AS commonActors RETURN CASE WHEN SIZE(commonActors) > 0 THEN false ELSE true END AS ruleSatisfied"
It is prohibited for a person to both process customer complaints and approve refunds.,"Activity: [""Process Customer Complaint"", ""Approve Refund""], EntityType: [], Actor: []","MATCH (complaintEvent:Event) WHERE complaintEvent.Activity = 'Process Customer Complaint' WITH COLLECT(DISTINCT complaintEvent.Actor) AS complaintProcessors MATCH (refundEvent:Event) WHERE refundEvent.Activity = 'Approve Refund' WITH complaintProcessors, COLLECT(DISTINCT refundEvent.Actor) AS refundApprovers WITH complaintProcessors, refundApprovers, [actor IN complaintProcessors WHERE actor IN refundApprovers] AS commonActors RETURN CASE WHEN SIZE(commonActors) > 0 THEN false ELSE true END AS ruleSatisfied"
A person must not both prepare reports and approve employee bonuses.,"Activity: [""Prepare Report"", ""Approve Bonus""], EntityType: [], Actor: []","MATCH (reportEvent:Event) WHERE reportEvent.Activity = 'Prepare Report' WITH COLLECT(DISTINCT reportEvent.Actor) AS reportPrepares MATCH (bonusEvent:Event) WHERE bonusEvent.Activity = 'Approve Bonus' WITH reportPrepares, COLLECT(DISTINCT bonusEvent.Actor) AS bonusApprovers WITH reportPrepares, bonusApprovers, [actor IN reportPrepares WHERE actor IN bonusApprovers] AS commonActors RETURN CASE WHEN SIZE(commonActors) > 0 THEN false ELSE true END AS ruleSatisfied"
A single individual must not handle both recruitment interviews and office supplies ordering.,"Activity: [""Conduct Recruitment Interview"", ""Order Office Supplies""], EntityType: [], Actor: []","MATCH (interviewEvent:Event) WHERE interviewEvent.Activity = 'Conduct Recruitment Interview' WITH COLLECT(DISTINCT interviewEvent.Actor) AS interviewers MATCH (suppliesEvent:Event) WHERE suppliesEvent.Activity = 'Order Office Supplies' WITH interviewers, COLLECT(DISTINCT suppliesEvent.Actor) AS suppliesOrderers WITH interviewers, suppliesOrderers, [actor IN interviewers WHERE actor IN suppliesOrderers] AS commonActors RETURN CASE WHEN SIZE(commonActors) > 0 THEN false ELSE true END AS ruleSatisfied"
No person should both approve vacation requests and manage payroll.,"Activity: [""Approve Vacation Request"", ""Manage Payroll""], EntityType: [], Actor: []","MATCH (vacationEvent:Event) WHERE vacationEvent.Activity = 'Approve Vacation Request' WITH COLLECT(DISTINCT vacationEvent.Actor) AS vacationApprovers MATCH (payrollEvent:Event) WHERE payrollEvent.Activity = 'Manage Payroll' WITH vacationApprovers, COLLECT(DISTINCT payrollEvent.Actor) AS payrollManagers WITH vacationApprovers, payrollManagers, [actor IN vacationApprovers WHERE actor IN payrollManagers] AS commonActors RETURN CASE WHEN SIZE(commonActors) > 0 THEN false ELSE true END AS ruleSatisfied"
"No individual carries out every activity within the activity type set {Process Refund, Review Case, Authorize Claim}.","Activity: [""Process Refund"", ""Review Case"", ""Authorize Claim""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Process Refund""}) MATCH (e2:Event {Activity: ""Review Case""}) MATCH (e3:Event {Activity: ""Authorize Claim""}) WHERE e1.Actor = e2.Actor AND e1.Actor = e3.Actor AND e2.Actor = e3.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied;"
"A person is prohibited from executing all activities that belong to the activity type set {Prepare Report, Verify Budget, Approve Proposal}.","Activity: [""Prepare Report"", ""Verify Budget"", ""Approve Proposal""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Prepare Report""}) MATCH (e2:Event {Activity: ""Verify Budget""}) MATCH (e3:Event {Activity: ""Approve Proposal""}) WHERE e1.Actor = e2.Actor AND e1.Actor = e3.Actor AND e2.Actor = e3.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied;"
"A single resource must not handle all activities associated with the activity type set {Submit Application, Conduct Interview, Finalize Hiring}.","Activity: [""submit application"", ""conduct interview"", ""finalize hiring""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""submit application""}) MATCH (e2:Event {Activity: ""conduct interview""}) MATCH (e3:Event {Activity: ""finalize hiring""}) WHERE e1.Actor = e2.Actor AND e1.Actor = e3.Actor AND e2.Actor = e3.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied;"
"No actor executes every activity within the scope of the activity type set Approve Loan, Audit Account, and Close Case.","Activity: [""approve loan"", ""audit account"", ""close case""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""approve loan""}) MATCH (e2:Event {Activity: ""audit account""}) MATCH (e3:Event {Activity: ""close case""}) WHERE e1.Actor = e2.Actor AND e1.Actor = e3.Actor AND e2.Actor = e3.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied;"
"A person must avoid performing the entirety of activities included in the activity type set File Claim, Validate Claim, Issue Compensation.","Activity: [""file claim"", ""validate claim"", ""issue compensation""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""file claim""}) MATCH (e2:Event {Activity: ""validate claim""}) MATCH (e3:Event {Activity: ""issue compensation""}) WHERE e1.Actor = e2.Actor AND e1.Actor = e3.Actor AND e2.Actor = e3.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied;"
"There is no person who schedules appointments, reviews reports, and approves decisions.","Activity: [""schedule appointment"", ""review report"", ""approve decision""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""schedule appointment""}) MATCH (e2:Event {Activity: ""review report""}) MATCH (e3:Event {Activity: ""approve decision""}) WHERE e1.Actor = e2.Actor AND e1.Actor = e3.Actor AND e2.Actor = e3.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied;"
"No individual is allowed to handle inventory checks, process refunds, and close accounts.","Activity: [""inventory check"", ""process refund"", ""close account""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""inventory check""}) MATCH (e2:Event {Activity: ""process refund""}) MATCH (e3:Event {Activity: ""close account""}) WHERE e1.Actor = e2.Actor AND e1.Actor = e3.Actor AND e2.Actor = e3.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied;"
"There is no person who drafts contracts, negotiates terms, and signs agreements.","Activity: [""draft contract"", ""negotiate terms"", ""sign agreement""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""draft contract""}) MATCH (e2:Event {Activity: ""negotiate terms""}) MATCH (e3:Event {Activity: ""sign agreement""}) WHERE e1.Actor = e2.Actor AND e1.Actor = e3.Actor AND e2.Actor = e3.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied;"
"No one should be responsible for approving expense reports, verifying receipts, and issuing reimbursements.","Activity: [""approve expense report"", ""verify receipt"", ""issue reimbursement""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""approve expense report""}) MATCH (e2:Event {Activity: ""verify receipt""}) MATCH (e3:Event {Activity: ""issue reimbursement""}) WHERE e1.Actor = e2.Actor AND e1.Actor = e3.Actor AND e2.Actor = e3.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied;"
"It is not allowed for the same person to coordinate shipments, review delivery schedules, and approve invoices.","Activity: [""coordinate shipment"", ""review delivery schedule"", ""approve invoice""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""coordinate shipment""}) MATCH (e2:Event {Activity: ""review delivery schedule""}) MATCH (e3:Event {Activity: ""approve invoice""}) WHERE e1.Actor = e2.Actor AND e1.Actor = e3.Actor AND e2.Actor = e3.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied;"
"A person must not complete all three actions: initiating training sessions, evaluating trainee performance, and approving certifications.","Activity: [""Initiate Training Session"", ""Evaluate Trainee Performance"", ""Approve Certification""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Initiate Training Session""}) MATCH (e2:Event {Activity: ""Evaluate Trainee Performance""}) MATCH (e3:Event {Activity: ""Approve Certification""}) WHERE e1.Actor = e2.Actor AND e1.Actor = e3.Actor AND e2.Actor = e3.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied;"
"It is required that no actor manages all activities: creating customer profiles, reviewing customer feedback, and resolving escalations.","Activity: [""Create Customer Profile"", ""Review Customer Feedback"", ""Resolve Escalation""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Customer Profile""}) MATCH (e2:Event {Activity: ""Review Customer Feedback""}) MATCH (e3:Event {Activity: ""Resolve Escalation""}) WHERE e1.Actor = e2.Actor AND e1.Actor = e3.Actor AND e2.Actor = e3.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied;"
"A resource must avoid handling all of the following: assigning priorities, monitoring task progress, and completing tasks.","Activity: [""Assign Priority"", ""Monitor Task Progress"", ""Complete Task""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Assign Priority""}) MATCH (e2:Event {Activity: ""Monitor Task Progress""}) MATCH (e3:Event {Activity: ""Complete Task""}) WHERE e1.Actor = e2.Actor AND e1.Actor = e3.Actor AND e2.Actor = e3.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied;"
"There is no employee who drafts legal contracts, negotiates terms, and approves final agreements.","Activity: [""Draft Legal Contract"", ""Negotiate Terms"", ""Approve Final Agreement""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Draft Legal Contract""}) MATCH (e2:Event {Activity: ""Negotiate Terms""}) MATCH (e3:Event {Activity: ""Approve Final Agreement""}) WHERE e1.Actor = e2.Actor AND e1.Actor = e3.Actor AND e2.Actor = e3.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied;"
"No single individual should oversee customer onboarding, conduct surveys, and analyze satisfaction metrics.","Activity: [""Customer Onboarding"", ""Conduct Survey"", ""Analyze Satisfaction Metrics""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Customer Onboarding""}) MATCH (e2:Event {Activity: ""Conduct Survey""}) MATCH (e3:Event {Activity: ""Analyze Satisfaction Metrics""}) WHERE e1.Actor = e2.Actor AND e1.Actor = e3.Actor AND e2.Actor = e3.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied;"
"A person cannot be responsible for scheduling meetings, approving budget requests, and reviewing annual reports at the same time.","Activity: [""Schedule Meeting"", ""Approve Budget Request"", ""Review Annual Report""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Schedule Meeting""}) MATCH (e2:Event {Activity: ""Approve Budget Request""}) MATCH (e3:Event {Activity: ""Review Annual Report""}) WHERE e1.Actor = e2.Actor AND e1.Actor = e3.Actor AND e2.Actor = e3.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied;"
"A single actor must not take on all the tasks of preparing training materials, delivering sessions, and evaluating attendees.","Activity: [""Prepare Training Materials"", ""Deliver Training Session"", ""Evaluate Attendees""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Prepare Training Materials""}) MATCH (e2:Event {Activity: ""Deliver Training Session""}) MATCH (e3:Event {Activity: ""Evaluate Attendees""}) WHERE e1.Actor = e2.Actor AND e1.Actor = e3.Actor AND e2.Actor = e3.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied;"
"There must not be anyone responsible for verifying payments, reconciling accounts, and authorizing withdrawals.","Activity: [""Verify Payment"", ""Reconcile Account"", ""Authorize Withdrawal""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Verify Payment""}) MATCH (e2:Event {Activity: ""Reconcile Account""}) MATCH (e3:Event {Activity: ""Authorize Withdrawal""}) WHERE e1.Actor = e2.Actor AND e1.Actor = e3.Actor AND e2.Actor = e3.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied;"
"A resource cannot perform all the tasks of logging issues, assigning priorities, and resolving tickets.","Activity: [""Log Issue"", ""Assign Priority"", ""Resolve Ticket""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Log Issue""}) MATCH (e2:Event {Activity: ""Assign Priority""}) MATCH (e3:Event {Activity: ""Resolve Ticket""}) WHERE e1.Actor = e2.Actor AND e1.Actor = e3.Actor AND e2.Actor = e3.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied;"
"No individual should both draft policy documents, evaluate compliance, and approve risk assessments.","Activity: [""Draft Policy Document"", ""Evaluate Compliance"", ""Approve Risk Assessment""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Draft Policy Document""}) MATCH (e2:Event {Activity: ""Evaluate Compliance""}) MATCH (e3:Event {Activity: ""Approve Risk Assessment""}) WHERE e1.Actor = e2.Actor AND e1.Actor = e3.Actor AND e2.Actor = e3.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied;"
"It is not permitted for any actor to both monitor security systems, conduct threat analysis, and resolve incidents.","Activity: [""Monitor Security Systems"", ""Conduct Threat Analysis"", ""Resolve Incidents""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Monitor Security Systems""}) MATCH (e2:Event {Activity: ""Conduct Threat Analysis""}) MATCH (e3:Event {Activity: ""Resolve Incidents""}) WHERE e1.Actor = e2.Actor AND e1.Actor = e3.Actor AND e2.Actor = e3.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied;"
No individual is allowed to carry out every event in any process instance of entity type project.,"Activity: [], EntityType: [""Project""], Actor: []","MATCH (e:Entity {EntityType: 'Project'})<-[:CORR]-(ev:Event) WITH e, COLLECT(DISTINCT ev.Actor) AS actors RETURN CASE WHEN ANY(actors IN COLLECT(actors) WHERE SIZE(actors) = 1) THEN false ELSE true END AS ruleSatisfied;"
A person is prohibited from performing all tasks within any entity of entity type contract.,"Activity: [], EntityType: [""Contract""], Actor: []","MATCH (e:Entity {EntityType: 'Contract'})<-[:CORR]-(ev:Event) WITH e, COLLECT(DISTINCT ev.Actor) AS actors RETURN CASE WHEN ANY(actors IN COLLECT(actors) WHERE SIZE(actors) = 1) THEN false ELSE true END AS ruleSatisfied;"
It is required that no single actor executes all actions in any object of type shipment.,"Activity: [], EntityType: [""Shipment""], Actor: []","MATCH (e:Entity {EntityType: 'Shipment'})<-[:CORR]-(ev:Event) WITH e, COLLECT(DISTINCT ev.Actor) AS actors RETURN CASE WHEN ANY(actors IN COLLECT(actors) WHERE SIZE(actors) = 1) THEN false ELSE true END AS ruleSatisfied;"
A single resource must not handle all events in any process instance related to entity type invoice.,"Activity: [], EntityType: [""Invoice""], Actor: []","MATCH (e:Entity {EntityType: 'Invoice'})<-[:CORR]-(ev:Event) WITH e, COLLECT(DISTINCT ev.Actor) AS actors RETURN CASE WHEN ANY(actors IN COLLECT(actors) WHERE SIZE(actors) = 1) THEN false ELSE true END AS ruleSatisfied;"
The execution of all events in any process instance of entity type claim by one person is not permitted.,"Activity: [], EntityType: [""Claim""], Actor: []","MATCH (e:Entity {EntityType: 'Claim'})<-[:CORR]-(ev:Event) WITH e, COLLECT(DISTINCT ev.Actor) AS actors RETURN CASE WHEN ANY(actors IN COLLECT(actors) WHERE SIZE(actors) = 1) THEN false ELSE true END AS ruleSatisfied;"
It is mandatory that no actor completes all events for an object of entity type case.,"Activity: [], EntityType: [""Case""], Actor: []","MATCH (e:Entity {EntityType: 'Case'})<-[:CORR]-(ev:Event) WITH e, COLLECT(DISTINCT ev.Actor) AS actors RETURN CASE WHEN ANY(actors IN COLLECT(actors) WHERE SIZE(actors) = 1) THEN false ELSE true END AS ruleSatisfied;"
It is prohibited for one individual to execute all tasks within any process instance of entity type order.,"Activity: [], EntityType: [""Order""], Actor: []","MATCH (e:Entity {EntityType: 'Order'})<-[:CORR]-(ev:Event) WITH e, COLLECT(DISTINCT ev.Actor) AS actors RETURN CASE WHEN ANY(actors IN COLLECT(actors) WHERE SIZE(actors) = 1) THEN false ELSE true END AS ruleSatisfied;"
"For any object of type policy, a resource must not execute all tasks.","Activity: [], EntityType: [""Policy""], Actor: []","MATCH (e:Entity {EntityType: 'Policy'})<-[:CORR]-(ev:Event) WITH e, COLLECT(DISTINCT ev.Actor) AS actors RETURN CASE WHEN ANY(actors IN COLLECT(actors) WHERE SIZE(actors) = 1) THEN false ELSE true END AS ruleSatisfied;"
The full set of activities in any process instance of entity type inspection must not be carried out by a single person.,"Activity: [], EntityType: [""Inspection""], Actor: []","MATCH (e:Entity {EntityType: 'Inspection'})<-[:CORR]-(ev:Event) WITH e, COLLECT(DISTINCT ev.Actor) AS actors RETURN CASE WHEN ANY(actors IN COLLECT(actors) WHERE SIZE(actors) = 1) THEN false ELSE true END AS ruleSatisfied;"
It is required that no single actor performs the entire set of actions for every instance of type application.,"Activity: [], EntityType: [""Application""], Actor: []","MATCH (e:Entity {EntityType: 'Application'})<-[:CORR]-(ev:Event) WITH e, COLLECT(DISTINCT ev.Actor) AS actors RETURN CASE WHEN ANY(actors IN COLLECT(actors) WHERE SIZE(actors) = 1) THEN false ELSE true END AS ruleSatisfied;"
No individual is responsible for completing every task for a single order.,"Activity: [], EntityType: [""Order""], Actor: []","MATCH (e:Entity {EntityType: 'Order'})<-[:CORR]-(ev:Event) WITH e, COLLECT(DISTINCT ev.Actor) AS actors RETURN CASE WHEN ANY(actors IN COLLECT(actors) WHERE SIZE(actors) = 1) THEN false ELSE true END AS ruleSatisfied;"
There is no person who handles all events for one project.,"Activity: [], EntityType: [""Project""], Actor: []","MATCH (e:Entity {EntityType: 'Project'})<-[:CORR]-(ev:Event) WITH e, COLLECT(DISTINCT ev.Actor) AS actors RETURN CASE WHEN ANY(actors IN COLLECT(actors) WHERE SIZE(actors) = 1) THEN false ELSE true END AS ruleSatisfied;"
No actor is allowed to perform all actions within a single process instance of a case.,"Activity: [], EntityType: [""Case""], Actor: []","MATCH (e:Entity {EntityType: 'Case'})<-[:CORR]-(ev:Event) WITH e, COLLECT(DISTINCT ev.Actor) AS actors RETURN CASE WHEN ANY(actors IN COLLECT(actors) WHERE SIZE(actors) = 1) THEN false ELSE true END AS ruleSatisfied;"
A single person cannot complete all steps in the processing of one item.,"Activity: [], EntityType: [""Item""], Actor: []","MATCH (e:Entity {EntityType: 'Item'})<-[:CORR]-(ev:Event) WITH e, COLLECT(DISTINCT ev.Actor) AS actors RETURN CASE WHEN ANY(actors IN COLLECT(actors) WHERE SIZE(actors) = 1) THEN false ELSE true END AS ruleSatisfied;"
It is not allowed for one person to manage all tasks for a single entity.,"Activity: [], EntityType: [], Actor: []","MATCH (e:Entity)<-[:CORR]-(ev:Event) WITH e, COLLECT(DISTINCT ev.Actor) AS actors RETURN CASE WHEN ANY(actors IN COLLECT(actors) WHERE SIZE(actors) = 1) THEN false ELSE true END AS ruleSatisfied;"
No person carries out every action for a specific order.,"Activity: [], EntityType: [""Order""], Actor: []","MATCH (e:Entity {EntityType: 'Order'})<-[:CORR]-(ev:Event) WITH e, COLLECT(DISTINCT ev.Actor) AS actors RETURN CASE WHEN ANY(actors IN COLLECT(actors) WHERE SIZE(actors) = 1) THEN false ELSE true END AS ruleSatisfied;"
There is no person assigned to perform all tasks for a single shipment.,"Activity: [], EntityType: [""Shipment""], Actor: []","MATCH (e:Entity {EntityType: 'Shipment'})<-[:CORR]-(ev:Event) WITH e, COLLECT(DISTINCT ev.Actor) AS actors RETURN CASE WHEN ANY(actors IN COLLECT(actors) WHERE SIZE(actors) = 1) THEN false ELSE true END AS ruleSatisfied;"
No individual is allowed to perform all operations for a single customer.,"Activity: [], EntityType: [""Customer""], Actor: []","MATCH (e:Entity {EntityType: 'Customer'})<-[:CORR]-(ev:Event) WITH e, COLLECT(DISTINCT ev.Actor) AS actors RETURN CASE WHEN ANY(actors IN COLLECT(actors) WHERE SIZE(actors) = 1) THEN false ELSE true END AS ruleSatisfied;"
No individual handles the entire range of tasks for a given project.,"Activity: [], EntityType: [""Project""], Actor: []","MATCH (e:Entity {EntityType: 'Project'})<-[:CORR]-(ev:Event) WITH e, COLLECT(DISTINCT ev.Actor) AS actors RETURN CASE WHEN ANY(actors IN COLLECT(actors) WHERE SIZE(actors) = 1) THEN false ELSE true END AS ruleSatisfied;"
A person cannot complete every task in a given entity's process.,"Activity: [], EntityType: [""Entity""], Actor: []","MATCH (e:Entity)<-[:CORR]-(ev:Event) WITH e, COLLECT(DISTINCT ev.Actor) AS actors RETURN CASE WHEN ANY(actors IN COLLECT(actors) WHERE SIZE(actors) = 1) THEN false ELSE true END AS ruleSatisfied;"
It is not permitted for a single person to execute all events for a given order.,"Activity: [], EntityType: [""Order""], Actor: []","MATCH (e:Entity {EntityType: 'Order'})<-[:CORR]-(ev:Event) WITH e, COLLECT(DISTINCT ev.Actor) AS actors RETURN CASE WHEN ANY(actors IN COLLECT(actors) WHERE SIZE(actors) = 1) THEN false ELSE true END AS ruleSatisfied;"
"A single person, and no one else, must perform all activities within activity set {Create Order, Clear Invoice, Receive Payment}","Activity: [""Create Order"", ""Clear Invoice"", ""Receive Payment""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN ['Create Order', 'Clear Invoice', 'Receive Payment'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
"It is required that one individual exclusively performs every activity in activity set {Create Invoice, Approve Payment, Process Shipment}","Activity: [""Create Invoice"", ""Approve Payment"", ""Process Shipment""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN ['Create Invoice', 'Approve Payment', 'Process Shipment'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
"All events with activity from activity set {Create Account, Submit Payment, Close Order} must be carried out by the same person, with no involvement from others","Activity: [""Create Account"", ""Submit Payment"", ""Close Order""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN ['Create Account', 'Submit Payment', 'Close Order'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
"The entirety of activities in activity set {Create Purchase Order, Approve Invoice, Receive Payment} must be performed solely by one individual","Activity: [""Create Purchase Order"", ""Approve Invoice"", ""Receive Payment""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN ['Create Purchase Order', 'Approve Invoice', 'Receive Payment'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
"A single actor is responsible for performing all activities in activity set {Create Order, Validate Payment, Ship Product} and no other person may participate","Activity: [""Create Order"", ""Validate Payment"", ""Ship Product""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN ['Create Order', 'Validate Payment', 'Ship Product'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
"It is necessary that all activities belonging to activity set {Create Invoice, Process Refund, Close Case} are handled exclusively by one person","Activity: [""Create Invoice"", ""Process Refund"", ""Close Case""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN ['Create Invoice', 'Process Refund', 'Close Case'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
"No one other than a designated person may perform the full set of activities in activity set {Approve Order, Create Invoice, Ship Item}","Activity: [""Approve Order"", ""Create Invoice"", ""Ship Item""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN ['Approve Order', 'Create Invoice', 'Ship Item'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
"A single resource must be responsible for executing all activities in activity set {Process Order, Ship Product, Handle Complaint}","Activity: [""process order"", ""ship product"", ""handle complaint""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN ['process order', 'ship product', 'handle complaint'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
"The entirety of the activity set {Approve Return, Create Shipment, Process Refund} must be handled by one person alone","Activity: [""approve return"", ""create shipment"", ""process refund""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN ['approve return', 'create shipment', 'process refund'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
"It is mandated that one individual exclusively handles all activities within activity set {Create Purchase, Approve Refund, Ship Order}","Activity: [""create purchase"", ""approve refund"", ""ship order""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN ['create purchase', 'approve refund', 'ship order'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
"One person must handle creating orders, approving contracts, processing payments, and shipping items.","Activity: [""create order"", ""approve contract"", ""process payment"", ""ship item""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN ['create order', 'approve contract', 'process payment', 'ship item'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
"A single individual must be responsible for creating customer accounts, approving orders, dispatching shipments, and handling returns.","Activity: [""create account"", ""approve order"", ""dispatch shipment"", ""handle return""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN ['create account', 'approve order', 'dispatch shipment', 'handle return'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
"One individual alone must approve purchase orders, process invoices, manage refunds, and handle payments.","Activity: [""approve purchase order"", ""process invoice"", ""manage refund"", ""handle payment""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN ['approve purchase order', 'process invoice', 'manage refund', 'handle payment'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
"Exactly one person must create invoices, approve payments, process returns, and manage inventory.","Activity: [""create invoice"", ""approve payment"", ""process return"", ""manage inventory""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN ['create invoice', 'approve payment', 'process return', 'manage inventory'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
"Only one individual must perform all activities related to product development, including creating prototypes, testing, approving the design, and launching the product","Activity: [""Create Prototype"", ""Test Product"", ""Approve Design"", ""Launch Product""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN ['Create Prototype', 'Test Product', 'Approve Design', 'Launch Product'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
"A single actor is required to approve all purchase requests, process all vendor invoices, and issue all purchase orders.","Activity: [""Approve Purchase Request"", ""Process Invoice"", ""Issue Purchase Order""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN ['Approve Purchase Request', 'Process Invoice', 'Issue Purchase Order'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
"One individual must handle approving product designs, managing product stock, preparing shipments, and tracking deliveries.","Activity: [""Approve Product Design"", ""Manage Product Stock"", ""Prepare Shipment"", ""Track Delivery""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN ['Approve Product Design', 'Manage Product Stock', 'Prepare Shipment', 'Track Delivery'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
"It is required that one person creates customer orders, approves transactions, ships products, and resolves customer complaints.","Activity: [""Create Order"", ""Approve Transaction"", ""Ship Product"", ""Resolve Complaint""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN ['Create Order', 'Approve Transaction', 'Ship Product', 'Resolve Complaint'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
"A single individual must be responsible for approving all customer requests, managing customer data, generating invoices, and processing payments","Activity: [""Approve Customer Request"", ""Manage Customer Data"", ""Generate Invoice"", ""Process Payment""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN ['Approve Customer Request', 'Manage Customer Data', 'Generate Invoice', 'Process Payment'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
"Only one person must be responsible for both managing customer inquiries, processing orders, preparing delivery schedules, and tracking deliveries","Activity: [""Manage Inquiry"", ""Process Order"", ""Prepare Delivery Schedule"", ""Track Delivery""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN ['Manage Inquiry', 'Process Order', 'Prepare Delivery Schedule', 'Track Delivery'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
"A single person, and no one else, performs all activities in activity set {Create Order, Approve Payment} across all instance of entity type 'Order'.","Activity: [""Create Order"", ""Approve Payment""], EntityType: [""Order""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Order""}) WHERE e.Activity IN ['Create Order', 'Approve Payment'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
"Across instances of object type 'Product', it is required that one individual exclusively performs every activity in activity set {Create Invoice, Ship Product}.","Activity: [""Create Invoice"", ""Ship Product""], EntityType: [""Product""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Product""}) WHERE e.Activity IN ['Create Invoice', 'Ship Product'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
"The entirety of activities in activity set {Approve Order, Pack Shipment} must be carried out solely by one actor for all orders.","Activity: [""Approve Order"", ""Pack Shipment""], EntityType: [""Order""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Order""}) WHERE e.Activity IN ['Approve Order', 'Pack Shipment'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
"One person, and only one, is responsible for performing all activities in activity set {Process Return, Update Stock} across all process instances of entity type 'Product'.","Activity: [""Process Return"", ""Update Stock""], EntityType: [""Product""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Product""}) WHERE e.Activity IN ['Process Return', 'Update Stock'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
"It is mandatory that a single actor handles all activities in activity set {Create Order, Approve Payment, Ship Order} for all instances of entity type 'Order'.","Activity: [""Create Order"", ""Approve Payment"", ""Ship Order""], EntityType: [""Order""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Order""}) WHERE e.Activity IN ['Create Order', 'Approve Payment', 'Ship Order'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
"Every task from activity set {Create Order, Approve Contract} must be performed by the same person across all entities of entity type 'Customer'.","Activity: [""Create Order"", ""Approve Contract""], EntityType: [""Customer""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Customer""}) WHERE e.Activity IN ['Create Order', 'Approve Contract'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
"For process instances of entity type 'Supplier', one person alone must handle every activity in activity set {Create Invoice, Process Payment}.","Activity: [""Create Invoice"", ""Process Payment""], EntityType: [""Supplier""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Supplier""}) WHERE e.Activity IN ['Create Invoice', 'Process Payment'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
"It is required that one individual exclusively performs all tasks from activity set {Create Order, Ship Product, Handle Returns} for all instances of entity type 'Customer'.","Activity: [""Create Order"", ""Ship Product"", ""Handle Returns""], EntityType: [""Customer""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Customer""}) WHERE e.Activity IN ['Create Order', 'Ship Product', 'Handle Returns'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
"Exactly one person must complete all activities in activity set {Approve Transaction, Process Payment} for all objects of entity type 'Transaction'.","Activity: [""Approve Transaction"", ""Process Payment""], EntityType: [""Transaction""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Transaction""}) WHERE e.Activity IN ['Approve Transaction', 'Process Payment'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
"One specific individual is responsible for completing every event with an activity from activity set {Create Account, Approve Order, Ship Product} for customers.","Activity: [""Create Account"", ""Approve Order"", ""Ship Product""], EntityType: [""Customer""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Customer""}) WHERE e.Activity IN ['Create Account', 'Approve Order', 'Ship Product'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
A single person must handle the creation of an order and approval of the payment for products.,"Activity: [""Create Order"", ""Approve Payment""], EntityType: [""Product""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Product""}) WHERE e.Activity IN ['Create Order', 'Approve Payment'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
The same individual must be responsible for creating and shipping a product for customers.,"Activity: [""Create Product"", ""Ship Product""], EntityType: [""Customer""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Customer""}) WHERE e.Activity IN ['Create Product', 'Ship Product'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
Only one person must be responsible for approving an invoice and processing the payment for all orders.,"Activity: [""Approve Invoice"", ""Process Payment""], EntityType: [""Order""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Order""}) WHERE e.Activity IN ['Approve Invoice', 'Process Payment'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
A single actor must be responsible for receiving and packing items for all customers.,"Activity: [""Receive Item"", ""Pack Item""], EntityType: [""Customer""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Customer""}) WHERE e.Activity IN ['Receive Item', 'Pack Item'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
A single actor must handle the approval and shipment of orders for all 'Product' entities.,"Activity: [""Approve Order"", ""Ship Product""], EntityType: [""Product""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Product""}) WHERE e.Activity IN ['Approve Order', 'Ship Product'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
Only one person should create and approve a contract for  'Customer' entities.,"Activity: [""Create Contract"", ""Approve Contract""], EntityType: [""Customer""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Customer""}) WHERE e.Activity IN ['Create Contract', 'Approve Contract'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
A single individual must approve both the return and the payment for all 'Transaction' objects.,"Activity: [""Approve Return"", ""Approve Payment""], EntityType: [""Transaction""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Transaction""}) WHERE e.Activity IN ['Approve Return', 'Approve Payment'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
A single person must handle the order review and product shipment of all 'Supplier' entities.,"Activity: [""Review Order"", ""Ship Product""], EntityType: [""Supplier""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Supplier""}) WHERE e.Activity IN ['Review Order', 'Ship Product'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
One specific individual must handle both processing an order and invoicing it for all instances of entity type 'Supplier'.,"Activity: [""Process Order"", ""Create Invoice""], EntityType: [""Supplier""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Supplier""}) WHERE e.Activity IN ['Process Order', 'Create Invoice'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
A single person must handle the luggage inspection and weight control for all Passenger entities.,"Activity: [""Luggage Inspection"", ""Weight Control""], EntityType: [""Passenger""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Passenger""}) WHERE e.Activity IN ['Luggage Inspection', 'Weight Control'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
At least one approval must be made for every invoice.,"Activity: [""Approve Invoice""], EntityType: [""Invoice""], Actor: []",MATCH (ent:Entity {EntityType: 'Invoice'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'Approve Invoice'})-[:CORR]->(ent) } RETURN CASE WHEN count(ent) = 0 THEN true ELSE false END AS ruleSatisfied
Every order must have at least one shipment processed.,"Activity: [""Process Shipment""], EntityType: [""Order""], Actor: []",MATCH (ent:Entity {EntityType: 'Order'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'Process Shipment'})-[:CORR]->(ent) } RETURN CASE WHEN count(ent) = 0 THEN true ELSE false END AS ruleSatisfied
At least one approval is required for every contract.,"Activity: [""Approve Contract""], EntityType: [""Contract""], Actor: []",MATCH (ent:Entity {EntityType: 'Contract'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'Approve Contract'})-[:CORR]->(ent) } RETURN CASE WHEN count(ent) = 0 THEN true ELSE false END AS ruleSatisfied
An invoice must be processed at least once for every customer.,"Activity: [""process invoice""], EntityType: [""customer""], Actor: []",MATCH (ent:Entity {EntityType: 'customer'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'process invoice'})-[:CORR]->(ent) } RETURN CASE WHEN count(ent) = 0 THEN true ELSE false END AS ruleSatisfied
At least one inventory check must be done for every product.,"Activity: [""inventory check""], EntityType: [""product""], Actor: []",MATCH (ent:Entity {EntityType: 'product'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'inventory check'})-[:CORR]->(ent) } RETURN CASE WHEN count(ent) = 0 THEN true ELSE false END AS ruleSatisfied
Every shipment must be inspected at least once.,"Activity: [""inspect shipment""], EntityType: [""shipment""], Actor: []",MATCH (ent:Entity {EntityType: 'shipment'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'inspect shipment'})-[:CORR]->(ent) } RETURN CASE WHEN count(ent) = 0 THEN true ELSE false END AS ruleSatisfied
A purchase must be validated at least once for every product.,"Activity: [""validate purchase""], EntityType: [""product""], Actor: []",MATCH (ent:Entity {EntityType: 'product'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'validate purchase'})-[:CORR]->(ent) } RETURN CASE WHEN count(ent) = 0 THEN true ELSE false END AS ruleSatisfied
At least one inspection must be completed for every service request.,"Activity: [""complete inspection""], EntityType: [""service request""], Actor: []",MATCH (ent:Entity {EntityType: 'service request'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'complete inspection'})-[:CORR]->(ent) } RETURN CASE WHEN count(ent) = 0 THEN true ELSE false END AS ruleSatisfied
Every employee must approve at least one expense report.,"Activity: [""approve expense report""], EntityType: [""employee""], Actor: []",MATCH (ent:Entity {EntityType: 'employee'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'approve expense report'})-[:CORR]->(ent) } RETURN CASE WHEN count(ent) = 0 THEN true ELSE false END AS ruleSatisfied
Each purchase order must be processed at least once.,"Activity: [""process order""], EntityType: [""purchase order""], Actor: []",MATCH (ent:Entity {EntityType: 'purchase order'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'process order'})-[:CORR]->(ent) } RETURN CASE WHEN count(ent) = 0 THEN true ELSE false END AS ruleSatisfied
"At least one ""Submit Application"" event must be performed for each ""Candidate"".","Activity: [""submit application""], EntityType: [""candidate""], Actor: []",MATCH (ent:Entity {EntityType: 'candidate'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'submit application'})-[:CORR]->(ent) } RETURN CASE WHEN count(ent) = 0 THEN true ELSE false END AS ruleSatisfied
"Every ""Document"" entity must have at least one ""Review Document"" task performed.","Activity: [""Review Document""], EntityType: [""Document""], Actor: []",MATCH (ent:Entity {EntityType: 'Document'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'Review Document'})-[:CORR]->(ent) } RETURN CASE WHEN count(ent) = 0 THEN true ELSE false END AS ruleSatisfied
"A ""Product"" must have at least one ""Inspect Product"" event performed.","Activity: [""Inspect Product""], EntityType: [""Product""], Actor: []",MATCH (ent:Entity {EntityType: 'Product'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'Inspect Product'})-[:CORR]->(ent) } RETURN CASE WHEN count(ent) = 0 THEN true ELSE false END AS ruleSatisfied
"Every ""Customer"" entity must have at least one ""Verify Payment"" action performed.","Activity: [""Verify Payment""], EntityType: [""Customer""], Actor: []",MATCH (ent:Entity {EntityType: 'Customer'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'Verify Payment'})-[:CORR]->(ent) } RETURN CASE WHEN count(ent) = 0 THEN true ELSE false END AS ruleSatisfied
"An ""Order"" must have at least one ""Ship Product"" performed.","Activity: [""Ship Product""], EntityType: [""Order""], Actor: []",MATCH (ent:Entity {EntityType: 'Order'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'Ship Product'})-[:CORR]->(ent) } RETURN CASE WHEN count(ent) = 0 THEN true ELSE false END AS ruleSatisfied
"Every ""Employee"" entity must have at least one ""Approve Leave"" event performed.","Activity: [""Approve Leave""], EntityType: [""Employee""], Actor: []",MATCH (ent:Entity {EntityType: 'Employee'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'Approve Leave'})-[:CORR]->(ent) } RETURN CASE WHEN count(ent) = 0 THEN true ELSE false END AS ruleSatisfied
"A ""Vehicle"" must have at least one ""Perform Maintenance"" event performed.","Activity: [""Perform Maintenance""], EntityType: [""Vehicle""], Actor: []",MATCH (ent:Entity {EntityType: 'Vehicle'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'Perform Maintenance'})-[:CORR]->(ent) } RETURN CASE WHEN count(ent) = 0 THEN true ELSE false END AS ruleSatisfied
"Every ""Transaction"" entity must have at least one ""Verify Transaction"" activity performed.","Activity: [""Verify Transaction""], EntityType: [""Transaction""], Actor: []",MATCH (ent:Entity {EntityType: 'Transaction'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'Verify Transaction'})-[:CORR]->(ent) } RETURN CASE WHEN count(ent) = 0 THEN true ELSE false END AS ruleSatisfied
"An ""Invoice"" object must have at least one event with aqtivity ""Generate Invoice"" performed.","Activity: [""Generate Invoice""], EntityType: [""Invoice""], Actor: []",MATCH (ent:Entity {EntityType: 'Invoice'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'Generate Invoice'})-[:CORR]->(ent) } RETURN CASE WHEN count(ent) = 0 THEN true ELSE false END AS ruleSatisfied
"A ""Purchase"" must have at least one event of type ""Approve Purchase"" performed.","Activity: [""Approve Purchase""], EntityType: [""Purchase""], Actor: []",MATCH (ent:Entity {EntityType: 'Purchase'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'Approve Purchase'})-[:CORR]->(ent) } RETURN CASE WHEN count(ent) = 0 THEN true ELSE false END AS ruleSatisfied
"An event of type ""Inspect Goods"" must be performed no fewer than 2 times and no more than 4 times.","Activity: [""Inspect Goods""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Inspect Goods'}) RETURN COUNT(e) >=2 AND COUNT(e) <=4 AS ruleSatisfied
"The execution of an event of type ""Submit Invoice"" is required to occur at least 1 time but must not exceed 5 times.","Activity: [""Submit Invoice""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Submit Invoice'}) RETURN COUNT(e) >=1 AND COUNT(e) <=5 AS ruleSatisfied
"Events with activity ""Pack Order"" must be carried out a minimum of 3 times and a maximum of 7 times.","Activity: [""Pack Order""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Pack Order'}) RETURN COUNT(e) >=3 AND COUNT(e) <=7 AS ruleSatisfied
"Performing an event of type ""Authorize Payment"" is permitted between 2 and 6 times inclusively.","Activity: [""Authorize Payment""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Authorize Payment'}) RETURN COUNT(e) >=2 AND COUNT(e) <=6 AS ruleSatisfied
"A task of type ""Quality Check"" is required to occur a minimum of 4 times and a maximum of 8 times.","Activity: [""Quality Check""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Quality Check'}) RETURN COUNT(e) >=4 AND COUNT(e) <=8 AS ruleSatisfied
"At least 3 instances of activity ""Close Case"" must take place, but no more than 5 are allowed.","Activity: [""Close Case""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Close Case'}) RETURN COUNT(e) >=3 AND COUNT(e) <=5 AS ruleSatisfied
"Activity ""Send Notification"" is mandated to occur no less than 1 time and no more than 3 times.","Activity: [""Send Notification""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Send Notification'}) RETURN COUNT(e) >=1 AND COUNT(e) <=3 AS ruleSatisfied
"The number of times an event of type ""Approve Request"" is executed must fall within the range of 2 to 6.","Activity: [""Approve Request""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Approve Request'}) RETURN COUNT(e) >=2 AND COUNT(e) <=6 AS ruleSatisfied
"At least 1 ""Initiate Process"" event must occur, but no more than 2 are allowed.","Activity: [""Initiate Process""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Initiate Process'}) RETURN COUNT(e) >=1 AND COUNT(e) <=2 AS ruleSatisfied
"A task of type ""Assign Task"" must be performed no fewer than 5 times and no more than 10 times.","Activity: [""Assign Task""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Assign Task'}) RETURN COUNT(e) >=5 AND COUNT(e) <=10 AS ruleSatisfied
The action of finalizing a purchase must occur at least 2 times and at most 5 times.,"Activity: [""Finalize Purchase""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Finalize Purchase'}) RETURN COUNT(e) >=2 AND COUNT(e) <=5 AS ruleSatisfied
Reviewing applications must happen a minimum of 3 times and a maximum of 6 times.,"Activity: [""Review Application""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Review Application'}) RETURN COUNT(e) >=3 AND COUNT(e) <=6 AS ruleSatisfied
"At least 4 instances of recording a customer complaint must take place, but no more than 7 are permitted.","Activity: [""Record Complaint""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Record Complaint'}) RETURN COUNT(e) >=4 AND COUNT(e) <=7 AS ruleSatisfied
A minimum of 1 and a maximum of 3 approvals for the shipment must be given.,"Activity: [""Approve Shipment""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Approve Shipment'}) RETURN COUNT(e) >=1 AND COUNT(e) <=3 AS ruleSatisfied
The verification of an order should occur at least 2 times but no more than 4 times.,"Activity: [""Verify Order""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Verify Order'}) RETURN COUNT(e) >=2 AND COUNT(e) <=4 AS ruleSatisfied
There must be at least 5 and no more than 10 updates of delivery.,"Activity: [""Update Delivery""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Update Delivery'}) RETURN COUNT(e) >=5 AND COUNT(e) <=10 AS ruleSatisfied
Monitoring the completion of assembly tasks is required no fewer than 3 times and no more than 8 times.,"Activity: [""Monitor Assembly""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Monitor Assembly'}) RETURN COUNT(e) >=3 AND COUNT(e) <=8 AS ruleSatisfied
The action of creating records in the system must occur a minimum of 2 times and a maximum of 5 times.,"Activity: [""Create Record""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Create Record'}) RETURN COUNT(e) >=2 AND COUNT(e) <=5 AS ruleSatisfied
Tracking the inventory count should be performed between 3 and 7 times inclusively.,"Activity: [""Track Inventory""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Track Inventory'}) RETURN COUNT(e) >=3 AND COUNT(e) <=7 AS ruleSatisfied
At least 1 and at most 4 task reassignments must occur.,"Activity: [""Reassign Task""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Reassign Task'}) RETURN COUNT(e) >=1 AND COUNT(e) <=4 AS ruleSatisfied
"For every customer entity, the activity ""Submit Feedback"" must occur no fewer than 2 times and no more than 5 times.","Activity: [""Submit Feedback""], EntityType: [""Customer""], Actor: []","MATCH (ent:Entity {EntityType: 'Customer'}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event {Activity: 'Submit Feedback'}) WITH ent, COUNT(event) AS feedbackCount WHERE feedbackCount < 2 OR feedbackCount > 5 WITH COUNT(ent) AS violatingEntities RETURN CASE WHEN violatingEntities > 0 THEN FALSE ELSE TRUE END AS ruleSatisfied"
Each invoice must have at least 3 and at most 10 payment confirmations.,"Activity: [""Confirm Payment""], EntityType: [""Invoice""], Actor: []","MATCH (ent:Entity {EntityType: 'Invoice'}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event {Activity: 'Confirm Payment'}) WITH ent, COUNT(event) AS paymentCount WHERE paymentCount < 3 OR paymentCount > 10 WITH COUNT(ent) AS violatingEntities RETURN CASE WHEN violatingEntities > 0 THEN FALSE ELSE TRUE END AS ruleSatisfied"
An activity of checking inventory must occur no fewer than 1 time and no more than 4 times for every product entity.,"Activity: [""Check Inventory""], EntityType: [""Product""], Actor: []","MATCH (ent:Entity {EntityType: 'Product'}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event {Activity: 'Check Inventory'}) WITH ent, COUNT(event) AS inventoryCheckCount WHERE inventoryCheckCount < 1 OR inventoryCheckCount > 4 WITH COUNT(ent) AS violatingEntities RETURN CASE WHEN violatingEntities > 0 THEN FALSE ELSE TRUE END AS ruleSatisfied"
"For every employee record, the activity of logging hours must happen at least 5 times but no more than 20 times.","Activity: [""log hours""], EntityType: [""employee""], Actor: []","MATCH (ent:Entity {EntityType: 'employee'}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event {Activity: 'log hours'}) WITH ent, COUNT(event) AS hoursLogged WHERE hoursLogged < 5 OR hoursLogged > 20 WITH COUNT(ent) AS violatingEntities RETURN CASE WHEN violatingEntities > 0 THEN FALSE ELSE TRUE END AS ruleSatisfied"
At least 2 and no more than 6 approvals must be logged for each procurement request entity.,"Activity: [""log approval""], EntityType: [""procurement request""], Actor: []","MATCH (ent:Entity {EntityType: 'procurement request'}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event {Activity: 'log approval'}) WITH ent, COUNT(event) AS approvalCount WHERE approvalCount < 2 OR approvalCount > 6 WITH COUNT(ent) AS violatingEntities RETURN CASE WHEN violatingEntities > 0 THEN FALSE ELSE TRUE END AS ruleSatisfied"
Every shipment record must have between 1 and 5 events of dispatch confirmation logged.,"Activity: [""confirm dispatch""], EntityType: [""shipment""], Actor: []","MATCH (ent:Entity {EntityType: 'shipment'}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event {Activity: 'confirm dispatch'}) WITH ent, COUNT(event) AS dispatchCount WHERE dispatchCount < 1 OR dispatchCount > 5 WITH COUNT(ent) AS violatingEntities RETURN CASE WHEN violatingEntities > 0 THEN FALSE ELSE TRUE END AS ruleSatisfied"
"For all maintenance schedules, inspection events must be logged at least 4 times but no more than 8 times.","Activity: [""inspect""], EntityType: [""maintenance schedule""], Actor: []","MATCH (ent:Entity {EntityType: 'maintenance schedule'}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event {Activity: 'inspect'}) WITH ent, COUNT(event) AS inspectionCount WHERE inspectionCount < 4 OR inspectionCount > 8 WITH COUNT(ent) AS violatingEntities RETURN CASE WHEN violatingEntities > 0 THEN FALSE ELSE TRUE END AS ruleSatisfied"
At least 1 and at most 3 restock events must be recorded for every inventory item.,"Activity: [""restock""], EntityType: [""inventory item""], Actor: []","MATCH (ent:Entity {EntityType: 'inventory item'}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event {Activity: 'restock'}) WITH ent, COUNT(event) AS restockCount WHERE restockCount < 1 OR restockCount > 3 WITH COUNT(ent) AS violatingEntities RETURN CASE WHEN violatingEntities > 0 THEN FALSE ELSE TRUE END AS ruleSatisfied"
Each support ticket must have at least 2 and no more than 10 responses logged.,"Activity: [""log response""], EntityType: [""support ticket""], Actor: []","MATCH (ent:Entity {EntityType: 'support ticket'}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event {Activity: 'log response'}) WITH ent, COUNT(event) AS responseCount WHERE responseCount < 2 OR responseCount > 10 WITH COUNT(ent) AS violatingEntities RETURN CASE WHEN violatingEntities > 0 THEN FALSE ELSE TRUE END AS ruleSatisfied"
"For every order entity, fulfillment confirmation must occur at least 3 times but no more than 7 times.","Activity: [""confirm fulfillment""], EntityType: [""order""], Actor: []","MATCH (ent:Entity {EntityType: 'order'}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event {Activity: 'confirm fulfillment'}) WITH ent, COUNT(event) AS fulfillmentCount WHERE fulfillmentCount < 3 OR fulfillmentCount > 7 WITH COUNT(ent) AS violatingEntities RETURN CASE WHEN violatingEntities > 0 THEN FALSE ELSE TRUE END AS ruleSatisfied"
"For every contract, the activity ""Review Contract"" must occur at least 2 times but no more than 4 times.","Activity: [""review contract""], EntityType: [""contract""], Actor: []","MATCH (ent:Entity {EntityType: 'contract'}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event {Activity: 'review contract'}) WITH ent, COUNT(event) AS reviewCount WHERE reviewCount < 2 OR reviewCount > 4 WITH COUNT(ent) AS violatingEntities RETURN CASE WHEN violatingEntities > 0 THEN FALSE ELSE TRUE END AS ruleSatisfied"
Each employee profile must have at least 3 but no more than 5 events of training completion.,"Activity: [""Complete Training""], EntityType: [""Employee""], Actor: []","MATCH (ent:Entity {EntityType: 'Employee'}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event {Activity: 'Complete Training'}) WITH ent, COUNT(event) AS trainingCount WHERE trainingCount < 3 OR trainingCount > 5 WITH COUNT(ent) AS violatingEntities RETURN CASE WHEN violatingEntities > 0 THEN FALSE ELSE TRUE END AS ruleSatisfied"
At least 1 and no more than 3 purchase events must be recorded for each product.,"Activity: [""Purchase""], EntityType: [""Product""], Actor: []","MATCH (ent:Entity {EntityType: 'Product'}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event {Activity: 'Purchase'}) WITH ent, COUNT(event) AS purchaseCount WHERE purchaseCount < 1 OR purchaseCount > 3 WITH COUNT(ent) AS violatingEntities RETURN CASE WHEN violatingEntities > 0 THEN FALSE ELSE TRUE END AS ruleSatisfied"
"For every customer account, the activity ""Verify Identity"" must occur at least 2 times and at most 6 times.","Activity: [""Verify Identity""], EntityType: [""Customer Account""], Actor: []","MATCH (ent:Entity {EntityType: 'Customer Account'}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event {Activity: 'Verify Identity'}) WITH ent, COUNT(event) AS verificationCount WHERE verificationCount < 2 OR verificationCount > 6 WITH COUNT(ent) AS violatingEntities RETURN CASE WHEN violatingEntities > 0 THEN FALSE ELSE TRUE END AS ruleSatisfied"
Each insurance claim must have at least 1 and no more than 5 approval steps.,"Activity: [""Approval Step""], EntityType: [""Insurance Claim""], Actor: []","MATCH (ent:Entity {EntityType: 'Insurance Claim'}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event {Activity: 'Approval Step'}) WITH ent, COUNT(event) AS approvalCount WHERE approvalCount < 1 OR approvalCount > 5 WITH COUNT(ent) AS violatingEntities RETURN CASE WHEN violatingEntities > 0 THEN FALSE ELSE TRUE END AS ruleSatisfied"
The task of uploading documentation must be performed at least 3 times and no more than 8 times for every project record.,"Activity: [""Upload Documentation""], EntityType: [""Project Record""], Actor: []","MATCH (ent:Entity {EntityType: 'Project Record'}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event {Activity: 'Upload Documentation'}) WITH ent, COUNT(event) AS uploadCount WHERE uploadCount < 3 OR uploadCount > 8 WITH COUNT(ent) AS violatingEntities RETURN CASE WHEN violatingEntities > 0 THEN FALSE ELSE TRUE END AS ruleSatisfied"
"For all project milestones, at least 2 and no more than 5 review sessions must be conducted.","Activity: [""Conduct Review Session""], EntityType: [""Project Milestone""], Actor: []","MATCH (ent:Entity {EntityType: 'Project Milestone'}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event {Activity: 'Conduct Review Session'}) WITH ent, COUNT(event) AS reviewCount WHERE reviewCount < 2 OR reviewCount > 5 WITH COUNT(ent) AS violatingEntities RETURN CASE WHEN violatingEntities > 0 THEN FALSE ELSE TRUE END AS ruleSatisfied"
Each audit log must have no fewer than 1 and no more than 3  anomaly detections.,"Activity: [""Detect Anomaly""], EntityType: [""Audit Log""], Actor: []","MATCH (ent:Entity {EntityType: 'Audit Log'}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event {Activity: 'Detect Anomaly'}) WITH ent, COUNT(event) AS anomalyCount WHERE anomalyCount < 1 OR anomalyCount > 3 WITH COUNT(ent) AS violatingEntities RETURN CASE WHEN violatingEntities > 0 THEN FALSE ELSE TRUE END AS ruleSatisfied"
"For every warehouse inventory, restocking must occur at least 5 times and no more than 15 times.","Activity: [""Restock""], EntityType: [""Warehouse Inventory""], Actor: []","MATCH (ent:Entity {EntityType: 'Warehouse Inventory'}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event {Activity: 'Restock'}) WITH ent, COUNT(event) AS restockCount WHERE restockCount < 5 OR restockCount > 15 WITH COUNT(ent) AS violatingEntities RETURN CASE WHEN violatingEntities > 0 THEN FALSE ELSE TRUE END AS ruleSatisfied"
"For every legal case record, review events must occur no fewer than 2 times and no more than 4 times.","Activity: [""Review""], EntityType: [""Legal Case Record""], Actor: []","MATCH (ent:Entity {EntityType: 'Legal Case Record'}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event {Activity: 'Review'}) WITH ent, COUNT(event) AS reviewCount WHERE reviewCount < 2 OR reviewCount > 4 WITH COUNT(ent) AS violatingEntities RETURN CASE WHEN violatingEntities > 0 THEN FALSE ELSE TRUE END AS ruleSatisfied"
"Ensure that no entity is associated with both events with activity ""Submit Proposal"" and with activity ""Approve Proposal"".","Activity: [""Submit Proposal"", ""Approve Proposal""], EntityType: [], Actor: []",MATCH (e:Entity)<-[:CORR]-(event1:Event {Activity: 'Submit Proposal'}) MATCH (e)<-[:CORR]-(event2:Event {Activity: 'Approve Proposal'}) RETURN CASE WHEN COUNT(e) = 0 THEN true ELSE false END AS ruleSatisfied
"No entity may have both ""Reset Password"" and ""Update Email"" events.","Activity: [""Reset Password"", ""Update Email""], EntityType: [], Actor: []",MATCH (e:Entity)<-[:CORR]-(event1:Event {Activity: 'Reset Password'}) MATCH (e)<-[:CORR]-(event2:Event {Activity: 'Update Email'}) RETURN CASE WHEN COUNT(e) = 0 THEN true ELSE false END AS ruleSatisfied
"Activities ""Sign In via Google"" and ""Sign In via Facebook"" cannot both occur for any entity.","Activity: [""Sign In via Google"", ""Sign In via Facebook""], EntityType: [], Actor: []",MATCH (e:Entity)<-[:CORR]-(event1:Event {Activity: 'Sign In via Google'}) MATCH (e)<-[:CORR]-(event2:Event {Activity: 'Sign In via Facebook'}) RETURN CASE WHEN COUNT(e) = 0 THEN true ELSE false END AS ruleSatisfied
"An entity cannot have both ""Generate Invoice"" and ""Cancel Invoice"" events.","Activity: [""Generate Invoice"", ""Cancel Invoice""], EntityType: [], Actor: []",MATCH (e:Entity)<-[:CORR]-(event1:Event {Activity: 'Generate Invoice'}) MATCH (e)<-[:CORR]-(event2:Event {Activity: 'Cancel Invoice'}) RETURN CASE WHEN COUNT(e) = 0 THEN true ELSE false END AS ruleSatisfied
"Activities ""Package Items"" and ""Cancel Shipment"" are mutually exclusive for all objects.","Activity: [""Package Items"", ""Cancel Shipment""], EntityType: [], Actor: []",MATCH (e:Entity)<-[:CORR]-(event1:Event {Activity: 'Package Items'}) MATCH (e)<-[:CORR]-(event2:Event {Activity: 'Cancel Shipment'}) RETURN CASE WHEN COUNT(e) = 0 THEN true ELSE false END AS ruleSatisfied
"Activities ""Open Account"" and ""Close Account"" cannot occur together for any instance.","Activity: [""Open Account"", ""Close Account""], EntityType: [], Actor: []",MATCH (e:Entity)<-[:CORR]-(event1:Event {Activity: 'Open Account'}) MATCH (e)<-[:CORR]-(event2:Event {Activity: 'Close Account'}) RETURN CASE WHEN COUNT(e) = 0 THEN true ELSE false END AS ruleSatisfied
"No entity can have both ""Start Shift"" and ""End Contract"" events.","Activity: [""Start Shift"", ""End Contract""], EntityType: [], Actor: []",MATCH (e:Entity)<-[:CORR]-(event1:Event {Activity: 'Start Shift'}) MATCH (e)<-[:CORR]-(event2:Event {Activity: 'End Contract'}) RETURN CASE WHEN COUNT(e) = 0 THEN true ELSE false END AS ruleSatisfied
"Having both ""Submit Payment"" and ""Request Refund"" events is prohibited for any object.","Activity: [""Submit Payment"", ""Request Refund""], EntityType: [], Actor: []",MATCH (e:Entity)<-[:CORR]-(event1:Event {Activity: 'Submit Payment'}) MATCH (e)<-[:CORR]-(event2:Event {Activity: 'Request Refund'}) RETURN CASE WHEN COUNT(e) = 0 THEN true ELSE false END AS ruleSatisfied
"""Initiate Case"" and ""Terminate Case"" are mutually exclusive for each object.","Activity: [""Initiate Case"", ""Terminate Case""], EntityType: [], Actor: []",MATCH (e:Entity)<-[:CORR]-(event1:Event {Activity: 'Initiate Case'}) MATCH (e)<-[:CORR]-(event2:Event {Activity: 'Terminate Case'}) RETURN CASE WHEN COUNT(e) = 0 THEN true ELSE false END AS ruleSatisfied
"Activities ""Process Payment"" and ""Refund Payment"" are mutually exclusive across all instances.","Activity: [""Process Payment"", ""Refund Payment""], EntityType: [], Actor: []",MATCH (e:Entity)<-[:CORR]-(event1:Event {Activity: 'Process Payment'}) MATCH (e)<-[:CORR]-(event2:Event {Activity: 'Refund Payment'}) RETURN CASE WHEN COUNT(e) = 0 THEN true ELSE false END AS ruleSatisfied
Logging into the system and resetting the password cannot both occur for the same entity.,"Activity: [""Log into the system"", ""Reset the password""], EntityType: [], Actor: []",MATCH (e:Entity)<-[:CORR]-(event1:Event {Activity: 'Log into the system'}) MATCH (e)<-[:CORR]-(event2:Event {Activity: 'Reset the password'}) RETURN CASE WHEN COUNT(e) = 0 THEN true ELSE false END AS ruleSatisfied
"For each entity, it is not allowed to both submit a new support ticket and close a ticket.","Activity: [""Submit a new support ticket"", ""Close a ticket""], EntityType: [], Actor: []",MATCH (e:Entity)<-[:CORR]-(event1:Event {Activity: 'Submit a new support ticket'}) MATCH (e)<-[:CORR]-(event2:Event {Activity: 'Close a ticket'}) RETURN CASE WHEN COUNT(e) = 0 THEN true ELSE false END AS ruleSatisfied
Approving an application and rejecting the same application cannot occur together for the same object.,"Activity: [""Approve an application"", ""Reject an application""], EntityType: [], Actor: []",MATCH (e:Entity)<-[:CORR]-(event1:Event {Activity: 'Approve an application'}) MATCH (e)<-[:CORR]-(event2:Event {Activity: 'Reject an application'}) RETURN CASE WHEN COUNT(e) = 0 THEN true ELSE false END AS ruleSatisfied
An order cannot be created and canceled for the same object.,"Activity: [""Create an order"", ""Cancel an order""], EntityType: [], Actor: []",MATCH (e:Entity)<-[:CORR]-(event1:Event {Activity: 'Create an order'}) MATCH (e)<-[:CORR]-(event2:Event {Activity: 'Cancel an order'}) RETURN CASE WHEN COUNT(e) = 0 THEN true ELSE false END AS ruleSatisfied
Scheduling an appointment and marking the same appointment as missed must not occur for any entity.,"Activity: [""Schedule an appointment"", ""Mark the appointment as missed""], EntityType: [], Actor: []",MATCH (e:Entity)<-[:CORR]-(event1:Event {Activity: 'Schedule an appointment'}) MATCH (e)<-[:CORR]-(event2:Event {Activity: 'Mark the appointment as missed'}) RETURN CASE WHEN COUNT(e) = 0 THEN true ELSE false END AS ruleSatisfied
No object can both involve opening a dispute and closing a dispute.,"Activity: [""Open a dispute"", ""Close a dispute""], EntityType: [], Actor: []",MATCH (e:Entity)<-[:CORR]-(event1:Event {Activity: 'Open a dispute'}) MATCH (e)<-[:CORR]-(event2:Event {Activity: 'Close a dispute'}) RETURN CASE WHEN COUNT(e) = 0 THEN true ELSE false END AS ruleSatisfied
No instance exists where clock in and clock out both happen.,"Activity: [""Clock in"", ""Clock out""], EntityType: [], Actor: []",MATCH (e:Entity)<-[:CORR]-(event1:Event {Activity: 'Clock in'}) MATCH (e)<-[:CORR]-(event2:Event {Activity: 'Clock out'}) RETURN CASE WHEN COUNT(e) = 0 THEN true ELSE false END AS ruleSatisfied
"For each object, it is allowed to either escalate an issue or resolve the issue, but not both.","Activity: [""Escalate an issue"", ""Resolve the issue""], EntityType: [], Actor: []",MATCH (e:Entity)<-[:CORR]-(event1:Event {Activity: 'Escalate an issue'}) MATCH (e)<-[:CORR]-(event2:Event {Activity: 'Resolve the issue'}) RETURN CASE WHEN COUNT(e) = 0 THEN true ELSE false END AS ruleSatisfied
"For a given object, performing both, starting production and halting production is not allowed.","Activity: [""Start production"", ""Halt production""], EntityType: [], Actor: []",MATCH (e:Entity)<-[:CORR]-(event1:Event {Activity: 'Start production'}) MATCH (e)<-[:CORR]-(event2:Event {Activity: 'Halt production'}) RETURN CASE WHEN COUNT(e) = 0 THEN true ELSE false END AS ruleSatisfied
"Either opening a case file or closing a case file can occur for a single object, but not both.","Activity: [""Open a case file"", ""Close a case file""], EntityType: [], Actor: []",MATCH (e:Entity)<-[:CORR]-(event1:Event {Activity: 'Open a case file'}) MATCH (e)<-[:CORR]-(event2:Event {Activity: 'Close a case file'}) RETURN CASE WHEN COUNT(e) = 0 THEN true ELSE false END AS ruleSatisfied
"For every product, if it is added to a catalog, it must also be marked as reviewed.","Activity: [""Add to Catalog"", ""Mark as Reviewed""], EntityType: [""Product""], Actor: []",MATCH (e1:Event {Activity: 'Add to Catalog'})-[:CORR]->(ent:Entity {EntityType: 'Product'}) WHERE NOT EXISTS { MATCH (e2:Event {Activity: 'Mark as Reviewed'})-[:CORR]->(ent) } RETURN COUNT(e1) = 0 AS ruleSatisfied
"Every time a case is created, it must also be assigned to an employee.","Activity: [""Create Case"", ""Assign to Employee""], EntityType: [""Case""], Actor: []",MATCH (e1:Event {Activity: 'Create Case'})-[:CORR]->(ent:Entity {EntityType: 'Case'}) WHERE NOT EXISTS { MATCH (e2:Event {Activity: 'Assign to Employee'})-[:CORR]->(ent) } RETURN COUNT(e1) = 0 AS ruleSatisfied
"For every item, if it is placed into a cart, it must also be purchased.","Activity: [""Add to Cart"", ""Purchase Item""], EntityType: [""Item""], Actor: []",MATCH (e1:Event {Activity: 'Add to Cart'})-[:CORR]->(ent:Entity {EntityType: 'Item'}) WHERE NOT EXISTS { MATCH (e2:Event {Activity: 'Purchase Item'})-[:CORR]->(ent) } RETURN COUNT(e1) = 0 AS ruleSatisfied
"For all orders, if an order is shipped, it must also be delivered.","Activity: [""Ship Order"", ""Deliver Order""], EntityType: [""Order""], Actor: []",MATCH (e1:Event {Activity: 'Ship Order'})-[:CORR]->(ent:Entity {EntityType: 'Order'}) WHERE NOT EXISTS { MATCH (e2:Event {Activity: 'Deliver Order'})-[:CORR]->(ent) } RETURN COUNT(e1) = 0 AS ruleSatisfied
"For every project, if it is initiated, it must also be funded.","Activity: [""Initiate Project"", ""Fund Project""], EntityType: [""Project""], Actor: []",MATCH (e1:Event {Activity: 'Initiate Project'})-[:CORR]->(ent:Entity {EntityType: 'Project'}) WHERE NOT EXISTS { MATCH (e2:Event {Activity: 'Fund Project'})-[:CORR]->(ent) } RETURN COUNT(e1) = 0 AS ruleSatisfied
"For every order, if the activity ""Submit Order"" is performed, then the activity ""Confirm Payment"" must also be performed.","Activity: [""Submit Order"", ""Confirm Payment""], EntityType: [""Order""], Actor: []",MATCH (e1:Event {Activity: 'Submit Order'})-[:CORR]->(ent:Entity {EntityType: 'Order'}) WHERE NOT EXISTS { MATCH (e2:Event {Activity: 'Confirm Payment'})-[:CORR]->(ent) } RETURN COUNT(e1) = 0 AS ruleSatisfied
"For every user session, if a user logs in, they must also log out.","Activity: [""log in"", ""log out""], EntityType: [""user session""], Actor: []",MATCH (e1:Event {Activity: 'log in'})-[:CORR]->(ent:Entity {EntityType: 'user session'}) WHERE NOT EXISTS { MATCH (e2:Event {Activity: 'log out'})-[:CORR]->(ent) } RETURN COUNT(e1) = 0 AS ruleSatisfied
"If a case is escalated, it must also be resolved for every issue.","Activity: [""escalate case"", ""resolve case""], EntityType: [""issue""], Actor: []",MATCH (e1:Event {Activity: 'escalate case'})-[:CORR]->(ent:Entity {EntityType: 'issue'}) WHERE NOT EXISTS { MATCH (e2:Event {Activity: 'resolve case'})-[:CORR]->(ent) } RETURN COUNT(e1) = 0 AS ruleSatisfied
"If an application is submitted, it must be reviewed for every job application.","Activity: [""submit application"", ""review application""], EntityType: [""job application""], Actor: []",MATCH (e1:Event {Activity: 'submit application'})-[:CORR]->(ent:Entity {EntityType: 'job application'}) WHERE NOT EXISTS { MATCH (e2:Event {Activity: 'review application'})-[:CORR]->(ent) } RETURN COUNT(e1) = 0 AS ruleSatisfied
"For any project, if the kickoff meeting is held, the first milestone must be completed.","Activity: [""kickoff meeting"", ""complete milestone""], EntityType: [""project""], Actor: []",MATCH (e1:Event {Activity: 'kickoff meeting'})-[:CORR]->(ent:Entity {EntityType: 'project'}) WHERE NOT EXISTS { MATCH (e2:Event {Activity: 'complete milestone'})-[:CORR]->(ent) } RETURN COUNT(e1) = 0 AS ruleSatisfied
"If a document is drafted, it must also be approved for every review.","Activity: [""draft document"", ""approve document""], EntityType: [""review""], Actor: []",MATCH (e1:Event {Activity: 'draft document'})-[:CORR]->(ent:Entity {EntityType: 'review'}) WHERE NOT EXISTS { MATCH (e2:Event {Activity: 'approve document'})-[:CORR]->(ent) } RETURN COUNT(e1) = 0 AS ruleSatisfied
"For every employee, if the activity ""Submit Timesheet"" is performed, then the activity ""Approve Timesheet"" must also be performed.","Activity: [""submit timesheet"", ""approve timesheet""], EntityType: [""employee""], Actor: []",MATCH (e1:Event {Activity: 'submit timesheet'})-[:CORR]->(ent:Entity {EntityType: 'employee'}) WHERE NOT EXISTS { MATCH (e2:Event {Activity: 'approve timesheet'})-[:CORR]->(ent) } RETURN COUNT(e1) = 0 AS ruleSatisfied
"For every patient, if the activity ""Schedule Appointment"" is performed, then the activity ""Confirm Appointment"" must also be performed.","Activity: [""schedule appointment"", ""confirm appointment""], EntityType: [""patient""], Actor: []",MATCH (e1:Event {Activity: 'schedule appointment'})-[:CORR]->(ent:Entity {EntityType: 'patient'}) WHERE NOT EXISTS { MATCH (e2:Event {Activity: 'confirm appointment'})-[:CORR]->(ent) } RETURN COUNT(e1) = 0 AS ruleSatisfied
"For every student, if the activity ""Enroll in Course"" is performed, then the activity ""Pay Tuition"" must also be performed.","Activity: [""Enroll in Course"", ""Pay Tuition""], EntityType: [""Student""], Actor: []",MATCH (e1:Event {Activity: 'Enroll in Course'})-[:CORR]->(ent:Entity {EntityType: 'Student'}) WHERE NOT EXISTS { MATCH (e2:Event {Activity: 'Pay Tuition'})-[:CORR]->(ent) } RETURN COUNT(e1) = 0 AS ruleSatisfied
"For every car, if an event with activity ""Book Service"" is performed, then an event with activity ""Perform Service"" must also be performed.","Activity: [""Book Service"", ""Perform Service""], EntityType: [""Car""], Actor: []",MATCH (e1:Event {Activity: 'Book Service'})-[:CORR]->(ent:Entity {EntityType: 'Car'}) WHERE NOT EXISTS { MATCH (e2:Event {Activity: 'Perform Service'})-[:CORR]->(ent) } RETURN COUNT(e1) = 0 AS ruleSatisfied
"For every project, if ""Start Project"" is performed, then ""Assign Tasks"" must also be performed.","Activity: [""Start Project"", ""Assign Tasks""], EntityType: [""Project""], Actor: []",MATCH (e1:Event {Activity: 'Start Project'})-[:CORR]->(ent:Entity {EntityType: 'Project'}) WHERE NOT EXISTS { MATCH (e2:Event {Activity: 'Assign Tasks'})-[:CORR]->(ent) } RETURN COUNT(e1) = 0 AS ruleSatisfied
"For every booking, if a ""Make Reservation"" event is performed, then a ""Confirm Reservation"" event must also occur.","Activity: [""Make Reservation"", ""Confirm Reservation""], EntityType: [""Booking""], Actor: []",MATCH (e1:Event {Activity: 'Make Reservation'})-[:CORR]->(ent:Entity {EntityType: 'Booking'}) WHERE NOT EXISTS { MATCH (e2:Event {Activity: 'Confirm Reservation'})-[:CORR]->(ent) } RETURN COUNT(e1) = 0 AS ruleSatisfied
"For every contract, if the activity ""Sign Contract"" is performed, then the activity ""Execute Contract"" must also be performed.","Activity: [""Sign Contract"", ""Execute Contract""], EntityType: [""Contract""], Actor: []",MATCH (e1:Event {Activity: 'Sign Contract'})-[:CORR]->(ent:Entity {EntityType: 'Contract'}) WHERE NOT EXISTS { MATCH (e2:Event {Activity: 'Execute Contract'})-[:CORR]->(ent) } RETURN COUNT(e1) = 0 AS ruleSatisfied
"If the activity ""Start Billing"" is performed for any customer, then an event with activity  ""Send Invoice"" must also be performed for the same customer.","Activity: [""Start Billing"", ""Send Invoice""], EntityType: [""Customer""], Actor: []",MATCH (e1:Event {Activity: 'Start Billing'})-[:CORR]->(ent:Entity {EntityType: 'Customer'}) WHERE NOT EXISTS { MATCH (e2:Event {Activity: 'Send Invoice'})-[:CORR]->(ent) } RETURN COUNT(e1) = 0 AS ruleSatisfied
"If ""Submit Ticket"" is performed for any incident, then ""Resolve Ticket"" must occur as well.","Activity: [""Submit Ticket"", ""Resolve Ticket""], EntityType: [""Incident""], Actor: []",MATCH (e1:Event {Activity: 'Submit Ticket'})-[:CORR]->(ent:Entity {EntityType: 'Incident'}) WHERE NOT EXISTS { MATCH (e2:Event {Activity: 'Resolve Ticket'})-[:CORR]->(ent) } RETURN COUNT(e1) = 0 AS ruleSatisfied
"I for a task, ""Start Task"" occurs, then the activity ""Complete Task"" must also be performed.","Activity: [""Start Task"", ""Complete Task""], EntityType: [""Task""], Actor: []",MATCH (e1:Event {Activity: 'Start Task'})-[:CORR]->(ent:Entity {EntityType: 'Task'}) WHERE NOT EXISTS { MATCH (e2:Event {Activity: 'Complete Task'})-[:CORR]->(ent) } RETURN COUNT(e1) = 0 AS ruleSatisfied
"Each order must have at least 2 activities from the set {Place Order, Confirm Payment, Ship Item} performed.","Activity: [""Place Order"", ""Confirm Payment"", ""Ship Item""], EntityType: [""Order""], Actor: []","MATCH (o:Entity {EntityType: ""Order""}) OPTIONAL MATCH (o)<-[:CORR]-(evt:Event) WITH o, COLLECT(DISTINCT evt.Activity) AS observedActivities, ['Place Order', 'Confirm Payment', 'Ship Item'] AS expectedActivities WITH observedActivities, expectedActivities, SIZE([act IN expectedActivities WHERE act IN observedActivities]) AS matchedCount WITH COLLECT(matchedCount) AS matchList RETURN CASE WHEN ANY(count IN matchList WHERE count < 2) THEN false ELSE true END AS ruleSatisfied"
"For every patient, at least 4 activities from the set {Schedule Appointment, Confirm Appointment, Prepare Treatment, Conduct Treatment} must be completed.","Activity: [""Schedule Appointment"", ""Confirm Appointment"", ""Prepare Treatment"", ""Conduct Treatment""], EntityType: [""Patient""], Actor: []","MATCH (p:Entity {EntityType: ""Patient""}) OPTIONAL MATCH (p)<-[:CORR]-(evt:Event) WITH p, COLLECT(DISTINCT evt.Activity) AS recordedActivities, ['Schedule Appointment', 'Confirm Appointment', 'Prepare Treatment', 'Conduct Treatment'] AS necessaryActivities WITH recordedActivities, necessaryActivities, SIZE([a IN necessaryActivities WHERE a IN recordedActivities]) AS matchCount WITH COLLECT(matchCount) AS allMatches RETURN CASE WHEN ANY(cnt IN allMatches WHERE cnt < 4) THEN false ELSE true END AS ruleSatisfied"
"Each student must perform at least 3 activities from Enroll in Course, Attend Lecture, Submit Assignment, Take Exam.","Activity: [""Enroll in Course"", ""Attend Lecture"", ""Submit Assignment"", ""Take Exam""], EntityType: [""Student""], Actor: []","MATCH (s:Entity {EntityType: ""Student""}) OPTIONAL MATCH (s)<-[:CORR]-(evt:Event) WITH s, COLLECT(DISTINCT evt.Activity) AS completedActivities, ['Enroll in Course', 'Attend Lecture', 'Submit Assignment', 'Take Exam'] AS requiredSteps WITH completedActivities, requiredSteps, SIZE([step IN requiredSteps WHERE step IN completedActivities]) AS stepCount WITH COLLECT(stepCount) AS stepMatches RETURN CASE WHEN ANY(cnt IN stepMatches WHERE cnt < 3) THEN false ELSE true END AS ruleSatisfied"
"For every employee, at least 2 activities from the set {Submit Report, Approve Report, Attend Meeting, Conduct Interview} must be performed.","Activity: [""Submit Report"", ""Approve Report"", ""Attend Meeting"", ""Conduct Interview""], EntityType: [""Employee""], Actor: []","MATCH (e:Entity {EntityType: ""Employee""}) OPTIONAL MATCH (e)<-[:CORR]-(evt:Event) WITH e, COLLECT(DISTINCT evt.Activity) AS executedTasks, ['Submit Report', 'Approve Report', 'Attend Meeting', 'Conduct Interview'] AS mandatoryTasks WITH executedTasks, mandatoryTasks, SIZE([task IN mandatoryTasks WHERE task IN executedTasks]) AS taskCount WITH COLLECT(taskCount) AS taskList RETURN CASE WHEN ANY(t IN taskList WHERE t < 2) THEN false ELSE true END AS ruleSatisfied"
"At least 5 activities from the set {Create Profile, Update Profile, Add Address, Verify Identity, Set Preferences} must be completed for each customer.","Activity: [""Create Profile"", ""Update Profile"", ""Add Address"", ""Verify Identity"", ""Set Preferences""], EntityType: [""Customer""], Actor: []","MATCH (c:Entity {EntityType: ""Customer""}) OPTIONAL MATCH (c)<-[:CORR]-(evt:Event) WITH c, COLLECT(DISTINCT evt.Activity) AS userActions, ['Create Profile', 'Update Profile', 'Add Address', 'Verify Identity', 'Set Preferences'] AS profileSteps WITH userActions, profileSteps, SIZE([step IN profileSteps WHERE step IN userActions]) AS verifiedSteps WITH COLLECT(verifiedSteps) AS stepCollection RETURN CASE WHEN ANY(count IN stepCollection WHERE count < 5) THEN false ELSE true END AS ruleSatisfied"
"Every contract must have at least 4 activities from Sign Contract, Submit Documents, Verify Terms, Execute Contract.","Activity: [""Sign Contract"", ""Submit Documents"", ""Verify Terms"", ""Execute Contract""], EntityType: [""Contract""], Actor: []","MATCH (contract:Entity {EntityType: ""Contract""}) OPTIONAL MATCH (contract)<-[:CORR]-(evt:Event) WITH contract, COLLECT(DISTINCT evt.Activity) AS contractActivities, ['Sign Contract', 'Submit Documents', 'Verify Terms', 'Execute Contract'] AS contractSteps WITH contractActivities, contractSteps, SIZE([step IN contractSteps WHERE step IN contractActivities]) AS fulfilledSteps WITH COLLECT(fulfilledSteps) AS stepValidation RETURN CASE WHEN ANY(count IN stepValidation WHERE count < 4) THEN false ELSE true END AS ruleSatisfied"
"At least 2 activities from the set {Create Order, Process Payment, Ship Order, Confirm Delivery} must be executed for every order.","Activity: [""Create Order"", ""Process Payment"", ""Ship Order"", ""Confirm Delivery""], EntityType: [""Order""], Actor: []","MATCH (o:Entity {EntityType: ""Order""}) OPTIONAL MATCH (o)<-[:CORR]-(evt:Event) WITH o, COLLECT(DISTINCT evt.Activity) AS trackedActivities, ['Create Order', 'Process Payment', 'Ship Order', 'Confirm Delivery'] AS requiredActions WITH trackedActivities, requiredActions, SIZE([action IN requiredActions WHERE action IN trackedActivities]) AS actionCount WITH COLLECT(actionCount) AS actionList RETURN CASE WHEN ANY(count IN actionList WHERE count < 2) THEN false ELSE true END AS ruleSatisfied"
"For every student, at least 3 activities from the set Enroll in Course, Submit Assignment, Participate in Exam, View Grades must be performed.","Activity: [""Enroll in Course"", ""Submit Assignment"", ""Participate in Exam"", ""View Grades""], EntityType: [""Student""], Actor: []","MATCH (s:Entity {EntityType: ""Student""}) OPTIONAL MATCH (s)<-[:CORR]-(evt:Event) WITH s, COLLECT(DISTINCT evt.Activity) AS studentActions, ['Enroll in Course', 'Submit Assignment', 'Participate in Exam', 'View Grades'] AS academicSteps WITH studentActions, academicSteps, SIZE([step IN academicSteps WHERE step IN studentActions]) AS stepCompleted WITH COLLECT(stepCompleted) AS stepStatus RETURN CASE WHEN ANY(count IN stepStatus WHERE count < 3) THEN false ELSE true END AS ruleSatisfied"
"For each order, at least 2 activities from the set Place Order, Confirm Payment must be performed.","Activity: [""Place Order"", ""Confirm Payment""], EntityType: [""Order""], Actor: []","MATCH (o:Entity {EntityType: ""Order""}) OPTIONAL MATCH (o)<-[:CORR]-(evt:Event) WITH o, COLLECT(DISTINCT evt.Activity) AS processActivities, ['Place Order', 'Confirm Payment'] AS keySteps WITH processActivities, keySteps, SIZE([step IN keySteps WHERE step IN processActivities]) AS stepMatchCount WITH COLLECT(stepMatchCount) AS processCheck RETURN CASE WHEN ANY(count IN processCheck WHERE count < 2) THEN false ELSE true END AS ruleSatisfied"
"For every project, at least 3 activities from the set {Initiate Project, Assign Resources, Review Progress, Complete Project} must be performed.","Activity: [""Initiate Project"", ""Assign Resources"", ""Review Progress"", ""Complete Project""], EntityType: [""Project""], Actor: []","MATCH (p:Entity {EntityType: ""Project""}) OPTIONAL MATCH (p)<-[:CORR]-(evt:Event) WITH p, COLLECT(DISTINCT evt.Activity) AS projectPhases, ['Initiate Project', 'Assign Resources', 'Review Progress', 'Complete Project'] AS milestones WITH projectPhases, milestones, SIZE([m IN milestones WHERE m IN projectPhases]) AS milestoneCount WITH COLLECT(milestoneCount) AS projectStatus RETURN CASE WHEN ANY(count IN projectStatus WHERE count < 3) THEN false ELSE true END AS ruleSatisfied"
"Each user entity must be linked to at least 2 activities out of logging in, updating the profile, or changing password.","Activity: [""Login"", ""Update Profile"", ""Change Password""], EntityType: [""User""], Actor: []","MATCH (u:Entity {EntityType: ""User""}) OPTIONAL MATCH (u)<-[:CORR]-(evt:Event) WITH u, COLLECT(DISTINCT evt.Activity) AS userEvents, ['Login', 'Update Profile', 'Change Password'] AS essentialActions WITH userEvents, essentialActions, SIZE([act IN essentialActions WHERE act IN userEvents]) AS matchedCount WITH COLLECT(matchedCount) AS matchList RETURN CASE WHEN ANY(count IN matchList WHERE count < 2) THEN false ELSE true END AS ruleSatisfied"
"For every employee object, at least 3 activities out of submitting tasks, reviewing reports, or attending meetings must be performed.","Activity: [""Submit Task"", ""Review Report"", ""Attend Meeting""], EntityType: [""Employee""], Actor: []","MATCH (e:Entity {EntityType: ""Employee""}) OPTIONAL MATCH (e)<-[:CORR]-(evt:Event) WITH e, COLLECT(DISTINCT evt.Activity) AS jobTasks, ['Submit Task', 'Review Report', 'Attend Meeting'] AS criticalDuties WITH jobTasks, criticalDuties, SIZE([duty IN criticalDuties WHERE duty IN jobTasks]) AS dutyMatch WITH COLLECT(dutyMatch) AS matchSummary RETURN CASE WHEN ANY(count IN matchSummary WHERE count < 3) THEN false ELSE true END AS ruleSatisfied"
"At least 4 activities from the set {Complete Profile, Verify Identity, Add Contact Info, Set Preferences} must be completed for each client.","Activity: [""Complete Profile"", ""Verify Identity"", ""Add Contact Info"", ""Set Preferences""], EntityType: [""Client""], Actor: []","MATCH (c:Entity {EntityType: ""Client""}) OPTIONAL MATCH (c)<-[:CORR]-(evt:Event) WITH c, COLLECT(DISTINCT evt.Activity) AS clientActions, ['Complete Profile', 'Verify Identity', 'Add Contact Info', 'Set Preferences'] AS requiredSteps WITH clientActions, requiredSteps, SIZE([step IN requiredSteps WHERE step IN clientActions]) AS completedSteps WITH COLLECT(completedSteps) AS completionList RETURN CASE WHEN ANY(count IN completionList WHERE count < 4) THEN false ELSE true END AS ruleSatisfied"
"Every product must go through at least 3 activities out of receiving the product, inspecting quality, or packaging it for shipment.","Activity: [""Receive Product"", ""Inspect Quality"", ""Package for Shipment""], EntityType: [""Product""], Actor: []","MATCH (p:Entity {EntityType: ""Product""}) OPTIONAL MATCH (p)<-[:CORR]-(evt:Event) WITH p, COLLECT(DISTINCT evt.Activity) AS productLifecycle, ['Receive Product', 'Inspect Quality', 'Package for Shipment'] AS keyProcesses WITH productLifecycle, keyProcesses, SIZE([process IN keyProcesses WHERE process IN productLifecycle]) AS processMatch WITH COLLECT(processMatch) AS processCheck RETURN CASE WHEN ANY(count IN processCheck WHERE count < 3) THEN false ELSE true END AS ruleSatisfied"
"At least 2 activities from the set {Create Order, Process Payment, Ship Product, Confirm Delivery} must be executed for every order.","Activity: [""Create Order"", ""Process Payment"", ""Ship Product"", ""Confirm Delivery""], EntityType: [""Order""], Actor: []","MATCH (o:Entity {EntityType: ""Order""}) OPTIONAL MATCH (o)<-[:CORR]-(evt:Event) WITH o, COLLECT(DISTINCT evt.Activity) AS orderProcess, ['Create Order', 'Process Payment', 'Ship Product', 'Confirm Delivery'] AS mandatorySteps WITH orderProcess, mandatorySteps, SIZE([step IN mandatorySteps WHERE step IN orderProcess]) AS stepCount WITH COLLECT(stepCount) AS stepList RETURN CASE WHEN ANY(count IN stepList WHERE count < 2) THEN false ELSE true END AS ruleSatisfied"
"Every student must complete at least 3 activities from enrolling in a course, submitting assignments, or participating in exams.","Activity: [""Enroll in Course"", ""Submit Assignment"", ""Participate in Exam""], EntityType: [""Student""], Actor: []","MATCH (s:Entity {EntityType: ""Student""}) OPTIONAL MATCH (s)<-[:CORR]-(evt:Event) WITH s, COLLECT(DISTINCT evt.Activity) AS academicProgress, ['Enroll in Course', 'Submit Assignment', 'Participate in Exam'] AS educationMilestones WITH academicProgress, educationMilestones, SIZE([milestone IN educationMilestones WHERE milestone IN academicProgress]) AS progressCount WITH COLLECT(progressCount) AS progressSummary RETURN CASE WHEN ANY(count IN progressSummary WHERE count < 3) THEN false ELSE true END AS ruleSatisfied"
"For each service request, at least 2 activities from creating the request, resolving the issue, or closing the request must be performed.","Activity: [""Create Request"", ""Resolve Issue"", ""Close Request""], EntityType: [""Service Request""], Actor: []","MATCH (sr:Entity {EntityType: ""Service Request""}) OPTIONAL MATCH (sr)<-[:CORR]-(evt:Event) WITH sr, COLLECT(DISTINCT evt.Activity) AS serviceProcess, ['Create Request', 'Resolve Issue', 'Close Request'] AS resolutionSteps WITH serviceProcess, resolutionSteps, SIZE([step IN resolutionSteps WHERE step IN serviceProcess]) AS resolvedCount WITH COLLECT(resolvedCount) AS resolutionCheck RETURN CASE WHEN ANY(count IN resolutionCheck WHERE count < 2) THEN false ELSE true END AS ruleSatisfied"
"Every item must have in at least 2 activities from creating the order, confirming the payment, or shipping the item.","Activity: [""Create Order"", ""Confirm Payment"", ""Ship Item""], EntityType: [""Item""], Actor: []","MATCH (ent:Entity {EntityType: ""Item""}) OPTIONAL MATCH (ent)<-[:CORR]-(ev:Event) WITH ent, COLLECT(DISTINCT ev.Activity) AS activities, ['Create Order', 'Confirm Payment', 'Ship Item'] AS requiredActivities WITH activities, requiredActivities, SIZE([activity IN requiredActivities WHERE activity IN activities]) AS countRequired WITH COLLECT(countRequired) AS counts RETURN CASE WHEN ANY(count IN counts WHERE count < 2) THEN false ELSE true END AS ruleSatisfied"
"For each contract, at least 3 activities from drafting the contract, negotiating terms, or finalizing the contract must be completed.","Activity: [""Draft Contract"", ""Negotiate Terms"", ""Finalize Contract""], EntityType: [""Contract""], Actor: []","MATCH (ent:Entity {EntityType: ""Contract""}) OPTIONAL MATCH (ent)<-[:CORR]-(ev:Event) WITH ent, COLLECT(DISTINCT ev.Activity) AS activities, ['Draft Contract', 'Negotiate Terms', 'Finalize Contract'] AS requiredActivities WITH activities, requiredActivities, SIZE([activity IN requiredActivities WHERE activity IN activities]) AS countRequired WITH COLLECT(countRequired) AS counts RETURN CASE WHEN ANY(count IN counts WHERE count < 3) THEN false ELSE true END AS ruleSatisfied"
"The average service time of an entity of entity type ""Customer"" is smaller than 5 hours.","Activity: [], EntityType: [""Customer""], Actor: []","MATCH (ent:Entity {EntityType: ""Customer""})<-[:CORR]-(e:Event) WITH ent, MIN(e.timestamp) as earliestEvent, MAX(e.timestamp) as latestEvent WITH duration.between(earliestEvent, latestEvent) AS serviceTime RETURN AVG(serviceTime.seconds) < (5 * 60 * 60) AS ruleSatisfied"
The maximum service time of product entities is greater than 2 hours.,"Activity: [ ], EntityType: [""product""], Actor: [ ]","MATCH (ent:Entity {EntityType: ""product""})<-[:CORR]-(e:Event) WITH ent, MIN(e.timestamp) as earliestEvent, MAX(e.timestamp) as latestEvent WITH duration.between(earliestEvent, latestEvent) AS serviceTime RETURN MAX(serviceTime.seconds) > (2 * 60 * 60) AS ruleSatisfied"
"The minimum service time of an entity of entity type ""Employee"" is smaller than 1 day.","Activity: [ ], EntityType: [""employee""], Actor: [ ]","MATCH (ent:Entity {EntityType: ""employee""})<-[:CORR]-(e:Event) WITH ent, MIN(e.timestamp) as earliestEvent, MAX(e.timestamp) as latestEvent WITH duration.between(earliestEvent, latestEvent) AS serviceTime RETURN MIN(serviceTime.seconds) < (24 * 60 * 60) AS ruleSatisfied"
"The average service time of an entity of entity type ""Supplier"" is greater than 3 hours.","Activity: [ ], EntityType: [""supplier""], Actor: [ ]","MATCH (ent:Entity {EntityType: ""supplier""})<-[:CORR]-(e:Event) WITH ent, MIN(e.timestamp) as earliestEvent, MAX(e.timestamp) as latestEvent WITH duration.between(earliestEvent, latestEvent) AS serviceTime RETURN AVG(serviceTime.seconds) > (3 * 60 * 60) AS ruleSatisfied"
The maximum service time machines is smaller than 4 hours.,"Activity: [ ], EntityType: [""machine""], Actor: [ ]","MATCH (ent:Entity {EntityType: ""machine""})<-[:CORR]-(e:Event) WITH ent, MIN(e.timestamp) as earliestEvent, MAX(e.timestamp) as latestEvent WITH duration.between(earliestEvent, latestEvent) AS serviceTime RETURN MAX(serviceTime.seconds) < (4 * 60 * 60) AS ruleSatisfied"
"The average service time of an entity of entity type ""Patient"" is greater than 6 hours.","Activity: [ ], EntityType: [""patient""], Actor: [ ]","MATCH (ent:Entity {EntityType: ""patient""})<-[:CORR]-(e:Event) WITH ent, MIN(e.timestamp) as earliestEvent, MAX(e.timestamp) as latestEvent WITH duration.between(earliestEvent, latestEvent) AS serviceTime RETURN AVG(serviceTime.seconds) > (6 * 60 * 60) AS ruleSatisfied"
"The minimum service time of ""Vehicle"" objects is greater than 1 hour.","Activity: [ ], EntityType: [""vehicle""], Actor: [ ]","MATCH (ent:Entity {EntityType: ""vehicle""})<-[:CORR]-(e:Event) WITH ent, MIN(e.timestamp) as earliestEvent, MAX(e.timestamp) as latestEvent WITH duration.between(earliestEvent, latestEvent) AS serviceTime RETURN MIN(serviceTime.seconds) > (1 * 60 * 60) AS ruleSatisfied"
The maximum service time of machines is smaller than 30 minutes.,"Activity: [ ], EntityType: [""machine""], Actor: [ ]","MATCH (ent:Entity {EntityType: ""machine""})<-[:CORR]-(e:Event) WITH ent, MIN(e.timestamp) as earliestEvent, MAX(e.timestamp) as latestEvent WITH duration.between(earliestEvent, latestEvent) AS serviceTime RETURN MAX(serviceTime.seconds) < (30 * 60) AS ruleSatisfied"
"The average service time of entities of entity type ""Policyholder"" is smaller than 8 hours.","Activity: [ ], EntityType: [""policyholder""], Actor: [ ]","MATCH (ent:Entity {EntityType: ""policyholder""})<-[:CORR]-(e:Event) WITH ent, MIN(e.timestamp) as earliestEvent, MAX(e.timestamp) as latestEvent WITH duration.between(earliestEvent, latestEvent) AS serviceTime RETURN AVG(serviceTime.seconds) < (8 * 60 * 60) AS ruleSatisfied"
"The minimum service time of ""Inspection"" entities is greater than 12 hours.","Activity: [ ], EntityType: [""inspection""], Actor: [ ]","MATCH (ent:Entity {EntityType: ""inspection""})<-[:CORR]-(e:Event) WITH ent, MIN(e.timestamp) as earliestEvent, MAX(e.timestamp) as latestEvent WITH duration.between(earliestEvent, latestEvent) AS serviceTime RETURN MIN(serviceTime.seconds) > (12 * 60 * 60) AS ruleSatisfied"
"A ""Customer"" entity exists at most 48 hours.","Activity: [], EntityType: [""Customer""], Actor: []","MATCH (ent:Entity {EntityType: ""Customer""})<-[:CORR]-(e:Event) WITH ent, MIN(e.timestamp) as earliestEvent, MAX(e.timestamp) as latestEvent WITH duration.between(earliestEvent, latestEvent) AS serviceTime RETURN MAX(serviceTime.seconds) <= (48 * 60 * 60) AS ruleSatisfied"
Products exist at least 5 days on average.,"Activity: [], EntityType: [""Product""], Actor: []","MATCH (ent:Entity {EntityType: ""Product""})<-[:CORR]-(e:Event) WITH ent, MIN(e.timestamp) as earliestEvent, MAX(e.timestamp) as latestEvent WITH duration.between(earliestEvent, latestEvent) AS serviceTime RETURN AVG(serviceTime.seconds) >= (5 * 24 * 60 * 60) AS ruleSatisfied"
"A ""Supplier"" entity exists at most 1 hour.","Activity: [], EntityType: [""Supplier""], Actor: []","MATCH (ent:Entity {EntityType: ""Supplier""})<-[:CORR]-(e:Event) WITH ent, MIN(e.timestamp) as earliestEvent, MAX(e.timestamp) as latestEvent WITH duration.between(earliestEvent, latestEvent) AS serviceTime RETURN MAX(serviceTime.seconds) <= (60 * 60) AS ruleSatisfied"
"A ""Machine"" entity exists at least 2 days on average.","Activity: [], EntityType: [""Machine""], Actor: []","MATCH (ent:Entity {EntityType: ""Machine""})<-[:CORR]-(e:Event) WITH ent, MIN(e.timestamp) as earliestEvent, MAX(e.timestamp) as latestEvent WITH duration.between(earliestEvent, latestEvent) AS serviceTime RETURN AVG(serviceTime.seconds) >= (2 * 24 * 60 * 60) AS ruleSatisfied"
"A ""Taxpayer"" object exists at most 3 days.","Activity: [], EntityType: [""Taxpayer""], Actor: []","MATCH (ent:Entity {EntityType: ""Taxpayer""})<-[:CORR]-(e:Event) WITH ent, MIN(e.timestamp) as earliestEvent, MAX(e.timestamp) as latestEvent WITH duration.between(earliestEvent, latestEvent) AS serviceTime RETURN MAX(serviceTime.seconds) <= (3 * 24 * 60 * 60) AS ruleSatisfied"
"On average, each ""Patient"" object exists at least 1 week.","Activity: [], EntityType: [""Patient""], Actor: []","MATCH (ent:Entity {EntityType: ""Patient""})<-[:CORR]-(e:Event) WITH ent, MIN(e.timestamp) as earliestEvent, MAX(e.timestamp) as latestEvent WITH duration.between(earliestEvent, latestEvent) AS serviceTime RETURN AVG(serviceTime.seconds) >= (7 * 24 * 60 * 60) AS ruleSatisfied"
"A ""Vehicle"" entity exists at most 2 hours.","Activity: [], EntityType: [""Vehicle""], Actor: []","MATCH (ent:Entity {EntityType: ""Vehicle""})<-[:CORR]-(e:Event) WITH ent, MIN(e.timestamp) as earliestEvent, MAX(e.timestamp) as latestEvent WITH duration.between(earliestEvent, latestEvent) AS serviceTime RETURN MAX(serviceTime.seconds) <= (2 * 60 * 60) AS ruleSatisfied"
"Each ""Product"" entity exists at least 3 hours on average.","Activity: [], EntityType: [""Product""], Actor: []","MATCH (ent:Entity {EntityType: ""Product""})<-[:CORR]-(e:Event) WITH ent, MIN(e.timestamp) as earliestEvent, MAX(e.timestamp) as latestEvent WITH duration.between(earliestEvent, latestEvent) AS serviceTime RETURN AVG(serviceTime.seconds) >= (3 * 60 * 60) AS ruleSatisfied"
"Every ""Policyholder"" entity exists at most 6 hours.","Activity: [], EntityType: [""Policyholder""], Actor: []","MATCH (ent:Entity {EntityType: ""Policyholder""})<-[:CORR]-(e:Event) WITH ent, MIN(e.timestamp) as earliestEvent, MAX(e.timestamp) as latestEvent WITH duration.between(earliestEvent, latestEvent) AS serviceTime RETURN MAX(serviceTime.seconds) <= (6 * 60 * 60) AS ruleSatisfied"
A task of creating an invoice must be completed before the task of shipping an order can take place.,"Activity: [""Create Invoice"", ""Ship Order""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Ship Order""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Create Invoice""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e2, count(e1) AS precedingInvoiceCount RETURN CASE WHEN any(e IN collect(precedingInvoiceCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
Submitting a request must occur before approving it.,"Activity: [""Request Submitted"", ""Approval Granted""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Approval Granted""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Request Submitted""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e2, count(e1) AS precedingRequestCount RETURN CASE WHEN any(e IN collect(precedingRequestCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
A payment action must be performed before a shipment can be initiated.,"Activity: [""Payment Processed"", ""Shipment Initiated""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Shipment Initiated""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Payment Processed""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e2, count(e1) AS precedingPaymentCount RETURN CASE WHEN any(e IN collect(precedingPaymentCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
The invoice creation must occur before the payment can be processed for the same order.,"Activity: [""Create Invoice"", ""Payment Processed""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Payment Processed""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Create Invoice""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e2, count(e1) AS precedingInvoiceCount RETURN CASE WHEN any(e IN collect(precedingInvoiceCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
A refund must be completed before an exchange can occur for the same product.,"Activity: [""Refund Processed"", ""Exchange Processed""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Exchange Processed""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Refund Processed""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e2, count(e1) AS precedingRefundCount RETURN CASE WHEN any(e IN collect(precedingRefundCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
The booking of an appointment must happen before the actual service can be rendered.,"Activity: [""Appointment Booked"", ""Service Rendered""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Service Rendered""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Appointment Booked""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e2, count(e1) AS precedingBookingCount RETURN CASE WHEN any(e IN collect(precedingBookingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
A product must be added to a cart before it can be purchased.,"Activity: [""Product Added to Cart"", ""Product Purchased""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Product Purchased""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Product Added to Cart""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e2, count(e1) AS precedingCartCount RETURN CASE WHEN any(e IN collect(precedingCartCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
A service request must be logged before the service technician can be dispatched.,"Activity: [""Service Request Logged"", ""Service Technician Dispatched""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Service Technician Dispatched""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Service Request Logged""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e2, count(e1) AS precedingRequestCount RETURN CASE WHEN any(e IN collect(precedingRequestCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
An employee must be hired before they can start working.,"Activity: [""Employee Hired"", ""Employee Started Working""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Employee Started Working""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Employee Hired""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e2, count(e1) AS precedingHireCount RETURN CASE WHEN any(e IN collect(precedingHireCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"For a given object, an event of type ""Submit Report"" must occur prior to the execution of an event of type ""Publish Report"".","Activity: [""Submit Report"", ""Publish Report""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Publish Report""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Submit Report""})-[:CORR]->(entity:Entity) WHERE e1.timestamp < e2.timestamp WITH e2, count(e1) AS precedingSubmitCount RETURN CASE WHEN any(e IN collect(precedingSubmitCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"The task ""Approve Document"" must be completed before the task ""Sign Document"" can take place.","Activity: [""Approve Document"", ""Sign Document""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Sign Document""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Approve Document""})-[:CORR]->(entity:Entity) WHERE e1.timestamp < e2.timestamp WITH e2, count(e1) AS precedingApproveCount RETURN CASE WHEN any(e IN collect(precedingApproveCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"An activity of type ""Launch Campaign"" is a prerequisite for performing an event of type ""Close Campaign"".","Activity: [""Launch Campaign"", ""Close Campaign""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Close Campaign""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Launch Campaign""})-[:CORR]->(entity:Entity) WHERE e1.timestamp < e2.timestamp WITH e2, count(e1) AS precedingLaunchCount RETURN CASE WHEN any(e IN collect(precedingLaunchCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Before the activity ""Ship Order"" can occur, an event of type ""Place Order"" must have been executed.","Activity: [""Place Order"", ""Ship Order""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Ship Order""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Place Order""})-[:CORR]->(entity:Entity) WHERE e1.timestamp < e2.timestamp WITH e2, count(e1) AS precedingPlaceCount RETURN CASE WHEN any(e IN collect(precedingPlaceCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"For a given entity, a task of type ""Complete Project"" can only be performed after a task of type ""Begin Project"" has been completed before.","Activity: [""Begin Project"", ""Complete Project""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Complete Project""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Begin Project""})-[:CORR]->(entity:Entity) WHERE e1.timestamp < e2.timestamp WITH e2, count(e1) AS precedingBeginCount RETURN CASE WHEN any(e IN collect(precedingBeginCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Execution of the activity ""Generate Receipt"" is contingent upon the prior occurrence of the activity ""Receive Payment"".","Activity: [""Receive Payment"", ""Generate Receipt""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Generate Receipt""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Receive Payment""})-[:CORR]->(entity:Entity) WHERE e1.timestamp < e2.timestamp WITH e2, count(e1) AS precedingPaymentCount RETURN CASE WHEN any(e IN collect(precedingPaymentCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"An ""End Meeting"" task can only occur if a ""Start Meeting"" task has been performed beforehand for a given entity.","Activity: [""Start Meeting"", ""End Meeting""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""End Meeting""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Start Meeting""})-[:CORR]->(entity:Entity) WHERE e1.timestamp < e2.timestamp WITH e2, count(e1) AS precedingStartCount RETURN CASE WHEN any(e IN collect(precedingStartCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"To perform an event with activity ""Complete Task"", an event with activity ""Create Task"" must first take place.","Activity: [""Create Task"", ""Complete Task""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Complete Task""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Create Task""})-[:CORR]->(entity:Entity) WHERE e1.timestamp < e2.timestamp WITH e2, count(e1) AS precedingCreateCount RETURN CASE WHEN any(e IN collect(precedingCreateCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If an event with activity ""Enroll Student"" occurs, an event with activity ""Graduate Student"" must have occurred before for the same entity.","Activity: [""Enroll Student"", ""Graduate Student""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Enroll Student""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Graduate Student""})-[:CORR]->(entity:Entity) WHERE e1.timestamp < e2.timestamp WITH e2, count(e1) AS precedingEnrollCount RETURN CASE WHEN any(e IN collect(precedingEnrollCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"For a given object, if an event of type ""Create Invoice"" is performed, an event of type ""Clear Invoice"" must follow.","Activity: [""Create Invoice"", ""Clear Invoice""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Invoice""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Clear Invoice""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If the task ""Approve Purchase"" is executed, the task ""Process Payment"" must take place afterward.","Activity: [""Approve Purchase"", ""Process Payment""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Approve Purchase""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Process Payment""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Performing an event of type ""Order Shipped"" necessitates the execution of an event of type ""Create Invoice"" at some point after.","Activity: [""Order Shipped"", ""Create Invoice""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Order Shipped""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Create Invoice""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If ""Approve Order"" is carried out, ""Ship Order"" must occur afterwards.","Activity: [""Approve Order"", ""Ship Order""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Approve Order""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Ship Order""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"For a given entity, the completion of a task of type ""Start Production"" requires a task of type ""Finish Production"" to be performed afterward.","Activity: [""Start Production"", ""Finish Production""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Start Production""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Finish Production""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Execution of an event with activity ""Release Product"" is mandated following the performance of an event with activity ""Finalize Design.""","Activity: [""Finalize Design"", ""Release Product""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Finalize Design""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Release Product""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If an event involving activity ""Complete Project"" occurs, an event involving activity ""Close Project"" must occur afterward.","Activity: [""Complete Project"", ""Close Project""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Complete Project""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Close Project""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Whenever activity ""Apply Discount"" takes place, activity ""Generate Invoice"" must be performed at some point afterward.","Activity: [""Apply Discount"", ""Generate Invoice""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Apply Discount""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Generate Invoice""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If an event with activity ""Start Task"" occurs, an event with activity ""Finish Task"" must occur afterward for the same entity.","Activity: [""start task"", ""finish task""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""start task""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""finish task""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If the task of approving a document is performed, the task of signing the document must take place afterward.","Activity: [""approving document"", ""signing document""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""approving document""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""signing document""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Once an order is placed, the payment must be processed afterward.","Activity: [""placing order"", ""processing payment""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""placing order""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""processing payment""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After an employee is hired, the employee training session must be conducted.","Activity: [""hiring employee"", ""employee training""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""hiring employee""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""employee training""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If a customer places a complaint, the issue resolution must be initiated afterward.","Activity: [""placing complaint"", ""initiating resolution""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""placing complaint""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""initiating resolution""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After a product design is completed, the manufacturing process must be started.","Activity: [""completing product design"", ""starting manufacturing""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""completing product design""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""starting manufacturing""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"When a user registers for an event, the confirmation email must be sent afterward.","Activity: [""user registration"", ""sending confirmation email""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""user registration""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""sending confirmation email""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Once a task is assigned to an employee, the task completion must be logged afterward.","Activity: [""assigning task"", ""logging task completion""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""assigning task""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""logging task completion""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If an invoice is generated for a customer, the payment for the invoice must be processed afterward.","Activity: [""generating invoice"", ""processing payment""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""generating invoice""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""processing payment""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After a contract is signed, the payment confirmation must be processed afterward.","Activity: [""Signing Contract"", ""Processing Payment Confirmation""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Signing Contract""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Processing Payment Confirmation""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If an employee submits a timesheet, the manager must approve it within 3 days.","Activity: [""Submitting Timesheet"", ""Approving Timesheet""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Submitting Timesheet""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Approving Timesheet""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e2.timestamp <= e1.timestamp + duration({days: 3}) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After a user places an order, the payment must be processed within 2 hours.","Activity: [""Placing Order"", ""Processing Payment""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Placing Order""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Processing Payment""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e2.timestamp <= e1.timestamp + duration({hours: 2}) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If an employee is hired, the onboarding process must be completed within 5 days.","Activity: [""Hiring Employee"", ""Onboarding Process""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Hiring Employee""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Onboarding Process""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e2.timestamp <= e1.timestamp + duration({days: 5}) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"When a customer places a complaint, the resolution must be initiated within 7 days.","Activity: [""Placing Complaint"", ""Initiating Resolution""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Placing Complaint""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Initiating Resolution""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e2.timestamp <= e1.timestamp + duration({days: 7}) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Once a customer places an order, a shipping confirmation must be sent within 48 hours.","Activity: [""Placing Order"", ""Sending Shipping Confirmation""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Placing Order""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Sending Shipping Confirmation""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e2.timestamp <= e1.timestamp + duration({hours: 48}) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After a product design is finalized, the manufacturing process must begin within 10 days.","Activity: [""Finalizing Product Design"", ""Starting Manufacturing""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Finalizing Product Design""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Starting Manufacturing""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e2.timestamp <= e1.timestamp + duration({days: 10}) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If an order is confirmed, the shipment must be processed within 72 hours.","Activity: [""Confirming Order"", ""Processing Shipment""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Confirming Order""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Processing Shipment""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e2.timestamp <= e1.timestamp + duration({hours: 72}) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If a project is initiated, a project meeting must occur within 14 days.","Activity: [""Initiating Project"", ""Holding Project Meeting""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Initiating Project""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Holding Project Meeting""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e2.timestamp <= e1.timestamp + duration({days: 14}) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If an employee completes a training course, the certification must be issued within 30 days.","Activity: [""Completing Training Course"", ""Issuing Certification""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Completing Training Course""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Issuing Certification""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e2.timestamp <= e1.timestamp + duration({days: 30}) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"For a given object, if an event of type ""File Tax Return"" occurs, then an event of type ""Approve Tax Return"" must follow within the time frame of 15 days.","Activity: [""File Tax Return"", ""Approve Tax Return""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""File Tax Return""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Approve Tax Return""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e2.timestamp <= e1.timestamp + duration({days: 15}) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After performing a task of type ""Submit Application,"" a task of type ""Schedule Interview"" must be carried out within the subsequent period of 7 days.","Activity: [""Submit Application"", ""Schedule Interview""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Submit Application""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Schedule Interview""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e2.timestamp <= e1.timestamp + duration({days: 7}) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If activity ""Order Parts"" is executed, activity ""Assemble Product"" must be performed within the defined time span of 48 hours afterward.","Activity: [""Order Parts"", ""Assemble Product""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Order Parts""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Assemble Product""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e2.timestamp <= e1.timestamp + duration({hours: 48}) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Completion of activity ""Diagnose Issue"" necessitates that activity ""Resolve Issue"" is performed within the succeeding time period of 5 days.","Activity: [""Diagnose Issue"", ""Resolve Issue""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Diagnose Issue""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Resolve Issue""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e2.timestamp <= e1.timestamp + duration({days: 5}) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If an event with activity ""Create Contract"" is carried out, then an event with activity ""Sign Contract"" must follow no later than 3 days afterward.","Activity: [""Create Contract"", ""Sign Contract""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Contract""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Sign Contract""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e2.timestamp <= e1.timestamp + duration({days: 3}) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Execution of ""Plan Event"" requires that ""Book Venue"" is conducted within time span of 14 days thereafter.","Activity: [""Plan Event"", ""Book Venue""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Plan Event""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Book Venue""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e2.timestamp <= e1.timestamp + duration({days: 14}) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If event ""Submit Review"" occurs, event ""Publish Review"" must happen within 24 hours afterward for the relevant object.","Activity: [""Submit Review"", ""Publish Review""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Submit Review""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Publish Review""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e2.timestamp <= e1.timestamp + duration({hours: 24}) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Following the performance of activity ""Start Manufacturing"", activity ""Complete Manufacturing"" must occur within the specified period of 10 days.","Activity: [""Start Manufacturing"", ""Complete Manufacturing""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Start Manufacturing""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Complete Manufacturing""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e2.timestamp <= e1.timestamp + duration({days: 10}) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If an event of type ""Submit Report"" occurs, then either an event of type ""Approve Report"", an event of type ""Request Revision"", or both must follow.","Activity: [""Submit Report"", ""Approve Report"", ""Request Revision""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Submit Report""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Approve Report""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Request Revision""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Following the execution of a task of type ""Inspect Product"", at least one of the tasks ""Mark Defect"" or ""Approve Quality"" must be performed.","Activity: [""Inspect Product"", ""Mark Defect"", ""Approve Quality""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Inspect Product""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Mark Defect""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Approve Quality""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If an event of type ""Send Invoice"" is carried out, it is required that an event of type ""Receive Payment"" or ""Issue Reminder"" (or both) take place afterward.","Activity: [""Send Invoice"", ""Receive Payment"", ""Issue Reminder""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Send Invoice""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Receive Payment""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Issue Reminder""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After performing activity ""Place Order"", at least one among ""Ship Order"" and ""Cancel Order"" must be executed.","Activity: [""Place Order"", ""Ship Order"", ""Cancel Order""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Place Order""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Ship Order""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Cancel Order""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"For a given object, ""Login"" or ""Password Reset"" (or both) must occur following the execution of ""Account Lock"".","Activity: [""Account Lock"", ""Login"", ""Password Reset""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Account Lock""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Login""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Password Reset""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If a task of type ""Request Approval"" is completed, then one or both of the tasks ""Approve Request"" and ""Reject Request"" must follow.","Activity: [""Request Approval"", ""Approve Request"", ""Reject Request""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Request Approval""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Approve Request""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Reject Request""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Execution of an event with activity ""Create Account"" requires that at least one of the activities ""Verify Email"" or ""Add Payment Info"" occurs afterward.","Activity: [""Create Account"", ""Verify Email"", ""Add Payment Info""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Account""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Verify Email""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Add Payment Info""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If a task ""Submit Application"" is performed, then either task ""Schedule Interview"" or task ""Send Rejection Letter"" (or both) must be conducted afterward.","Activity: [""Submit Application"", ""Schedule Interview"", ""Send Rejection Letter""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Submit Application""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Schedule Interview""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Send Rejection Letter""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If a task involving the registration of a new account is carried out, then either verifying the email or adding payment details (or both) must follow.","Activity: [""Create Account"", ""Verify Email"", ""Add Payment Info""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Account""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Verify Email""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Add Payment Info""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Following the submission of a purchase request, at least one of approving the request or marking it as needing clarification must be performed afterward.","Activity: [""Submit Purchase Request"", ""Approve Request"", ""Mark Clarification Needed""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Submit Purchase Request""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Approve Request""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Mark Clarification Needed""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If a ticket is created for a customer issue, then resolving the ticket or escalating it to a supervisor must occur afterward.","Activity: [""Create Ticket"", ""Resolve Ticket"", ""Escalate Ticket""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Ticket""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Resolve Ticket""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Escalate Ticket""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If an employee clock-in occurs, then logging the start of work or reporting to a supervisor (or both) must follow.","Activity: [""Employee Clock-In"", ""Log Start of Work"", ""Report to Supervisor""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Employee Clock-In""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Log Start of Work""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Report to Supervisor""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If a contract draft is shared with a client, then feedback must be received from the client or the contract must be signed within the next 14 days.","Activity: [""Share Draft"", ""Receive Feedback"", ""Sign Contract""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Share Draft""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Receive Feedback""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e2.timestamp <= e1.timestamp + duration({days: 14}) OPTIONAL MATCH (e3:Event {Activity: ""Sign Contract""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp AND e3.timestamp <= e1.timestamp + duration({days: 14}) WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If a shipment is dispatched, then delivering the shipment or marking it as returned must follow.","Activity: [""Dispatch Shipment"", ""Deliver Shipment"", ""Mark Shipment Returned""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Dispatch Shipment""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Deliver Shipment""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Mark Shipment Returned""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Following the initiation of a refund process, refund approval or rejection must occur.","Activity: [""Initiate Refund"", ""Approve Refund"", ""Reject Refund""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Initiate Refund""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Approve Refund""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Reject Refund""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If a claim is submitted, then verifying the claim or rejecting it (or both) must occur afterward.","Activity: [""Submit Claim"", ""Verify Claim"", ""Reject Claim""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Submit Claim""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Verify Claim""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Reject Claim""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If an onboarding session is scheduled for an employee, then completing the session or rescheduling it must happen afterward.","Activity: [""Schedule Onboarding"", ""Complete Onboarding"", ""Reschedule Onboarding""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Schedule Onboarding""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Complete Onboarding""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Reschedule Onboarding""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If an initial consultation is held with a client, then either drafting a proposal or scheduling a follow-up meeting (or both) must follow.","Activity: [""Initial Consultation"", ""Draft Proposal"", ""Schedule Follow-Up""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Initial Consultation""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Draft Proposal""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Schedule Follow-Up""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If a task involving the registration of a new account is carried out, then either verifying the email or adding payment details (or both) must follow.","Activity: [""Create Account"", ""Verify Email"", ""Add Payment Info""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Account""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Verify Email""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Add Payment Info""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Following the submission of a purchase request, at least one of approving the request or marking it as needing clarification must be performed afterward.","Activity: [""Submit Purchase Request"", ""Approve Request"", ""Mark Clarification Needed""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Submit Purchase Request""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Approve Request""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Mark Clarification Needed""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If a ticket is created for a customer issue, then resolving the ticket or escalating it to a supervisor must occur afterward.","Activity: [""Create Ticket"", ""Resolve Ticket"", ""Escalate Ticket""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Ticket""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Resolve Ticket""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Escalate Ticket""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If an employee clock-in occurs, then logging the start of work or reporting to a supervisor (or both) must follow.","Activity: [""Employee Clock-In"", ""Log Start of Work"", ""Report to Supervisor""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Employee Clock-In""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Log Start of Work""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Report to Supervisor""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If a contract draft is shared with a client, then feedback must be received from the client or the contract must be signed within the next 14 days.","Activity: [""Share Draft"", ""Receive Feedback"", ""Sign Contract""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Share Draft""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Receive Feedback""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e2.timestamp <= e1.timestamp + duration({days: 14}) OPTIONAL MATCH (e3:Event {Activity: ""Sign Contract""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp AND e3.timestamp <= e1.timestamp + duration({days: 14}) WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If a shipment is dispatched, then delivering the shipment or marking it as returned must follow.","Activity: [""Dispatch Shipment"", ""Deliver Shipment"", ""Mark Shipment Returned""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Dispatch Shipment""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Deliver Shipment""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Mark Shipment Returned""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Following the initiation of a refund process, refund approval or rejection must occur.","Activity: [""Initiate Refund"", ""Approve Refund"", ""Reject Refund""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Initiate Refund""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Approve Refund""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Reject Refund""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If a claim is submitted, then verifying the claim or rejecting it (or both) must occur afterward.","Activity: [""Submit Claim"", ""Verify Claim"", ""Reject Claim""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Submit Claim""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Verify Claim""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Reject Claim""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If an onboarding session is scheduled for an employee, then completing the session or rescheduling it must happen afterward.","Activity: [""Schedule Onboarding"", ""Complete Onboarding"", ""Reschedule Onboarding""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Schedule Onboarding""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Complete Onboarding""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Reschedule Onboarding""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If an initial consultation is held with a client, then either drafting a proposal or scheduling a follow-up meeting (or both) must follow.","Activity: [""Initial Consultation"", ""Draft Proposal"", ""Schedule Follow-Up""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Initial Consultation""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Draft Proposal""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Schedule Follow-Up""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Each time an item is delivered, it must be immediately preceded by its shipment dispatch for the same object.","Activity: [""deliver item"", ""dispatch shipment""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""deliver item""}) OPTIONAL MATCH (e1:Event {Activity: ""dispatch shipment""})-[:DF]->(e2) WITH e2, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Before generating an invoice, there must always be a directly preceding order approval event for the same instance.","Activity: [""generate invoice"", ""approve order""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""generate invoice""}) OPTIONAL MATCH (e1:Event {Activity: ""approve order""})-[:DF]->(e2) WITH e2, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Whenever an appointment is confirmed, scheduling the appointment must directly precede it.","Activity: [""confirm appointment"", ""schedule appointment""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""confirm appointment""}) OPTIONAL MATCH (e1:Event {Activity: ""schedule appointment""})-[:DF]->(e2) WITH e2, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"For every meal served, an order for that meal must have been placed directly beforehand.","Activity: [""serve meal"", ""place order""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""serve meal""}) OPTIONAL MATCH (e1:Event {Activity: ""place order""})-[:DF]->(e2) WITH e2, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Before marking a task as completed, it must be assigned to a user immediately beforehand.","Activity: [""mark task completed"", ""assign task""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""mark task completed""}) OPTIONAL MATCH (e1:Event {Activity: ""assign task""})-[:DF]->(e2) WITH e2, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Each time a shipment is packaged, its corresponding order must have been verified directly beforehand.","Activity: [""package shipment"", ""verify order""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""package shipment""}) OPTIONAL MATCH (e1:Event {Activity: ""verify order""})-[:DF]->(e2) WITH e2, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Whenever a product is added to inventory, its production must immediately precede it for the same object.","Activity: [""add to inventory"", ""produce item""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""add to inventory""}) OPTIONAL MATCH (e1:Event {Activity: ""produce item""})-[:DF]->(e2) WITH e2, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Before signing off a report, the report must be drafted immediately beforehand for the same entity.","Activity: [""sign report"", ""draft report""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""sign report""}) OPTIONAL MATCH (e1:Event {Activity: ""draft report""})-[:DF]->(e2) WITH e2, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Before uploading a document to the server, the document must be created immediately beforehand for the same instance.","Activity: [""upload document"", ""create document""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""upload document""}) OPTIONAL MATCH (e1:Event {Activity: ""create document""})-[:DF]->(e2) WITH e2, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Each time a ""Schedule Meeting"" event occurs, it must be immediately preceded by a ""Confirm Availability"" event for the same object.","Activity: [""Schedule Meeting"", ""Confirm Availability""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Schedule Meeting""}) OPTIONAL MATCH (e1:Event {Activity: ""Confirm Availability""})-[:DF]->(e2) WITH e2, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Every time the ""Prepare Presentation"" activity is completed, it must be immediately preceded by a ""Gather Materials"" task for the same entity.","Activity: [""Prepare Presentation"", ""Gather Materials""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Prepare Presentation""}) OPTIONAL MATCH (e1:Event {Activity: ""Gather Materials""})-[:DF]->(e2) WITH e2, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Directly before the ""Submit Invoice"" activity is carried out, the ""Create Invoice"" activity must always be completed.","Activity: [""Submit Invoice"", ""Create Invoice""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Submit Invoice""}) OPTIONAL MATCH (e1:Event {Activity: ""Create Invoice""})-[:DF]->(e2) WITH e2, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"A ""Check Inventory"" event must always happen directly before a ""Place Order"" eventcan occur for the same instance.","Activity: [""Check Inventory"", ""Place Order""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Place Order""}) OPTIONAL MATCH (e1:Event {Activity: ""Check Inventory""})-[:DF]->(e2) WITH e2, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If an event with activity ""Book Flight"" occurs, it must be immediately preceded by a ""Confirm Availability"" event for the same traveler.","Activity: [""Book Flight"", ""Confirm Availability""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Book Flight""}) OPTIONAL MATCH (e1:Event {Activity: ""Confirm Availability""})-[:DF]->(e2) WITH e2, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Every time a ""Complete Survey"" event occurs, it must be immediately preceded by a ""Send Invitation"" event for the same respondent.","Activity: [""Complete Survey"", ""Send Invitation""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Complete Survey""}) OPTIONAL MATCH (e1:Event {Activity: ""Send Invitation""})-[:DF]->(e2) WITH e2, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Every ""Publish Article"" event must be immediately preceded by a ""Write Article"" event for the same writer.","Activity: [""Publish Article"", ""Write Article""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Publish Article""}) OPTIONAL MATCH (e1:Event {Activity: ""Write Article""})-[:DF]->(e2) WITH e2, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Every time the ""Send Email"" activity occurs, it must be immediately preceded by a ""Create Report"" event for the same employee.","Activity: [""Send Email"", ""Create Report""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Send Email""}) OPTIONAL MATCH (e1:Event {Activity: ""Create Report""})-[:DF]->(e2) WITH e2, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Each time a ""Submit Feedback"" event occurs, it must be directly preceded by a ""Complete Survey"" event for the same participant.","Activity: [""Submit Feedback"", ""Complete Survey""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Submit Feedback""}) OPTIONAL MATCH (e1:Event {Activity: ""Complete Survey""})-[:DF]->(e2) WITH e2, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If the activity ""Create Invoice"" occurs, then the activity ""Create Order"" cannot be performed before it.","Activity: [""Create Invoice"", ""Create Order""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Create Invoice""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Create Order""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"If a ""Login"" event occurs, then the ""Logout"" event may not occur before the ""Login"" for the same object.","Activity: [""Login"", ""Logout""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Login""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Logout""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"When an event of type ""Start Work"" occurs, no event of type ""End Work"" may occur before it for the same instance.","Activity: [""Start Work"", ""End Work""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Start Work""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""End Work""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"When a ""Booking"" event occurs, a ""Payment"" event must not have occurred before it for the same entity.","Activity: [""Booking"", ""Payment""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Booking""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Payment""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"If an event of type ""Check-out"" occurs, a ""Reservation"" event must not have occurred before for the same object.","Activity: [""Check-out"", ""Reservation""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Check-out""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Reservation""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"If a ""Start Task"" event happens, a ""Finish Task"" event must not have happened before it for the same entity.","Activity: [""Start Task"", ""Finish Task""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Start Task""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Finish Task""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"If a ""Start Session"" event occurs, a ""End Session"" event cannot occur before it.","Activity: [""Start Session"", ""End Session""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Start Session""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""End Session""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"If an ""Add to Cart"" event occurs, a ""Proceed to Checkout"" event must not have happened before it.","Activity: [""Add to Cart"", ""Proceed to Checkout""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Add to Cart""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Proceed to Checkout""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"When a ""Make Payment"" event occurs, the ""Place Order"" event must not have occurred before it for the same object.","Activity: [""Make Payment"", ""Place Order""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Make Payment""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Place Order""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"Before the meeting starts, setting up the projector is not allowed.","Activity: [""Set Up Projector"", ""Meeting Start""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Meeting Start""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Set Up Projector""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
Cleaning the classroom cannot happen before the students leave.,"Activity: [""Clean Classroom"", ""Students Leave""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Students Leave""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Clean Classroom""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
You can’t start the dishwasher until the dishes are loaded.,"Activity: [""Start Dishwasher"", ""Load Dishes""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Load Dishes""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Start Dishwasher""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
You cannot clock out of work before you’ve clocked in.,"Activity: [""Clock out"", ""Clock in""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Clock in""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Clock out""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
Taking a test cannot happen before attending the lecture.,"Activity: [""Take Test"", ""Attend Lecture""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Attend Lecture""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Take Test""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
A customer cannot be refunded before their purchase has been recorded.,"Activity: [""Refund Issued"", ""Purchase Recorded""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Purchase Recorded""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Refund Issues""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
Uploading a file is not possible before creating a folder for it.,"Activity: [""Upload File"", ""Create Folder""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Create Folder""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Upload File""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
Reading the ending of a book is not allowed before finishing the middle chapters.,"Activity: [""Read Ending"", ""Read Middle Chapters""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Read Middle Chapters""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Read Ending""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
The coffee machine cannot start brewing before the coffee grounds are added.,"Activity: [""Start Brewing"", ""Add Coffee Grounds""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Add Coffee Grounds""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Start Brewing""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
Turning off the lights in the room is not possible before checking that everyone has left.,"Activity: [""Turn Off Lights"", ""Check Everyone Left""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Check Everyone Left""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Turn Off Lights""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
You cannot start preparing lunch within 1 hour before breakfast is completed.,"Activity: [""Prepare Lunch"", ""Complete Breakfast""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Complete Breakfast""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Prepare Lunch""})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({hours: 1}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
Washing the car must not be done within 2 days before purchasing car cleaning supplies.,"Activity: [""Wash Car"", ""Purchase Car Cleaning Supplies""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Purchase Car Cleaning Supplies""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Wash Car""})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({days: 2}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
A patient’s follow-up appointment must not be scheduled within 14 days before their initial visit.,"Activity: [""Follow-Up Appointment"", ""Initial Visit""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Initial Visit""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Follow-Up Appointment""})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({days: 14}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
Submitting an assignment is not allowed within 48 hours before the deadline.,"Activity: [""Submit Assignment"", ""Assignment Deadline""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Assignment Deadline""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Submit Assignment""})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({hours: 48}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
You cannot begin grading an exam within 12 hours before the exam is submitted.,"Activity: [""Grade Exam"", ""Submit Exam""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Submit Exam""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Grade Exam""})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({hours: 12}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
Installing software updates is not allowed within 7 days before a server maintenance activity.,"Activity: [""Install Software Update"", ""Server Maintenance""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Server Maintenance""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Install Software Update""})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({days: 7}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
You cannot start the production process within 2 hours before testing the production equipment.,"Activity: [""Start Production"", ""Test Production Equipment""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Test Production Equipment""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Start Production""})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({hours: 2}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
No pre-flight checks can be performed within 24 hours before the flight takes off.,"Activity: [""Perform Pre-Flight Check"", ""Flight Take-Off""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Flight Take-Off""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Perform Pre-Flight Check""})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({hours: 24}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
An inspection cannot be conducted within 10 days before an object is delivered to the customer.,"Activity: [""Conduct Inspection"", ""Deliver to Customer""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Deliver to Customer""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Conduct Inspection""})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({days: 10}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
Starting engine repairs must not be allowed within 3 hours before diagnosing the engine issues.,"Activity: [""Start Engine Repairs"", ""Diagnose Engine Issues""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Diagnose Engine Issues""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Start Engine Repairs""})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({hours: 3}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"Activity ""Send Email"" cannot be executed within 1 hour before activity ""Approve Document"" is performed.","Activity: [""Send Email"", ""Approve Document""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Approve Document""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Send Email""})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({hours: 1}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"Activity ""Launch Campaign"" must not take place within 7 days prior to the execution of activity ""Market Analysis"".","Activity: [""launch campaign"", ""market analysis""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""market analysis""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""launch campaign""})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({days: 7}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"Task ""Inspect Shipment"" is not allowed to occur within 2 days before task ""Load Shipment"" is executed.","Activity: [""inspect shipment"", ""load shipment""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""load shipment""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""inspect shipment""})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({days: 2}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"Activity ""Test Software"" must not occur before activity ""Deploy Software"" is performed within a time window of 3 hours.","Activity: [""test software"", ""deploy software""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""deploy software""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""test software""})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({hours: 3}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"Task ""Audit Records"" must not be executed within 4 hours before task ""Submit Financial Report"" for a given object.","Activity: [""audit records"", ""submit financial report""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""submit financial report""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""audit records""})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({hours: 4}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"Activity ""Check Inventory"" must not happen within 6 hours prior to the performance of activity ""Restock Inventory"".","Activity: [""check inventory"", ""restock inventory""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""restock inventory""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""check inventory""})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({hours: 6}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"Activity ""Assign Task"" is restricted from being performed within 2 days before activity ""Task Completion"" is executed.","Activity: [""assign task"", ""task completion""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""task completion""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""assign task""})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({days: 2}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"An event of type ""Start Maintenance"" is prohibited from occurring within 1 hour before an event of type ""Inspect Machine"" is performed for a given object.","Activity: [""start maintenance"", ""inspect machine""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""inspect machine""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""start maintenance""})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({hours: 1}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"If for a given entity, events with activity ""Create Order"" and ""Create Invoice"" are performed, at least 2 days must lie between those two events.","Activity: [""create order"", ""create invoice""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Create Order"" AND e2.Activity = ""Create Invoice"" AND abs(duration.between(e1.timestamp, e2.timestamp).seconds) < (2*24*60*60) RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS rule_satisfied"
"The time between the execution of activity ""Create Payment"" and activity ""Confirm Order"" must be at most 3 days for a given entity.","Activity: [""Create Payment"", ""Confirm Order""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Create Payment"" AND e2.Activity = ""Confirm Order"" AND abs(duration.between(e1.timestamp, e2.timestamp).seconds) > (3*24*60*60) RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS rule_satisfied;"
"The execution of activity ""Create Order"" and activity ""Process Payment"" must be separated by exactly 1 day for each entity.","Activity: [""Create Order"", ""Process Payment""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Create Order"" AND e2.Activity = ""Process Payment"" AND abs(duration.between(e1.timestamp, e2.timestamp).seconds) <> (24*60*60) RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS rule_satisfied;"
"If events of activity ""Complete Order"" and ""Create Invoice"" occur for a given entity, at least 5 days must separate these two events.","Activity: [""Complete Order"", ""Create Invoice""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Complete Order"" AND e2.Activity = ""Create Invoice"" AND abs(duration.between(e1.timestamp, e2.timestamp).seconds) < (5*24*60*60) RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS rule_satisfied;"
"The time period between the execution of activity ""Approve Order"" and ""Ship Products"" must be at most 7 days for each entity.","Activity: [""Approve Order"", ""Ship Products""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Approve Order"" AND e2.Activity = ""Ship Products"" AND abs(duration.between(e1.timestamp, e2.timestamp).seconds) > (7*24*60*60) RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS rule_satisfied;"
"The execution of activity ""Receive Payment"" and activity ""Update Inventory"" must be separated by at least 2 days for every entity.","Activity: [""Receive Payment"", ""Update Inventory""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Receive Payment"" AND e2.Activity = ""Update Inventory"" AND abs(duration.between(e1.timestamp, e2.timestamp).seconds) < (2*24*60*60) RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS rule_satisfied;"
"If events with activity ""Process Order"" and ""Close Case"" occur for a given entity, exactly 3 days must separate these two events.","Activity: [""Process Order"", ""Close Case""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Process Order"" AND e2.Activity = ""Close Case"" AND abs(duration.between(e1.timestamp, e2.timestamp).seconds) <> (3*24*60*60) RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS rule_satisfied;"
"There must be at least 1 day between the execution of activity ""Manage Files"" and ""Approve Invoice"" for every entity.","Activity: [""Manage Files"", ""Approve Invoice""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Manage Files"" AND e2.Activity = ""Approve Invoice"" AND abs(duration.between(e1.timestamp, e2.timestamp).seconds) < (1*24*60*60) RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS rule_satisfied;"
"The execution of activity ""Start Building"" and activity ""Ship Order"" must be separated by at least 10 days for each entity.","Activity: [""Start Building"", ""Ship Order""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Start Building"" AND e2.Activity = ""Ship Order"" AND abs(duration.between(e1.timestamp, e2.timestamp).seconds) < (10*24*60*60) RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS rule_satisfied;"
"If for a given entity, a product is created and feedback is received, there must be at least 7 days in between.","Activity: [""Create Product"", ""Receive Feedback""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Create Product"" AND e2.Activity = ""Receive Feedback"" AND abs(duration.between(e1.timestamp, e2.timestamp).seconds) < (7*24*60*60) RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS rule_satisfied;"
Receiving the pay and shipping the product for the same instance may not be separated by less than 3 days.,"Activity: [""Receive Pay"", ""Ship Product""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Receive Pay"" AND e2.Activity = ""Ship Product"" AND abs(duration.between(e1.timestamp, e2.timestamp).seconds) > (3*24*60*60) RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS rule_satisfied;"
"Between submitting a report and the sending of the application, there must be exactly 2 days.","Activity: [""Submit Report"", ""Send Application""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Submit Report"" AND e2.Activity = ""Send Application"" AND abs(duration.between(e1.timestamp, e2.timestamp).seconds) <> (2*24*60*60) RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS rule_satisfied;"
"Between the start of process 1 and the start of process 2, no more than 5 days should pass.","Activity: [""Start Process 1"", ""Start Process 1""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Start Process 1"" AND e2.Activity = ""Start Process 1"" AND abs(duration.between(e1.timestamp, e2.timestamp).seconds) > (5*24*60*60) RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS rule_satisfied;"
"If an order is processed and the payment is confirmed for the same entity, at most 1 day must lie between these two events.","Activity: [""Process Order"", ""Confirm Payment""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Process Order"" AND e2.Activity = ""Confirm Payment"" AND abs(duration.between(e1.timestamp, e2.timestamp).seconds) > (1*24*60*60) RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS rule_satisfied;"
"Between a ticket being raised and an issue being resolved for the same object, there should be no more than 4 days.","Activity: [""Raise Ticket"", ""Resolve Issue""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Raise Ticket"" AND e2.Activity = ""Resolve Issue"" AND abs(duration.between(e1.timestamp, e2.timestamp).seconds) > (4*24*60*60) RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS rule_satisfied;"
"Between the creation of a customer account and an order being placed for the same entity, there should be at least 1 day.","Activity: [""Create Account"", ""Place Order""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Create Account"" AND e2.Activity = ""Place Order"" AND abs(duration.between(e1.timestamp, e2.timestamp).seconds) < (1*24*60*60)RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS rule_satisfied;"
"Between sending a return and the completion of the payment, no more than 3 days should pass.","Activity: [""Sending Return"", ""Complete Payment""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Sending Return"" AND e2.Activity = ""Complete Payment"" AND abs(duration.between(e1.timestamp, e2.timestamp).seconds) > (3*24*60*60) RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS rule_satisfied;"
The time between doing laundry and cooking dinner must be at least 2 days.,"Activity: [""Do Laundry"", ""Cook Dinner""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Do Laundry"" AND e2.Activity = ""Cook Dinner"" AND abs(duration.between(e1.timestamp, e2.timestamp).seconds) < (2*24*60*60) RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS rule_satisfied;"
"Between the approval of a request and the campaign launch, at most 10 days may lie in between.","Activity: [""Approve Request"", ""Launch Campaign""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Approve Request"" AND e2.Activity = ""Launch Campaign"" AND abs(duration.between(e1.timestamp, e2.timestamp).seconds) > (10*24*60*60) RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS rule_satisfied;"
"If an order is created, it must be created before December 31st, 2023.","Activity: [""Create Order""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Create Order""}) WHERE date(e.timestamp) >= date(""2023-12-31"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"When a new account is created, it must happen before June 1st, 2022.","Activity: [""Create Account""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Create Account""}) WHERE date(e.timestamp) >= date(""2022-06-01"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"A product must always be shipped after March 15th, 2024.","Activity: [""Ship Product""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Ship Product""}) WHERE date(e.timestamp) < = date(""2024-03-15"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"A loan request must always be approved before January 1st, 2023.","Activity: [""Approve Loan""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Approve Loan""}) WHERE date(e.timestamp) >= date(""2023-01-01"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"When a support ticket is resolved, it must be resolved before April 1st, 2024.","Activity: [""Resolve Support Ticket""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Resolve Support Ticket""}) WHERE date(e.timestamp) >= date(""2024-04-01"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"Whenever a customer confirms an order, the order must be confirmed before May 1st, 2023.","Activity: [""Confirm Order""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Confirm Order""}) WHERE date(e.timestamp) >= date(""2023-05-01"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"If an employee submits a time sheet, it must be submitted before September 30th, 2021.","Activity: [""Submit Timesheet""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Submit Timesheet""}) WHERE date(e.timestamp) >= date(""2021-09-30"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"A meeting must always be scheduled before March 10th, 2025.","Activity: [""Schedule Meeting""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Schedule Meeting""}) WHERE date(e.timestamp) >= date(""2025-03-10"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"Whenever a loan application is submitted, it must be submitted before November 15th, 2022.","Activity: [""Submit Loan Application""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Submit Loan Application""}) WHERE date(e.timestamp) >= date(""2022-11-15"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"A product must always be inspected before June 1st, 2023.","Activity: [""Inspect Product""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Inspect Product""}) WHERE date(e.timestamp) >= date(""2023-06-01"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"Creating an order must not be performed after June 1st, 2023.","Activity: [""Create Order""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Create Order""}) WHERE date(e.timestamp) > date(""2023-06-01"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"If an activity ""Issue Invoice"" is performed, it must be completed before December 25th, 2022.","Activity: [""Issue Invoice""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Issue Invoice""}) WHERE date(e.timestamp) >= date(""2022-12-25"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"If an activity ""Process Payment"" is performed, it must occur after January 1st, 2021.","Activity: [""Process Payment""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Process Payment""}) WHERE date(e.timestamp) <= date(""2021-01-01"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"Whenever the activity ""Place Order"" is performed, it must be completed before February 15th, 2023.","Activity: [""Place Order""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Place Order""}) WHERE date(e.timestamp) >= date(""2023-02-15"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"An event with activity ""Create Account"" must not be completed after November 20th, 2021.","Activity: [""Create Account""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Create Account""}) WHERE date(e.timestamp) > date(""2021-11-20"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"If the activity ""Submit Report"" is performed, it must be done before October 10th, 2022.","Activity: [""Submit Report""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Submit Report""}) WHERE date(e.timestamp) >= date(""2022-10-10"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"If the activity ""Schedule Meeting"" is performed, it must be done before January 15th, 2022.","Activity: [""Schedule Meeting""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Schedule Meeting""}) WHERE date(e.timestamp) >= date(""2022-01-15"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"Activity ""Approve Leave Request"" must not occur later than April 5th, 2021.","Activity: [""Approve Leave Request""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Approve Leave Request""}) WHERE date(e.timestamp) > date(""2021-04-05"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"If the activity ""Cancel Reservation"" is performed, it must be completed before August 1st, 2022.","Activity: [""Cancel Reservation""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Cancel Reservation""}) WHERE date(e.timestamp) >= date(""2022-08-01"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"""Ship Product"" may not occur after November 30th, 2021.","Activity: [""Ship Product""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Ship Product""}) WHERE date(e.timestamp) > date(""2021-11-30"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"An event with activity ""Create Order"" is immediately followed by an event with activity ""Create Invoice"" at least 3 times.","Activity: [""Create Order"", ""Create Invoice""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Order""})-[:DF]->(e2:Event {Activity:""Create Invoice""}) RETURN COUNT(DISTINCT e1)>=3 AS ruleSatisfied"
"Activity ""Approve Leave Request"" is directly followed by activity ""Notify Employee"" at most 2 times.","Activity: [""Approve Leave Request"", ""Notify Employee""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Approve Leave Request""})-[:DF]->(e2:Event {Activity:""Notify Employee""}) RETURN COUNT(DISTINCT e1)<=2 AS ruleSatisfied"
"Activity ""Place Order"" is directly followed by activity ""Process Payment"" at least 5 times.","Activity: [""Place Order"", ""Process Payment""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Place Order""})-[:DF]->(e2:Event {Activity:""Process Payment""}) RETURN COUNT(DISTINCT e1)>=5 AS ruleSatisfied"
"""Ship Product"" is immediately followed by ""Generate Invoice"" at most 1 time.","Activity: [""Ship Product"", ""Generate Invoice""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Ship Product""})-[:DF]->(e2:Event {Activity:""Generate Invoice""}) RETURN COUNT(DISTINCT e1)<=1 AS ruleSatisfied"
"A ""Submit Report"" event is directly followed by an ""Approve Report"" event at least 4 times.","Activity: [""Submit Report"", ""Approve Report""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Submit Report""})-[:DF]->(e2:Event {Activity:""Approve Report""}) RETURN COUNT(DISTINCT e1)>=4 AS ruleSatisfied"
"An event ""Create Account"" is directly succeeded by an event ""Confirm Registration"" at most 3 times.","Activity: [""Create Account"", ""Confirm Registration""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Account""})-[:DF]->(e2:Event {Activity:""Confirm Registration""}) RETURN COUNT(DISTINCT e1)<=3 AS ruleSatisfied"
"Activity ""Cancel Order"" is directly followed by ""Notify Customer"" at least 2 times.","Activity: [""Cancel Order"", ""Notify Customer""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Cancel Order""})-[:DF]->(e2:Event {Activity:""Notify Customer""}) RETURN COUNT(DISTINCT e1)>=2 AS ruleSatisfied"
"Activity ""Approve Application"" is immediately succeeded by ""Notify Candidate"" at most 4 times.","Activity: [""Approve Application"", ""Notify Candidate""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Approve Application""})-[:DF]->(e2:Event {Activity:""Notify Candidate""}) RETURN COUNT(DISTINCT e1)<=4 AS ruleSatisfied"
"An event ""Process Payment"" is directly followed by an event ""Ship Product"" at least 6 times.","Activity: [""Process Payment"", ""Ship Product""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Process Payment""})-[:DF]->(e2:Event {Activity:""Ship Product""}) RETURN COUNT(DISTINCT e1)>=6 AS ruleSatisfied"
"""Schedule Meeting"" is directly followed by ""Send Confirmation"" no more than 3 times.","Activity: [""Schedule Meeting"", ""Send Confirmation""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Schedule Meeting""})-[:DF]->(e2:Event {Activity:""Send Confirmation""}) RETURN COUNT(DISTINCT e1)<=3 AS ruleSatisfied"
"There are at least 2 instances where directly after a customer places a support ticket, an agent responds to it.","Activity: [""Place Support Ticket"", ""Respond Support Ticket""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Place Support Ticket""})-[:DF]->(e2:Event {Activity:""Respond Support Ticket""}) RETURN COUNT(DISTINCT e1)>=2 AS ruleSatisfied"
"At least 3 times, when a team submits a report, it is immediately reviewed by a supervisor.","Activity: [""Submit Report"", ""Review Report""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Submit Report""})-[:DF]->(e2:Event {Activity:""Review Report""}) RETURN COUNT(DISTINCT e1)>=3 AS ruleSatisfied"
No more than 1 time it happens that loan application being submitted is immediately followed by reviewing it.,"Activity: [""Submit Loan Application"", ""Review Loan Application""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Submit Loan Application""})-[:DF]->(e2:Event {Activity:""Review Loan Application""}) RETURN COUNT(DISTINCT e1)<=1 AS ruleSatisfied"
"There are at most 2 instances where if a customer cancels an order, it is processed in the system immediately after.","Activity: [""Cancel Order"", ""Process Cancelled Order""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Cancel Order""})-[:DF]->(e2:Event {Activity:""Process Cancelled Order""}) RETURN COUNT(DISTINCT e1)<=2 AS ruleSatisfied"
"No fewer than 3 times it happens that immediately after the creation of a purchase order, the inventory is updated .","Activity: [""Create Purchase Order"", ""Update Inventory""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Purchase Order""})-[:DF]->(e2:Event {Activity:""Update Inventory""}) RETURN COUNT(DISTINCT e1)>=3 AS ruleSatisfied"
"It happens at most 1 time that directly after conducting an employee performance review, the employee's salary is adjusted.","Activity: [""Conduct Performance Review"", ""Adjust Salary""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Conduct Performance Review""})-[:DF]->(e2:Event {Activity:""Adjust Salary""}) RETURN COUNT(DISTINCT e1)<=1 AS ruleSatisfied"
No less than 2 times the case occurs that an order being returned is directly folowed by initiation of the refund process.,"Activity: [""Return Order"", ""Initiate Refund""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Return Order""})-[:DF]->(e2:Event {Activity:""Initiate Refund""}) RETURN COUNT(DISTINCT e1)>=2 AS ruleSatisfied"
"When submitting a travel expense report, no more than 3 times it is reviewed directly after.","Activity: [""Submit Travel Expense Report"", ""Review Travel Expense Report""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Submit Travel Expense Report""})-[:DF]->(e2:Event {Activity:""Review Travel Expense Report""}) RETURN COUNT(DISTINCT e1)<=3 AS ruleSatisfied"
An employee logging working hours is directly followed by the payroll being processed no less than 2 times.,"Activity: [""Log Working Hours"", ""Process Payroll""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Log Working Hours""})-[:DF]->(e2:Event {Activity:""Process Payroll""}) RETURN COUNT(DISTINCT e1)>=2 AS ruleSatisfied"
"No more than 3 times it happens that when a customer places an order, it is eventually followed by a shipment of that order.","Activity: [""Place Order"", ""Ship Order""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Place Order""})-[:CORR]->(entity)<-[:CORR]-(e2:Event {Activity: ""Ship Order""}) WHERE e2.timestamp > e1.timestamp RETURN CASE WHEN COUNT(e1) <= 3 THEN true ELSE false END AS ruleSatisfied"
"A user uploading a file, is eventually followed by a review of the file no fewer than 2 times.","Activity: [""Upload File"", ""Review File""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Upload File""})-[:CORR]->(entity)<-[:CORR]-(e2:Event {Activity: ""Review File""}) WHERE e2.timestamp > e1.timestamp RETURN CASE WHEN COUNT(e1) >= 2 THEN true ELSE false END AS ruleSatisfied"
A product return must be eventually followed by an inventory check no more than 4 times.,"Activity: [""Return Product"", ""Check Inventory""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Return Product""})-[:CORR]->(entity)<-[:CORR]-(e2:Event {Activity: ""Check Inventory""}) WHERE e2.timestamp > e1.timestamp RETURN CASE WHEN COUNT(e1) <= 4 THEN true ELSE false END AS ruleSatisfied"
"There is at least one occurrence where after an employee logs their working hours, a payroll processing event occurs at some later point.","Activity: [""Log Working Hours"", ""Process Payroll""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Log Working Hours""})-[:CORR]->(entity)<-[:CORR]-(e2:Event {Activity: ""Process Payroll""}) WHERE e2.timestamp > e1.timestamp RETURN CASE WHEN COUNT(e1) >= 1 THEN true ELSE false END AS ruleSatisfied"
It occurs at most 2 times that a loan application being submitted is eventually followed by a review of that loan application.,"Activity: [""Submit Loan Application"", ""Review Loan Application""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Submit Loan Application""})-[:CORR]->(entity)<-[:CORR]-(e2:Event {Activity: ""Review Loan Application""}) WHERE e2.timestamp > e1.timestamp RETURN CASE WHEN COUNT(e1) <= 2 THEN true ELSE false END AS ruleSatisfied"
Submitting an expense report must be followed by an approval event at some point at least 3 times.,"Activity: [""Submit Expense Report"", ""Approve Expense Report""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Submit Expense Report""})-[:CORR]->(entity)<-[:CORR]-(e2:Event {Activity: ""Approve Expense Report""}) WHERE e2.timestamp > e1.timestamp RETURN CASE WHEN COUNT(e1) >= 3 THEN true ELSE false END AS ruleSatisfied"
A submission of a customer feedback form be followed by a customer satisfaction survey at some point at most 5 times.,"Activity: [""Submit Feedback Form"", ""Send Satisfaction Survey""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Submit Feedback Form""})-[:CORR]->(entity)<-[:CORR]-(e2:Event {Activity: ""Send Satisfaction Survey""}) WHERE e2.timestamp > e1.timestamp RETURN CASE WHEN COUNT(e1) <= 5 THEN true ELSE false END AS ruleSatisfied"
"There are at least 2 instances where a project proposal being submitted, is eventually followed by a project review.","Activity: [""Submit Project Proposal"", ""Review Project Proposal""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Submit Project Proposal""})-[:CORR]->(entity)<-[:CORR]-(e2:Event {Activity: ""Review Project Proposal""}) WHERE e2.timestamp > e1.timestamp RETURN CASE WHEN COUNT(e1) >= 2 THEN true ELSE false END AS ruleSatisfied"
"No more than 3 times it happens that after submitting an invoice, payment processing eventually follows.","Activity: [""Submit Invoice"", ""Process Payment""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Submit Invoice""})-[:CORR]->(entity)<-[:CORR]-(e2:Event {Activity: ""Process Payment""}) WHERE e2.timestamp > e1.timestamp RETURN CASE WHEN COUNT(e1) <= 3 THEN true ELSE false END AS ruleSatisfied"
"The activity ""Approve Application"" must eventually be followed by ""Process Payment"" at least 3 times.","Activity: [""approve application"", ""process payment""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""approve application""})-[:CORR]->(entity)<-[:CORR]-(e2:Event {Activity: ""process payment""}) WHERE e2.timestamp > e1.timestamp RETURN CASE WHEN COUNT(e1) >= 3 THEN true ELSE false END AS ruleSatisfied"
"An event with activity ""Check Availability"" should be eventually followed by ""Confirm Booking"" no more than 2 times.","Activity: [""check availability"", ""confirm booking""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""check availability""})-[:CORR]->(entity)<-[:CORR]-(e2:Event {Activity: ""confirm booking""}) WHERE e2.timestamp > e1.timestamp RETURN CASE WHEN COUNT(e1) <= 2 THEN true ELSE false END AS ruleSatisfied"
"Activity ""Prepare Invoice"" is eventually followed by activity ""Send Invoice"" at least 5 times.","Activity: [""prepare invoice"", ""send invoice""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""prepare invoice""})-[:CORR]->(entity)<-[:CORR]-(e2:Event {Activity: ""send invoice""}) WHERE e2.timestamp > e1.timestamp RETURN CASE WHEN COUNT(e1) >= 5 THEN true ELSE false END AS ruleSatisfied"
"Activity ""Start Project"" is eventually followed by ""Complete Project"" no fewer than 4 times.","Activity: [""start project"", ""complete project""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""start project""})-[:CORR]->(entity)<-[:CORR]-(e2:Event {Activity: ""complete project""}) WHERE e2.timestamp > e1.timestamp RETURN CASE WHEN COUNT(e1) >= 4 THEN true ELSE false END AS ruleSatisfied"
"Activity ""Open Ticket"" is eventually succeeded by ""Close Ticket"" no more than 3 times.","Activity: [""open ticket"", ""close ticket""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""open ticket""})-[:CORR]->(entity)<-[:CORR]-(e2:Event {Activity: ""close ticket""}) WHERE e2.timestamp > e1.timestamp RETURN CASE WHEN COUNT(e1) <= 3 THEN true ELSE false END AS ruleSatisfied"
"There are at most 2 instances where an event with activity ""Receive Feedback"" is eventually followed by an event with activity ""Implement Feedback"".","Activity: [""receive feedback"", ""implement feedback""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""receive feedback""})-[:CORR]->(entity)<-[:CORR]-(e2:Event {Activity: ""implement feedback""}) WHERE e2.timestamp > e1.timestamp RETURN CASE WHEN COUNT(e1) <= 2 THEN true ELSE false END AS ruleSatisfied"
"The activity ""Book Consultation"" is followed by ""Provide Consultation"" at some point after at least 3 times.","Activity: [""book consultation"", ""provide consultation""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""book consultation""})-[:CORR]->(entity)<-[:CORR]-(e2:Event {Activity: ""provide consultation""}) WHERE e2.timestamp > e1.timestamp RETURN CASE WHEN COUNT(e1) >= 3 THEN true ELSE false END AS ruleSatisfied"
"Activity ""Submit Request"" must be followed by ""Approve Request"" at some point after at most 1 time.","Activity: [""submit request"", ""approve request""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""submit request""})-[:CORR]->(entity)<-[:CORR]-(e2:Event {Activity: ""approve request""}) WHERE e2.timestamp > e1.timestamp RETURN CASE WHEN COUNT(e1) <= 1 THEN true ELSE false END AS ruleSatisfied"
"The activity ""Apply Discount"" is eventually succeeded by ""Finalize Order"" no less than 2 times.","Activity: [""Apply Discount"", ""Finalize Order""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Apply Discount""})-[:CORR]->(entity)<-[:CORR]-(e2:Event {Activity: ""Finalize Order""}) WHERE e2.timestamp > e1.timestamp RETURN CASE WHEN COUNT(e1) >= 2 THEN true ELSE false END AS ruleSatisfied"
"The sequence of creating an order, creating an invoice, and updating the sales order must be carried out for every instance of entity type ""Order"".","Activity: [""Create Order"", ""Create Invoice"", ""Update SO""], EntityType: [""Order""], Actor: []","MATCH (ent:Entity {EntityType: ""Order""}) WHERE NOT EXISTS { MATCH (e1:Event {Activity: 'Create Order'})-[:DF]->(e2:Event{Activity: 'Create Invoice'})-[:DF]->(e3:Event {Activity: 'Update SO'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"Activities ""Start Project"", ""Allocate Resources"", and ""Complete Project"" must be performed in sequence for every project entity.","Activity: [""Start Project"", ""Allocate Resources"", ""Complete Project""], EntityType: [""Project""], Actor: []","MATCH (ent:Entity {EntityType: ""Project""}) WHERE NOT EXISTS { MATCH (e1:Event {Activity: 'Start Project'})-[:DF]->(e2:Event{Activity: 'Allocate Resources'})-[:DF]->(e3:Event {Activity: 'Complete Project'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"Tasks ""Log Issue"", ""Assign Developer"", and ""Close Issue"" must occur in the specified order for each entity of type ""Issue"".","Activity: [""Log Issue"", ""Assign Developer"", ""Close Issue""], EntityType: [""Issue""], Actor: []","MATCH (ent:Entity {EntityType: ""Issue""}) WHERE NOT EXISTS { MATCH (e1:Event {Activity: 'Log Issue'})-[:DF]->(e2:Event{Activity: 'Assign Developer'})-[:DF]->(e3:Event {Activity: 'Close Issue'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"The events ""Initiate Call"", ""Hold Call"", and ""End Call"" must follow one another in sequence for every entity of type ""Call"".","Activity: [""Initiate Call"", ""Hold Call"", ""End Call""], EntityType: [""Call""], Actor: []","MATCH (ent:Entity {EntityType: ""Call""}) WHERE NOT EXISTS { MATCH (e1:Event {Activity: 'Initiate Call'})-[:DF]->(e2:Event{Activity: 'Hold Call'})-[:DF]->(e3:Event {Activity: 'End Call'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"The sequence of creating an order, confirming the payment, and completing the shipment must be performed in that order for every entity of type ""Order"".","Activity: [""Create Order"", ""Confirm Payment"", ""Complete Shipment""], EntityType: [""Order""], Actor: []","MATCH (ent:Entity {EntityType: ""Order""}) WHERE NOT EXISTS { MATCH (e1:Event {Activity: 'Create Order'})-[:DF]->(e2:Event{Activity: 'Confirm Payment'})-[:DF]->(e3:Event {Activity: 'Complete Shipment'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"Activities ""Register User"", ""Send Welcome Email"", and ""Activate Account"" must be executed sequentially for every entity of type ""User"".","Activity: [""Register User"", ""Send Welcome Email"", ""Activate Account""], EntityType: [""User""], Actor: []","MATCH (ent:Entity {EntityType: ""User""}) WHERE NOT EXISTS { MATCH (e1:Event {Activity: 'Register User'})-[:DF]->(e2:Event{Activity: 'Send Welcome Email'})-[:DF]->(e3:Event {Activity: 'Activate Account'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"Events ""Open Issue"", ""Assign Engineer"", and ""Close Issue"" must occur in sequence for every entity of type ""Support Ticket"".","Activity: [""Open Issue"", ""Assign Engineer"", ""Close Issue""], EntityType: [""Support Ticket""], Actor: []","MATCH (ent:Entity {EntityType: ""Support Ticket""}) WHERE NOT EXISTS { MATCH (e1:Event {Activity: 'Open Issue'})-[:DF]->(e2:Event{Activity: 'Assign Engineer'})-[:DF]->(e3:Event {Activity: 'Close Issue'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"Activities ""Initiate Transfer"", ""Verify Transfer"", and ""Complete Transfer"" must be carried out one after the other, in the defined order, for every entity of type ""Transfer"".","Activity: [""Initiate Transfer"", ""Verify Transfer"", ""Complete Transfer""], EntityType: [""Transfer""], Actor: []","MATCH (ent:Entity {EntityType: ""Transfer""}) WHERE NOT EXISTS { MATCH (e1:Event {Activity: 'Initiate Transfer'})-[:DF]->(e2:Event{Activity: 'Verify Transfer'})-[:DF]->(e3:Event {Activity: 'Complete Transfer'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"The sequence of ""Start Process"", ""Validate Data"", and ""Complete Process"" must be performed in the specified order for every entity of type ""Process"".","Activity: [""Start Process"", ""Validate Data"", ""Complete Process""], EntityType: [""Process""], Actor: []","MATCH (ent:Entity {EntityType: ""Process""}) WHERE NOT EXISTS { MATCH (e1:Event {Activity: 'Start Process'})-[:DF]->(e2:Event{Activity: 'Validate Data'})-[:DF]->(e3:Event {Activity: 'Complete Process'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"For each ""Purchase"" entity, the activities ""Place Order"", ""Approve Order"", and ""Ship Order"" must happen sequentially in that order.","Activity: [""Place Order"", ""Approve Order"", ""Ship Order""], EntityType: [""Purchase""], Actor: []","MATCH (ent:Entity {EntityType: ""Purchase""}) WHERE NOT EXISTS { MATCH (e1:Event {Activity: 'Place Order'})-[:DF]->(e2:Event{Activity: 'Approve Order'})-[:DF]->(e3:Event {Activity: 'Ship Order'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"Events ""Create Ticket"", ""Assign Engineer"", and ""Resolve Ticket"" must be performed in sequence for every entity of type ""Support Ticket"".","Activity: [""Create Ticket"", ""Assign Engineer"", ""Resolve Ticket""], EntityType: [""Support Ticket""], Actor: []","MATCH (ent:Entity {EntityType: ""Support Ticket""}) WHERE NOT EXISTS { MATCH (e1:Event {Activity: 'Create Ticket'})-[:DF]->(e2:Event{Activity: 'Assign Engineer'})-[:DF]->(e3:Event {Activity: 'Resolve Ticket'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"For each ""Customer Request"" entity, the activities ""Submit Request"", ""Review Request"", and ""Approve Request"" must occur in that order.","Activity: [""Submit Request"", ""Review Request"", ""Approve Request""], EntityType: [""Customer Request""], Actor: []","MATCH (ent:Entity {EntityType: ""Customer Request""}) WHERE NOT EXISTS { MATCH (e1:Event {Activity: 'Submit Request'})-[:DF]->(e2:Event{Activity: 'Review Request'})-[:DF]->(e3:Event {Activity: 'Approve Request'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"Activities ""Send Proposal"", ""Negotiate Terms"", and ""Sign Contract"" must occur in the specified order for all entities of type ""Deal"".","Activity: [""Send Proposal"", ""Negotiate Terms"", ""Sign Contract""], EntityType: [""Deal""], Actor: []","MATCH (ent:Entity {EntityType: ""Deal""}) WHERE NOT EXISTS { MATCH (e1:Event {Activity: 'Send Proposal'})-[:DF]->(e2:Event{Activity: 'Negotiate Terms'})-[:DF]->(e3:Event {Activity: 'Sign Contract'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"The tasks ""Log Activity"", ""Assign Task"", and ""Complete Task"" must be performed in sequence for each entity of type ""Task"".","Activity: [""Log Activity"", ""Assign Task"", ""Complete Task""], EntityType: [""Task""], Actor: []","MATCH (ent:Entity {EntityType: ""Task""}) WHERE NOT EXISTS { MATCH (e1:Event {Activity: 'Log Activity'})-[:DF]->(e2:Event{Activity: 'Assign Task'})-[:DF]->(e3:Event {Activity: 'Complete Task'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"Activities ""Create Account"", ""Activate Account"", and ""Welcome User"" must be performed sequentially for every entity of type ""User"".","Activity: [""Create Account"", ""Activate Account"", ""Welcome User""], EntityType: [""User""], Actor: []","MATCH (ent:Entity {EntityType: ""User""}) WHERE NOT EXISTS { MATCH (e1:Event {Activity: 'Create Account'})-[:DF]->(e2:Event{Activity: 'Activate Account'})-[:DF]->(e3:Event {Activity: 'Welcome User'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"For every ""Order"" entity, the activities ""Place Order"", ""Confirm Payment"", and ""Dispatch"" must follow each other in sequence.","Activity: [""Place Order"", ""Confirm Payment"", ""Dispatch""], EntityType: [""Order""], Actor: []","MATCH (ent:Entity {EntityType: ""Order""}) WHERE NOT EXISTS { MATCH (e1:Event {Activity: 'Place Order'})-[:DF]->(e2:Event{Activity: 'Confirm Payment'})-[:DF]->(e3:Event {Activity: 'Dispatch'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"For each entity of type ""Project"", the activities ""Start Project"", ""Review Project"", and ""Close Project"" must occur in the specified sequence.","Activity: [""Start Project"", ""Review Project"", ""Close Project""], EntityType: [""Project""], Actor: []","MATCH (ent:Entity {EntityType: ""Project""}) WHERE NOT EXISTS { MATCH (e1:Event {Activity: 'Start Project'})-[:DF]->(e2:Event{Activity: 'Review Project'})-[:DF]->(e3:Event {Activity: 'Close Project'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"For every order, the tasks of placing the order, confirming the payment, and dispatching must occur in the defined order.","Activity: [""Place Order"", ""Confirm Payment"", ""Dispatch""], EntityType: [""Order""], Actor: []","MATCH (ent:Entity {EntityType: ""Order""}) WHERE NOT EXISTS { MATCH (e1:Event {Activity: 'Place Order'})-[:DF]->(e2:Event{Activity: 'Confirm Payment'})-[:DF]->(e3:Event {Activity: 'Dispatch'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"The sequence of starting a project, reviewing the project, and closing the project must occur in order for each project.","Activity: [""Start Project"", ""Review Project"", ""Close Project""], EntityType: [""Project""], Actor: []","MATCH (ent:Entity {EntityType: ""Project""}) WHERE NOT EXISTS { MATCH (e1:Event {Activity: 'Start Project'})-[:DF]->(e2:Event{Activity: 'Review Project'})-[:DF]->(e3:Event {Activity: 'Close Project'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"For every entity of type ""Support Ticket"", the sequence of logging the activity, assigning the engineer, and resolving the ticket must be followed.","Activity: [""Log Ticket"", ""Assign Engineer"", ""Resolve Ticket""], EntityType: [""Support Ticket""], Actor: []","MATCH (ent:Entity {EntityType: ""Support Ticket""}) WHERE NOT EXISTS { MATCH (e1:Event {Activity: 'Log Ticket'})-[:DF]->(e2:Event{Activity: 'Assign Engineer'})-[:DF]->(e3:Event {Activity: 'Resolve Ticket'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"Tasks like submitting a request, reviewing it, and approving the request must be performed in sequence for every customer request.","Activity: [""Submit Request"", ""Review Request"", ""Approve Request""], EntityType: [""Customer Request""], Actor: []","MATCH (ent:Entity {EntityType: ""Customer Request""}) WHERE NOT EXISTS { MATCH (e1:Event {Activity: 'Submit Request'})-[:DF]->(e2:Event{Activity: 'Review Request'})-[:DF]->(e3:Event {Activity: 'Approve Request'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"The process of placing an order, confirming the payment, and dispatching the goods must occur in that order for every order.","Activity: [""Place Order"", ""Confirm Payment"", ""Dispatch Goods""], EntityType: [""Order""], Actor: []","MATCH (ent:Entity {EntityType: ""Order""}) WHERE NOT EXISTS { MATCH (e1:Event {Activity: 'Place Order'})-[:DF]->(e2:Event{Activity: 'Confirm Payment'})-[:DF]->(e3:Event {Activity: 'Dispatch Goods'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"Tasks of type ""Create Order"", ""Create Invoice"", and ""Update SO"" must not be carried out in that order for any instance of entity type ""Order"".","Activity: [""Create Order"", ""Create Invoice"", ""Update SO""], EntityType: [""Order""], Actor: []","MATCH (ent:Entity {EntityType: ""Order""}) WHERE EXISTS { MATCH (e1:Event {Activity: 'Create Order'})-[:DF]->(e2:Event{Activity: 'Create Invoice'})-[:DF]->(e3:Event {Activity: 'Update SO'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"Activities of type ""Place Order"", ""Invoice Generation"", and ""Order Shipment"" must not be executed sequentially for any object of type ""Customer Order"".","Activity: [""Place Order"", ""Invoice Generation"", ""Order Shipment""], EntityType: [""Customer Order""], Actor: []","MATCH (ent:Entity {EntityType: ""Customer Order""}) WHERE EXISTS { MATCH (e1:Event {Activity: 'Place Order'})-[:DF]->(e2:Event{Activity: 'Invoice Generation'})-[:DF]->(e3:Event {Activity: 'Order Shipment'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"Events with activities ""Create Account"", ""Verify Identity"", and ""Activate Account"" must not occur as a sequence for entities of type ""User"".","Activity: [""Create Account"", ""Verify Identity"", ""Activate Account""], EntityType: [""User""], Actor: []","MATCH (ent:Entity {EntityType: ""User""}) WHERE EXISTS { MATCH (e1:Event {Activity: 'Create Account'})-[:DF]->(e2:Event{Activity: 'Verify Identity'})-[:DF]->(e3:Event {Activity: 'Activate Account'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"For every entity of type ""Project"", the sequence of ""Initiate Project"", ""Review Project"", and ""Close Project"" must not be performed in the prescribed order.","Activity: [""Initiate Project"", ""Review Project"", ""Close Project""], EntityType: [""Project""], Actor: []","MATCH (ent:Entity {EntityType: ""Project""}) WHERE EXISTS { MATCH (e1:Event {Activity: 'Initiate Project'})-[:DF]->(e2:Event{Activity: 'Review Project'})-[:DF]->(e3:Event {Activity: 'Close Project'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"Activities like ""Submit Application"", ""Review Application"", and ""Approve Application"" must not follow one another in the specified order for any object of type ""Job Application"".","Activity: [""Submit Application"", ""Review Application"", ""Approve Application""], EntityType: [""Job Application""], Actor: []","MATCH (ent:Entity {EntityType: ""Job Application""}) WHERE EXISTS { MATCH (e1:Event {Activity: 'Submit Application'})-[:DF]->(e2:Event{Activity: 'Review Application'})-[:DF]->(e3:Event {Activity: 'Approve Application'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"Activities like ""Request Loan"", ""Approve Loan"", and ""Disburse Funds"" must not be performed in a sequence for any entity of type ""Loan Application"".","Activity: [""Request Loan"", ""Approve Loan"", ""Disburse Funds""], EntityType: [""Loan Application""], Actor: []","MATCH (ent:Entity {EntityType: ""Loan Application""}) WHERE EXISTS { MATCH (e1:Event {Activity: 'Request Loan'})-[:DF]->(e2:Event{Activity: 'Approve Loan'})-[:DF]->(e3:Event {Activity: 'Disburse Funds'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"In a customer support process, ""Create Ticket"", ""Assign Ticket"", and ""Resolve Ticket"" must not be executed sequentially for any entity of type ""Support Ticket"".","Activity: [""Create Ticket"", ""Assign Ticket"", ""Resolve Ticket""], EntityType: [""Support Ticket""], Actor: []","MATCH (ent:Entity {EntityType: ""Support Ticket""}) WHERE EXISTS { MATCH (e1:Event {Activity: 'Create Ticket'})-[:DF]->(e2:Event{Activity: 'Assign Ticket'})-[:DF]->(e3:Event {Activity: 'Resolve Ticket'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"For every entity of type ""Shipment"", the activities ""Initiate Shipment"", ""Transport Shipment"", and ""Deliver Shipment"" must not follow one another in the prescribed order.","Activity: [""Initiate Shipment"", ""Transport Shipment"", ""Deliver Shipment""], EntityType: [""Shipment""], Actor: []","MATCH (ent:Entity {EntityType: ""Shipment""}) WHERE EXISTS { MATCH (e1:Event {Activity: 'Initiate Shipment'})-[:DF]->(e2:Event{Activity: 'Transport Shipment'})-[:DF]->(e3:Event {Activity: 'Deliver Shipment'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"In a manufacturing process, ""Start Production"", ""Quality Check"", and ""Pack Product"" must not be executed in sequence for any entity of type ""Product"".","Activity: [""Start Production"", ""Quality Check"", ""Pack Product""], EntityType: [""Product""], Actor: []","MATCH (ent:Entity {EntityType: ""Product""}) WHERE EXISTS { MATCH (e1:Event {Activity: 'Start Production'})-[:DF]->(e2:Event{Activity: 'Quality Check'})-[:DF]->(e3:Event {Activity: 'Pack Product'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"For every entity of type ""Employee"", the sequence of ""Start Task"", ""Review Task"", and ""Complete Task"" must not be performed in the specified order.","Activity: [""Start Task"", ""Review Task"", ""Complete Task""], EntityType: [""Employee""], Actor: []","MATCH (ent:Entity {EntityType: ""Employee""}) WHERE EXISTS { MATCH (e1:Event {Activity: 'Start Task'})-[:DF]->(e2:Event{Activity: 'Review Task'})-[:DF]->(e3:Event {Activity: 'Complete Task'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"The steps of creating an order, submitting the package, and dispatching the product should not be executed in sequence for any order.","Activity: [""Create Order"", ""Submit Package"", ""Dispatch Product""], EntityType: [""Order""], Actor: []","MATCH (ent:Entity {EntityType: ""Order""}) WHERE EXISTS { MATCH (e1:Event {Activity: 'Create Order'})-[:DF]->(e2:Event{Activity: 'Submit Package'})-[:DF]->(e3:Event {Activity: 'Dispatch Product'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"The process of issuing a quote, confirming the order, and processing payment must not occur in sequence for any order.","Activity: [""Issue Quote"", ""Confirm Order"", ""Process Payment""], EntityType: [""Order""], Actor: []","MATCH (ent:Entity {EntityType: ""Order""}) WHERE EXISTS { MATCH (e1:Event {Activity: 'Issue Quote'})-[:DF]->(e2:Event{Activity: 'Confirm Order'})-[:DF]->(e3:Event {Activity: 'Process Payment'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"The sequence of initiating a transaction, verifying the payment, and completing the purchase must not be performed in that order for any purchase.","Activity: [""Initiate Transaction"", ""Verify Payment"", ""Complete Purchase""], EntityType: [""Purchase""], Actor: []","MATCH (ent:Entity {EntityType: ""Purchase""}) WHERE EXISTS { MATCH (e1:Event {Activity: 'Initiate Transaction'})-[:DF]->(e2:Event{Activity: 'Verify Payment'})-[:DF]->(e3:Event {Activity: 'Complete Purchase'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"Activities related to booking a flight, processing payment, and issuing the ticket must not happen sequentially for any booking.","Activity: [""Book Flight"", ""Process Payment"", ""Issue Ticket""], EntityType: [""Booking""], Actor: []","MATCH (ent:Entity {EntityType: ""Booking""}) WHERE EXISTS { MATCH (e1:Event {Activity: 'Book Flight'})-[:DF]->(e2:Event{Activity: 'Process Payment'})-[:DF]->(e3:Event {Activity: 'Issue Ticket'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"For every shipment, the tasks of placing the order, processing payment, and shipping the product should not follow each other in sequence.","Activity: [""Place Order"", ""Process Payment"", ""Ship Product""], EntityType: [""Shipment""], Actor: []","MATCH (ent:Entity {EntityType: ""Shipment""}) WHERE EXISTS { MATCH (e1:Event {Activity: 'Place Order'})-[:DF]->(e2:Event{Activity: 'Process Payment'})-[:DF]->(e3:Event {Activity: 'Ship Product'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"For each user, the sequence of creating the account, verifying the email, and activating the account must not be performed in sequence.","Activity: [""Create Account"", ""Verify Email"", ""Activate Account""], EntityType: [""User""], Actor: []","MATCH (ent:Entity {EntityType: ""User""}) WHERE EXISTS { MATCH (e1:Event {Activity: 'Create Account'})-[:DF]->(e2:Event{Activity: 'Verify Email'})-[:DF]->(e3:Event {Activity: 'Activate Account'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"For each product, the process of registering the product, verifying the warranty, and shipping the product must not occur sequentially.","Activity: [""Register Product"", ""Verify Warranty"", ""Ship Product""], EntityType: [""Product""], Actor: []","MATCH (ent:Entity {EntityType: ""Product""}) WHERE EXISTS { MATCH (e1:Event {Activity: 'Register Product'})-[:DF]->(e2:Event{Activity: 'Verify Warranty'})-[:DF]->(e3:Event {Activity: 'Ship Product'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"For every order, the tasks of confirming the purchase, processing the payment, and shipping the product must not follow one another in sequence.","Activity: [""Confirm Purchase"", ""Process Payment"", ""Ship Product""], EntityType: [""Order""], Actor: []","MATCH (ent:Entity {EntityType: ""Order""}) WHERE EXISTS { MATCH (e1:Event {Activity: 'Confirm Purchase'})-[:DF]->(e2:Event{Activity: 'Process Payment'})-[:DF]->(e3:Event {Activity: 'Ship Product'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
Performing a payment processing  is only allowed if a checkout has been performed within the preceding 24 hours for the same entity.,"Activity: [""Checkout"", ""Process Payment""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Process Payment""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Checkout""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e1.timestamp >= e2.timestamp - duration({hours: 24}) WITH e2, count(e1) AS precedingCheckoutCount RETURN CASE WHEN any(e IN collect(precedingCheckoutCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
A task to finalize a contract can only be performed if a draft contract was created within the past 30 days.,"Activity: [""Draft Contract"", ""Finalize Contract""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Finalize Contract""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Draft Contract""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e1.timestamp >= e2.timestamp - duration({days: 30}) WITH e2, count(e1) AS precedingDraftCount RETURN CASE WHEN any(e IN collect(precedingDraftCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
A shipment is allowed only if the item was prepared for delivery within the last 48 hours.,"Activity: [""Prepare Item"", ""Ship Item""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Ship Item""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Prepare Item""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e1.timestamp >= e2.timestamp - duration({hours: 48}) WITH e2, count(e1) AS precedingPrepareCount RETURN CASE WHEN any(e IN collect(precedingPrepareCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
An invoice can only be created if an order was placed within the previous 5 days.,"Activity: [""Place Order"", ""Create Invoice""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Create Invoice""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Place Order""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e1.timestamp >= e2.timestamp - duration({days: 5}) WITH e2, count(e1) AS precedingOrderCount RETURN CASE WHEN any(e IN collect(precedingOrderCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Before activating an account, a verification email must be sent within the last 2 days for the same entity.","Activity: [""Send Verification Email"", ""Activate Account""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Activate Account""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Send Verification Email""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e1.timestamp >= e2.timestamp - duration({days: 2}) WITH e2, count(e1) AS precedingEmailCount RETURN CASE WHEN any(e IN collect(precedingEmailCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
A refund request must be submitted within 30 days before processing a refund for a customer.,"Activity: [""Submit Refund Request"", ""Process Refund""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Process Refund""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Submit Refund Request""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e1.timestamp >= e2.timestamp - duration({days: 30}) WITH e2, count(e1) AS precedingRequestCount RETURN CASE WHEN any(e IN collect(precedingRequestCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
A background check must be conducted within 60 days before onboarding a new employee.,"Activity: [""Conduct Background Check"", ""Onboard Employee""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Onboard Employee""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Conduct Background Check""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e1.timestamp >= e2.timestamp - duration({days: 60}) WITH e2, count(e1) AS precedingCheckCount RETURN CASE WHEN any(e IN collect(precedingCheckCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
A purchase order must be approved within 10 days before shipment is initiated.,"Activity: [""Approve Purchase Order"", ""Initiate Shipment""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Initiate Shipment""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Approve Purchase Order""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e1.timestamp >= e2.timestamp - duration({days: 10}) WITH e2, count(e1) AS precedingApprovalCount RETURN CASE WHEN any(e IN collect(precedingApprovalCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
An agenda must be finalized within 7 days before a meeting can be scheduled.,"Activity: [""Finalize Agenda"", ""Schedule Meeting""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Schedule Meeting""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Finalize Agenda""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e1.timestamp >= e2.timestamp - duration({days: 7}) WITH e2, count(e1) AS precedingAgendaCount RETURN CASE WHEN any(e IN collect(precedingAgendaCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
A technical specification must be reviewed within 14 days before product development can be initiated.,"Activity: [""Review Technical Specification"", ""Initiate Product Development""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Initiate Product Development""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Review Technical Specification""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e1.timestamp >= e2.timestamp - duration({days: 14}) WITH e2, count(e1) AS precedingReviewCount RETURN CASE WHEN any(e IN collect(precedingReviewCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"The ""Send Invoice"" activity must occur within 14 days before the ""Receive Payment"" activity can happen.","Activity: [""Send Invoice"", ""Receive Payment""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Receive Payment""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Send Invoice""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e1.timestamp >= e2.timestamp - duration({days: 14}) WITH e2, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"A ""Book Ticket"" event must be performed within 24 hours before a ""Board Flight"" event can take place.","Activity: [""book ticket"", ""board flight""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""board flight""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""book ticket""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e1.timestamp >= e2.timestamp - duration({hours: 24}) WITH e2, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"An event of type ""Create Case"" must happen within 48 hours before a ""Assign Case"" activity can be performed.","Activity: [""create case"", ""assign case""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""assign case""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""create case""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e1.timestamp >= e2.timestamp - duration({hours: 48}) WITH e2, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"An instance of the ""Submit Bid"" activity must occur within 7 days before the ""Award Contract"" activity can be performed.","Activity: [""submit bid"", ""award contract""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""award contract""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""submit bid""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e1.timestamp >= e2.timestamp - duration({days: 7}) WITH e2, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"The ""Register User"" activity must be performed within 1 day before the ""Activate Account"" activity.","Activity: [""register user"", ""activate account""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""activate account""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""register user""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e1.timestamp >= e2.timestamp - duration({days: 1}) WITH e2, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"An event with activity ""Check Inventory"" must occur within 2 hours before an event with activity ""Restock Item"" can be performed.","Activity: [""check inventory"", ""restock item""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""restock item""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""check inventory""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e1.timestamp >= e2.timestamp - duration({hours: 2}) WITH e2, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"An event of type ""Open Ticket"" must happen within 3 hours before the an event of type ""Close Ticket"" can be performed.","Activity: [""open ticket"", ""close ticket""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""close ticket""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""open ticket""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e1.timestamp >= e2.timestamp - duration({hours: 3}) WITH e2, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If ""Review Application"" happens, a ""Submit Application"" event must have occurred within the prior 14 days.","Activity: [""submit application"", ""review application""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""review application""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""submit application""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e1.timestamp >= e2.timestamp - duration({days: 14}) WITH e2, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If a ""Schedule Appointment"" event takes place, a ""Send Confirmation"" event must have occurred within the prior 2 days.","Activity: [""send confirmation"", ""schedule appointment""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""schedule appointment""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""send confirmation""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e1.timestamp >= e2.timestamp - duration({days: 2}) WITH e2, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If a ""Issue Refund"" event takes place, a ""Request Refund"" event must have occurred within the prior 30 days.","Activity: [""Request Refund"", ""Issue Refund""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Issue Refund""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Request Refund""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e1.timestamp >= e2.timestamp - duration({days: 30}) WITH e2, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Before an event of type ""Ship Product"" can occur, at least one event of type ""Approve Loan"" or ""Approve Order"" must be completed first.","Activity: [""Approve Loan"", ""Approve Order"", ""Ship Product""], EntityType: [], Actor: []","MATCH (e3:Event {Activity: ""Ship Product""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Approve Order""})-[:CORR]->(entity) WHERE e2.timestamp < e3.timestamp OPTIONAL MATCH (e1:Event {Activity: ""Approve Loan""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e3, count(e1)+count(e2) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Activity ""Complete Survey"" can only occur after ""Resolve Issue"" or ""Approve Claim"" happened for the same entity.","Activity: [""Resolve Issue"", ""Approve Claim"", ""Complete Survey""], EntityType: [], Actor: []","MATCH (e3:Event {Activity: ""Complete Survey""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Approve Claim""})-[:CORR]->(entity) WHERE e2.timestamp < e3.timestamp OPTIONAL MATCH (e1:Event {Activity: ""Resolve Issue""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e3, count(e1)+count(e2) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"To perform an ""Order Payment"", either ""Approve Order"" or ""Create Invoice"" must have occurred before.","Activity: [""Approve Order"", ""Create Invoice"", ""Order Payment""], EntityType: [], Actor: []","MATCH (e3:Event {Activity: ""Order Payment""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Create Invoice""})-[:CORR]->(entity) WHERE e2.timestamp < e3.timestamp OPTIONAL MATCH (e1:Event {Activity: ""Approve Order""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e3, count(e1)+count(e2) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"For a given object, a ""Resolve Issue"" event must happen before ""Approve Claim"" can happen.","Activity: [""Resolve Issue"", ""Approve Claim""], EntityType: [], Actor: []","MATCH (e3:Event {Activity: ""Approve Claim""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Resolve Issue""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e3, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"A task of type ""Ship Product"" cannot happen unless a task of type ""Approve Order"" or ""Create Invoice"" occurred earlier for the same entity.","Activity: [""Approve Order"", ""Create Invoice"", ""Ship Product""], EntityType: [], Actor: []","MATCH (e3:Event {Activity: ""Ship Product""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Create Invoice""})-[:CORR]->(entity) WHERE e2.timestamp < e3.timestamp OPTIONAL MATCH (e1:Event {Activity: ""Approve Order""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e3, count(e1)+count(e2) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"For a given instance, ""Approve Loan"" must always precede any occurrence of ""Complete Survey"".","Activity: [""Approve Loan"", ""Complete Survey""], EntityType: [], Actor: []","MATCH (e3:Event {Activity: ""Complete Survey""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Approve Loan""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e3, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"For the ""Ship Product"" activity to occur, either ""Approve Order"" or ""Approve Claim"" must have happened earlier.","Activity: [""Approve Order"", ""Approve Claim"", ""Ship Product""], EntityType: [], Actor: []","MATCH (e3:Event {Activity: ""Ship Product""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Approve Claim""})-[:CORR]->(entity) WHERE e2.timestamp < e3.timestamp OPTIONAL MATCH (e1:Event {Activity: ""Approve Order""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e3, count(e1)+count(e2) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Before activity ""Start Production"" can occur, at least one activity of ""Approve Design"" or ""Place Order"" must be performed for the same entity.","Activity: [""Approve Design"", ""Place Order"", ""Start Production""], EntityType: [], Actor: []","MATCH (e3:Event {Activity: ""Start Production""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Place Order""})-[:CORR]->(entity) WHERE e2.timestamp < e3.timestamp OPTIONAL MATCH (e1:Event {Activity: ""Approve Design""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e3, count(e1)+count(e2) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"A patient cannot be discharged until either ""Complete Treatment"" or ""Approve Discharge"" has occurred.","Activity: [""Complete Treatment"", ""Approve Discharge"", ""Discharge Patient""], EntityType: [], Actor: []","MATCH (e3:Event {Activity: ""Discharge Patient""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Approve Discharge""})-[:CORR]->(entity) WHERE e2.timestamp < e3.timestamp OPTIONAL MATCH (e1:Event {Activity: ""Complete Treatment""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e3, count(e1)+count(e2) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"An employee cannot start ""Project Implementation"" until either ""Complete Onboarding"" or ""Sign Contract"" has been completed.","Activity: [""Complete Onboarding"", ""Sign Contract"", ""Project Implementation""], EntityType: [], Actor: []","MATCH (e3:Event {Activity: ""Project Implementation""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Sign Contract""})-[:CORR]->(entity) WHERE e2.timestamp < e3.timestamp OPTIONAL MATCH (e1:Event {Activity: ""Complete Onboarding""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e3, count(e1)+count(e2) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"A customer cannot ""Activate Service"" until either ""Complete Order"" or ""Confirm Payment"" has been made.","Activity: [""Complete Order"", ""Confirm Payment"", ""Activate Service""], EntityType: [], Actor: []","MATCH (e3:Event {Activity: ""Activate Service""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Confirm Payment""})-[:CORR]->(entity) WHERE e2.timestamp < e3.timestamp OPTIONAL MATCH (e1:Event {Activity: ""Complete Order""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e3, count(e1)+count(e2) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Before enteringthe implementation phase, a formal agreement must be signed or a project proposal must be approved (or both).","Activity: [""Sign Agreement"", ""Approve Proposal"", ""Enter Implementation Phase""], EntityType: [], Actor: []","MATCH (e3:Event {Activity: ""Enter Implementation Phase""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Approve Proposal""})-[:CORR]->(entity) WHERE e2.timestamp < e3.timestamp OPTIONAL MATCH (e1:Event {Activity: ""Sign Agreement""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e3, count(e1)+count(e2) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
A user cannot access premium features until they have completed the registration process or made their first payment.,"Activity: [""Complete Registration"", ""Make First Payment"", ""Access Premium Features""], EntityType: [], Actor: []","MATCH (e3:Event {Activity: ""Access Premium Features""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Make First Payment""})-[:CORR]->(entity) WHERE e2.timestamp < e3.timestamp OPTIONAL MATCH (e1:Event {Activity: ""Complete Registration""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e3, count(e1)+count(e2) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Before onboarding a customer can take place, they must have either filled out an application form or provided proof of identity.","Activity: [""Fill Application Form"", ""Provide Proof of Identity"", ""Onboard Customer""], EntityType: [], Actor: []","MATCH (e3:Event {Activity: ""Onboard Customer""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Provide Proof of Identity""})-[:CORR]->(entity) WHERE e2.timestamp < e3.timestamp OPTIONAL MATCH (e1:Event {Activity: ""Fill Application Form""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e3, count(e1)+count(e2) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Before an employee can be promoted, they must have completed either their probation period or received a performance review.","Activity: [""Complete Probation Period"", ""Receive Performance Review"", ""Promote Employee""], EntityType: [], Actor: []","MATCH (e3:Event {Activity: ""Promote Employee""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Receive Performance Review""})-[:CORR]->(entity) WHERE e2.timestamp < e3.timestamp OPTIONAL MATCH (e1:Event {Activity: ""Complete Probation Period""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e3, count(e1)+count(e2) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
A loan application cannot be approved unless the borrower has either submitted the necessary documents or passed a credit check.,"Activity: [""Submit Documents"", ""Pass Credit Check"", ""Approve Loan Application""], EntityType: [], Actor: []","MATCH (e3:Event {Activity: ""Approve Loan Application""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Pass Credit Check""})-[:CORR]->(entity) WHERE e2.timestamp < e3.timestamp OPTIONAL MATCH (e1:Event {Activity: ""Submit Documents""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e3, count(e1)+count(e2) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
A product cannot be shipped unless the customer has either made the payment or confirmed the order.,"Activity: [""Make Payment"", ""Confirm Order"", ""Ship Product""], EntityType: [], Actor: []","MATCH (e3:Event {Activity: ""Ship Product""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Confirm Order""})-[:CORR]->(entity) WHERE e2.timestamp < e3.timestamp OPTIONAL MATCH (e1:Event {Activity: ""Make Payment""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e3, count(e1)+count(e2) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Before an insurance claim can be settled, the claimant must have either submitted all required documentation or passed a fraud check.","Activity: [""Submit Documentation"", ""Pass Fraud Check"", ""Settle Insurance Claim""], EntityType: [], Actor: []","MATCH (e3:Event {Activity: ""Settle Insurance Claim""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Pass Fraud Check""})-[:CORR]->(entity) WHERE e2.timestamp < e3.timestamp OPTIONAL MATCH (e1:Event {Activity: ""Submit Documentation""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e3, count(e1)+count(e2) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
A product cannot be refunded unless it has been purchased or returned previously.,"Activity: [""Purchase Product"", ""Return Product"", ""Process Refund""], EntityType: [], Actor: []","MATCH (e3:Event {Activity: ""Process Refund""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Return Product""})-[:CORR]->(entity) WHERE e2.timestamp < e3.timestamp OPTIONAL MATCH (e1:Event {Activity: ""Purchase Product""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e3, count(e1)+count(e2) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
A conference session cannot begin until either the keynote speaker has arrived or the session chair has confirmed the attendees.,"Activity: [""Keynote Speaker Arrival"", ""Confirm Attendees"", ""Start Session""], EntityType: [], Actor: []","MATCH (e3:Event {Activity: ""Start Session""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Confirm Attendees""})-[:CORR]->(entity) WHERE e2.timestamp < e3.timestamp OPTIONAL MATCH (e1:Event {Activity: ""Keynote Speaker Arrival""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e3, count(e1)+count(e2) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
An order cannot be shipped until the payment has been processed or the customer has been notified about the delay.,"Activity: [""Process Payment"", ""Notify Customer of Delay"", ""Ship Order""], EntityType: [], Actor: []","MATCH (e3:Event {Activity: ""Ship Order""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Notify Customer of Delay""})-[:CORR]->(entity) WHERE e2.timestamp < e3.timestamp OPTIONAL MATCH (e1:Event {Activity: ""Process Payment""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e3, count(e1)+count(e2) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
An employee cannot be assigned to a new project unless they have either completed their previous assignment or their performance review has been finalized.,"Activity: [""Complete Previous Assignment"", ""Finalize Performance Review"", ""Assign to New Project""], EntityType: [], Actor: []","MATCH (e3:Event {Activity: ""Assign to New Project""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Finalize Performance Review""})-[:CORR]->(entity) WHERE e2.timestamp < e3.timestamp OPTIONAL MATCH (e1:Event {Activity: ""Complete Previous Assignment""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e3, count(e1)+count(e2) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Each time an event of type ""Start Order"" is performed, an event of type ""Process Order"" must follow immediately.","Activity: [""Start Order"", ""Process Order""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Start Order""}) OPTIONAL MATCH (e2:Event {Activity: ""Process Order""})<-[:DF]-(e1) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After each creation of a new contract, the contract approval must immediately follow.","Activity: [""Create Contract"", ""Approve Contract""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Contract""}) OPTIONAL MATCH (e2:Event {Activity: ""Approve Contract""})<-[:DF]-(e1) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Each time activity ""Complete Survey"" is performed, activity""Process Survey"" must immediately follow.","Activity: [""Complete Survey"", ""Process Survey""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Complete Survey""}) OPTIONAL MATCH (e2:Event {Activity: ""Process Survey""})<-[:DF]-(e1) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After processing a refund, the customer satisfaction survey must immediately be triggered.","Activity: [""Process Refund"", ""Trigger Survey""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Process Refund""}) OPTIONAL MATCH (e2:Event {Activity: ""Trigger Survey""})<-[:DF]-(e1) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"For every event with activity ""Begin Maintenance"", an event with activity ""End Maintenance"" must occur directly afterward.","Activity: [""Begin Maintenance"", ""End Maintenance""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Begin Maintenance""}) OPTIONAL MATCH (e2:Event {Activity: ""End Maintenance""})<-[:DF]-(e1) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Whenever a purchase is made, a payment confirmation must be received immediately after.","Activity: [""Purchase Made"", ""Payment Confirmation""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Purchase Made""}) OPTIONAL MATCH (e2:Event {Activity: ""Payment Confirmation""})<-[:DF]-(e1) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After every ""Customer Registration"", an ""Account Activation"" must take place immediately after.","Activity: [""Customer Registration"", ""Account Activation""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Customer Registration""}) OPTIONAL MATCH (e2:Event {Activity: ""Account Activation""})<-[:DF]-(e1) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Whenever a flight is booked, a payment must be processed right after.","Activity: [""Book Flight"", ""Process Payment""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Book Flight""}) OPTIONAL MATCH (e2:Event {Activity: ""Process Payment""})<-[:DF]-(e1) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After an employee requests time off, the approval process must begin immediately after.","Activity: [""Request Time Off"", ""Approve Time Off""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Request Time Off""}) OPTIONAL MATCH (e2:Event {Activity: ""Approve Time Off""})<-[:DF]-(e1) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After a service request is created, a technician must be assigned immediately after.","Activity: [""Create Service Request"", ""Assign Technician""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Service Request""}) OPTIONAL MATCH (e2:Event {Activity: ""Assign Technician""})<-[:DF]-(e1) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Whenever a product is added to a cart, the checkout process must begin immediately after.","Activity: [""Add Product to Cart"", ""Start Checkout""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Add Product to Cart""}) OPTIONAL MATCH (e2:Event {Activity: ""Start Checkout""})<-[:DF]-(e1) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After a client submits a feedback form, a customer service review must immediately follow.","Activity: [""Submit Feedback"", ""Customer Service Review""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Submit Feedback""}) OPTIONAL MATCH (e2:Event {Activity: ""Customer Service Review""})<-[:DF]-(e1) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After an order is packed, it must be dispatched immediately.","Activity: [""Pack Order"", ""Dispatch Order""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Pack Order""}) OPTIONAL MATCH (e2:Event {Activity: ""Dispatch Order""})<-[:DF]-(e1) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After a loan application is submitted, an approval must be granted immediately.","Activity: [""Submit Loan Application"", ""Grant Loan Approval""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Submit Loan Application""}) OPTIONAL MATCH (e2:Event {Activity: ""Grant Loan Approval""})<-[:DF]-(e1) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After a document is drafted, it must be reviewed immediately.","Activity: [""Draft Document"", ""Review Document""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Draft Document""}) OPTIONAL MATCH (e2:Event {Activity: ""Review Document""})<-[:DF]-(e1) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Each time a machine is repaired, an inspection must take place immediately after.","Activity: [""Repair Machine"", ""Inspect Machine""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Repair Machine""}) OPTIONAL MATCH (e2:Event {Activity: ""Inspect Machine""})<-[:DF]-(e1) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
The approval of a project proposal must be followed by the initiation of a project immediately.,"Activity: [""Approve Proposal"", ""Initiate Project""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Approve Proposal""}) OPTIONAL MATCH (e2:Event {Activity: ""Initiate Project""})<-[:DF]-(e1) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After a customer signs a contract, an onboarding session must take place immediately afterward.","Activity: [""Sign Contract"", ""Onboard Customer""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Sign Contract""}) OPTIONAL MATCH (e2:Event {Activity: ""Onboard Customer""})<-[:DF]-(e1) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Once an order has been placed, the packaging must occur right after.","Activity: [""Place Order"", ""Package Order""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Place Order""}) OPTIONAL MATCH (e2:Event {Activity: ""Package Order""})<-[:DF]-(e1) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If an order is placed, then an invoice cannot be created afterward.","Activity: [""Place Order"", ""Create Invoice""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Place Order""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Create Invoice""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"Once a product is shipped, a return cannot be initiated for the same entity afterward.","Activity: [""Ship Product"", ""Initiate Return""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Ship Product""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Initiate Return""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"After an order is canceled, a shipment cannot be made afterward.","Activity: [""Cancel Order"", ""Ship Order""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Cancel Order""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Ship Order""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"Once a purchase is refunded, a new purchase must not be made afterward.","Activity: [""Refund Purchase"", ""Make Purchase""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Refund Purchase""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Make Purchase""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"After a customer signs a contract, a cancellation may not happen afterward for the same object.","Activity: [""Sign Contract"", ""Cancel Contract""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Sign Contract""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Cancel Contract""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"If a customer places an order, they must not cancel it afterward.","Activity: [""place order"", ""cancel order""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""place order""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""cancel order""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"After a user registers an account, they may not delete it afterward.","Activity: [""register account"", ""delete account""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""register account""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""delete account""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"If a person attends a seminar, they cannot attend a seminar again afterward.","Activity: [""attend seminar""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""attend seminar""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""attend seminar""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"After an employee requests vacation, they must not request sick leave afterward.","Activity: [""request vacation"", ""request sick leave""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""request vacation""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""request sick leave""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"If a student submits an assignment, they cannot withdraw it afterward.","Activity: [""submit assignment"", ""withdraw assignment""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""submit assignment""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""withdraw assignment""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"If activity ""Book Flight"" occurs, activity ""Cancel Booking"" must not be performed afterward.","Activity: [""book flight"", ""cancel booking""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""book flight""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""cancel booking""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"After performing ""Issue Payment"", no ""Refund Payment"" should occur afterward.","Activity: [""issue payment"", ""refund payment""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""issue payment""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""refund payment""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"If activity ""Launch Product"" is performed, ""Update Product"" must not be performed afterward for the same instance.","Activity: [""launch product"", ""update product""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""launch product""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""update product""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"After an event of ""Begin Surgery"" is completed, ""Perform Post-Op"" must not occur afterward for the same object.","Activity: [""begin surgery"", ""perform post-op""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""begin surgery""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""perform post-op""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"After completing the activity ""Close Ticket"", ""Reopen Ticket"" cannot be performed afterward for the same entity.","Activity: [""close ticket"", ""reopen ticket""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""close ticket""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""reopen ticket""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"If the activity ""Publish Article"" occurs, the activity ""Delete Article"" should not be performed afterward.","Activity: [""Publish Article"", ""Delete Article""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Publish Article""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Delete Article""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"After a ""Start Call"", the activity ""End Call"" cannot happen afterward for the same instance.","Activity: [""Start Call"", ""End Call""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Start Call""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""End Call""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"If a task ""Submit Assignment"" is completed, no ""Request Extension"" should occur afterward for the same object.","Activity: [""Submit Assignment"", ""Request Extension""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Submit Assignment""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Request Extension""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"After a ""Register Complaint"" is made, a ""Resolve Complaint"" should not occur afterward.","Activity: [""Register Complaint"", ""Resolve Complaint""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Register Complaint""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Resolve Complaint""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"If a patient completes the ""Register for Appointment"", they must not complete ""Cancel Appointment"" afterward.","Activity: [""Register for Appointment"", ""Cancel Appointment""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Register for Appointment""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Cancel Appointment""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"After an event ""Complete Payment"" occurs, the activity ""Request Refund"" cannot take place afterward for the same object.","Activity: [""Complete Payment"", ""Request Refund""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Complete Payment""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Request Refund""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"If an activity ""Create Invoice"" is performed, the activity ""Clear Invoice"" must not be performed within 7 days afterward.","Activity: [""Create Invoice"", ""Clear Invoice""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Invoice""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Clear Invoice""})-[:CORR]->(entity) WHERE e2.timestamp <= e1.timestamp + duration({days: 7}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"After a ""Start Call"" event is executed, the activity ""End Call"" must not happen within 24 hours.","Activity: [""Start Call"", ""End Call""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Start Call""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""End Call""})-[:CORR]->(entity) WHERE  e2.timestamp <= e1.timestamp + duration({hours: 24}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"If a ""Submit Assignment"" event occurs, the ""Request Extension"" event must not happen within 10 days afterward.","Activity: [""Submit Assignment"", ""Request Extension""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Submit Assignment""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Request Extension""})-[:CORR]->(entity) WHERE e2.timestamp <= e1.timestamp + duration({days: 10}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"After the event ""Register Complaint"" is completed, the event ""Resolve Complaint"" cannot happen within 30 days for the same entity.","Activity: [""Register Complaint"", ""Resolve Complaint""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Register Complaint""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Resolve Complaint""})-[:CORR]->(entity) WHERE e2.timestamp <= e1.timestamp + duration({days: 30}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"If a ""Register for Appointment"" event occurs, the ""Cancel Appointment"" event may not take place within 48 hours afterward for the same object.","Activity: [""Register for Appointment"", ""Cancel Appointment""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Register for Appointment""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Cancel Appointment""})-[:CORR]->(entity) WHERE e2.timestamp <= e1.timestamp + duration({hours: 48}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"If a ""Complete Payment"" event occurs, the ""Request Refund"" event must not occur within 5 days afterward for the same instance.","Activity: [""Complete Payment"", ""Request Refund""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Complete Payment""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Request Refund""})-[:CORR]->(entity) WHERE e2.timestamp <= e1.timestamp + duration({days: 5}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"If a ""Book Flight"" event occurs, the ""Check-in"" event should not take place within 24 hours afterward.","Activity: [""Book Flight"", ""Check-in""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Book Flight""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Check-in""})-[:CORR]->(entity) WHERE e2.timestamp <= e1.timestamp + duration({hours: 24}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"After a ""Sign Up"" event occurs, a ""Submit Application"" event must not be performed within 48 hours afterward.","Activity: [""Sign Up"", ""Submit Application""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Sign Up""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Submit Application""})-[:CORR]->(entity) WHERE e2.timestamp <= e1.timestamp + duration({hours: 48}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"If a ""Start Interview"" event is executed, no ""Complete Interview"" event may happen within 72 hours afterward.","Activity: [""Start Interview"", ""Complete Interview""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Start Interview""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Complete Interview""})-[:CORR]->(entity) WHERE e2.timestamp <= e1.timestamp + duration({hours: 72}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"If a ""Register for Webinar"" event occurs, no ""Attend Webinar"" event can take place within 12 hours afterward for the same object.","Activity: [""Register for Webinar"", ""Attend Webinar""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Register for Webinar""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Attend Webinar""})-[:CORR]->(entity) WHERE e2.timestamp <= e1.timestamp + duration({hours: 12}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"If a ""Buy Product"" event occurs, no ""Request Refund"" event can take place within 30 days afterward for the same instance.","Activity: [""Buy Product"", ""Request Refund""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Buy Product""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Request Refund""})-[:CORR]->(entity) WHERE e2.timestamp <= e1.timestamp + duration({days: 30}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"If a customer places an order, they must not return it within 14 days.","Activity: [""Place Order"", ""Return Order""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Place Order""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Return Order""})-[:CORR]->(entity) WHERE e2.timestamp <= e1.timestamp + duration({days: 14}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"After a loan application is submitted, the customer must not request an early repayment within 10 days.","Activity: [""Submit Loan Application"", ""Request Early Repayment""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Submit Loan Application""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Request Early Repayment""})-[:CORR]->(entity) WHERE e2.timestamp <= e1.timestamp + duration({days: 10}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"After a transaction is completed, a user must not attempt to cancel it within 48 hours.","Activity: [""Complete Transaction"", ""Cancel Transaction""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Complete Transaction""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Cancel Transaction""})-[:CORR]->(entity) WHERE e2.timestamp <= e1.timestamp + duration({hours: 48}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"After a payment is confirmed, the user must not request a chargeback within 15 days.","Activity: [""Confirm Payment"", ""Request Chargeback""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Confirm Payment""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Request Chargeback""})-[:CORR]->(entity) WHERE e2.timestamp <= e1.timestamp + duration({days: 15}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"If a user submits a support ticket, they should not be able to close it within 5 days.","Activity: [""Submit Support Ticket"", ""Close Support Ticket""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Submit Support Ticket""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Close Support Ticket""})-[:CORR]->(entity) WHERE e2.timestamp <= e1.timestamp + duration({days: 5}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"Once a customer confirms their payment, they cannot request a refund within 14 days.","Activity: [""Confirm Payment"", ""Request Refund""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Confirm Payment""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Request Refund""})-[:CORR]->(entity) WHERE e2.timestamp <= e1.timestamp + duration({days: 14}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
A project manager cannot approve an expense report within 2 days of rejecting it.,"Activity: [""Reject Expense Report"", ""Approve Expense Report""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Reject Expense Report""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Approve Expense Report""})-[:CORR]->(entity) WHERE e2.timestamp <= e1.timestamp + duration({days: 2}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"After a user applies for a leave, they should not cancel it within 10 days.","Activity: [""Apply for Leave"", ""Cancel Leave""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Apply for Leave""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Cancel Leave""})-[:CORR]->(entity) WHERE e2.timestamp <= e1.timestamp + duration({days: 10}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"After submitting a loan request, a customer cannot apply for an additional loan within 30 days.","Activity: [""Submit Loan Request"", ""Apply for Additional Loan""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Submit Loan Request""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Apply for Additional Loan""})-[:CORR]->(entity) WHERE e2.timestamp <= e1.timestamp + duration({days: 30}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"After a person completes a survey, they should not be able to start a new survey within 1 hour.","Activity: [""Complete Survey"", ""Start New Survey""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Complete Survey""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Start New Survey""})-[:CORR]->(entity) WHERE e2.timestamp <= e1.timestamp + duration({hours: 1}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"After receiving a product, a customer should not request a return within 5 days.","Activity: [""Receive Product"", ""Request Return""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Receive Product""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Request Return""})-[:CORR]->(entity) WHERE e2.timestamp <= e1.timestamp + duration({days: 5}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"After updating a project status, a manager should not assign a new task within 3 days.","Activity: [""Update Project Status"", ""Assign Task""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Update Project Status""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Assign Task""})-[:CORR]->(entity) WHERE e2.timestamp <= e1.timestamp + duration({days: 3}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"After a visitor books an appointment, they cannot cancel it within 2 days.","Activity: [""Book Appointment"", ""Cancel Appointment""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Book Appointment""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Cancel Appointment""})-[:CORR]->(entity) WHERE e2.timestamp <= e1.timestamp + duration({days: 2}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"A task of type ""Process Payment"" must not be executed after 5 days from March 1st, 2021.","Activity: [""Process Payment""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Process Payment""}) WHERE e1.timestamp > datetime(""2021-03-01T00:00:00"") + duration({days: 5}) RETURN CASE WHEN count(e1) > 0 THEN false ELSE true END AS result"
"An event of type ""Submit Application"" must not occur before 10 days from December 1st, 2020.","Activity: [""Submit Application""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Submit Application""}) WHERE e1.timestamp < datetime(""2020-12-01T00:00:00"") - duration({days: 10}) RETURN CASE WHEN count(e1) > 0 THEN false ELSE true END AS result"
"A task of type ""Approve Request"" must not take place after 2 weeks from June 1st, 2021.","Activity: [""Approve Request""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Approve Request""}) WHERE e1.timestamp > datetime(""2021-06-01T00:00:00"") + duration({days: 14}) RETURN CASE WHEN count(e1) > 0 THEN false ELSE true END AS result"
"Activity ""Schedule Meeting"" must not be executed before 5 hours from the given timestamp of May 10th, 2022.","Activity: [""Schedule Meeting""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Schedule Meeting""}) WHERE e1.timestamp < datetime(""2022-05-10T00:00:00"") + duration({hours: 5}) RETURN CASE WHEN count(e1) > 0 THEN false ELSE true END AS result"
"A task ""Review Document"" must not be executed after 7 days from February 1st, 2023.","Activity: [""Review Document""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Review Document""}) WHERE e1.timestamp > datetime(""2023-02-01T00:00:00"") + duration({days: 7}) RETURN CASE WHEN count(e1) > 0 THEN false ELSE true END AS result"
"A task ""Conduct Interview"" must not occur more than 3 days after September 15th, 2022.","Activity: [""Conduct Interview""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Conduct Interview""}) WHERE e1.timestamp > datetime(""2022-09-15T00:00:00"") + duration({days: 3}) RETURN CASE WHEN count(e1) > 0 THEN false ELSE true END AS result"
"If a ""Complete Survey"" event happens, it must not take place more than 10 days before January 1st, 2023.","Activity: [""Complete Survey""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Complete Survey""}) WHERE e1.timestamp < datetime(""2023-01-01T00:00:00"") - duration({days: 10}) RETURN CASE WHEN count(e1) > 0 THEN false ELSE true END AS result"
"If an event of type ""Deliver Goods"" is carried out, it must not be executed more than 15 days before July 1st, 2022.","Activity: [""Deliver Goods""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Deliver Goods""}) WHERE e1.timestamp < datetime(""2022-07-01T00:00:00"") - duration({days: 15}) RETURN CASE WHEN count(e1) > 0 THEN false ELSE true END AS result"
"A task of type ""Final Review"" must not take place after 1 week from November 10th, 2020.","Activity: [""Final Review""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Final Review""}) WHERE e1.timestamp > datetime(""2020-11-10T00:00:00"") + duration({days: 7}) RETURN CASE WHEN count(e1) > 0 THEN false ELSE true END AS result"
"A task ""Process Refund"" should not occur earlier than 30 days after the timestamp of April 5th, 2021.","Activity: [""Process Refund""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Process Refund""}) WHERE e1.timestamp < datetime(""2021-04-05T00:00:00"") + duration({days: 30}) RETURN CASE WHEN count(e1) > 0 THEN false ELSE true END AS result"
"An order placement should not happen after 3 days from May 1st, 2021.","Activity: [""place order""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""place order""}) WHERE e1.timestamp > datetime(""2021-05-01T00:00:00"") + duration({days: 3}) RETURN CASE WHEN count(e1) > 0 THEN false ELSE true END AS ruleSatisfied"
"A ""Create Account"" event must not be executed more than 5 days after March 1st, 2022.","Activity: [""create account""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""create account""}) WHERE e1.timestamp > datetime(""2022-03-01T00:00:00"") + duration({days: 5}) RETURN CASE WHEN count(e1) > 0 THEN false ELSE true END AS ruleSatisfied"
"A ""Submit Proposal"" event must not occur before 7 days from January 1st, 2021.","Activity: [""submit proposal""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""submit proposal""}) WHERE e1.timestamp < datetime(""2021-01-01T00:00:00"") + duration({days: 7}) RETURN CASE WHEN count(e1) > 0 THEN false ELSE true END AS ruleSatisfied"
"A ""Approve Leave"" event must not be performed before 10 days from May 15th, 2020.","Activity: [""approve leave""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""approve leave""}) WHERE e1.timestamp < datetime(""2020-05-15T00:00:00"") + duration({days: 10}) RETURN CASE WHEN count(e1) > 0 THEN false ELSE true END AS ruleSatisfied"
"A ""Schedule Interview"" task must not be executed after 30 days from June 10th, 2021.","Activity: [""schedule interview""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""schedule interview""}) WHERE e1.timestamp > datetime(""2021-06-10T00:00:00"") + duration({days: 30}) RETURN CASE WHEN count(e1) > 0 THEN false ELSE true END AS ruleSatisfied"
"A ""Process Refund"" event must not be carried out before 15 days from February 1st, 2022.","Activity: [""process refund""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""process refund""}) WHERE e1.timestamp < datetime(""2022-02-01T00:00:00"") + duration({days: 15}) RETURN CASE WHEN count(e1) > 0 THEN false ELSE true END AS ruleSatisfied"
"A ""Launch Campaign"" event must not take place more than 20 days after April 1st, 2023.","Activity: [""launch campaign""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""launch campaign""}) WHERE e1.timestamp > datetime(""2023-04-01T00:00:00"") + duration({days: 20}) RETURN CASE WHEN count(e1) > 0 THEN false ELSE true END AS ruleSatisfied"
"The ""Close Ticket"" activity must not occur more than 7 days after December 5th, 2021.","Activity: [""close ticket""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""close ticket""}) WHERE e1.timestamp > datetime(""2021-12-05T00:00:00"") + duration({days: 7}) RETURN CASE WHEN count(e1) > 0 THEN false ELSE true END AS ruleSatisfied"
"A ""Send Invoice"" event must not happen after 3 days from January 10th, 2021.","Activity: [""send invoice""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""send invoice""}) WHERE e1.timestamp > datetime(""2021-01-10T00:00:00"") + duration({days: 3}) RETURN CASE WHEN count(e1) > 0 THEN false ELSE true END AS ruleSatisfied"
"A ""Update Profile"" event must not be executed before 5 days from March 1st, 2021.","Activity: [""Update Profile""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Update Profile""}) WHERE e1.timestamp < datetime(""2021-03-01T00:00:00"") + duration({days: 5}) RETURN CASE WHEN count(e1) > 0 THEN false ELSE true END AS ruleSatisfied"
"The ""Start Project"" activity must not occur more than 14 days after July 15th, 2021.","Activity: [""Start Project""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Start Project""}) WHERE e1.timestamp > datetime(""2021-07-15T00:00:00"") + duration({days: 14}) RETURN CASE WHEN count(e1) > 0 THEN false ELSE true END AS ruleSatisfied"
"No event of type ""Delete User"" may be performed for any entity belonging to the entity type ""Account"".","Activity: [""Delete User""], EntityType: [""Account""], Actor: []",MATCH (ent:Entity {EntityType: 'Account'}) MATCH (event:Event {Activity: 'Delete User'})-[:CORR]->(ent) RETURN CASE WHEN count(event) = 0 THEN true ELSE false END AS ruleSatisfied
"Performing an event of type ""Archive Document"" is forbidden for all files.","Activity: [""Archive Document""], EntityType: [""File""], Actor: []",MATCH (ent:Entity {EntityType: 'File'}) MATCH (event:Event {Activity: 'Archive Document'})-[:CORR]->(ent) RETURN CASE WHEN count(event) = 0 THEN true ELSE false END AS ruleSatisfied
"It is not allowed that an event of type ""Ship"" exists for any entity classified as type ""Order"".","Activity: [""Ship""], EntityType: [""Order""], Actor: []",MATCH (ent:Entity {EntityType: 'Order'}) MATCH (event:Event {Activity: 'Ship'})-[:CORR]->(ent) RETURN CASE WHEN count(event) = 0 THEN true ELSE false END AS ruleSatisfied
"For each entity of type ""Invoice"", events of type ""Approve Payment"" are not permissible.","Activity: [""Approve Payment""], EntityType: [""Invoice""], Actor: []",MATCH (ent:Entity {EntityType: 'Invoice'}) MATCH (event:Event {Activity: 'Approve Payment'})-[:CORR]->(ent) RETURN CASE WHEN count(event) = 0 THEN true ELSE false END AS ruleSatisfied
"No event of activity ""Publish Report"" is allowed for any project.","Activity: [""Publish Report""], EntityType: [""Project""], Actor: []",MATCH (ent:Entity {EntityType: 'Project'}) MATCH (event:Event {Activity: 'Publish Report'})-[:CORR]->(ent) RETURN CASE WHEN count(event) = 0 THEN true ELSE false END AS ruleSatisfied
"No ""Deactivate Account"" event is permitted for any entity of type ""User"".","Activity: [""Deactivate Account""], EntityType: [""User""], Actor: []",MATCH (ent:Entity {EntityType: 'User'}) MATCH (event:Event {Activity: 'Deactivate Account'})-[:CORR]->(ent) RETURN CASE WHEN count(event) = 0 THEN true ELSE false END AS ruleSatisfied
"Events with activity ""Terminate Contract"" must not occur for contracts.","Activity: [""Terminate Contract""], EntityType: [""Contract""], Actor: []",MATCH (ent:Entity {EntityType: 'Contract'}) MATCH (event:Event {Activity: 'Terminate Contract'})-[:CORR]->(ent) RETURN CASE WHEN count(event) = 0 THEN true ELSE false END AS ruleSatisfied
"Activity ""Transfer Ownership"" is prohibited for every entity of type ""Asset"".","Activity: [""Transfer Ownership""], EntityType: [""Asset""], Actor: []",MATCH (ent:Entity {EntityType: 'Asset'}) MATCH (event:Event {Activity: 'Transfer Ownership'})-[:CORR]->(ent) RETURN CASE WHEN count(event) = 0 THEN true ELSE false END AS ruleSatisfied
"No ""Revoke Access"" event may be performed for any entity belonging to type ""Access Control"".","Activity: [""Revoke Access""], EntityType: [""Access Control""], Actor: []",MATCH (ent:Entity {EntityType: 'Access Control'}) MATCH (event:Event {Activity: 'Revoke Access'})-[:CORR]->(ent) RETURN CASE WHEN count(event) = 0 THEN true ELSE false END AS ruleSatisfied
"Performing ""Update Policy"" is forbidden for all entities of type ""Policy Document"".","Activity: [""Update Policy""], EntityType: [""Policy Document""], Actor: []",MATCH (ent:Entity {EntityType: 'Policy Document'}) MATCH (event:Event {Activity: 'Update Policy'})-[:CORR]->(ent) RETURN CASE WHEN count(event) = 0 THEN true ELSE false END AS ruleSatisfied
"Issuing refunds must not be performed for any entity classified as a ""Transaction"".","Activity: [""Issue Refund""], EntityType: [""Transaction""], Actor: []",MATCH (ent:Entity {EntityType: 'Transaction'}) MATCH (event:Event {Activity: 'Issue Refund'})-[:CORR]->(ent) RETURN CASE WHEN count(event) = 0 THEN true ELSE false END AS ruleSatisfied
Submitting tax reports is not allowed for any employee.,"Activity: [""Submit Tax Report""], EntityType: [""Employee""], Actor: []",MATCH (ent:Entity {EntityType: 'Employee'}) MATCH (event:Event {Activity: 'Submit Tax Report'})-[:CORR]->(ent) RETURN CASE WHEN count(event) = 0 THEN true ELSE false END AS ruleSatisfied
"Approving leave applications must not occur for any entity of type ""Request"".","Activity: [""Approve Leave""], EntityType: [""Request""], Actor: []",MATCH (ent:Entity {EntityType: 'Request'}) MATCH (event:Event {Activity: 'Approve Leave'})-[:CORR]->(ent) RETURN CASE WHEN count(event) = 0 THEN true ELSE false END AS ruleSatisfied
Processing insurance claims is not permitted for any claim.,"Activity: [""Process Insurance Claim""], EntityType: [""Claim""], Actor: []",MATCH (ent:Entity {EntityType: 'Claim'}) MATCH (event:Event {Activity: 'Process Insurance Claim'})-[:CORR]->(ent) RETURN CASE WHEN count(event) = 0 THEN true ELSE false END AS ruleSatisfied
"Updating access permissions must not take place for entities classified as type ""User Group"".","Activity: [""Update Access Permission""], EntityType: [""User Group""], Actor: []",MATCH (ent:Entity {EntityType: 'User Group'}) MATCH (event:Event {Activity: 'Update Access Permission'})-[:CORR]->(ent) RETURN CASE WHEN count(event) = 0 THEN true ELSE false END AS ruleSatisfied
"Scheduling maintenance for any entity of type ""Vehicle"" is prohibited.","Activity: [""Schedule Maintenance""], EntityType: [""Vehicle""], Actor: []",MATCH (ent:Entity {EntityType: 'Vehicle'}) MATCH (event:Event {Activity: 'Schedule Maintenance'})-[:CORR]->(ent) RETURN CASE WHEN count(event) = 0 THEN true ELSE false END AS ruleSatisfied
Recording attendance is not allowed for any meeting.,"Activity: [""Record Attendance""], EntityType: [""Meeting""], Actor: []",MATCH (ent:Entity {EntityType: 'Meeting'}) MATCH (event:Event {Activity: 'Record Attendance'})-[:CORR]->(ent) RETURN CASE WHEN count(event) = 0 THEN true ELSE false END AS ruleSatisfied
Activating user profiles is not permissible for customers.,"Activity: [""Activate Profile""], EntityType: [""Customer""], Actor: []",MATCH (ent:Entity {EntityType: 'Customer'}) MATCH (event:Event {Activity: 'Activate Profile'})-[:CORR]->(ent) RETURN CASE WHEN count(event) = 0 THEN true ELSE false END AS ruleSatisfied
"Publishing announcements is not allowed for any entity of type ""Notice Board"".","Activity: [""Publish Announcement""], EntityType: [""Notice Board""], Actor: []",MATCH (ent:Entity {EntityType: 'Notice Board'}) MATCH (event:Event {Activity: 'Publish Announcement'})-[:CORR]->(ent) RETURN CASE WHEN count(event) = 0 THEN true ELSE false END AS ruleSatisfied
"Filing tax returns must not occur for any entity classified as a ""Business Unit"".","Activity: [""File Tax Return""], EntityType: [""Business Unit""], Actor: []",MATCH (ent:Entity {EntityType: 'Business Unit'}) MATCH (event:Event {Activity: 'File Tax Return'})-[:CORR]->(ent) RETURN CASE WHEN count(event) = 0 THEN true ELSE false END AS ruleSatisfied
"Events of type ""Submit Tax Form"" are prohibited.","Activity: [""Submit Tax Form""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Submit Tax Form'}) RETURN COUNT(e) = 0 AS ruleSatisfied
"No event of type ""Delete Account"" may be carried out.","Activity: [""Delete Account""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Delete Account'}) RETURN COUNT(e) = 0 AS ruleSatisfied
"Performing activity ""Generate Report"" is not allowed.","Activity: [""Generate Report""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Generate Report'}) RETURN COUNT(e) = 0 AS ruleSatisfied
"Execution of any event of type ""Assign Task"" is forbidden.","Activity: [""Assign Task""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Assign Task'}) RETURN COUNT(e) = 0 AS ruleSatisfied
"A task of type ""Approve Loan"" must never take place.","Activity: [""Approve Loan""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Approve Loan'}) RETURN COUNT(e) = 0 AS ruleSatisfied
"There is no event with activity ""Open Account"".","Activity: [""Open Account""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Open Account'}) RETURN COUNT(e) = 0 AS ruleSatisfied
"Events of type ""Ship Package"" must not occur.","Activity: [""Ship Package""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Ship Package'}) RETURN COUNT(e) = 0 AS ruleSatisfied
"Events with activity ""Mark Attendance"" are forbidden.","Activity: [""Mark Attendance""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Mark Attendance'}) RETURN COUNT(e) = 0 AS ruleSatisfied
"Performing an event of type ""Close Account"" is not allowed.","Activity: [""Close Account""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Close Account'}) RETURN COUNT(e) = 0 AS ruleSatisfied
"An event of type ""Reset Password"" has never occurred.","Activity: [""Reset Password""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Reset Password'}) RETURN COUNT(e) = 0 AS ruleSatisfied
Sending an invoice to the client is strictly prohibited.,"Activity: [""Send Invoice""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Send Invoice'}) RETURN COUNT(e) = 0 AS ruleSatisfied
Finalizing the employee's performance review must not take place.,"Activity: [""Finalize Review""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Finalize Review'}) RETURN COUNT(e) = 0 AS ruleSatisfied
No actions involving the deletion of customer profiles are allowed.,"Activity: [""Delete Profile""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Delete Profile'}) RETURN COUNT(e) = 0 AS ruleSatisfied
Generating monthly financial statements must not occur.,"Activity: [""Generate Statements""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Generate Statements'}) RETURN COUNT(e) = 0 AS ruleSatisfied
Assigning a new project to the team is not permitted.,"Activity: [""Assign Project""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Assign Project'}) RETURN COUNT(e) = 0 AS ruleSatisfied
Completing a quality assurance review is forbidden.,"Activity: [""Complete QA Review""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Complete QA Review'}) RETURN COUNT(e) = 0 AS ruleSatisfied
Logging a customer complaint into the system must not happen.,"Activity: [""Log Complaint""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Log Complaint'}) RETURN COUNT(e) = 0 AS ruleSatisfied
No actions related to the initiation of training sessions are allowed.,"Activity: [""Initiate Training""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Initiate Training'}) RETURN COUNT(e) = 0 AS ruleSatisfied
No event involving the shipment of customer orders may occur.,"Activity: [""Ship Order""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Ship Order'}) RETURN COUNT(e) = 0 AS ruleSatisfied
Submitting reports to regulatory authorities is not allowed.,"Activity: [""Submit Reports""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Submit Reports'}) RETURN COUNT(e) = 0 AS ruleSatisfied
At least one review of submitted applications must be performed.,"Activity: [""Review Applications""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Review Applications'}) RETURN COUNT(e) > 0 AS ruleSatisfied
An approval of customer requests is required at least once.,"Activity: [""Approve Requests""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Approve Requests'}) RETURN COUNT(e) > 0 AS ruleSatisfied
At least one task involving the processing of orders must occur.,"Activity: [""Process Orders""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Process Orders'}) RETURN COUNT(e) > 0 AS ruleSatisfied
It is mandatory to complete at least one evaluation of vendor qualifications.,"Activity: [""Evaluate Vendors""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Evaluate Vendors'}) RETURN COUNT(e) > 0 AS ruleSatisfied
At least one audit of financial records must be conducted.,"Activity: [""Audit Records""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Audit Records'}) RETURN COUNT(e) > 0 AS ruleSatisfied
Submitting project reports must occur at least once during the process.,"Activity: [""Submit Reports""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Submit Reports'}) RETURN COUNT(e) > 0 AS ruleSatisfied
There must be at least one record of quality checks performed.,"Activity: [""Perform Quality Checks""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Perform Quality Checks'}) RETURN COUNT(e) > 0 AS ruleSatisfied
"At a minimum, one invoice generation task must be carried out.","Activity: [""Generate Invoice""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Generate Invoice'}) RETURN COUNT(e) > 0 AS ruleSatisfied
Logging at least one incident report is mandatory.,"Activity: [""log incident""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'log incident'}) RETURN COUNT(e) > 0 AS ruleSatisfied
The completion of at least one product testing cycle is necessary.,"Activity: [""test product""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'test product'}) RETURN COUNT(e) > 0 AS ruleSatisfied
"At least one event of the ""Create Order"" activity must occur.","Activity: [""create order""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'create order'}) RETURN COUNT(e) > 0 AS ruleSatisfied
"A ""Approve Loan"" task must be performed at least once.","Activity: [""approve loan""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'approve loan'}) RETURN COUNT(e) > 0 AS ruleSatisfied
"There must be at least one execution of the ""Ship Item"" activity.","Activity: [""ship item""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'ship item'}) RETURN COUNT(e) > 0 AS ruleSatisfied
"Logging at least one ""Resolve Complaint"" event is mandatory.","Activity: [""resolve complaint""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'resolve complaint'}) RETURN COUNT(e) > 0 AS ruleSatisfied
"At least one occurrence of the ""Process Payment"" activity must take place.","Activity: [""process payment""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'process payment'}) RETURN COUNT(e) > 0 AS ruleSatisfied
"A ""Complete Registration"" task must happen at least once.","Activity: [""complete registration""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'complete registration'}) RETURN COUNT(e) > 0 AS ruleSatisfied
"At least one ""Inspect Vehicle"" task must be executed.","Activity: [""inspect vehicle""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'inspect vehicle'}) RETURN COUNT(e) > 0 AS ruleSatisfied
"There must be at least one instance of the ""Deliver Package"" activity.","Activity: [""Deliver Package""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Deliver Package'}) RETURN COUNT(e) > 0 AS ruleSatisfied
"At least one ""Analyze Data"" event must occur during the process.","Activity: [""Analyze Data""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Analyze Data'}) RETURN COUNT(e) > 0 AS ruleSatisfied
"An ""Issue Refund"" task must be carried out at least once.","Activity: [""Issue Refund""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Issue Refund'}) RETURN COUNT(e) > 0 AS ruleSatisfied
Sarah must not approve a loan within 10 days before a loan application is submitted for the same object.,"Activity: [""Approve Loan"", ""Submit Loan Application""], EntityType: [], Actor: [""Sarah""]","MATCH (e2:Event {Activity: 'Submit Loan Application'})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: 'Approve Loan', Actor: 'Sarah'})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({days: 10}) RETURN CASE WHEN count(e2) > 0 THEN false ELSE true END AS result"
John must not deliver goods within 5 days after receiving a complaint for the same instance.,"Activity: [""Deliver Goods"", ""Receive Complaint""], EntityType: [], Actor: [""John""]","MATCH (e2:Event {Activity: 'Receive Complaint'})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: 'Deliver Goods', Actor: 'John'})-[:CORR]->(entity) WHERE e1.timestamp <= e2.timestamp + duration({days: 5})  RETURN CASE WHEN count(e2) > 0 THEN false ELSE true END AS result"
Emily is prohibited from completing a customer survey 3 days before an order is placed for the same entity.,"Activity: [""Complete Customer Survey"", ""Place Order""], EntityType: [], Actor: [""Emily""]","MATCH (e2:Event {Activity: 'Place Order'})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: 'Complete Customer Survey', Actor: 'Emily'})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({days: 3}) RETURN CASE WHEN count(e2) > 0 THEN false ELSE true END AS result"
A manager must not assign tasks within 2 days after a team meeting for the same object.,"Activity: [""Assign Task"", ""Team Meeting""], EntityType: [], Actor: [""Manager""]","MATCH (e2:Event {Activity: 'Team Meeting'})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: 'Assign Task', Actor: 'Manager'})-[:CORR]->(entity) WHERE e1.timestamp <= e2.timestamp + duration({days: 2}) RETURN CASE WHEN count(e2) > 0 THEN false ELSE true END AS result"
Lucy must not update customer records 1 day before approving a loan for the same instance.,"Activity: [""Update Customer Records"", ""Approve Loan""], EntityType: [], Actor: [""Lucy""]","MATCH (e2:Event {Activity: 'Approve Loan'})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: 'Update Customer Records', Actor: 'Lucy'})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({days: 1}) RETURN CASE WHEN count(e2) > 0 THEN false ELSE true END AS result"
Mark must not review a purchase order within 3 days before approving the same order for the same entity.,"Activity: [""Review Purchase Order"", ""Approve Order""], EntityType: [], Actor: [""Mark""]","MATCH (e2:Event {Activity: 'Approve Order'})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: 'Review Purchase Order', Actor: 'Mark'})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({days: 3}) RETURN CASE WHEN count(e2) > 0 THEN false ELSE true END AS result"
Alice must not validate a contract within 14 days after submitting the contract for review for the same object.,"Activity: [""Validate Contract"", ""Submit Contract for Review""], EntityType: [], Actor: [""Alice""]","MATCH (e2:Event {Activity: 'Submit Contract for Review'})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: 'Validate Contract', Actor: 'Alice'})-[:CORR]->(entity) WHERE e1.timestamp <= e2.timestamp + duration({days: 14}) RETURN CASE WHEN count(e2) > 0 THEN false ELSE true END AS result"
The engineer must not test a device within 1 day after a design blueprint is approved for the same instance.,"Activity: [""Approve Design Blueprint"", ""Test Device""], EntityType: [], Actor: [""Engineer""]","MATCH (e2:Event {Activity: 'Approve Design Blueprint'})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: 'Test Device', Actor: 'Engineer'})-[:CORR]->(entity) WHERE e1.timestamp <= e2.timestamp + duration({days: 1}) RETURN CASE WHEN count(e2) > 0 THEN false ELSE true END AS result"
Bob must not finalize a report within 5 days before the report submission deadline for the same object.,"Activity: [""Finalize Report"", ""Report Submission Deadline""], EntityType: [], Actor: [""Bob""]","MATCH (e2:Event {Activity: 'Report Submission Deadline'})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: 'Finalize Report', Actor: 'Bob'})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({days: 5}) RETURN CASE WHEN count(e2) > 0 THEN false ELSE true END AS result"
James must not schedule maintenance within 30 days after a new machine is installed for the same instance.,"Activity: [""Schedule Maintenance"", ""Install Machine""], EntityType: [], Actor: [""James""]","MATCH (e2:Event {Activity: 'Install Machine'})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: 'Schedule Maintenance', Actor: 'James'})-[:CORR]->(entity) WHERE e1.timestamp <= e2.timestamp + duration({days: 30}) RETURN CASE WHEN count(e2) > 0 THEN false ELSE true END AS result"
"Alice is prohibited from performing a ""Cancel Order"" event before a ""Create Invoice"" event within 5 days for the same entity.","Activity: [""Cancel Order"", ""Create Invoice""], EntityType: [], Actor: [""Alice""]","MATCH (e2:Event {Activity: 'Create Invoice'})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: 'Cancel Order', Actor: 'Alice'})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({days: 5}) RETURN CASE WHEN count(e2) > 0 THEN false ELSE true END AS result"
"Bob must not perform the ""Approve Payment"" activity after 3 days of a ""Create Order"" event for the same object.","Activity: [""Approve Payment"", ""Create Order""], EntityType: [], Actor: [""Bob""]","MATCH (e2:Event {Activity: 'Create Order'})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: 'Approve Payment', Actor: 'Bob'})-[:CORR]->(entity) WHERE e1.timestamp <= e2.timestamp + duration({days: 3}) RETURN CASE WHEN count(e2) > 0 THEN false ELSE true END AS result"
"Sarah must not perform a ""Ship Product"" event within 7 days after a ""Create Order"" event for the same instance.","Activity: [""Ship Product"", ""Create Order""], EntityType: [], Actor: [""Sarah""]","MATCH (e2:Event {Activity: 'Create Order'})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: 'Ship Product', Actor: 'Sarah'})-[:CORR]->(entity) WHERE e1.timestamp <= e2.timestamp + duration({days: 7}) RETURN CASE WHEN count(e2) > 0 THEN false ELSE true END AS result"
"Tom is prohibited from performing a ""Create Invoice"" event before an ""Approve Payment"" event within 10 days for the same object.","Activity: [""Create Invoice"", ""Approve Payment""], EntityType: [], Actor: [""Tom""]","MATCH (e2:Event {Activity: 'Approve Payment'})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: 'Create Invoice', Actor: 'Tom'})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({days: 10}) RETURN CASE WHEN count(e2) > 0 THEN false ELSE true END AS result"
"Emma must not perform a ""Dispatch Shipment"" event within 3 days after an ""Approve Shipment"" event for the same instance.","Activity: [""Dispatch Shipment"", ""Approve Shipment""], EntityType: [], Actor: [""Emma""]","MATCH (e2:Event {Activity: 'Approve Shipment'})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: 'Dispatch Shipment', Actor: 'Emma'})-[:CORR]->(entity) WHERE e1.timestamp <= e2.timestamp + duration({days: 3}) RETURN CASE WHEN count(e2) > 0 THEN false ELSE true END AS result"
"Rachel must not perform a ""Approve Refund"" task within 2 days before a ""Process Refund"" event for the same entity.","Activity: [""Approve Refund"", ""Process Refund""], EntityType: [], Actor: [""Rachel""]","MATCH (e2:Event {Activity: 'Process Refund'})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: 'Approve Refund', Actor: 'Rachel'})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({days: 2}) RETURN CASE WHEN count(e2) > 0 THEN false ELSE true END AS result"
"Olivia must not perform a ""Create Order"" event within 6 days after the activity  ""Create Invoice"" has been performed for the same object.","Activity: [""Create Order"", ""Create Invoice""], EntityType: [], Actor: [""Olivia""]","MATCH (e2:Event {Activity: 'Create Invoice'})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: 'Create Order', Actor: 'Olivia'})-[:CORR]->(entity) WHERE e1.timestamp <= e2.timestamp + duration({days: 6}) RETURN CASE WHEN count(e2) > 0 THEN false ELSE true END AS result"
"Jack must not perform a ""Process Payment"" event within 8 days before a ""Create Order"" event for the same instance.","Activity: [""Process Payment"", ""Create Order""], EntityType: [], Actor: [""Jack""]","MATCH (e2:Event {Activity: 'Create Order'})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: 'Process Payment', Actor: 'Jack'})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({days: 8}) CASE WHEN count(e2) > 0 THEN false ELSE true END AS result"
"John must not perform an ""Approve Refund"" event within 4 days after the activity  ""Process Refund"" has been performed for the same object.","Activity: [""Approve Refund"", ""Process Refund""], EntityType: [], Actor: [""John""]","MATCH (e2:Event {Activity: 'Process Refund'})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: 'Approve Refund', Actor: 'John'})-[:CORR]->(entity) WHERE e1.timestamp <= e2.timestamp + duration({days: 4}) RETURN CASE WHEN count(e2) > 0 THEN false ELSE true END AS result"
Customers should not place more than three orders within a week.,"Activity: [""place order""], EntityType: [""customer""], Actor: []","MATCH (customer:Entity {EntityType: ""Customer""})<-[:CORR]-(orderEvent:Event {Activity: ""place order""}) WITH customer, orderEvent WITH customer, COLLECT(orderEvent.timestamp) AS timestamps WITH customer, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 7})]) <= 3) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS customerRules RETURN ALL(rule IN customerRules WHERE rule = true) AS ruleHoldsForAllCustomers"
An employee should not submit a vacation request more than once per month.,"Activity: [""submit vacation request""], EntityType: [""employee""], Actor: []","MATCH (employee:Entity {EntityType: ""Employee""})<-[:CORR]-(vacationEvent:Event {Activity: ""submit vacation request""}) WITH employee, vacationEvent WITH employee, COLLECT(vacationEvent.timestamp) AS timestamps WITH employee, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({months: 1})]) <= 1) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS employeeRules RETURN ALL(rule IN employeeRules WHERE rule = true) AS ruleHoldsForAllEmployees"
A student cannot enroll in more than two courses in a semester.,"Activity: [""enroll in course""], EntityType: [""student""], Actor: []","MATCH (student:Entity {EntityType: ""Student""})<-[:CORR]-(enrollmentEvent:Event {Activity: ""enroll in course""}) WITH student, enrollmentEvent WITH student, COLLECT(enrollmentEvent.timestamp) AS timestamps WITH student, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({months: 6})]) <= 2) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS studentRules RETURN ALL(rule IN studentRules WHERE rule = true) AS ruleHoldsForAllStudents"
No user should reset their password more than five times in a day.,"Activity: [""reset password""], EntityType: [""user""], Actor: []","MATCH (user:Entity {EntityType: ""User""})<-[:CORR]-(passwordEvent:Event {Activity: ""reset password""}) WITH user, passwordEvent WITH user, COLLECT(passwordEvent.timestamp) AS timestamps WITH user, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 1})]) <= 5) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS userRules RETURN ALL(rule IN userRules WHERE rule = true) AS ruleHoldsForAllUsers"
A driver should not log more than four rides per day.,"Activity: [""log ride""], EntityType: [""driver""], Actor: []","MATCH (driver:Entity {EntityType: ""Driver""})<-[:CORR]-(rideEvent:Event {Activity: ""log ride""}) WITH driver, rideEvent WITH driver, COLLECT(rideEvent.timestamp) AS timestamps WITH driver, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 1})]) <= 4) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS driverRules RETURN ALL(rule IN driverRules WHERE rule = true) AS ruleHoldsForAllDrivers"
A supplier should not update their product catalog more than twice a month.,"Activity: [""update product catalog""], EntityType: [""supplier""], Actor: []","MATCH (supplier:Entity {EntityType: ""Supplier""})<-[:CORR]-(updateEvent:Event {Activity: ""update product catalog""}) WITH supplier, updateEvent WITH supplier, COLLECT(updateEvent.timestamp) AS timestamps WITH supplier, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({months: 1})]) <= 2) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS supplierRules RETURN ALL(rule IN supplierRules WHERE rule = true) AS ruleHoldsForAllSuppliers"
Customers may not submit more than three refund requests per week.,"Activity: [""submit refund request""], EntityType: [""customer""], Actor: []","MATCH (customer:Entity {EntityType: ""Customer""})<-[:CORR]-(refundEvent:Event {Activity: ""submit refund request""}) WITH customer, refundEvent WITH customer, COLLECT(refundEvent.timestamp) AS timestamps WITH customer, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 7})]) <= 3) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS customerRules RETURN ALL(rule IN customerRules WHERE rule = true) AS ruleHoldsForAllCustomers"
A warehouse should not process more than ten shipments in a single day.,"Activity: [""process shipment""], EntityType: [""warehouse""], Actor: []","MATCH (warehouse:Entity {EntityType: ""Warehouse""})<-[:CORR]-(shipmentEvent:Event {Activity: ""process shipment""}) WITH warehouse, shipmentEvent WITH warehouse, COLLECT(shipmentEvent.timestamp) AS timestamps WITH warehouse, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 1})]) <= 10) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS warehouseRules RETURN ALL(rule IN warehouseRules WHERE rule = true) AS ruleHoldsForAllWarehouses"
Patients should not book more than two appointments within a month.,"Activity: [""book appointment""], EntityType: [""patient""], Actor: []","MATCH (patient:Entity {EntityType: ""Patient""})<-[:CORR]-(appointmentEvent:Event {Activity: ""book appointment""}) WITH patient, appointmentEvent WITH patient, COLLECT(appointmentEvent.timestamp) AS timestamps WITH patient, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({months: 1})]) <= 2) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS patientRules RETURN ALL(rule IN patientRules WHERE rule = true) AS ruleHoldsForAllPatients"
A bank account should not have more than five withdrawal transactions in a day.,"Activity: [""Withdraw Money""], EntityType: [""Bank Account""], Actor: []","MATCH (account:Entity {EntityType: ""Bank Account""})<-[:CORR]-(withdrawalEvent:Event {Activity: ""Withdraw Money""}) WITH account, withdrawalEvent WITH account, COLLECT(withdrawalEvent.timestamp) AS timestamps WITH account, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 1})]) <= 5) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS accountRules RETURN ALL(rule IN accountRules WHERE rule = true) AS ruleHoldsForAllAccounts"
"A ""Purchase Request"" event must not be recorded more than five times per month for any department.","Activity: [""Purchase Request""], EntityType: [""Department""], Actor: []","MATCH (department:Entity {EntityType: ""Department""})<-[:CORR]-(purchaseEvent:Event {Activity: ""Purchase Request""}) WITH department, purchaseEvent WITH department, COLLECT(purchaseEvent.timestamp) AS timestamps WITH department, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({months: 1})]) <= 5) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS departmentRules RETURN ALL(rule IN departmentRules WHERE rule = true) AS ruleHoldsForAllDepartments"
"No ""Login Attempt"" event should be triggered more than ten times per day for any user.","Activity: [""Login Attempt""], EntityType: [""User""], Actor: []","MATCH (user:Entity {EntityType: ""User""})<-[:CORR]-(loginEvent:Event {Activity: ""Login Attempt""}) WITH user, loginEvent WITH user, COLLECT(loginEvent.timestamp) AS timestamps WITH user, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 1})]) <= 10) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS userRules RETURN ALL(rule IN userRules WHERE rule = true) AS ruleHoldsForAllUsers"
"A ""Stock Update"" event must not occur more than twice a day per product.","Activity: [""Stock Update""], EntityType: [""Product""], Actor: []","MATCH (product:Entity {EntityType: ""Product""})<-[:CORR]-(stockEvent:Event {Activity: ""Stock Update""}) WITH product, stockEvent WITH product, COLLECT(stockEvent.timestamp) AS timestamps WITH product, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 1})]) <= 2) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS productRules RETURN ALL(rule IN productRules WHERE rule = true) AS ruleHoldsForAllProducts"
"No ""Ticket Submission"" event should be created more than five times per customer in a week.","Activity: [""Ticket Submission""], EntityType: [""Customer""], Actor: []","MATCH (customer:Entity {EntityType: ""Customer""})<-[:CORR]-(ticketEvent:Event {Activity: ""Ticket Submission""}) WITH customer, ticketEvent WITH customer, COLLECT(ticketEvent.timestamp) AS timestamps WITH customer, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 7})]) <= 5) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS customerRules RETURN ALL(rule IN customerRules WHERE rule = true) AS ruleHoldsForAllCustomers"
"A ""Project Approval"" event must not be registered more than once per quarter for any project.","Activity: [""Project Approval""], EntityType: [""Project""], Actor: []","MATCH (project:Entity {EntityType: ""Project""})<-[:CORR]-(approvalEvent:Event {Activity: ""Project Approval""}) WITH project, approvalEvent WITH project, COLLECT(approvalEvent.timestamp) AS timestamps WITH project, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({months: 3})]) <= 1) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS projectRules RETURN ALL(rule IN projectRules WHERE rule = true) AS ruleHoldsForAllProjects"
"Each supplier should not generate more than two ""Invoice Submission"" events per month.","Activity: [""Invoice Submission""], EntityType: [""Supplier""], Actor: []","MATCH (supplier:Entity {EntityType: ""Supplier""})<-[:CORR]-(invoiceEvent:Event {Activity: ""Invoice Submission""}) WITH supplier, invoiceEvent WITH supplier, COLLECT(invoiceEvent.timestamp) AS timestamps WITH supplier, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({months: 1})]) <= 2) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS supplierRules RETURN ALL(rule IN supplierRules WHERE rule = true) AS ruleHoldsForAllSuppliers"
"A ""Payment Confirmation"" event must not be issued more than three times a day per bank account.","Activity: [""Payment Confirmation""], EntityType: [""Bank Account""], Actor: []","MATCH (account:Entity {EntityType: ""Bank Account""})<-[:CORR]-(paymentEvent:Event {Activity: ""Payment Confirmation""}) WITH account, paymentEvent WITH account, COLLECT(paymentEvent.timestamp) AS timestamps WITH account, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 1})]) <= 3) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS accountRules RETURN ALL(rule IN accountRules WHERE rule = true) AS ruleHoldsForAllAccounts"
"No ""Delivery Confirmation"" event should be generated more than four times per supplier per week.","Activity: [""Delivery Confirmation""], EntityType: [""Supplier""], Actor: []","MATCH (supplier:Entity {EntityType: ""Supplier""})<-[:CORR]-(deliveryEvent:Event {Activity: ""Delivery Confirmation""}) WITH supplier, deliveryEvent WITH supplier, COLLECT(deliveryEvent.timestamp) AS timestamps WITH supplier, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 7})]) <= 4) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS supplierRules RETURN ALL(rule IN supplierRules WHERE rule = true) AS ruleHoldsForAllSuppliers"
"John must not create an order after May 5th, 2023.","Activity: [""Create Order""], EntityType: [], Actor: [""John""]","MATCH (e:Event) WHERE e.Activity = ""Create Order"" AND e.Actor = ""John"" AND e.timestamp > datetime(""2023-05-05T23:59:59"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"Alice must avoid completing the ""Research Paper"" activity before June 1st, 2023.","Activity: [""Research Paper""], EntityType: [], Actor: [""Alice""]","MATCH (e:Event) WHERE e.Activity = ""Research Paper"" AND e.Actor = ""Alice"" AND e.timestamp < datetime(""2023-06-01T00:00:00"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"Sophia must not perform the ""Client Feedback"" event after January 1st, 2024.","Activity: [""client feedback""], EntityType: [], Actor: [""sophia""]","MATCH (e:Event) WHERE e.Activity = ""client feedback"" AND e.Actor = ""sophia"" AND e.timestamp > datetime(""2024-01-01T23:59:59"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"Emma must not submit the ""Annual Report"" after the end of the fiscal year on December 31st, 2023.","Activity: [""annual report""], EntityType: [], Actor: [""emma""]","MATCH (e:Event) WHERE e.Activity = ""annual report"" AND e.Actor = ""emma"" AND e.timestamp > datetime(""2023-12-31T23:59:59"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"Mike is prohibited from performing the ""Team Meeting"" event before February 15th, 2024.","Activity: [""team meeting""], EntityType: [], Actor: [""mike""]","MATCH (e:Event) WHERE e.Activity = ""team meeting"" AND e.Actor = ""mike"" AND e.timestamp < datetime(""2024-02-15T00:00:00"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"George must refrain from performing the ""Client Meeting"" before August 1st, 2023.","Activity: [""client meeting""], EntityType: [], Actor: [""george""]","MATCH (e:Event) WHERE e.Activity = ""client meeting"" AND e.Actor = ""george"" AND e.timestamp < datetime(""2023-08-01T00:00:00"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"Daniel must avoid performing an event with activity""Product Launch"" after December 15th, 2023.","Activity: [""product launch""], EntityType: [], Actor: [""daniel""]","MATCH (e:Event) WHERE e.Activity = ""product launch"" AND e.Actor = ""daniel"" AND e.timestamp > datetime(""2023-12-15T23:59:59"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"Olivia must not perform an event of type ""Market Research"" at any time after March 10th 2024.","Activity: [""market research""], EntityType: [], Actor: [""olivia""]","MATCH (e:Event) WHERE e.Activity = ""market research"" AND e.Actor = ""olivia"" AND e.timestamp > datetime(""2024-03-10T23:59:59"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"John is prohibited from performing a ""Contract Negotiation"" task before April 1st, 2024.","Activity: [""contract negotiation""], EntityType: [], Actor: [""john""]","MATCH (e:Event) WHERE e.Activity = ""contract negotiation"" AND e.Actor = ""john"" AND e.timestamp < datetime(""2024-04-01T00:00:00"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"Rachel must not finalize the ""Product Design"" before July 15th, 2024.","Activity: [""product design""], EntityType: [], Actor: [""rachel""]","MATCH (e:Event) WHERE e.Activity = ""product design"" AND e.Actor = ""rachel"" AND e.timestamp < datetime(""2024-07-15T00:00:00"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"Sarah must not submit a purchase order after September 30th, 2023.","Activity: [""submit purchase order""], EntityType: [], Actor: [""sarah""]","MATCH (e:Event) WHERE e.Activity = ""submit purchase order"" AND e.Actor = ""sarah"" AND e.timestamp > datetime(""2023-09-30T23:59:59"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"Alex must not approve a contract before December 1st, 2023.","Activity: [""Approve Contract""], EntityType: [], Actor: [""Alex""]","MATCH (e:Event) WHERE e.Activity = ""Approve Contract"" AND e.Actor = ""Alex"" AND e.timestamp < datetime(""2023-12-01T00:00:00"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
Jennifer must not complete a product return after the last day of the September 2023.,"Activity: [""Complete Product Return""], EntityType: [], Actor: [""Jennifer""]","MATCH (e:Event) WHERE e.Activity = ""Complete Product Return"" AND e.Actor = ""Jennifer"" AND e.timestamp > datetime(""2023-09-30T23:59:59"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"Brian is not allowed to submit an invoice before July 15th, 2024.","Activity: [""Submit Invoice""], EntityType: [], Actor: [""Brian""]","MATCH (e:Event) WHERE e.Activity = ""Submit Invoice"" AND e.Actor = ""Brian"" AND e.timestamp < datetime(""2024-07-15T00:00:00"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"John must not approve a leave request after November 1st, 2023.","Activity: [""Approve Leave Request""], EntityType: [], Actor: [""John""]","MATCH (e:Event) WHERE e.Activity = ""Approve Leave Request"" AND e.Actor = ""John"" AND e.timestamp > datetime(""2023-11-01T23:59:59"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"Lucy must not complete a payment after June 30th, 2023.","Activity: [""Complete Payment""], EntityType: [], Actor: [""Lucy""]","MATCH (e:Event) WHERE e.Activity = ""Complete Payment"" AND e.Actor = ""Lucy"" AND e.timestamp > datetime(""2023-06-30T23:59:59"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"Emma must not create a new order after October 15th, 2023.","Activity: [""Create New Order""], EntityType: [], Actor: [""Emma""]","MATCH (e:Event) WHERE e.Activity = ""Create New Order"" AND e.Actor = ""Emma"" AND e.timestamp > datetime(""2023-10-15T23:59:59"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"Noah must not issue a refund after December 31st, 2023.","Activity: [""Issue Refund""], EntityType: [], Actor: [""Noah""]","MATCH (e:Event) WHERE e.Activity = ""Issue Refund"" AND e.Actor = ""Noah"" AND e.timestamp > datetime(""2023-12-31T23:59:59"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"Olivia must not initiate a product return after February 28th, 2023.","Activity: [""Initiate Product Return""], EntityType: [], Actor: [""Olivia""]","MATCH (e:Event) WHERE e.Activity = ""Initiate Product Return"" AND e.Actor = ""Olivia"" AND e.timestamp > datetime(""2023-02-28T23:59:59"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"James must not submit a timesheet after March 31st, 2023.","Activity: [""Submit Timesheet""], EntityType: [], Actor: [""James""]","MATCH (e:Event) WHERE e.Activity = ""Submit Timesheet"" AND e.Actor = ""James"" AND e.timestamp > datetime(""2023-03-31T23:59:59"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"Sarah must submit a purchase order before January 1st, 2023.","Activity: [""Submit Purchase Order""], EntityType: [], Actor: [""Sarah""]","MATCH (e:Event) WHERE e.Activity = ""Submit Purchase Order"" AND e.Actor = ""Sarah"" AND e.timestamp < datetime(""2023-01-01T00:00:00"") RETURN CASE WHEN count(e) > 0 THEN true ELSE false END AS rule_satisfied"
"James is required to approve a leave request on or before March 1st, 2024.","Activity: [""Approve Leave Request""], EntityType: [], Actor: [""James""]","MATCH (e:Event) WHERE e.Activity = ""Approve Leave Request"" AND e.Actor = ""James"" AND e.timestamp <= datetime(""2024-03-01T23:59:59"") RETURN CASE WHEN count(e) > 0 THEN true ELSE false END AS rule_satisfied"
"Emma must complete a product return before November 30th, 2023.","Activity: [""Complete Product Return""], EntityType: [], Actor: [""Emma""]","MATCH (e:Event) WHERE e.Activity = ""Complete Product Return"" AND e.Actor = ""Emma"" AND e.timestamp < datetime(""2023-11-30T00:00:00"") RETURN CASE WHEN count(e) > 0 THEN true ELSE false END AS rule_satisfied"
"Noah must perform a refund after April 1st, 2023.","Activity: [""Perform Refund""], EntityType: [], Actor: [""Noah""]","MATCH (e:Event) WHERE e.Activity = ""Perform Refund"" AND e.Actor = ""Noah"" AND e.timestamp > datetime(""2023-04-01T23:59:59"") RETURN CASE WHEN count(e) > 0 THEN true ELSE false END AS rule_satisfied"
"Olivia must create a new order on or after June 15th, 2024.","Activity: [""Create New Order""], EntityType: [], Actor: [""Olivia""]","MATCH (e:Event) WHERE e.Activity = ""Create New Order"" AND e.Actor = ""Olivia"" AND e.timestamp >= datetime(""2024-06-15T23:59:59"") RETURN CASE WHEN count(e) > 0 THEN true ELSE false END AS rule_satisfied"
"Alex must complete a task before 12:00 PM on December 25th, 2023.","Activity: [""Complete Task""], EntityType: [], Actor: [""Alex""]","MATCH (e:Event) WHERE e.Activity = ""Complete Task"" AND e.Actor = ""Alex"" AND e.timestamp < datetime(""2023-12-25T12:00:00"") RETURN CASE WHEN count(e) > 0 THEN true ELSE false END AS rule_satisfied"
"John is required to finish the invoice approval before the end of September 30th, 2023.","Activity: [""Approve Invoice""], EntityType: [], Actor: [""John""]","MATCH (e:Event) WHERE e.Activity = ""Approve Invoice"" AND e.Actor = ""John"" AND e.timestamp < datetime(""2023-09-30T23:59:59"") RETURN CASE WHEN count(e) > 0 THEN true ELSE false END AS rule_satisfied"
"Lucy must perform a quality check after March 1st, 2024.","Activity: [""Perform Quality Check""], EntityType: [], Actor: [""Lucy""]","MATCH (e:Event) WHERE e.Activity = ""Perform Quality Check"" AND e.Actor = ""Lucy"" AND e.timestamp > datetime(""2024-03-01T23:59:59"") RETURN CASE WHEN count(e) > 0 THEN true ELSE false END AS rule_satisfied"
"Brian must complete the order processing on or before January 1st, 2024.","Activity: [""Process Order""], EntityType: [], Actor: [""Brian""]","MATCH (e:Event) WHERE e.Activity = ""Process Order"" AND e.Actor = ""Brian"" AND e.timestamp <= datetime(""2024-01-01T23:59:59"") RETURN CASE WHEN count(e) > 0 THEN true ELSE false END AS rule_satisfied"
"R2 is required to perform activity ""Create Invoice"" no later than April 1st, 2023.","Activity: [""Create Invoice""], EntityType: [], Actor: [""R2""]","MATCH (e:Event) WHERE e.Activity = ""Create Invoice"" AND e.Actor = ""R2"" AND e.timestamp <= datetime(""2023-04-01T23:59:59"") RETURN CASE WHEN count(e) > 0 THEN true ELSE false END AS rule_satisfied"
"It is necessary for R3 to carry out an event of type ""Approve Leave Request"" at or after May 1st, 2024.","Activity: [""Approve Leave Request""], EntityType: [], Actor: [""R3""]","MATCH (e:Event) WHERE e.Activity = ""Approve Leave Request"" AND e.Actor = ""R3"" AND e.timestamp >= datetime(""2024-05-01T00:00:00"") RETURN CASE WHEN count(e) > 0 THEN true ELSE false END AS rule_satisfied"
"The completion of the task ""Complete Purchase"" by R4 must occur before June 1st, 2023.","Activity: [""Complete Purchase""], EntityType: [], Actor: [""R4""]","MATCH (e:Event) WHERE e.Activity = ""Complete Purchase"" AND e.Actor = ""R4"" AND e.timestamp < datetime(""2023-06-01T00:00:00"") RETURN CASE WHEN count(e) > 0 THEN true ELSE false END AS rule_satisfied"
"It is mandated that R5 performs an event ""Submit Report"" no later than July 15th, 2024.","Activity: [""Submit Report""], EntityType: [], Actor: [""R5""]","MATCH (e:Event) WHERE e.Activity = ""Submit Report"" AND e.Actor = ""R5"" AND e.timestamp <= datetime(""2024-07-15T23:59:59"") RETURN CASE WHEN count(e) > 0 THEN true ELSE false END AS rule_satisfied"
"A task ""Process Order"" must be handled by R6 on or after August 1st, 2023.","Activity: [""Process Order""], EntityType: [], Actor: [""R6""]","MATCH (e:Event) WHERE e.Activity = ""Process Order"" AND e.Actor = ""R6"" AND e.timestamp >= datetime(""2023-08-01T00:00:00"") RETURN CASE WHEN count(e) > 0 THEN true ELSE false END AS rule_satisfied"
"It is required that R7 completes an event of type ""Approve Invoice"" at the latest by September 1st, 2023.","Activity: [""Approve Invoice""], EntityType: [], Actor: [""R7""]","MATCH (e:Event) WHERE e.Activity = ""Approve Invoice"" AND e.Actor = ""R7"" AND e.timestamp <= datetime(""2023-09-01T23:59:59"") RETURN CASE WHEN count(e) > 0 THEN true ELSE false END AS rule_satisfied"
"It is necessary for R8 to undertake the activity ""Process Payment"" on or before October 1st, 2023.","Activity: [""Process Payment""], EntityType: [], Actor: [""R8""]","MATCH (e:Event) WHERE e.Activity = ""Process Payment"" AND e.Actor = ""R8"" AND e.timestamp <= datetime(""2023-10-01T23:59:59"") RETURN CASE WHEN count(e) > 0 THEN true ELSE false END AS rule_satisfied"
"The occurrence of the event ""Ship Order"" by R9 must happen on or after November 1st, 2023.","Activity: [""Ship Order""], EntityType: [], Actor: [""R9""]","MATCH (e:Event) WHERE e.Activity = ""Ship Order"" AND e.Actor = ""R9"" AND e.timestamp >= datetime(""2023-11-01T00:00:00"") RETURN CASE WHEN count(e) > 0 THEN true ELSE false END AS rule_satisfied"
"R10 has to perform activity ""Deliver Package"" at a time no later than December 31st, 2023.","Activity: [""Deliver Package""], EntityType: [], Actor: [""R10""]","MATCH (e:Event) WHERE e.Activity = ""Deliver Package"" AND e.Actor = ""R10"" AND e.timestamp <= datetime(""2023-12-31T23:59:59"") RETURN CASE WHEN count(e) > 0 THEN true ELSE false END AS rule_satisfied"
"There exists an event of type ""Return Item"" performed by R11 after January 1st, 2024.","Activity: [""Return Item""], EntityType: [], Actor: [""R11""]","MATCH (e:Event) WHERE e.Activity = ""Return Item"" AND e.Actor = ""R11"" AND e.timestamp > datetime(""2024-01-01T23:59:59"") RETURN CASE WHEN count(e) > 0 THEN true ELSE false END AS rule_satisfied"
"A person is not allowed to perform both an event of type ""Create Invoice"" and an event of type ""Approve Loan"" for the same entity.","Activity: [""Create Invoice"", ""Approve Loan""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Create Invoice""})-[:CORR]->(ent:Entity), (e2:Event{Activity:""Approve Loan""})-[:CORR]->(ent) WHERE e1.Actor = e2.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied"
"The same individual must not carry out both activities ""Book Flight"" and ""Check-out Hotel"" on the same entity.","Activity: [""Book Flight"", ""Check-out Hotel""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Book Flight""})-[:CORR]->(ent:Entity), (e2:Event{Activity:""Check-out Hotel""})-[:CORR]->(ent) WHERE e1.Actor = e2.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied"
"No person may perform both an task of type ""Place Order"" and a task of type ""Ship Product"" for a single entity.","Activity: [""Place Order"", ""Ship Product""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Place Order""})-[:CORR]->(ent:Entity), (e2:Event{Activity:""Ship Product""})-[:CORR]->(ent) WHERE e1.Actor = e2.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied"
"It is prohibited for one individual to handle both activity ""Create Contract"" and activity ""Send Invoice"" concerning the same object.","Activity: [""Create Contract"", ""Send Invoice""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Create Contract""})-[:CORR]->(ent:Entity), (e2:Event{Activity:""Send Invoice""})-[:CORR]->(ent) WHERE e1.Actor = e2.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied"
"An event with activity ""Register User"" and an event with activity ""Cancel Subscription"" must not be executed by the same person for the same entity.","Activity: [""Register User"", ""Cancel Subscription""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Register User""})-[:CORR]->(ent:Entity), (e2:Event{Activity:""Cancel Subscription""})-[:CORR]->(ent) WHERE e1.Actor = e2.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied"
"Handling both an event of type ""Launch Marketing Campaign"" and an event of type ""Offer Discount"" for the same entity by the same person is not permitted.","Activity: [""Launch Marketing Campaign"", ""Offer Discount""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Launch Marketing Campaign""})-[:CORR]->(ent:Entity), (e2:Event{Activity:""Offer Discount""})-[:CORR]->(ent) WHERE e1.Actor = e2.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied"
"It is mandatory that no actor performs both activities""Write Report"" and ""Present Report"" on the same object.","Activity: [""Write Report"", ""Present Report""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Write Report""})-[:CORR]->(ent:Entity), (e2:Event{Activity:""Present Report""})-[:CORR]->(ent) WHERE e1.Actor = e2.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied"
"A resource must not execute both an event ""Start Project"" and one of type ""Complete Project"" for a single object.","Activity: [""Start Project"", ""Complete Project""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Start Project""})-[:CORR]->(ent:Entity), (e2:Event{Activity:""Complete Project""})-[:CORR]->(ent) WHERE e1.Actor = e2.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied"
"For any object instance, the same individual must not perform both activities ""Enroll in Course"" and ""Complete Course"".","Activity: [""Enroll in Course"", ""Complete Course""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Enroll in Course""})-[:CORR]->(ent:Entity), (e2:Event{Activity:""Complete Course""})-[:CORR]->(ent) WHERE e1.Actor = e2.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied"
"Events of type ""Sign Contract"" and type ""Execute Payment"" concerning the same object must not be handled by the same person.","Activity: [""Sign Contract"", ""Execute Payment""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Sign Contract""})-[:CORR]->(ent:Entity), (e2:Event{Activity:""Execute Payment""})-[:CORR]->(ent) WHERE e1.Actor = e2.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied"
"A person should not perform both ""Submit Application"" and ""Withdraw Application"" for the same entity.","Activity: [""Submit Application"", ""Withdraw Application""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Submit Application""})-[:CORR]->(ent:Entity), (e2:Event{Activity:""Withdraw Application""})-[:CORR]->(ent) WHERE e1.Actor = e2.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied"
"A person is not allowed to perform both ""Approve Loan"" and ""Reject Insurance Claim"" for the same entity.","Activity: [""Approve Loan"", ""Reject Insurance Claim""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Approve Loan""})-[:CORR]->(ent:Entity), (e2:Event{Activity:""Reject Insurance Claim""})-[:CORR]->(ent) WHERE e1.Actor = e2.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied"
The same person must not book a flight and reserve a hotel for the same entity.,"Activity: [""Book Flight"", ""Reserve Hotel""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Book Flight""})-[:CORR]->(ent:Entity), (e2:Event{Activity:""Reserve Hotel""})-[:CORR]->(ent) WHERE e1.Actor = e2.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied"
No person may place an order and ship a product to the same entity.,"Activity: [""Place Order"", ""Ship Product""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Place Order""})-[:CORR]->(ent:Entity), (e2:Event{Activity:""Ship Product""})-[:CORR]->(ent) WHERE e1.Actor = e2.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied"
It is prohibited for a person to create a contract and send an invoice for the same entity.,"Activity: [""Create Contract"", ""Send Invoice""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Create Contract""})-[:CORR]->(ent:Entity), (e2:Event{Activity:""Send Invoice""})-[:CORR]->(ent) WHERE e1.Actor = e2.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied"
It is mandatory that no actor performs both registering for a course and withdrawing for the same object.,"Activity: [""Register for Course"", ""Withdraw from Course""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Register for Course""})-[:CORR]->(ent:Entity), (e2:Event{Activity:""Withdraw from Course""})-[:CORR]->(ent) WHERE e1.Actor = e2.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied"
A manager must not initiate a marketing campaign and approve a budget for the same entity.,"Activity: [""Initiate Marketing Campaign"", ""Approve Budget""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Initiate Marketing Campaign""})-[:CORR]->(ent:Entity), (e2:Event{Activity:""Approve Budget""})-[:CORR]->(ent) WHERE e1.Actor = e2.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied"
An individual must not create a project and approve its completion within the same instance.,"Activity: [""Create Project"", ""Approve Completion""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Create Project""})-[:CORR]->(ent:Entity), (e2:Event{Activity:""Approve Completion""})-[:CORR]->(ent) WHERE e1.Actor = e2.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied"
A customer should not submit a support request and cancel it for the same object.,"Activity: [""Submit Support Request"", ""Cancel Support Request""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Submit Support Request""})-[:CORR]->(ent:Entity), (e2:Event{Activity:""Cancel Support Request""})-[:CORR]->(ent) WHERE e1.Actor = e2.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied"
A person must not sign a contract and execute a payment for the same instance.,"Activity: [""Sign Contract"", ""Execute Payment""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Sign Contract""})-[:CORR]->(ent:Entity), (e2:Event{Activity:""Execute Payment""})-[:CORR]->(ent) WHERE e1.Actor = e2.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied"
A person must not register for an event and cancel their registration for the same object.,"Activity: [""Register for Event"", ""Cancel Registration""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Register for Event""})-[:CORR]->(ent:Entity), (e2:Event{Activity:""Cancel Registration""})-[:CORR]->(ent) WHERE e1.Actor = e2.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied"
No person is allowed to work on more than 5 shipments.,"Activity: [], EntityType: [""Shipment""], Actor: []","MATCH (e:Entity {EntityType: 'Shipment'})<-[:CORR]-(ev:Event) WITH ev.Actor AS actor, COLLECT(DISTINCT e) AS entityList RETURN CASE WHEN ANY(x IN COLLECT(SIZE(entityList)) WHERE x > 5) THEN false ELSE true END as ruleSatisfied"
There is no person involved in more than 10 cases of type 'Project'.,"Activity: [], EntityType: [""Project""], Actor: []","MATCH (e:Entity {EntityType: 'Project'})<-[:CORR]-(ev:Event) WITH ev.Actor AS actor, COLLECT(DISTINCT e) AS entityList RETURN CASE WHEN ANY(x IN COLLECT(SIZE(entityList)) WHERE x > 10) THEN false ELSE true END as ruleSatisfied"
Not more than 3 product instances may be processed by a single person.,"Activity: [], EntityType: [""Product""], Actor: []","MATCH (e:Entity {EntityType: 'Product'})<-[:CORR]-(ev:Event) WITH ev.Actor AS actor, COLLECT(DISTINCT e) AS entityList RETURN CASE WHEN ANY(x IN COLLECT(SIZE(entityList)) WHERE x > 3) THEN false ELSE true END as ruleSatisfied"
No individual can be assigned to more than 2 distinct orders.,"Activity: [], EntityType: [""Order""], Actor: []","MATCH (e:Entity {EntityType: 'Order'})<-[:CORR]-(ev:Event) WITH ev.Actor AS actor, COLLECT(DISTINCT e) AS entityList RETURN CASE WHEN ANY(x IN COLLECT(SIZE(entityList)) WHERE x > 2) THEN false ELSE true END as ruleSatisfied"
No employee should work on more than 4 'Project Development' objects.,"Activity: [], EntityType: [""Project Development""], Actor: []","MATCH (e:Entity {EntityType: 'Project Development'})<-[:CORR]-(ev:Event) WITH ev.Actor AS actor, COLLECT(DISTINCT e) AS entityList RETURN CASE WHEN ANY(x IN COLLECT(SIZE(entityList)) WHERE x > 4) THEN false ELSE true END as ruleSatisfied"
There is no one processing more than 6 of type 'Shipment'.,"Activity: [], EntityType: [""Shipment""], Actor: []","MATCH (e:Entity {EntityType: 'Shipment'})<-[:CORR]-(ev:Event) WITH ev.Actor AS actor, COLLECT(DISTINCT e) AS entityList RETURN CASE WHEN ANY(x IN COLLECT(SIZE(entityList)) WHERE x > 6) THEN false ELSE true END as ruleSatisfied"
No individual is involved in handling more than 8 'Support Tickets' entities.,"Activity: [], EntityType: [""Support Tickets""], Actor: []","MATCH (e:Entity {EntityType: 'Support Tickets'})<-[:CORR]-(ev:Event) WITH ev.Actor AS actor, COLLECT(DISTINCT e) AS entityList RETURN CASE WHEN ANY(x IN COLLECT(SIZE(entityList)) WHERE x > 8) THEN false ELSE true END as ruleSatisfied"
No person should work on more than 7  'Claims Processing' objects.,"Activity: [], EntityType: [""claims processing""], Actor: []","MATCH (e:Entity {EntityType: 'claims processing'})<-[:CORR]-(ev:Event) WITH ev.Actor AS actor, COLLECT(DISTINCT e) AS entityList RETURN CASE WHEN ANY(x IN COLLECT(SIZE(entityList)) WHERE x > 7) THEN false ELSE true END as ruleSatisfied"
Not more than 4 customer orders may be associated with any single actor.,"Activity: [], EntityType: [""customer order""], Actor: []","MATCH (e:Entity {EntityType: 'customer order'})<-[:CORR]-(ev:Event) WITH ev.Actor AS actor, COLLECT(DISTINCT e) AS entityList RETURN CASE WHEN ANY(x IN COLLECT(SIZE(entityList)) WHERE x > 4) THEN false ELSE true END as ruleSatisfied"
Ensure that no individual handles more than 6 cases of type 'Loan Applicatios'.,"Activity: [], EntityType: [""loan application""], Actor: []","MATCH (e:Entity {EntityType: 'loan application'})<-[:CORR]-(ev:Event) WITH ev.Actor AS actor, COLLECT(DISTINCT e) AS entityList RETURN CASE WHEN ANY(x IN COLLECT(SIZE(entityList)) WHERE x > 6) THEN false ELSE true END as ruleSatisfied"
A single person may not be correlated to more than 5 project plans.,"Activity: [], EntityType: [""project plan""], Actor: []","MATCH (e:Entity {EntityType: 'project plan'})<-[:CORR]-(ev:Event) WITH ev.Actor AS actor, COLLECT(DISTINCT e) AS entityList RETURN CASE WHEN ANY(x IN COLLECT(SIZE(entityList)) WHERE x > 5) THEN false ELSE true END as ruleSatisfied"
A person must not correlate to more than 4 entities of type 'Product Review'.,"Activity: [], EntityType: [""product review""], Actor: []","MATCH (e:Entity {EntityType: 'product review'})<-[:CORR]-(ev:Event) WITH ev.Actor AS actor, COLLECT(DISTINCT e) AS entityList RETURN CASE WHEN ANY(x IN COLLECT(SIZE(entityList)) WHERE x > 4) THEN false ELSE true END as ruleSatisfied"
Each individual must not be associated with more than 3 customer requests.,"Activity: [], EntityType: [""customer request""], Actor: []","MATCH (e:Entity {EntityType: 'customer request'})<-[:CORR]-(ev:Event) WITH ev.Actor AS actor, COLLECT(DISTINCT e) AS entityList RETURN CASE WHEN ANY(x IN COLLECT(SIZE(entityList)) WHERE x > 3) THEN false ELSE true END as ruleSatisfied"
No person is allowed to be linked to more than 2 entities of type 'Marketing Initiative'.,"Activity: [], EntityType: [""marketing initiative""], Actor: []","MATCH (e:Entity {EntityType: 'marketing initiative'})<-[:CORR]-(ev:Event) WITH ev.Actor AS actor, COLLECT(DISTINCT e) AS entityList RETURN CASE WHEN ANY(x IN COLLECT(SIZE(entityList)) WHERE x > 2) THEN false ELSE true END as ruleSatisfied"
A person must not work on more than 6 financial audits.,"Activity: [], EntityType: [""financial audit""], Actor: []","MATCH (e:Entity {EntityType: 'financial audit'})<-[:CORR]-(ev:Event) WITH ev.Actor AS actor, COLLECT(DISTINCT e) AS entityList RETURN CASE WHEN ANY(x IN COLLECT(SIZE(entityList)) WHERE x > 6) THEN false ELSE true END as ruleSatisfied"
An individual cannot be associated with more than 5 objects of type 'Research Project'.,"Activity: [], EntityType: [""research project""], Actor: []","MATCH (e:Entity {EntityType: 'research project'})<-[:CORR]-(ev:Event) WITH ev.Actor AS actor, COLLECT(DISTINCT e) AS entityList RETURN CASE WHEN ANY(x IN COLLECT(SIZE(entityList)) WHERE x > 5) THEN false ELSE true END as ruleSatisfied"
A single individual must not correlate to more than 4 instances of type 'Customer Feedback'.,"Activity: [], EntityType: [""customer feedback""], Actor: []","MATCH (e:Entity {EntityType: 'customer feedback'})<-[:CORR]-(ev:Event) WITH ev.Actor AS actor, COLLECT(DISTINCT e) AS entityList RETURN CASE WHEN ANY(x IN COLLECT(SIZE(entityList)) WHERE x > 4) THEN false ELSE true END as ruleSatisfied"
No one may be involved in more than 3 service requests.,"Activity: [], EntityType: [""Service Request""], Actor: []","MATCH (e:Entity {EntityType: 'Service Request'})<-[:CORR]-(ev:Event) WITH ev.Actor AS actor, COLLECT(DISTINCT e) AS entityList RETURN CASE WHEN ANY(x IN COLLECT(SIZE(entityList)) WHERE x > 3) THEN false ELSE true END as ruleSatisfied"
A person may not be related to more than 2 entities of type 'Complaint'.,"Activity: [], EntityType: [""Complaint""], Actor: []","MATCH (e:Entity {EntityType: 'Complaint'})<-[:CORR]-(ev:Event) WITH ev.Actor AS actor, COLLECT(DISTINCT e) AS entityList RETURN CASE WHEN ANY(x IN COLLECT(SIZE(entityList)) WHERE x > 2) THEN false ELSE true END as ruleSatisfied"
A single person must not handle more than 1 order.,"Activity: [], EntityType: [""Order""], Actor: []","MATCH (e:Entity {EntityType: 'Order'})<-[:CORR]-(ev:Event) WITH ev.Actor AS actor, COLLECT(DISTINCT e) AS entityList RETURN CASE WHEN ANY(x IN COLLECT(SIZE(entityList)) WHERE x > 1) THEN false ELSE true END as ruleSatisfied"
"The sequence of creating a lead, sending a proposal, and closing the deal occurs at least 3 times.","Activity: [""Create Lead"", ""Send Proposal"", ""Close Deal""], EntityType: [], Actor: []",MATCH (e1:Event {Activity: 'Create Lead'})-[:DF]->(e2:Event {Activity: 'Send Proposal'})-[:DF]->(e3:Event {Activity: 'Close Deal'}) RETURN CASE WHEN COUNT(DISTINCT e1)<3 THEN false ELSE true END AS ruleSatisfied
"There are at most 5 occurrences of the sequence: ""Receive Payment"", ""Verify Payment"", ""Issue Receipt"".","Activity: [""Receive Payment"", ""Verify Payment"", ""Issue Receipt""], EntityType: [], Actor: []",MATCH (e1:Event {Activity: 'Receive Payment'})-[:DF]->(e2:Event {Activity: 'Verify Payment'})-[:DF]->(e3:Event {Activity: 'Issue Receipt'}) RETURN CASE WHEN COUNT(DISTINCT e1)>5 THEN false ELSE true END AS ruleSatisfied
The sequence of assigning a task and reviewing the task must occur at least 2 times.,"Activity: [""Assign Task"", ""Review Task""], EntityType: [], Actor: []",MATCH (e1:Event {Activity: 'Assign Task'})-[:DF]->(e2:Event {Activity: 'Review Task'}) RETURN CASE COUNT(DISTINCT e1)<2 THEN false ELSE true END AS ruleSatisfied
"A sequence of ""Open Case"", ""Evaluate Case"", and ""Close Case"" happens more than 4 times.","Activity: [""Open Case"", ""Evaluate Case"", ""Close Case""], EntityType: [], Actor: []",MATCH (e1:Event {Activity: 'Open Case'})-[:DF]->(e2:Event {Activity: 'Evaluate Case'})-[:DF]->(e3:Event {Activity: 'Close Case'}) RETURN CASE WHEN COUNT(DISTINCT e1)<=4 THEN false ELSE true END AS ruleSatisfied
"The activities ""Login"", ""Reset Password"", and ""Logout"" occur in sequence fewer than 3 times.","Activity: [""Login"", ""Reset Password"", ""Logout""], EntityType: [], Actor: []",MATCH (e1:Event {Activity: 'Login'})-[:DF]->(e2:Event {Activity: 'Reset Password'})-[:DF]->(e3:Event {Activity: 'Logout'}) RETURN CASE WHEN COUNT(DISTINCT e1)>=3 THEN false ELSE true END AS ruleSatisfied
"No more than 6 instances of the sequence ""Start Order"", ""Process Order"", and ""Ship Order"" exist.","Activity: [""Start Order"", ""Process Order"", ""Ship Order""], EntityType: [], Actor: []",MATCH (e1:Event {Activity: 'Start Order'})-[:DF]->(e2:Event {Activity: 'Process Order'})-[:DF]->(e3:Event {Activity: 'Ship Order'}) RETURN CASE WHEN COUNT(DISTINCT e1)>6 THEN false ELSE true END AS ruleSatisfied
"The sequence ""Initiate Request"", ""Approve Request"", and ""Complete Request"" must occur exactly 4 times.","Activity: [""Initiate Request"", ""Approve Request"", ""Complete Request""], EntityType: [], Actor: []",MATCH (e1:Event {Activity: 'Initiate Request'})-[:DF]->(e2:Event {Activity: 'Approve Request'})-[:DF]->(e3:Event {Activity: 'Complete Request'}) RETURN CASE WHEN COUNT(DISTINCT e1)<>4 THEN false ELSE true END AS ruleSatisfied
"The chain of ""Verify Identity"", ""Check Credit"", ""Approve Loan"" occurs at least once.","Activity: [""Verify Identity"", ""Check Credit"", ""Approve Loan""], EntityType: [], Actor: []",MATCH (e1:Event {Activity: 'Verify Identity'})-[:DF]->(e2:Event {Activity: 'Check Credit'})-[:DF]->(e3:Event {Activity: 'Approve Loan'}) RETURN CASE WHEN COUNT(DISTINCT e1)<1 THEN false ELSE true END AS ruleSatisfied
"Fewer than 8 occurrences of the sequence ""Start Analysis"", ""Generate Report"", and ""Review Report"" exist.","Activity: [""Start Analysis"", ""Generate Report"", ""Review Report""], EntityType: [], Actor: []",MATCH (e1:Event {Activity: 'Start Analysis'})-[:DF]->(e2:Event {Activity: 'Generate Report'})-[:DF]->(e3:Event {Activity: 'Review Report'}) RETURN CASE WHEN COUNT(DISTINCT e1)>=8 THEN false ELSE true END AS ruleSatisfied
"The sequence ""Log Error"", ""Analyze Error"", and ""Fix Error"" is repeated no more than 10 times.","Activity: [""Log Error"", ""Analyze Error"", ""Fix Error""], EntityType: [], Actor: []",MATCH (e1:Event {Activity: 'Log Error'})-[:DF]->(e2:Event {Activity: 'Analyze Error'})-[:DF]->(e3:Event {Activity: 'Fix Error'}) RETURN CASE WHEN COUNT(DISTINCT e1)>10 THEN false ELSE true END AS ruleSatisfied
"The sequence ""Create Ticket"" and ""Close Ticket"" occurs at least 5 times.","Activity: [""Create Account"", ""Confirm Email"", ""Activate Account""], EntityType: [], Actor: []",MATCH (e1:Event {Activity: 'Create Ticket'})-[:DF]->(e2:Event {Activity: 'Close Ticket'}) RETURN CASE WHEN COUNT(DISTINCT e1)<5 THEN false ELSE true END AS ruleSatisfied
"At most 7 instances of the sequence ""Submit Request"", ""Approve Request"" are found in the event log.","Activity: [""Approve Request"", ""Submit Request""], EntityType: [], Actor: []",MATCH (e1:Event {Activity: 'Submit Request'})-[:DF]->(e2:Event {Activity: 'Approve Request'}) RETURN CASE WHEN COUNT(DISTINCT e1)>7 THEN false ELSE true END AS ruleSatisfied
"The sequence ""Onboard Employee"", ""Assign Task"", ""Evaluate Task"", and ""Promote Employee"" must occur at least 3 times.","Activity: [""Onboard Employee"", ""Assign Task"", ""Evaluate Task"", ""Promote Employee""], EntityType: [], Actor: []",MATCH (e1:Event {Activity: 'Onboard Employee'})-[:DF]->(e2:Event {Activity: 'Assign Task'})-[:DF]->(e3:Event {Activity: 'Evaluate Task'})-[:DF]->(e4:Event {Activity: 'Promote Employee'}) RETURN CASE WHEN COUNT(DISTINCT e1)<3 THEN false ELSE true END AS ruleSatisfied
"The chain ""Place Order"", ""Pack Order"", ""Ship Order"", ""Deliver Order"", and ""Confirm Delivery"" occurs fewer than 4 times.","Activity: [""Place Order"", ""Pack Order"", ""Ship Order"", ""Deliver Order""], EntityType: [], Actor: []",MATCH (e1:Event {Activity: 'Place Order'})-[:DF]->(e2:Event {Activity: 'Pack Order'})-[:DF]->(e3:Event {Activity: 'Ship Order'})-[:DF]->(e4:Event {Activity: 'Deliver Order'})-[:DF]->(e5:Event {Activity: 'Confirm Delivery'}) RETURN CASE WHEN COUNT(DISTINCT e1)>=4 THEN false ELSE true END AS ruleSatisfied
"No more than 6 occurrences of the sequence ""Initiate Process"" and ""Finalize Process"" exist.","Activity: [""Initiate Process"", ""Finalize Process""], EntityType: [], Actor: []",MATCH (e1:Event {Activity: 'Initiate Process'})-[:DF]->(e2:Event {Activity: 'Finalize Process'}) RETURN CASE WHEN COUNT(DISTINCT e1)>6 THEN false ELSE true END AS ruleSatisfied
"The sequence of creating an account, confirming the email, and activating the account must happen at least 3 times.","Activity: [""Create Account"", ""Confirm Email"", ""Activate Account""], EntityType: [], Actor: []",MATCH (e1:Event {Activity: 'Create Account'})-[:DF]->(e2:Event {Activity: 'Confirm Email'})-[:DF]->(e3:Event {Activity: 'Activate Account'}) RETURN CASE WHEN COUNT(DISTINCT e1)<3 THEN false ELSE true END AS ruleSatisfied
"The sequence of placing an order, processing payment, and shipping the product occurs more than 4 times.","Activity: [""Place Order"", ""Process Payment"", ""Ship Product""], EntityType: [], Actor: []",MATCH (e1:Event {Activity: 'Place Order'})-[:DF]->(e2:Event {Activity: 'Process Payment'})-[:DF]->(e3:Event {Activity: 'Ship Product'}) RETURN CASE WHEN COUNT(DISTINCT e1)>4 THEN false ELSE true END AS ruleSatisfied
"The sequence of scheduling a meeting, confirming the attendance, and hosting the meeting must occur no more than 2 times.","Activity: [""Schedule Meeting"", ""Confirm Attendance"", ""Host Meeting""], EntityType: [], Actor: []",MATCH (e1:Event {Activity: 'Schedule Meeting'})-[:DF]->(e2:Event {Activity: 'Confirm Attendance'})-[:DF]->(e3:Event {Activity: 'Host Meeting'}) RETURN CASE WHEN COUNT(DISTINCT e1)>2 THEN false ELSE true END AS ruleSatisfied
"The sequence involving creating a proposal, reviewing the proposal, and approving it must be repeated at least 5 times.","Activity: [""Create Proposal"", ""Review Proposal"", ""Approve Proposal""], EntityType: [], Actor: []",MATCH (e1:Event {Activity: 'Create Proposal'})-[:DF]->(e2:Event {Activity: 'Review Proposal'})-[:DF]->(e3:Event {Activity: 'Approve Proposal'}) RETURN CASE WHEN COUNT(DISTINCT e1)<5 THEN false ELSE true END AS ruleSatisfied
"There must be no more than 6 occurrences of the sequence that involves submitting a task, reviewing the task, and completing the task.","Activity: [""Submit Task"", ""Review Task"", ""Complete Task""], EntityType: [], Actor: []",MATCH (e1:Event {Activity: 'Submit Task'})-[:DF]->(e2:Event {Activity: 'Review Task'})-[:DF]->(e3:Event {Activity: 'Complete Task'}) RETURN CASE WHEN COUNT(DISTINCT e1)>6 THEN false ELSE true END AS ruleSatisfied
A product must not be associated with more than 4 categories.,"Activity: [], EntityType: [""Product"", ""Category""], Actor: []","MATCH (ent1:Entity {EntityType:""Product""})-[:REL]-(ent2:Entity {EntityType:""Category""}) WITH ent1, COLLECT(DISTINCT ent2) AS relatedItems RETURN MAX(size(relatedItems)) <= 4 AS ruleSatisfied"
An item is linked to exactly one warehouse.,"Activity: [], EntityType: [""Warehouse"", ""Item""], Actor: []","MATCH (ent1:Entity {EntityType:""Warehouse""})-[:REL]-(ent2:Entity {EntityType:""Item""}) WITH ent2, COLLECT(DISTINCT ent1) AS relatedItems RETURN MAX(size(relatedItems)) == 1 AS ruleSatisfied"
A package connot be associated with more than 1 shipment. ,"Activity: [], EntityType: [""Shipment"", ""Package""], Actor: []","MATCH (ent1:Entity {EntityType:""Shipment""})-[:REL]-(ent2:Entity {EntityType:""Package""}) WITH ent2, COLLECT(DISTINCT ent1) AS relatedItems RETURN MAX(size(relatedItems)) <= 1 AS ruleSatisfied"
A transaction should not be associated with more than 3 payment methods.,"Activity: [], EntityType: [""Transaction"", ""PaymentMethod""], Actor: []","MATCH (ent1:Entity {EntityType:""Transaction""})-[:REL]-(ent2:Entity {EntityType:""PaymentMethod""}) WITH ent1, COLLECT(DISTINCT ent2) AS relatedItems RETURN MAX(size(relatedItems)) <= 3 AS ruleSatisfied"
A rental property must not be associated with more than 6 tenants.,"Activity: [], EntityType: [""RentalProperty"", ""Tenant""], Actor: []","MATCH (ent1:Entity {EntityType:""RentalProperty""})-[:REL]-(ent2:Entity {EntityType:""Tenant""}) WITH ent1, COLLECT(DISTINCT ent2) AS relatedItems RETURN MAX(size(relatedItems)) <= 6 AS ruleSatisfied"
A truck should not transport more than 8 different products.,"Activity: [], EntityType: [""Truck"", ""Product""], Actor: []","MATCH (ent1:Entity {EntityType:""Truck""})-[:REL]-(ent2:Entity {EntityType:""Product""}) WITH ent1, COLLECT(DISTINCT ent2) AS relatedItems RETURN MAX(size(relatedItems)) <= 8 AS ruleSatisfied"
A container must not hold more than 4 different materials.,"Activity: [], EntityType: [""Container"", ""Material""], Actor: []","MATCH (ent1:Entity {EntityType:""Container""})-[:REL]-(ent2:Entity {EntityType:""Material""}) WITH ent1, COLLECT(DISTINCT ent2) AS relatedItems RETURN MAX(size(relatedItems)) <= 4 AS ruleSatisfied"
A vehicle cannot carry fewer than 2 goods.,"Activity: [], EntityType: [""Vehicle"", ""Goods""], Actor: []","MATCH (ent1:Entity {EntityType:""Vehicle""})-[:REL]-(ent2:Entity {EntityType:""Goods""}) WITH ent1, COLLECT(DISTINCT ent2) AS relatedItems RETURN MIN(size(relatedItems)) >= 2 AS ruleSatisfied"
A flight cannot have more than 50 luggage items associated with it.,"Activity: [], EntityType: [""Flight"", ""Luggage""], Actor: []","MATCH (ent1:Entity {EntityType:""Flight""})-[:REL]-(ent2:Entity {EntityType:""Luggage""}) WITH ent1, COLLECT(DISTINCT ent2) AS relatedItems RETURN MAX(size(relatedItems)) <= 50 AS ruleSatisfied"
A warehouse should not hold more than 20 different products.,"Activity: [], EntityType: [""Warehouse"", ""Product""], Actor: []","MATCH (ent1:Entity {EntityType:""Warehouse""})-[:REL]-(ent2:Entity {EntityType:""Product""}) WITH ent1, COLLECT(DISTINCT ent2) AS relatedItems RETURN MAX(size(relatedItems)) <= 20 AS ruleSatisfied"
A product must not be associated with more than 10 categories.,"Activity: [], EntityType: [""Product"", ""Category""], Actor: []","MATCH (ent1:Entity {EntityType:""Product""})-[:REL]-(ent2:Entity {EntityType:""Category""}) WITH ent1, COLLECT(DISTINCT ent2) AS relatedItems RETURN MAX(size(relatedItems)) <= 10 AS ruleSatisfied"
No vehicle should have more than 5 owners.,"Activity: [], EntityType: [""Vehicle"", ""Owner""], Actor: []","MATCH (ent1:Entity {EntityType:""Owner""})-[:REL]-(ent2:Entity {EntityType:""Vehicle""}) WITH ent2, COLLECT(DISTINCT ent1) AS relatedItems RETURN MAX(size(relatedItems)) <= 5 AS ruleSatisfied"
A warehouse must store at least 3 items.,"Activity: [], EntityType: [""Warehouse"", ""Item""], Actor: []","MATCH (ent1:Entity {EntityType:""Warehouse""})-[:REL]-(ent2:Entity {EntityType:""Item""}) WITH ent1, COLLECT(DISTINCT ent2) AS relatedItems RETURN MIN(size(relatedItems)) >= 3 AS ruleSatisfied"
A product type may not be linked to more than 5 stores. ,"Activity: [], EntityType: [""Store"", ""ProductType""], Actor: []","MATCH (ent1:Entity {EntityType:""Store""})-[:REL]-(ent2:Entity {EntityType:""ProductType""}) WITH ent2, COLLECT(DISTINCT ent1) AS relatedItems RETURN MAX(size(relatedItems)) <= 5 AS ruleSatisfied"
A factory cannot be connected to more than 20 machines.,"Activity: [], EntityType: [""Factory"", ""Machine""], Actor: []","MATCH (ent1:Entity {EntityType:""Factory""})-[:REL]-(ent2:Entity {EntityType:""Machine""}) WITH ent1, COLLECT(DISTINCT ent2) AS relatedItems RETURN MAX(size(relatedItems)) <= 20 AS ruleSatisfied"
The library must have no fewer than 15 books in its collection.,"Activity: [], EntityType: [""Library"", ""Book""], Actor: []","MATCH (ent1:Entity {EntityType:""Library""})-[:REL]-(ent2:Entity {EntityType:""Book""}) WITH ent1, COLLECT(DISTINCT ent2) AS relatedItems RETURN MIN(size(relatedItems)) >= 15 AS ruleSatisfied"
A restaurant must have at least 2 dishes on its menu.,"Activity: [], EntityType: [""Restaurant"", ""Dish""], Actor: []","MATCH (ent1:Entity {EntityType:""Restaurant""})-[:REL]-(ent2:Entity {EntityType:""Dish""}) WITH ent1, COLLECT(DISTINCT ent2) AS relatedItems RETURN MIN(size(relatedItems)) >= 2 AS ruleSatisfied"
An artifact must be exhibited in exactly one museum.,"Activity: [], EntityType: [""Museum"", ""Artifact""], Actor: []","MATCH (ent1:Entity {EntityType:""Museum""})-[:REL]-(ent2:Entity {EntityType:""Artifact""}) WITH ent2, COLLECT(DISTINCT ent1) AS relatedItems RETURN MIN(size(relatedItems)) ==1 AS ruleSatisfied"
A floor cannot belong to more than 1 building.,"Activity: [], EntityType: [""Building"", ""Floor""], Actor: []","MATCH (ent1:Entity {EntityType:""Building""})-[:REL]-(ent2:Entity {EntityType:""Floor""}) WITH ent2, COLLECT(DISTINCT ent1) AS relatedItems RETURN MAX(size(relatedItems)) <= 1 AS ruleSatisfied"
A vehicle should not be linked to more than 4 insurance policies.,"Activity: [], EntityType: [""Vehicle"", ""InsurancePolicy""], Actor: []","MATCH (ent1:Entity {EntityType:""Vehicle""})-[:REL]-(ent2:Entity {EntityType:""InsurancePolicy""}) WITH ent1, COLLECT(DISTINCT ent2) AS relatedItems RETURN MAX(size(relatedItems)) <= 4 AS ruleSatisfied"
"It is required that, on average, fewer than 3 ""Item"" entities occur in the activity ""Create Order"".","Activity: [""Create Order""], EntityType: [""Item""], Actor: []","MATCH (ent:Entity {EntityType: ""Item""})<-[:CORR]-(e:Event {Activity: ""Create Order""}) WITH e, COUNT(DISTINCT ent) AS relatedItemCount RETURN AVG(relatedItemCount) < 3 AS ruleSatisfied"
"On average, no more than 5 ""Product"" entities should be associated with event of type ""Place Order"".","Activity: [""Place Order""], EntityType: [""Product""], Actor: []","MATCH (ent:Entity {EntityType: ""Product""})<-[:CORR]-(e:Event {Activity: ""Place Order""}) WITH e, COUNT(DISTINCT ent) AS relatedProductCount RETURN AVG(relatedProductCount) <= 5 AS ruleSatisfied"
"On average, the number of ""Order"" entities tied to the ""Complete Payment"" activity must be at least 1.","Activity: [""Complete Payment""], EntityType: [""Order""], Actor: []","MATCH (ent:Entity {EntityType: ""Order""})<-[:CORR]-(e:Event {Activity: ""Complete Payment""}) WITH e, COUNT(DISTINCT ent) AS relatedOrderCount RETURN AVG(relatedOrderCount) >= 1 AS ruleSatisfied"
"There should be fewer than 4 ""Shipment"" objects involved in events with activity ""Dispatch Order""on average.","Activity: [""Dispatch Order""], EntityType: [""Shipment""], Actor: []","MATCH (ent:Entity {EntityType: ""Shipment""})<-[:CORR]-(e:Event {Activity: ""Dispatch Order""}) WITH e, COUNT(DISTINCT ent) AS relatedShipmentCount RETURN AVG(relatedShipmentCount) < 4 AS ruleSatisfied"
"No more than 10 ""Package"" objects should be associated with ""Prepare Shipment"" activity on average.","Activity: [""Prepare Shipment""], EntityType: [""Package""], Actor: []","MATCH (ent:Entity {EntityType: ""Package""})<-[:CORR]-(e:Event {Activity: ""Prepare Shipment""}) WITH e, COUNT(DISTINCT ent) AS relatedPackageCount RETURN AVG(relatedPackageCount) <= 10 AS ruleSatisfied"
"On average, more than 2 ""Customer"" entities should be associated with ""Sign Contract"" events.","Activity: [""Sign Contract""], EntityType: [""Customer""], Actor: []","MATCH (ent:Entity {EntityType: ""Customer""})<-[:CORR]-(e:Event {Activity: ""Sign Contract""}) WITH e, COUNT(DISTINCT ent) AS relatedCustomerCount RETURN AVG(relatedCustomerCount) > 2 AS ruleSatisfied"
"It is required that on average, at least 1 ""Item"" is linked to ""Process Refund"" tasks.","Activity: [""Process Refund""], EntityType: [""Item""], Actor: []","MATCH (ent:Entity {EntityType: ""Item""})<-[:CORR]-(e:Event {Activity: ""Process Refund""}) WITH e, COUNT(DISTINCT ent) AS relatedItemCount RETURN AVG(relatedItemCount) >= 1 AS ruleSatisfied"
"When placing an order, on average, no more than 3 products may be involved.","Activity: [""Placing an Order""], EntityType: [""Product""], Actor: []","MATCH (ent:Entity {EntityType: ""Product""})<-[:CORR]-(e:Event {Activity: ""Placing an Order""}) WITH e, COUNT(DISTINCT ent) AS relatedProductCount RETURN AVG(relatedProductCount) <= 3 AS ruleSatisfied"
"During payment processing, at least 2 invoices should be linked on average.","Activity: [""Payment Processing""], EntityType: [""Invoice""], Actor: []","MATCH (ent:Entity {EntityType: ""Invoice""})<-[:CORR]-(e:Event {Activity: ""Payment Processing""}) WITH e, COUNT(DISTINCT ent) AS relatedInvoiceCount RETURN AVG(relatedInvoiceCount) >= 2 AS ruleSatisfied"
"On average, fewer than 5 orders should be associated with shipment preparation.","Activity: [""Shipment Preparation""], EntityType: [""Order""], Actor: []","MATCH (ent:Entity {EntityType: ""Order""})<-[:CORR]-(e:Event {Activity: ""Shipment Preparation""}) WITH e, COUNT(DISTINCT ent) AS relatedOrderCount RETURN AVG(relatedOrderCount) < 5 AS ruleSatisfied"
"When processing a refund, there should be no more than 2 items involved on average.","Activity: [""Processing Refund""], EntityType: [""Item""], Actor: []","MATCH (ent:Entity {EntityType: ""Item""})<-[:CORR]-(e:Event {Activity: ""Processing Refund""}) WITH e, COUNT(DISTINCT ent) AS relatedItemCount RETURN AVG(relatedItemCount) <= 2 AS ruleSatisfied"
"During inventory review, at least 3 packages should be checked on average.","Activity: [""Inventory Review""], EntityType: [""Package""], Actor: []","MATCH (ent:Entity {EntityType: ""Package""})<-[:CORR]-(e:Event {Activity: ""Inventory Review""}) WITH e, COUNT(DISTINCT ent) AS relatedPackageCount RETURN AVG(relatedPackageCount) >= 3 AS ruleSatisfied"
"On average, more than 4 shipments must be associated with order dispatch events.","Activity: [""Order Dispatch""], EntityType: [""Shipment""], Actor: []","MATCH (ent:Entity {EntityType: ""Shipment""})<-[:CORR]-(e:Event {Activity: ""Order Dispatch""}) WITH e, COUNT(DISTINCT ent) AS relatedShipmentCount RETURN AVG(relatedShipmentCount) > 4 AS ruleSatisfied"
"When processing an order, fewer than 3 customers should be linked on average.","Activity: [""Order Processing""], EntityType: [""Customer""], Actor: []","MATCH (ent:Entity {EntityType: ""Customer""})<-[:CORR]-(e:Event {Activity: ""Order Processing""}) WITH e, COUNT(DISTINCT ent) AS relatedCustomerCount RETURN AVG(relatedCustomerCount) < 3 AS ruleSatisfied"
"For every stock replenishment, at least 2 items must be included on average.","Activity: [""Stock Replenishment""], EntityType: [""Item""], Actor: []","MATCH (ent:Entity {EntityType: ""Item""})<-[:CORR]-(e:Event {Activity: ""Stock Replenishment""}) WITH e, COUNT(DISTINCT ent) AS relatedItemCount RETURN AVG(relatedItemCount) >= 2 AS ruleSatisfied"
"On average, no more than 6 orders should be associated with each inventory check.","Activity: [""Inventory Check""], EntityType: [""Order""], Actor: []","MATCH (ent:Entity {EntityType: ""Order""})<-[:CORR]-(e:Event {Activity: ""Inventory Check""}) WITH e, COUNT(DISTINCT ent) AS relatedOrderCount RETURN AVG(relatedOrderCount) <= 6 AS ruleSatisfied"
"On average, there should be fewer than 4 shipments processed in each ""Pack Items"" event.","Activity: [""Pack Items""], EntityType: [""Shipment""], Actor: []","MATCH (ent:Entity {EntityType: ""Shipment""})<-[:CORR]-(e:Event {Activity: ""Pack Items""}) WITH e, COUNT(DISTINCT ent) AS relatedShipmentCount RETURN AVG(relatedShipmentCount) < 4 AS ruleSatisfied"
"For every event where an invoice is created, there should be at least 3 orders associated.","Activity: [""Create Invoice""], EntityType: [""Order""], Actor: []","MATCH (ent:Entity {EntityType: ""Order""})<-[:CORR]-(e:Event {Activity: ""Create Invoice""}) WITH e, COLLECT(ent) AS orders RETURN CASE WHEN ANY (x in COLLECT(SIZE(orders)) where x < 3) THEN false ELSE true END as ruleSatisfied"
"Each time a product is shipped, there must be at least 5 packages involved.","Activity: [""ship product""], EntityType: [""package""], Actor: []","MATCH (ent:Entity {EntityType: ""package""})<-[:CORR]-(e:Event {Activity: ""ship product""}) WITH e, COLLECT(ent) AS packages RETURN CASE WHEN ANY (x in COLLECT(SIZE(packages)) where x < 5) THEN false ELSE true END as ruleSatisfied"
"Every time an order is created, at least 2 items should be associated.","Activity: [""create order""], EntityType: [""item""], Actor: []","MATCH (ent:Entity {EntityType: ""item""})<-[:CORR]-(e:Event {Activity: ""create order""}) WITH e, COLLECT(ent) AS items RETURN CASE WHEN ANY (x in COLLECT(SIZE(items)) where x < 2) THEN false ELSE true END as ruleSatisfied"
"For each purchase event, at least 1 customer should be involved.","Activity: [""purchase""], EntityType: [""customer""], Actor: []","MATCH (ent:Entity {EntityType: ""customer""})<-[:CORR]-(e:Event {Activity: ""purchase""}) WITH e, COLLECT(ent) AS customers RETURN CASE WHEN ANY (x in COLLECT(SIZE(customers)) where x < 1) THEN false ELSE true END as ruleSatisfied"
"For each event where a payment is made, at least 4 transactions must be associated.","Activity: [""make payment""], EntityType: [""transaction""], Actor: []","MATCH (ent:Entity {EntityType: ""transaction""})<-[:CORR]-(e:Event {Activity: ""make payment""}) WITH e, COLLECT(ent) AS transactions RETURN CASE WHEN ANY (x in COLLECT(SIZE(transactions)) where x < 4) THEN false ELSE true END as ruleSatisfied"
"Every time a product is returned, at least 2 packages must be involved.","Activity: [""return product""], EntityType: [""package""], Actor: []","MATCH (ent:Entity {EntityType: ""package""})<-[:CORR]-(e:Event {Activity: ""return product""}) WITH e, COLLECT(ent) AS packages RETURN CASE WHEN ANY (x in COLLECT(SIZE(packages)) where x < 2) THEN false ELSE true END as ruleSatisfied"
"Each time an invoice is canceled, at least 3 items should be associated.","Activity: [""cancel invoice""], EntityType: [""item""], Actor: []","MATCH (ent:Entity {EntityType: ""item""})<-[:CORR]-(e:Event {Activity: ""cancel invoice""}) WITH e, COLLECT(ent) AS items RETURN CASE WHEN ANY (x in COLLECT(SIZE(items)) where x < 3) THEN false ELSE true END as ruleSatisfied"
"For each event where an order is shipped, at least 1 package must be associated.","Activity: [""ship order""], EntityType: [""package""], Actor: []","MATCH (ent:Entity {EntityType: ""package""})<-[:CORR]-(e:Event {Activity: ""ship order""}) WITH e, COLLECT(ent) AS packages RETURN CASE WHEN ANY (x in COLLECT(SIZE(packages)) where x < 1) THEN false ELSE true END as ruleSatisfied"
"For each inventory check event, at least 2 products must be involved.","Activity: [""inventory check""], EntityType: [""product""], Actor: []","MATCH (ent:Entity {EntityType: ""product""})<-[:CORR]-(e:Event {Activity: ""inventory check""}) WITH e, COLLECT(ent) AS products RETURN CASE WHEN ANY (x in COLLECT(SIZE(products)) where x < 2) THEN false ELSE true END as ruleSatisfied"
"For each ""Register Product"" event, there must be at least 3 ""Supplier"" entities associated.","Activity: [""register product""], EntityType: [""supplier""], Actor: []","MATCH (ent:Entity {EntityType: ""supplier""})<-[:CORR]-(e:Event {Activity: ""register product""}) WITH e, COLLECT(ent) AS suppliers RETURN CASE WHEN ANY (x in COLLECT(SIZE(suppliers)) where x < 3) THEN false ELSE true END as ruleSatisfied"
"For every ""Process Claim"" event, there must be at least 2 ""Document"" entities linked.","Activity: [""Process Claim""], EntityType: [""Document""], Actor: []","MATCH (ent:Entity {EntityType: ""Document""})<-[:CORR]-(e:Event {Activity: ""Process Claim""}) WITH e, COLLECT(ent) AS documents RETURN CASE WHEN ANY (x in COLLECT(SIZE(documents)) where x < 2) THEN false ELSE true END as ruleSatisfied"
"Each ""Cancel Subscription"" task should involve at least 1 ""Customer"" entity.","Activity: [""Cancel Subscription""], EntityType: [""Customer""], Actor: []","MATCH (ent:Entity {EntityType: ""Customer""})<-[:CORR]-(e:Event {Activity: ""Cancel Subscription""}) WITH e, COLLECT(ent) AS customers RETURN CASE WHEN ANY (x in COLLECT(SIZE(customers)) where x < 1) THEN false ELSE true END as ruleSatisfied"
"For every ""Process Payment"" event, at least 4 ""Bank Account"" entities must be linked.","Activity: [""Process Payment""], EntityType: [""Bank Account""], Actor: []","MATCH (ent:Entity {EntityType: ""Bank Account""})<-[:CORR]-(e:Event {Activity: ""Process Payment""}) WITH e, COLLECT(ent) AS bank_accounts RETURN CASE WHEN ANY (x in COLLECT(SIZE(bank_accounts)) where x < 4) THEN false ELSE true END as ruleSatisfied"
"Every time an ""Update Profile"" event occurs, at least 2 ""Address"" entities should be involved.","Activity: [""Update Profile""], EntityType: [""Address""], Actor: []","MATCH (ent:Entity {EntityType: ""Address""})<-[:CORR]-(e:Event {Activity: ""Update Profile""}) WITH e, COLLECT(ent) AS addresses RETURN CASE WHEN ANY (x in COLLECT(SIZE(addresses)) where x < 2) THEN false ELSE true END as ruleSatisfied"
"For every ""Return Item"" event, there must be at least 1 ""Shipping Label"" entity involved.","Activity: [""Return Item""], EntityType: [""Shipping Label""], Actor: []","MATCH (ent:Entity {EntityType: ""Shipping Label""})<-[:CORR]-(e:Event {Activity: ""Return Item""}) WITH e, COLLECT(ent) AS labels RETURN CASE WHEN ANY (x in COLLECT(SIZE(labels)) where x < 1) THEN false ELSE true END as ruleSatisfied"
"For each ""Start Project"" event, at least 5 ""Task"" objects should be associated.","Activity: [""Start Project""], EntityType: [""Task""], Actor: []","MATCH (ent:Entity {EntityType: ""Task""})<-[:CORR]-(e:Event {Activity: ""Start Project""}) WITH e, COLLECT(ent) AS tasks RETURN CASE WHEN ANY (x in COLLECT(SIZE(tasks)) where x < 5) THEN false ELSE true END as ruleSatisfied"
"For each ""Launch Campaign"" task, there must be at least 3 ""Ad Group"" objects involved.","Activity: [""Launch Campaign""], EntityType: [""Ad Group""], Actor: []","MATCH (ent:Entity {EntityType: ""Ad Group""})<-[:CORR]-(e:Event {Activity: ""Launch Campaign""}) WITH e, COLLECT(ent) AS ad_groups RETURN CASE WHEN ANY (x in COLLECT(SIZE(ad_groups)) where x < 3) THEN false ELSE true END as ruleSatisfied"
"Whenever an ""Inventory Restock"" event occurs, at least 2 ""Supplier"" objects must be associated.","Activity: [""Inventory Restock""], EntityType: [""Supplier""], Actor: []","MATCH (ent:Entity {EntityType: ""Supplier""})<-[:CORR]-(e:Event {Activity: ""Inventory Restock""}) WITH e, COLLECT(ent) AS suppliers RETURN CASE WHEN ANY (x in COLLECT(SIZE(suppliers)) where x < 2) THEN false ELSE true END as ruleSatisfied"
"For each ""Schedule Meeting"" event, at least 4 ""Meeting Room"" objects should be related.","Activity: [""Schedule Meeting""], EntityType: [""Meeting Room""], Actor: []","MATCH (ent:Entity {EntityType: ""Meeting Room""})<-[:CORR]-(e:Event {Activity: ""Schedule Meeting""}) WITH e, COLLECT(ent) AS rooms RETURN CASE WHEN ANY (x in COLLECT(SIZE(rooms)) where x < 4) THEN false ELSE true END as ruleSatisfied"
"The average sojourn time for the ""Create Invoice"" activity is less than 2 hours.","Activity: [""Create Invoice""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Create Invoice""}) WITH e, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(latestPredecessor, e.timestamp) AS sojournDuration RETURN AVG(sojournDuration.seconds) < (2 * 60 * 60) AS ruleSatisfied"
"The sojourn time for activity ""Approve Payment"" is greater than 1 day on average.","Activity: [""Approve Payment""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Approve Payment""}) WITH e, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(latestPredecessor, e.timestamp) AS sojournDuration RETURN AVG(sojournDuration.seconds) > (1 * 24 * 60 * 60) AS ruleSatisfied"
"The maximum sojourn time for activity ""Ship Order"" should be less than 48 hours.","Activity: [""Ship Order""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Ship Order""}) WITH e, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(latestPredecessor, e.timestamp) AS sojournDuration RETURN MAX(sojournDuration.seconds) < (48 * 60 * 60) AS ruleSatisfied"
"For the activity ""Process Return,"" the average sojourn time is less than 12 hours.","Activity: [""Process Return""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Process Return""}) WITH e, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(latestPredecessor, e.timestamp) AS sojournDuration RETURN AVG(sojournDuration.seconds) < (12 * 60 * 60) AS ruleSatisfied"
"Ensure that the average sojourn time of the ""Validate Payment"" activity is greater than 3 hours.","Activity: [""Validate Payment""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Validate Payment""}) WITH e, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(latestPredecessor, e.timestamp) AS sojournDuration RETURN AVG(sojournDuration.seconds) > (3 * 60 * 60) AS ruleSatisfied"
"The maximum sojourn time of ""Confirm Shipment"" must be smaller than 1 week.","Activity: [""Confirm Shipment""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Confirm Shipment""}) WITH e, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(latestPredecessor, e.timestamp) AS sojournDuration RETURN MAX(sojournDuration.seconds) < (7 * 24 * 60 * 60) AS ruleSatisfied"
"The average sojourn time for ""Process Payment"" should be smaller than 24 hours.","Activity: [""Process Payment""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Process Payment""}) WITH e, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(latestPredecessor, e.timestamp) AS sojournDuration RETURN AVG(sojournDuration.seconds) < (24 * 60 * 60) AS ruleSatisfied"
"The maximum sojourn time of ""Pack Item"" is greater than 5 hours.","Activity: [""Pack Item""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Pack Item""}) WITH e, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(latestPredecessor, e.timestamp) AS sojournDuration RETURN MAX(sojournDuration.seconds) > (5 * 60 * 60) AS ruleSatisfied"
"The average sojourn time for ""Prepare Invoice"" should be less than 6 hours on average.","Activity: [""Prepare Invoice""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Prepare Invoice""}) WITH e, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(latestPredecessor, e.timestamp) AS sojournDuration RETURN AVG(sojournDuration.seconds) < (6 * 60 * 60) AS ruleSatisfied"
"The sojourn time for ""Return Product"" should be more than 1 hour on average.","Activity: [""Return Product""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Return Product""}) WITH e, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(latestPredecessor, e.timestamp) AS sojournDuration RETURN AVG(sojournDuration.seconds) > (60 * 60) AS ruleSatisfied"
"The average sojourn time for ""Cancel Order"" should be less than 30 minutes.","Activity: [""Cancel Order""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Cancel Order""}) WITH e, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(latestPredecessor, e.timestamp) AS sojournDuration RETURN AVG(sojournDuration.seconds) < (30 * 60) AS ruleSatisfied"
"The sojourn time for activity ""Ship Package"" should be greater than 3 hours on average.","Activity: [""Ship Package""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Ship Package""}) WITH e, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(latestPredecessor, e.timestamp) AS sojournDuration RETURN AVG(sojournDuration.seconds) > (3 * 60 * 60) AS ruleSatisfied"
The maximum sojourn time for inspecting a product should be less than 4 hours.,"Activity: [""Inspect Product""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Inspect Product""}) WITH e, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(latestPredecessor, e.timestamp) AS sojournDuration RETURN MAX(sojournDuration.seconds) < (4 * 60 * 60) AS ruleSatisfied"
The average sojourn time for approving a loan is less than 1 day.,"Activity: [""Approve Loan""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Approve Loan""}) WITH e, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(latestPredecessor, e.timestamp) AS sojournDuration RETURN AVG(sojournDuration.seconds) < (24 * 60 * 60) AS ruleSatisfied"
The sojourn time for issuing a travel visa should be no more than 2 weeks.,"Activity: [""Issue Travel Visa""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Issue Travel Visa""}) WITH e, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(latestPredecessor, e.timestamp) AS sojournDuration RETURN MAX(sojournDuration.seconds) < (14 * 24 * 60 * 60) AS ruleSatisfied"
The minimum sojourn time for conducting a medical consultation must be greater than 30 minutes.,"Activity: [""Conduct Medical Consultation""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Conduct Medical Consultation""}) WITH e, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(latestPredecessor, e.timestamp) AS sojournDuration RETURN MIN(sojournDuration.seconds) > (30 * 60) AS ruleSatisfied"
The average sojourn time for approving an insurance claim should be smaller than 1 week.,"Activity: [""Approve Insurance Claim""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Approve Insurance Claim""}) WITH e, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(latestPredecessor, e.timestamp) AS sojournDuration RETURN AVG(sojournDuration.seconds) < (7 * 24 * 60 * 60) AS ruleSatisfied"
The maximum sojourn time for reviewing a patent application should be less than 6 months.,"Activity: [""Review Patent Application""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Review Patent Application""}) WITH e, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(latestPredecessor, e.timestamp) AS sojournDuration RETURN MAX(sojournDuration.seconds) < (180 * 24 * 60 * 60) AS ruleSatisfied"
The sojourn time for approving a business license should be greater than 3 days on average.,"Activity: [""Approve Business License""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Approve Business License""}) WITH e, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(latestPredecessor, e.timestamp) AS sojournDuration RETURN AVG(sojournDuration.seconds) > (3 * 24 * 60 * 60) AS ruleSatisfied"
The minimum sojourn time for launching a marketing campaign should be greater than 1 week.,"Activity: [""Launch Marketing Campaign""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Launch Marketing Campaign""}) WITH e, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(latestPredecessor, e.timestamp) AS sojournDuration RETURN MIN(sojournDuration.seconds) > (7 * 24 * 60 * 60) AS ruleSatisfied"
The sojourn time for processing a legal case should be smaller than 90 days.,"Activity: [""Process Legal Case""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Process Legal Case""}) WITH e, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(latestPredecessor, e.timestamp) AS sojournDuration RETURN MAX(sojournDuration.seconds) < (90 * 24 * 60 * 60) AS ruleSatisfied"
The average sojourn time for designing a new product should be less than 10 hours.,"Activity: [""Design New Product""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Design New Product""}) WITH e, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(latestPredecessor, e.timestamp) AS sojournDuration RETURN AVG(sojournDuration.seconds) < (10 * 60 * 60) AS ruleSatisfied"
The maximum sojourn time for conducting a customer satisfaction survey should not exceed 72 hours.,"Activity: [""Conduct Customer Satisfaction Survey""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Conduct Customer Satisfaction Survey""}) WITH e, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(latestPredecessor, e.timestamp) AS sojournDuration RETURN MAX(sojournDuration.seconds) < (72 * 60 * 60) AS ruleSatisfied"
"The average synchronization time of events ""Submit Proposal"" is smaller than 3 days.","Activity: [""Submit Proposal""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Submit Proposal""}) WITH e, MAX(prec.timestamp) AS latestPredecessor, MIN(prec.timestamp) AS earliestPredecessor WITH duration.between(latestPredecessor, earliestPredecessor) AS synchronizationDuration RETURN AVG(synchronizationDuration.seconds) < (3 * 24 * 60 * 60) AS ruleSatisfied"
"The maximum synchronization time of ""Conduct Interview"" events is greater than 2 hours.","Activity: [""Conduct Interview""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Conduct Interview""}) WITH e, MAX(prec.timestamp) AS latestPredecessor, MIN(prec.timestamp) AS earliestPredecessor WITH duration.between(latestPredecessor, earliestPredecessor) AS synchronizationDuration RETURN MAX(synchronizationDuration.seconds) > (2 * 60 * 60) AS ruleSatisfied"
"The minimum synchronization time for events with activity ""Plan Marketing Strategy"" must be greater than 1 day.","Activity: [""Plan Marketing Strategy""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Plan Marketing Strategy""}) WITH e, MAX(prec.timestamp) AS latestPredecessor, MIN(prec.timestamp) AS earliestPredecessor WITH duration.between(latestPredecessor, earliestPredecessor) AS synchronizationDuration RETURN MIN(synchronizationDuration.seconds) > (24 * 60 * 60) AS ruleSatisfied"
"The average synchronization time of activity ""Process Refund"" is less than 8 hours.","Activity: [""Process Refund""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Process Refund""}) WITH e, MAX(prec.timestamp) AS latestPredecessor, MIN(prec.timestamp) AS earliestPredecessor WITH duration.between(latestPredecessor, earliestPredecessor) AS synchronizationDuration RETURN AVG(synchronizationDuration.seconds) < (8 * 60 * 60) AS ruleSatisfied"
"The maximum synchronization time for activity ""Complete Survey"" must be smaller than 12 hours.","Activity: [""Complete Survey""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Complete Survey""}) WITH e, MAX(prec.timestamp) AS latestPredecessor, MIN(prec.timestamp) AS earliestPredecessor WITH duration.between(latestPredecessor, earliestPredecessor) AS synchronizationDuration RETURN MAX(synchronizationDuration.seconds) < (12 * 60 * 60) AS ruleSatisfied"
"The average synchronization time for activity ""Approve Loan"" should be less than 5 days.","Activity: [""Approve Loan""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Approve Loan""}) WITH e, MAX(prec.timestamp) AS latestPredecessor, MIN(prec.timestamp) AS earliestPredecessor WITH duration.between(latestPredecessor, earliestPredecessor) AS synchronizationDuration RETURN AVG(synchronizationDuration.seconds) < (5 * 24 * 60 * 60) AS ruleSatisfied"
"The minimum synchronization time for activity ""Analyze Report"" is greater than 30 minutes.","Activity: [""Analyze Report""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Analyze Report""}) WITH e, MAX(prec.timestamp) AS latestPredecessor, MIN(prec.timestamp) AS earliestPredecessor WITH duration.between(latestPredecessor, earliestPredecessor) AS synchronizationDuration RETURN MIN(synchronizationDuration.seconds) > (30 * 60) AS ruleSatisfied"
"The average synchronization time for activity ""Ship Goods"" is smaller than 1 day.","Activity: [""Ship Goods""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Ship Goods""}) WITH e, MAX(prec.timestamp) AS latestPredecessor, MIN(prec.timestamp) AS earliestPredecessor WITH duration.between(latestPredecessor, earliestPredecessor) AS synchronizationDuration RETURN AVG(synchronizationDuration.seconds) < (24 * 60 * 60) AS ruleSatisfied"
"The maximum synchronization time for activity ""Validate Data"" must be greater than 6 hours.","Activity: [""Validate Data""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Validate Data""}) WITH e, MAX(prec.timestamp) AS latestPredecessor, MIN(prec.timestamp) AS earliestPredecessor WITH duration.between(latestPredecessor, earliestPredecessor) AS synchronizationDuration RETURN MAX(synchronizationDuration.seconds) > (6 * 60 * 60) AS ruleSatisfied"
"The average synchronization time for activity ""Resolve Complaint"" is less than 10 hours.","Activity: [""Resolve Complaint""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Resolve Complaint""}) WITH e, MAX(prec.timestamp) AS latestPredecessor, MIN(prec.timestamp) AS earliestPredecessor WITH duration.between(latestPredecessor, earliestPredecessor) AS synchronizationDuration RETURN AVG(synchronizationDuration.seconds) < (10 * 60 * 60) AS ruleSatisfied"
The maximum synchronization time for submitting a report is smaller than 3 hours.,"Activity: [""Submit Report""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Submit Report""}) WITH e, MAX(prec.timestamp) AS latestPredecessor, MIN(prec.timestamp) AS earliestPredecessor WITH duration.between(latestPredecessor, earliestPredecessor) AS synchronizationDuration RETURN MAX(synchronizationDuration.seconds) < (3 * 60 * 60) AS ruleSatisfied"
The average synchronization time for scheduling a meeting is less than 1 day.,"Activity: [""Schedule Meeting""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Schedule Meeting""}) WITH e, MAX(prec.timestamp) AS latestPredecessor, MIN(prec.timestamp) AS earliestPredecessor WITH duration.between(latestPredecessor, earliestPredecessor) AS synchronizationDuration RETURN AVG(synchronizationDuration.seconds) < (24 * 60 * 60) AS ruleSatisfied"
The minimum synchronization time for resolving a customer complaint must be greater than 5 hours.,"Activity: [""Resolve Complaint""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Resolve Complaint""}) WITH e, MAX(prec.timestamp) AS latestPredecessor, MIN(prec.timestamp) AS earliestPredecessor WITH duration.between(latestPredecessor, earliestPredecessor) AS synchronizationDuration RETURN MIN(synchronizationDuration.seconds) > (5 * 60 * 60) AS ruleSatisfied"
The average synchronization time for processing an order is smaller than 12 hours.,"Activity: [""Process Order""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Process Order""}) WITH e, MAX(prec.timestamp) AS latestPredecessor, MIN(prec.timestamp) AS earliestPredecessor WITH duration.between(latestPredecessor, earliestPredecessor) AS synchronizationDuration RETURN AVG(synchronizationDuration.seconds) < (12 * 60 * 60) AS ruleSatisfied"
The maximum synchronization time for delivering a product should not exceed 1 week.,"Activity: [""Deliver Product""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Deliver Product""}) WITH e, MAX(prec.timestamp) AS latestPredecessor, MIN(prec.timestamp) AS earliestPredecessor WITH duration.between(latestPredecessor, earliestPredecessor) AS synchronizationDuration RETURN MAX(synchronizationDuration.seconds) < (7 * 24 * 60 * 60) AS ruleSatisfied"
The minimum synchronization time for preparing a presentation must be greater than 2 days.,"Activity: [""Prepare Presentation""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Prepare Presentation""}) WITH e, MAX(prec.timestamp) AS latestPredecessor, MIN(prec.timestamp) AS earliestPredecessor WITH duration.between(latestPredecessor, earliestPredecessor) AS synchronizationDuration RETURN MIN(synchronizationDuration.seconds) > (2 * 24 * 60 * 60) AS ruleSatisfied"
The average synchronization time for conducting an interview should be less than 8 hours.,"Activity: [""Conduct Interview""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Conduct Interview""}) WITH e, MAX(prec.timestamp) AS latestPredecessor, MIN(prec.timestamp) AS earliestPredecessor WITH duration.between(latestPredecessor, earliestPredecessor) AS synchronizationDuration RETURN AVG(synchronizationDuration.seconds) < (8 * 60 * 60) AS ruleSatisfied"
The maximum synchronization time for approving a budget should not exceed 15 days.,"Activity: [""approve budget""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""approve budget""}) WITH e, MAX(prec.timestamp) AS latestPredecessor, MIN(prec.timestamp) AS earliestPredecessor WITH duration.between(latestPredecessor, earliestPredecessor) AS synchronizationDuration RETURN MAX(synchronizationDuration.seconds) < (15 * 24 * 60 * 60) AS ruleSatisfied"
The minimum synchronization time for hosting a webinar must be greater than 6 hours.,"Activity: [""host webinar""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""host webinar""}) WITH e, MAX(prec.timestamp) AS latestPredecessor, MIN(prec.timestamp) AS earliestPredecessor WITH duration.between(latestPredecessor, earliestPredecessor) AS synchronizationDuration RETURN MIN(synchronizationDuration.seconds) > (6 * 60 * 60) AS ruleSatisfied"
The average synchronization time for analyzing data should be less than 18 hours.,"Activity: [""analyze data""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""analyze data""}) WITH e, MAX(prec.timestamp) AS latestPredecessor, MIN(prec.timestamp) AS earliestPredecessor WITH duration.between(latestPredecessor, earliestPredecessor) AS synchronizationDuration RETURN AVG(synchronizationDuration.seconds) < (18 * 60 * 60) AS ruleSatisfied"
"The average flow time of activity ""Review Application"" is greater than 2 hours.","Activity: [""review application""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""review application""}) WITH e, MIN(prec.timestamp) AS earliestPredecessor WITH e, duration.between(earliestPredecessor, e.timestamp) AS flowDuration RETURN AVG(flowDuration.seconds) > (2 * 60 * 60) AS ruleSatisfied"
"The maximum flow time of events of type ""Submit Proposal"" is smaller than 1 day.","Activity: [""submit proposal""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""submit proposal""}) WITH e, MIN(prec.timestamp) AS earliestPredecessor WITH e, duration.between(earliestPredecessor, e.timestamp) AS flowDuration RETURN MAX(flowDuration.seconds) < (24 * 60 * 60) AS ruleSatisfied"
"The average flow time for ""Send Notification"" is less than 15 minutes.","Activity: [""send notification""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""send notification""}) WITH e, MIN(prec.timestamp) AS earliestPredecessor WITH e, duration.between(earliestPredecessor, e.timestamp) AS flowDuration RETURN AVG(flowDuration.seconds) < (15 * 60) AS ruleSatisfied"
"The maximum flow time of ""Generate Report"" events should be greater than 2 hours.","Activity: [""generate report""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""generate report""}) WITH e, MIN(prec.timestamp) AS earliestPredecessor WITH e, duration.between(earliestPredecessor, e.timestamp) AS flowDuration RETURN MAX(flowDuration.seconds) > (2 * 60 * 60) AS ruleSatisfied"
"The average flow time for ""Complete Assessment"" should be smaller than 12 hours.","Activity: [""complete assessment""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""complete assessment""}) WITH e, MIN(prec.timestamp) AS earliestPredecessor WITH e, duration.between(earliestPredecessor, e.timestamp) AS flowDuration RETURN AVG(flowDuration.seconds) < (12 * 60 * 60) AS ruleSatisfied"
"The flow time for ""Verify Transaction"" is greater than 5 minutes on average.","Activity: [""verify transaction""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""verify transaction""}) WITH e, MIN(prec.timestamp) AS earliestPredecessor WITH e, duration.between(earliestPredecessor, e.timestamp) AS flowDuration RETURN AVG(flowDuration.seconds) > (5 * 60) AS ruleSatisfied"
"The minimum flow time for ""Analyze Data"" is smaller than 30 minutes.","Activity: [""Analyze Data""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Analyze Data""}) WITH e, MIN(prec.timestamp) AS earliestPredecessor WITH e, duration.between(earliestPredecessor, e.timestamp) AS flowDuration RETURN MIN(flowDuration.seconds) < (30 * 60) AS ruleSatisfied"
"The maximum flow time of activity ""Inspect Item"" is less than 48 hours.","Activity: [""Inspect Item""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Inspect Item""}) WITH e, MIN(prec.timestamp) AS earliestPredecessor WITH e, duration.between(earliestPredecessor, e.timestamp) AS flowDuration RETURN MAX(flowDuration.seconds) < (48 * 60 * 60) AS ruleSatisfied"
"The average flow time for activity ""Issue Refund"" is greater than 8 hours.","Activity: [""Issue Refund""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Issue Refund""}) WITH e, MIN(prec.timestamp) AS earliestPredecessor WITH e, duration.between(earliestPredecessor, e.timestamp) AS flowDuration RETURN AVG(flowDuration.seconds) > (8 * 60 * 60) AS ruleSatisfied"
"The minimum flow time of ""Validate Document"" should be greater than 10 minutes.","Activity: [""Validate Document""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Validate Document""}) WITH e, MIN(prec.timestamp) AS earliestPredecessor WITH e, duration.between(earliestPredecessor, e.timestamp) AS flowDuration RETURN MIN(flowDuration.seconds) > (10 * 60) AS ruleSatisfied"
The average flow time for shipping orders is less than 2 days.,"Activity: [""Ship Order""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Ship Order""}) WITH e, MIN(prec.timestamp) AS earliestPredecessor WITH e, duration.between(earliestPredecessor, e.timestamp) AS flowDuration RETURN AVG(flowDuration.seconds) < (2 * 24 * 60 * 60) AS ruleSatisfied"
The maximum flow time for delivering a package is greater than 7 days.,"Activity: [""Deliver Package""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Deliver Package""}) WITH e, MIN(prec.timestamp) AS earliestPredecessor WITH e, duration.between(earliestPredecessor, e.timestamp) AS flowDuration RETURN MAX(flowDuration.seconds) > (7 * 24 * 60 * 60) AS ruleSatisfied"
The minimum flow time for onboarding an employee must exceed 3 days.,"Activity: [""Onboard Employee""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Onboard Employee""}) WITH e, MIN(prec.timestamp) AS earliestPredecessor WITH e, duration.between(earliestPredecessor, e.timestamp) AS flowDuration RETURN MIN(flowDuration.seconds) > (3 * 24 * 60 * 60) AS ruleSatisfied"
The average flow time for processing returns should be smaller than 5 hours.,"Activity: [""Process Return""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Process Return""}) WITH e, MIN(prec.timestamp) AS earliestPredecessor WITH e, duration.between(earliestPredecessor, e.timestamp) AS flowDuration RETURN AVG(flowDuration.seconds) < (5 * 60 * 60) AS ruleSatisfied"
The maximum flow time for resolving a support ticket should not exceed 72 hours.,"Activity: [""Resolve Support Ticket""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Resolve Support Ticket""}) WITH e, MIN(prec.timestamp) AS earliestPredecessor WITH e, duration.between(earliestPredecessor, e.timestamp) AS flowDuration RETURN MAX(flowDuration.seconds) < (72 * 60 * 60) AS ruleSatisfied"
The minimum flow time for signing a contract should be greater than 1 week.,"Activity: [""Sign Contract""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Sign Contract""}) WITH e, MIN(prec.timestamp) AS earliestPredecessor WITH e, duration.between(earliestPredecessor, e.timestamp) AS flowDuration RETURN MIN(flowDuration.seconds) > (7 * 24 * 60 * 60) AS ruleSatisfied"
The average flow time for analyzing market trends is greater than 10 days.,"Activity: [""Analyze Market Trends""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Analyze Market Trends""}) WITH e, MIN(prec.timestamp) AS earliestPredecessor WITH e, duration.between(earliestPredecessor, e.timestamp) AS flowDuration RETURN AVG(flowDuration.seconds) > (10 * 24 * 60 * 60) AS ruleSatisfied"
The maximum flow time for conducting a safety inspection should not exceed 30 days.,"Activity: [""Conduct Safety Inspection""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Conduct Safety Inspection""}) WITH e, MIN(prec.timestamp) AS earliestPredecessor WITH e, duration.between(earliestPredecessor, e.timestamp) AS flowDuration RETURN MAX(flowDuration.seconds) < (30 * 24 * 60 * 60) AS ruleSatisfied"
The average flow time for reviewing employee performance must be less than 48 hours.,"Activity: [""Review Employee Performance""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Review Employee Performance""}) WITH e, MIN(prec.timestamp) AS earliestPredecessor WITH e, duration.between(earliestPredecessor, e.timestamp) AS flowDuration RETURN AVG(flowDuration.seconds) < (48 * 60 * 60) AS ruleSatisfied"
The minimum flow time for planning a corporate event must be greater than 2 weeks.,"Activity: [""Plan Corporate Event""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Plan Corporate Event""}) WITH e, MIN(prec.timestamp) AS earliestPredecessor WITH e, duration.between(earliestPredecessor, e.timestamp) AS flowDuration RETURN MIN(flowDuration.seconds) > (14 * 24 * 60 * 60) AS ruleSatisfied"
"The average pooling time of activity ""Approve Payment"" with respect to ""Payment"" entities should not exceed 1 hour.","Activity: [""Approve Payment""], EntityType: [""Payment""], Actor: []","MATCH (ent:Entity {EntityType: ""Payment""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Approve Payment""})-[:CORR]->(ent) WITH e, MIN(prec.timestamp) AS earliestPredecessor, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(earliestPredecessor, latestPredecessor) AS poolDuration RETURN AVG(poolDuration.seconds) < (60 * 60) AS ruleSatisfied"
"The maximum pooling time of activity ""Ship Order"" relative to ""Product"" entities should be longer than 5 hours.","Activity: [""Ship Order""], EntityType: [""Product""], Actor: []","MATCH (ent:Entity {EntityType: ""Product""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Ship Order""})-[:CORR]->(ent) WITH e, MIN(prec.timestamp) AS earliestPredecessor, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(earliestPredecessor, latestPredecessor) AS poolDuration RETURN MAX(poolDuration.seconds) > (5 * 60 * 60) AS ruleSatisfied"
"The pooling time for activity ""Process Payment"" concerning ""Invoice"" objcets must be greater than 2 hours on average.","Activity: [""Process Payment""], EntityType: [""Invoice""], Actor: []","MATCH (ent:Entity {EntityType: ""Invoice""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Process Payment""})-[:CORR]->(ent) WITH e, MIN(prec.timestamp) AS earliestPredecessor, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(earliestPredecessor, latestPredecessor) AS poolDuration RETURN AVG(poolDuration.seconds) > (2 * 60 * 60) AS ruleSatisfied"
"The pooling time for ""Pack Item"" activities with respect to items should not exceed 3 hours.","Activity: [""Pack Item""], EntityType: [""Item""], Actor: []","MATCH (ent:Entity {EntityType: ""Item""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Pack Item""})-[:CORR]->(ent) WITH e, MIN(prec.timestamp) AS earliestPredecessor, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(earliestPredecessor, latestPredecessor) AS poolDuration RETURN MAX(poolDuration.seconds) < (3 * 60 * 60) AS ruleSatisfied"
"For the ""Prepare Shipment"" activity, the average pooling time with ""Package"" entities should be under 6 hours.","Activity: [""Prepare Shipment""], EntityType: [""Package""], Actor: []","MATCH (ent:Entity {EntityType: ""Package""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Prepare Shipment""})-[:CORR]->(ent) WITH e, MIN(prec.timestamp) AS earliestPredecessor, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(earliestPredecessor, latestPredecessor) AS poolDuration RETURN AVG(poolDuration.seconds) < (6 * 60 * 60) AS ruleSatisfied"
"The maximum pooling time for ""Inspect Product"" events regarding entities of type ""Inspection"" should exceed 1 hour.","Activity: [""Inspect Product""], EntityType: [""Inspection""], Actor: []","MATCH (ent:Entity {EntityType: ""Inspection""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Inspect Product""})-[:CORR]->(ent) WITH e, MIN(prec.timestamp) AS earliestPredecessor, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(earliestPredecessor, latestPredecessor) AS poolDuration RETURN MAX(poolDuration.seconds) > (60 * 60) AS ruleSatisfied"
"On average, the pooling time for activity ""Return Item"" with ""Return"" entities involved should exceed 1 day.","Activity: [""Return Item""], EntityType: [""Return""], Actor: []","MATCH (ent:Entity {EntityType: ""Return""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Return Item""})-[:CORR]->(ent) WITH e, MIN(prec.timestamp) AS earliestPredecessor, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(earliestPredecessor, latestPredecessor) AS poolDuration RETURN AVG(poolDuration.seconds) > (1 * 24 * 60 * 60) AS ruleSatisfied"
"The pooling time for ""Ship Package"" events w.r.t. orders should not exceed 2 days on average.","Activity: [""Ship Package""], EntityType: [""Order""], Actor: []","MATCH (ent:Entity {EntityType: ""Order""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Ship Package""})-[:CORR]->(ent) WITH e, MIN(prec.timestamp) AS earliestPredecessor, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(earliestPredecessor, latestPredecessor) AS poolDuration RETURN AVG(poolDuration.seconds) < (2 * 24 * 60 * 60) AS ruleSatisfied"
"The pooling time of ""Validate Payment"" activities concerning ""Transaction"" entities should average more than 4 hours.","Activity: [""validate payment""], EntityType: [""transaction""], Actor: []","MATCH (ent:Entity {EntityType: ""transaction""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""validate payment""})-[:CORR]->(ent) WITH e, MIN(prec.timestamp) AS earliestPredecessor, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(earliestPredecessor, latestPredecessor) AS poolDuration RETURN AVG(poolDuration.seconds) > (4 * 60 * 60) AS ruleSatisfied"
"The average pooling time for processing a claim, considering ""Patient"" entities, should be less than 2 days.","Activity: [""process claim""], EntityType: [""patient""], Actor: []","MATCH (ent:Entity {EntityType: ""patient""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""process claim""})-[:CORR]->(ent) WITH e, MIN(prec.timestamp) AS earliestPredecessor, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(earliestPredecessor, latestPredecessor) AS poolDuration RETURN AVG(poolDuration.seconds) < (2 * 24 * 60 * 60) AS ruleSatisfied"
"The maximum pooling time for assembling a part, in relation to ""Machine"" entities, should not exceed 12 hours.","Activity: [""assemble part""], EntityType: [""machine""], Actor: []","MATCH (ent:Entity {EntityType: ""machine""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""assemble part""})-[:CORR]->(ent) WITH e, MIN(prec.timestamp) AS earliestPredecessor, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(earliestPredecessor, latestPredecessor) AS poolDuration RETURN MAX(poolDuration.seconds) < (12 * 60 * 60) AS ruleSatisfied"
"The pooling time for processing a loan, w.r.t. to ""Customer"" entities, should exceed 5 days on average.","Activity: [""process loan""], EntityType: [""customer""], Actor: []","MATCH (ent:Entity {EntityType: ""customer""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""process loan""})-[:CORR]->(ent) WITH e, MIN(prec.timestamp) AS earliestPredecessor, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(earliestPredecessor, latestPredecessor) AS poolDuration RETURN AVG(poolDuration.seconds) > (5 * 24 * 60 * 60) AS ruleSatisfied"
"The pooling time for delivering a product, concerning orders, should be smaller than 48 hours.","Activity: [""deliver product""], EntityType: [""order""], Actor: []","MATCH (ent:Entity {EntityType: ""order""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""deliver product""})-[:CORR]->(ent) WITH e, MIN(prec.timestamp) AS earliestPredecessor, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(earliestPredecessor, latestPredecessor) AS poolDuration RETURN MAX(poolDuration.seconds) < (48 * 60 * 60) AS ruleSatisfied"
"The pooling time for testing a device, related to ""Product"" entities, must exceed 2 hours on average.","Activity: [""test device""], EntityType: [""product""], Actor: []","MATCH (ent:Entity {EntityType: ""product""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""test device""})-[:CORR]->(ent) WITH e, MIN(prec.timestamp) AS earliestPredecessor, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(earliestPredecessor, latestPredecessor) AS poolDuration RETURN AVG(poolDuration.seconds) > (2 * 60 * 60) AS ruleSatisfied"
"The maximum pooling time for inspecting a building w.r.t. ""Inspection"" objects, should not exceed 1 day.","Activity: [""inspect building""], EntityType: [""inspection""], Actor: []","MATCH (ent:Entity {EntityType: ""inspection""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""inspect building""})-[:CORR]->(ent) WITH e, MIN(prec.timestamp) AS earliestPredecessor, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(earliestPredecessor, latestPredecessor) AS poolDuration RETURN MAX(poolDuration.seconds) < (24 * 60 * 60) AS ruleSatisfied"
"The pooling time for approving a building permit regarding permits, should be less than 3 days on average.","Activity: [""approve building permit""], EntityType: [""permit""], Actor: []","MATCH (ent:Entity {EntityType: ""permit""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""approve building permit""})-[:CORR]->(ent) WITH e, MIN(prec.timestamp) AS earliestPredecessor, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(earliestPredecessor, latestPredecessor) AS poolDuration RETURN AVG(poolDuration.seconds) < (3 * 24 * 60 * 60) AS ruleSatisfied"
"The pooling time for reviewing a tax return, related to ""Taxpayer"" entities, should exceed 2 weeks.","Activity: [""review tax return""], EntityType: [""taxpayer""], Actor: []","MATCH (ent:Entity {EntityType: ""taxpayer""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""review tax return""})-[:CORR]->(ent) WITH e, MIN(prec.timestamp) AS earliestPredecessor, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(earliestPredecessor, latestPredecessor) AS poolDuration RETURN MIN(poolDuration.seconds) > (14 * 24 * 60 * 60) AS ruleSatisfied"
"The pooling time for processing an insurance quote, w.r.t. ""Policyholder"" entities, should not exceed 1 day.","Activity: [""process insurance quote""], EntityType: [""policyholder""], Actor: []","MATCH (ent:Entity {EntityType: ""policyholder""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""process insurance quote""})-[:CORR]->(ent) WITH e, MIN(prec.timestamp) AS earliestPredecessor, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(earliestPredecessor, latestPredecessor) AS poolDuration RETURN MAX(poolDuration.seconds) < (24 * 60 * 60) AS ruleSatisfied"
"The average readiness time for the activity ""Schedule Interview"" in relation to ""Candidate"" entities must exceed 3 hours.","Activity: [""Schedule Interview""], EntityType: [""Candidate""], Actor: []","MATCH (ent:Entity {EntityType: ""Candidate""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Schedule Interview""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestCandidatePredecessor, MAX(prec2.timestamp) AS latestPredecessor WITH e, duration.between(latestCandidatePredecessor, latestPredecessor) AS readinessDuration RETURN AVG(readinessDuration.seconds) > (3 * 60 * 60) AS ruleSatisfied"
"It is required that the maximum readiness time for ""Start Project"" activities with respect to ""Project"" entities is smaller than 48 hours.","Activity: [""Start Project""], EntityType: [""Project""], Actor: []","MATCH (ent:Entity {EntityType: ""Project""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Start Project""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestProjectPredecessor, MAX(prec2.timestamp) AS latestPredecessor WITH e, duration.between(latestProjectPredecessor, latestPredecessor) AS readinessDuration RETURN MAX(readinessDuration.seconds) < (2 * 24 * 60 * 60) AS ruleSatisfied"
"Ensure that the readiness time for ""Deliver Product"" events concerning ""Order"" entities does not exceed 1 day on average.","Activity: [""Deliver Product""], EntityType: [""Order""], Actor: []","MATCH (ent:Entity {EntityType: ""Order""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Deliver Product""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestOrderPredecessor, MAX(prec2.timestamp) AS latestPredecessor WITH e, duration.between(latestOrderPredecessor, latestPredecessor) AS readinessDuration RETURN AVG(readinessDuration.seconds) < (1 * 24 * 60 * 60) AS ruleSatisfied"
"The readiness time for the ""Launch Campaign"" activity with respect to ""Campaign"" entities should be greater than 5 days.","Activity: [""Launch Campaign""], EntityType: [""Campaign""], Actor: []","MATCH (ent:Entity {EntityType: ""Campaign""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Launch Campaign""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestCampaignPredecessor, MAX(prec2.timestamp) AS latestPredecessor WITH e, duration.between(latestCampaignPredecessor, latestPredecessor) AS readinessDuration RETURN MIN(readinessDuration.seconds) > (5 * 24 * 60 * 60) AS ruleSatisfied"
"You should ensure that the readiness time for ""Approve Loan"" activities in relation to ""Customer"" objects averages less than 12 hours.","Activity: [""Approve Loan""], EntityType: [""Customer""], Actor: []","MATCH (ent:Entity {EntityType: ""Customer""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Approve Loan""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestCustomerPredecessor, MAX(prec2.timestamp) AS latestPredecessor WITH e, duration.between(latestCustomerPredecessor, latestPredecessor) AS readinessDuration RETURN AVG(readinessDuration.seconds) < (12 * 60 * 60) AS ruleSatisfied"
"The maximum readiness time for ""Submit Report"" with respect to ""Employee"" objects must be at least 8 hours.","Activity: [""Submit Report""], EntityType: [""Employee""], Actor: []","MATCH (ent:Entity {EntityType: ""Employee""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Submit Report""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestEmployeePredecessor, MAX(prec2.timestamp) AS latestPredecessor WITH e, duration.between(latestEmployeePredecessor, latestPredecessor) AS readinessDuration RETURN MAX(readinessDuration.seconds) > (8 * 60 * 60) AS ruleSatisfied"
"For ""Prepare Presentation"" activities in connection with projects, the readiness time must not exceed 2 hours on average.","Activity: [""Prepare Presentation""], EntityType: [""Project""], Actor: []","MATCH (ent:Entity {EntityType: ""Project""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Prepare Presentation""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestProjectPredecessor, MAX(prec2.timestamp) AS latestPredecessor WITH e, duration.between(latestProjectPredecessor, latestPredecessor) AS readinessDuration RETURN AVG(readinessDuration.seconds) < (2 * 60 * 60) AS ruleSatisfied"
"It is required that the readiness time for ""Finalize Report"" events concerning ""Document"" entities exceeds 1 day.","Activity: [""Finalize Report""], EntityType: [""Document""], Actor: []","MATCH (ent:Entity {EntityType: ""Document""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Finalize Report""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestDocumentPredecessor, MAX(prec2.timestamp) AS latestPredecessor WITH e, duration.between(latestDocumentPredecessor, latestPredecessor) AS readinessDuration RETURN MIN(readinessDuration.seconds) > (1 * 24 * 60 * 60) AS ruleSatisfied"
"The maximum readiness time for approving a loan request concerning ""Customer"" entities should not exceed 1 day.","Activity: [""Approve Loan""], EntityType: [""Customer""], Actor: []","MATCH (ent:Entity {EntityType: ""Customer""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Approve Loan""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestCustomerPredecessor, MAX(prec2.timestamp) AS latestPredecessor WITH e, duration.between(latestCustomerPredecessor, latestPredecessor) AS readinessDuration RETURN MAX(readinessDuration.seconds) < (24 * 60 * 60) AS ruleSatisfied"
The average readiness time for launching a marketing campaign in relation to products should exceed 3 hours.,"Activity: [""Launch Campaign""], EntityType: [""Product""], Actor: []","MATCH (ent:Entity {EntityType: ""Product""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Launch Campaign""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestProductPredecessor, MAX(prec2.timestamp) AS latestPredecessor WITH e, duration.between(latestProductPredecessor, latestPredecessor) AS readinessDuration RETURN AVG(readinessDuration.seconds) > (3 * 60 * 60) AS ruleSatisfied"
"The maximum readiness time for inspecting a device, related to ""Product"" entities, should not exceed 48 hours.","Activity: [""Inspect Device""], EntityType: [""Product""], Actor: []","MATCH (ent:Entity {EntityType: ""Product""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Inspect Device""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestProductPredecessor, MAX(prec2.timestamp) AS latestPredecessor WITH e, duration.between(latestProductPredecessor, latestPredecessor) AS readinessDuration RETURN MAX(readinessDuration.seconds) < (48 * 60 * 60) AS ruleSatisfied"
"The average readiness time for reviewing a document, regarding ""Employee"" objects, should be greater than 1 hour.","Activity: [""Review Document""], EntityType: [""Employee""], Actor: []","MATCH (ent:Entity {EntityType: ""Employee""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Review Document""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestEmployeePredecessor, MAX(prec2.timestamp) AS latestPredecessor WITH e, duration.between(latestEmployeePredecessor, latestPredecessor) AS readinessDuration RETURN AVG(readinessDuration.seconds) > (60 * 60) AS ruleSatisfied"
"The readiness time for approving an insurance claim, concerning policyholders, should be smaller than 2 days.","Activity: [""Approve Insurance Claim""], EntityType: [""Policyholder""], Actor: []","MATCH (ent:Entity {EntityType: ""Policyholder""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Approve Insurance Claim""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestPolicyholderPredecessor, MAX(prec2.timestamp) AS latestPredecessor WITH e, duration.between(latestPolicyholderPredecessor, latestPredecessor) AS readinessDuration RETURN MAX(readinessDuration.seconds) < (2 * 24 * 60 * 60) AS ruleSatisfied"
"The readiness time for completing an order, concerning ""Customer"" entities, should exceed 30 minutes on average.","Activity: [""Complete Order""], EntityType: [""Customer""], Actor: []","MATCH (ent:Entity {EntityType: ""Customer""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Complete Order""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestCustomerPredecessor, MAX(prec2.timestamp) AS latestPredecessor WITH e, duration.between(latestCustomerPredecessor, latestPredecessor) AS readinessDuration RETURN AVG(readinessDuration.seconds) > (30 * 60) AS ruleSatisfied"
"The readiness time for evaluating risk, regarding loans, should be less than 5 hours on average.","Activity: [""Evaluate Risk""], EntityType: [""Loan""], Actor: []","MATCH (ent:Entity {EntityType: ""Loan""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Evaluate Risk""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestLoanPredecessor, MAX(prec2.timestamp) AS latestPredecessor WITH e, duration.between(latestLoanPredecessor, latestPredecessor) AS readinessDuration RETURN AVG(readinessDuration.seconds) < (5 * 60 * 60) AS ruleSatisfied"
"On average, the readiness time for confirming a reservation, w.r.t. ""Booking"" entities, should exceed 3 days.","Activity: [""Confirm Reservation""], EntityType: [""Booking""], Actor: []","MATCH (ent:Entity {EntityType: ""Booking""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Confirm Reservation""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestBookingPredecessor, MAX(prec2.timestamp) AS latestPredecessor WITH e, duration.between(latestBookingPredecessor, latestPredecessor) AS readinessDuration RETURN AVG(readinessDuration.seconds) > (3 * 24 * 60 * 60) AS ruleSatisfied"
"The maximum readiness time for testing a machine, in relation to ""Device"" entities, should not exceed 6 hours.","Activity: [""Test Machine""], EntityType: [""Device""], Actor: []","MATCH (ent:Entity {EntityType: ""Device""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Test Machine""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestDevicePredecessor, MAX(prec2.timestamp) AS latestPredecessor WITH e, duration.between(latestDevicePredecessor, latestPredecessor) AS readinessDuration RETURN MAX(readinessDuration.seconds) < (6 * 60 * 60) AS ruleSatisfied"
"The lagging time for activity ""Approve Request"" with respect to ""Customer"" entities should not exceed 3 hours on average.","Activity: [""Approve Request""], EntityType: [""Customer""], Actor: []","MATCH (ent:Entity {EntityType: ""Customer""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Approve Request""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestCustomerPredecessor, MIN(prec2.timestamp) AS earliestPredecessor WITH e, duration.between(latestCustomerPredecessor, earliestPredecessor) AS laggingDuration RETURN AVG(laggingDuration.seconds) < (3 * 60 * 60) AS ruleSatisfied"
"The maximum lag time of the ""Place Order"" activity with respect to products should be greater than 5 hours.","Activity: [""Place Order""], EntityType: [""Product""], Actor: []","MATCH (ent:Entity {EntityType: ""Product""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Place Order""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestProductPredecessor, MIN(prec2.timestamp) AS earliestPredecessor WITH e, duration.between(latestProductPredecessor, earliestPredecessor) AS laggingDuration RETURN MAX(laggingDuration.seconds) > (5 * 60 * 60) AS ruleSatisfied"
"It is required that the average lagging time for ""Start Production"" with respect to machines is less than 2 hours.","Activity: [""Start Production""], EntityType: [""Machine""], Actor: []","MATCH (ent:Entity {EntityType: ""Machine""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Start Production""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestMachinePredecessor, MIN(prec2.timestamp) AS earliestPredecessor WITH e, duration.between(latestMachinePredecessor, earliestPredecessor) AS laggingDuration RETURN AVG(laggingDuration.seconds) < (2 * 60 * 60) AS ruleSatisfied"
"The maximum lagging time for the ""Launch Campaign"" activity concerning ""Campaign"" entities must exceed 10 hours.","Activity: [""Launch Campaign""], EntityType: [""Campaign""], Actor: []","MATCH (ent:Entity {EntityType: ""Campaign""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Launch Campaign""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestCampaignPredecessor, MIN(prec2.timestamp) AS earliestPredecessor WITH e, duration.between(latestCampaignPredecessor, earliestPredecessor) AS laggingDuration RETURN MAX(laggingDuration.seconds) > (10 * 60 * 60) AS ruleSatisfied"
"For ""Schedule Meeting"" events, the lagging time with respect to ""Employee"" entities should not exceed 4 hours on average.","Activity: [""Schedule Meeting""], EntityType: [""Employee""], Actor: []","MATCH (ent:Entity {EntityType: ""Employee""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Schedule Meeting""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestEmployeePredecessor, MIN(prec2.timestamp) AS earliestPredecessor WITH e, duration.between(latestEmployeePredecessor, earliestPredecessor) AS laggingDuration RETURN AVG(laggingDuration.seconds) < (4 * 60 * 60) AS ruleSatisfied"
"The lagging time for the ""Close Deal"" activity with respect to clients should exceed 1 day.","Activity: [""Close Deal""], EntityType: [""Client""], Actor: []","MATCH (ent:Entity {EntityType: ""Client""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Close Deal""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestClientPredecessor, MIN(prec2.timestamp) AS earliestPredecessor WITH e, duration.between(latestClientPredecessor, earliestPredecessor) AS laggingDuration RETURN MIN(laggingDuration.seconds) > (1 * 24 * 60 * 60) AS ruleSatisfied"
"The average lagging time for ""Send Invoice"" events regarding ""Account"" entities should be under 6 hours.","Activity: [""Send Invoice""], EntityType: [""Account""], Actor: []","MATCH (ent:Entity {EntityType: ""Account""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Send Invoice""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestAccountPredecessor, MIN(prec2.timestamp) AS earliestPredecessor WITH e, duration.between(latestAccountPredecessor, earliestPredecessor) AS laggingDuration RETURN AVG(laggingDuration.seconds) < (6 * 60 * 60) AS ruleSatisfied"
The average lagging time for reviewing a resume concerning candidates should be smaller than 3 hours.,"Activity: [""Review Resume""], EntityType: [""Candidate""], Actor: []","MATCH (ent:Entity {EntityType: ""Candidate""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Review Resume""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestCandidatePredecessor, MIN(prec2.timestamp) AS earliestPredecessor WITH e, duration.between(latestCandidatePredecessor, earliestPredecessor) AS laggingDuration RETURN AVG(laggingDuration.seconds) < (3 * 60 * 60) AS ruleSatisfied"
"The lagging time for processing a return request, with respect to customer entities, must exceed 24 hours on average.","Activity: [""Process Return Request""], EntityType: [""Customer""], Actor: []","MATCH (ent:Entity {EntityType: ""Customer""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Process Return Request""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestCustomerPredecessor, MIN(prec2.timestamp) AS earliestPredecessor WITH e, duration.between(latestCustomerPredecessor, earliestPredecessor) AS laggingDuration RETURN AVG(laggingDuration.seconds) > (24 * 60 * 60) AS ruleSatisfied"
"The lagging time for completing a code review concerning ""Developer"" entities should be smaller than 5 days on average.","Activity: [""Complete Code Review""], EntityType: [""Developer""], Actor: []","MATCH (ent:Entity {EntityType: ""Developer""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Complete Code Review""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestDeveloperPredecessor, MIN(prec2.timestamp) AS earliestPredecessor WITH e, duration.between(latestDeveloperPredecessor, earliestPredecessor) AS laggingDuration RETURN AVG(laggingDuration.seconds) < (5 * 24 * 60 * 60) AS ruleSatisfied"
"On average, the lagging time for approving a loan application with respect to applicants should exceed 1 week.","Activity: [""Approve Loan Application""], EntityType: [""Applicant""], Actor: []","MATCH (ent:Entity {EntityType: ""Applicant""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Approve Loan Application""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestApplicantPredecessor, MIN(prec2.timestamp) AS earliestPredecessor WITH e, duration.between(latestApplicantPredecessor, earliestPredecessor) AS laggingDuration RETURN AVG(laggingDuration.seconds) > (7 * 24 * 60 * 60) AS ruleSatisfied"
"The lagging time for approving a service request, concerning entities of type ""Customer"", should not exceed 12 hours.","Activity: [""Approve Service Request""], EntityType: [""Customer""], Actor: []","MATCH (ent:Entity {EntityType: ""Customer""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Approve Service Request""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestCustomerPredecessor, MIN(prec2.timestamp) AS earliestPredecessor WITH e, duration.between(latestCustomerPredecessor, earliestPredecessor) AS laggingDuration RETURN MAX(laggingDuration.seconds) < (12 * 60 * 60) AS ruleSatisfied"
"The average lagging time for processing a purchase order, with respect to product entities, must exceed 72 hours.","Activity: [""Process Purchase Order""], EntityType: [""Product""], Actor: []","MATCH (ent:Entity {EntityType: ""Product""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Process Purchase Order""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestProductPredecessor, MIN(prec2.timestamp) AS earliestPredecessor WITH e, duration.between(latestProductPredecessor, earliestPredecessor) AS laggingDuration RETURN AVG(laggingDuration.seconds) > (72 * 60 * 60) AS ruleSatisfied"
"The lagging time for completing a security audit, concerning ""Audit"" entities, should not exceed 30 days.","Activity: [""Complete Security Audit""], EntityType: [""Audit""], Actor: []","MATCH (ent:Entity {EntityType: ""Audit""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Complete Security Audit""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestAuditPredecessor, MIN(prec2.timestamp) AS earliestPredecessor WITH e, duration.between(latestAuditPredecessor, earliestPredecessor) AS laggingDuration RETURN MAX(laggingDuration.seconds) < (30 * 24 * 60 * 60) AS ruleSatisfied"
Every customer and their corresponding purchase must have a record of the event of the customer indicating the purchase initiation.,"Activity: [""Purchase Initiated""], EntityType: [""Customer"", ""Purchase""], Actor: []","MATCH (purchaseEvent:Event {Activity: ""Purchase Initiated""})-[:CORR]->(customer:Entity {EntityType: ""Customer""}) MATCH (customer)-[:REL]-(purchase:Entity {EntityType: ""Purchase""}) WHERE NOT EXISTS { MATCH (purchase)<-[:CORR]-(purchaseEvent) } RETURN CASE WHEN COUNT(customer)>0 THEN false ELSE true END AS ruleSatisfied"
"For each user and their associated login attempt, the login attempt must be linked with the authentication event of the user.","Activity: [""User Authentication""], EntityType: [""User"", ""Login Attempt""], Actor: []","MATCH (authEvent:Event {Activity: ""User Authentication""})-[:CORR]->(user:Entity {EntityType: ""User""}) MATCH (user)-[:REL]-(login:Entity {EntityType: ""Login Attempt""}) WHERE NOT EXISTS { MATCH (login)<-[:CORR]-(authEvent) } RETURN CASE WHEN COUNT(user)>0 THEN false ELSE true END AS ruleSatisfied"
All books in a library system must be connected to the event of being registered in the system.,"Activity: [""Book Registered""], EntityType: [""Library"", ""Book""], Actor: []","MATCH (registerEvent:Event {Activity: ""Book Registered""})-[:CORR]->(library:Entity {EntityType: ""Library""}) MATCH (library)-[:REL]-(book:Entity {EntityType: ""Book""}) WHERE NOT EXISTS { MATCH (book)<-[:CORR]-(registerEvent) } RETURN CASE WHEN COUNT(library)>0 THEN false ELSE true END AS ruleSatisfied"
Every online order and the items it contains must be linked with the event of order confirmation.,"Activity: [""Order Confirmed""], EntityType: [""Online Order"", ""Item""], Actor: []","MATCH (confirmEvent:Event {Activity: ""Order Confirmed""})-[:CORR]->(order:Entity {EntityType: ""Online Order""}) MATCH (order)-[:REL]-(item:Entity {EntityType: ""Item""}) WHERE NOT EXISTS { MATCH (item)<-[:CORR]-(confirmEvent) } RETURN CASE WHEN COUNT(order)>0 THEN false ELSE true END AS ruleSatisfied"
Each software project and its corresponding tasks should be linked to the event representing project creation.,"Activity: [""Project Created""], EntityType: [""Project"", ""Task""], Actor: []","MATCH (createEvent:Event {Activity: ""Project Created""})-[:CORR]->(project:Entity {EntityType: ""Project""}) MATCH (project)-[:REL]-(task:Entity {EntityType: ""Task""}) WHERE NOT EXISTS { MATCH (task)<-[:CORR]-(createEvent) } RETURN CASE WHEN COUNT(project)>0 THEN false ELSE true END AS ruleSatisfied"
A car and its registered parts should be connected to the event where the car is added to the registry.,"Activity: [""Car Registered""], EntityType: [""Car"", ""Part""], Actor: []","MATCH (registerEvent:Event {Activity: ""Car Registered""})-[:CORR]->(car:Entity {EntityType: ""Car""}) MATCH (car)-[:REL]-(part:Entity {EntityType: ""Part""}) WHERE NOT EXISTS { MATCH (part)<-[:CORR]-(registerEvent) } RETURN CASE WHEN COUNT(car)>0 THEN false ELSE true END AS ruleSatisfied"
"For every financial transaction and the accounts involved, the transaction must be linked to the approval event.","Activity: [""Transaction Approved""], EntityType: [""Transaction"", ""Account""], Actor: []","MATCH (approveEvent:Event {Activity: ""Transaction Approved""})-[:CORR]->(transaction:Entity {EntityType: ""Transaction""}) MATCH (transaction)-[:REL]-(account:Entity {EntityType: ""Account""}) WHERE NOT EXISTS { MATCH (account)<-[:CORR]-(approveEvent) } RETURN CASE WHEN COUNT(transaction)>0 THEN false ELSE true END AS ruleSatisfied"
Any student and their enrolled courses should be associated with the event of course registration.,"Activity: [""Course Registration""], EntityType: [""Student"", ""Course""], Actor: []","MATCH (registerEvent:Event {Activity: ""Course Registration""})-[:CORR]->(student:Entity {EntityType: ""Student""}) MATCH (student)-[:REL]-(course:Entity {EntityType: ""Course""}) WHERE NOT EXISTS { MATCH (course)<-[:CORR]-(registerEvent) } RETURN CASE WHEN COUNT(student)>0 THEN false ELSE true END AS ruleSatisfied"
A shipment and the products it includes must be linked to the shipping event.,"Activity: [""Shipment Created""], EntityType: [""Shipment"", ""Product""], Actor: []","MATCH (shipEvent:Event {Activity: ""Shipment Created""})-[:CORR]->(shipment:Entity {EntityType: ""Shipment""}) MATCH (shipment)-[:REL]-(product:Entity {EntityType: ""Product""}) WHERE NOT EXISTS { MATCH (product)<-[:CORR]-(shipEvent) } RETURN CASE WHEN COUNT(shipment)>0 THEN false ELSE true END AS ruleSatisfied"
Any doctor and their scheduled appointments must be connected to the event of appointment booking.,"Activity: [""Appointment Booked""], EntityType: [""Doctor"", ""Appointment""], Actor: []","MATCH (bookEvent:Event {Activity: ""Appointment Booked""})-[:CORR]->(doctor:Entity {EntityType: ""Doctor""}) MATCH (doctor)-[:REL]-(appointment:Entity {EntityType: ""Appointment""}) WHERE NOT EXISTS { MATCH (appointment)<-[:CORR]-(bookEvent) } RETURN CASE WHEN COUNT(doctor)>0 THEN false ELSE true END AS ruleSatisfied"
"Every project and its associated task must be linked with the ""Project Initiation"" event of the project.","Activity: [""Project Initiation""], EntityType: [""Project"", ""Task""], Actor: []","MATCH (initEvent:Event {Activity: ""Project Initiation""})-[:CORR]->(project:Entity {EntityType: ""Project""}) MATCH (project)-[:REL]-(task:Entity {EntityType: ""Task""}) WHERE NOT EXISTS { MATCH (task)<-[:CORR]-(initEvent) } RETURN CASE WHEN COUNT(project)>0 THEN false ELSE true END AS ruleSatisfied"
"For every customer and their order, the order should be associated with the ""Order Placed"" event of that customer.","Activity: [""Order Placed""], EntityType: [""Customer"", ""Order""], Actor: []","MATCH (orderEvent:Event {Activity: ""Order Placed""})-[:CORR]->(customer:Entity {EntityType: ""Customer""}) MATCH (customer)-[:REL]-(order:Entity {EntityType: ""Order""}) WHERE NOT EXISTS { MATCH (order)<-[:CORR]-(orderEvent) } RETURN CASE WHEN COUNT(customer)>0 THEN false ELSE true END AS ruleSatisfied"
"Any vehicle and its related service record must be linked to the ""Service Completed"" event for that vehicle.","Activity: [""Service Completed""], EntityType: [""Vehicle"", ""Service Record""], Actor: []","MATCH (serviceEvent:Event {Activity: ""Service Completed""})-[:CORR]->(vehicle:Entity {EntityType: ""Vehicle""}) MATCH (vehicle)-[:REL]-(service:Entity {EntityType: ""Service Record""}) WHERE NOT EXISTS { MATCH (service)<-[:CORR]-(serviceEvent) } RETURN CASE WHEN COUNT(vehicle)>0 THEN false ELSE true END AS ruleSatisfied"
"Every patient and their scheduled appointment must be linked with the ""Appointment Scheduled"" event of the patient.","Activity: [""Appointment Scheduled""], EntityType: [""Patient"", ""Appointment""], Actor: []","MATCH (scheduleEvent:Event {Activity: ""Appointment Scheduled""})-[:CORR]->(patient:Entity {EntityType: ""Patient""}) MATCH (patient)-[:REL]-(appointment:Entity {EntityType: ""Appointment""}) WHERE NOT EXISTS { MATCH (appointment)<-[:CORR]-(scheduleEvent) } RETURN CASE WHEN COUNT(patient)>0 THEN false ELSE true END AS ruleSatisfied"
"Each warehouse and the shipment it sends must be linked to the ""Shipment Dispatched"" event.","Activity: [""Shipment Dispatched""], EntityType: [""Warehouse"", ""Shipment""], Actor: []","MATCH (dispatchEvent:Event {Activity: ""Shipment Dispatched""})-[:CORR]->(warehouse:Entity {EntityType: ""Warehouse""}) MATCH (warehouse)-[:REL]-(shipment:Entity {EntityType: ""Shipment""}) WHERE NOT EXISTS { MATCH (shipment)<-[:CORR]-(dispatchEvent) } RETURN CASE WHEN COUNT(warehouse)>0 THEN false ELSE true END AS ruleSatisfied"
"A financial transaction and its corresponding account must be linked with the ""Transaction Approved"" event.","Activity: [""Transaction Approved""], EntityType: [""Transaction"", ""Account""], Actor: []","MATCH (approveEvent:Event {Activity: ""Transaction Approved""})-[:CORR]->(transaction:Entity {EntityType: ""Transaction""}) MATCH (transaction)-[:REL]-(account:Entity {EntityType: ""Account""}) WHERE NOT EXISTS { MATCH (account)<-[:CORR]-(approveEvent) } RETURN CASE WHEN COUNT(transaction)>0 THEN false ELSE true END AS ruleSatisfied"
"Every product and its manufacturing batch should be connected to the ""Batch Production Completed"" event.","Activity: [""Batch Production Completed""], EntityType: [""Product"", ""Batch""], Actor: []","MATCH (productionEvent:Event {Activity: ""Batch Production Completed""})-[:CORR]->(product:Entity {EntityType: ""Batch""}) MATCH (batch)-[:REL]-(product:Entity {EntityType: ""Product""}) WHERE NOT EXISTS { MATCH (product)<-[:CORR]-(productionEvent) } RETURN CASE WHEN COUNT(batch)>0 THEN false ELSE true END AS ruleSatisfied"
"A university and its enrolled students must be associated with the ""Student Enrollment"" event.","Activity: [""Student Enrollment""], EntityType: [""University"", ""Student""], Actor: []","MATCH (enrollEvent:Event {Activity: ""Student Enrollment""})-[:CORR]->(university:Entity {EntityType: ""University""}) MATCH (university)-[:REL]-(student:Entity {EntityType: ""Student""}) WHERE NOT EXISTS { MATCH (student)<-[:CORR]-(enrollEvent) } RETURN CASE WHEN COUNT(university)>0 THEN false ELSE true END AS ruleSatisfied"
"For every research project and its assigned researcher, the researcher must be associated with the ""Research Assignment"" event.","Activity: [""Research Assignment""], EntityType: [""Research Project"", ""Researcher""], Actor: []","MATCH (assignEvent:Event {Activity: ""Research Assignment""})-[:CORR]->(project:Entity {EntityType: ""Research Project""}) MATCH (project)-[:REL]-(researcher:Entity {EntityType: ""Researcher""}) WHERE NOT EXISTS { MATCH (researcher)<-[:CORR]-(assignEvent) } RETURN CASE WHEN COUNT(project)>0 THEN false ELSE true END AS ruleSatisfied"
"Any company and its hired employee must be linked to the ""Employee Onboarding"" event.","Activity: [""Employee Onboarding""], EntityType: [""Company"", ""Employee""], Actor: []","MATCH (onboardEvent:Event {Activity: ""Employee Onboarding""})-[:CORR]->(company:Entity {EntityType: ""Company""}) MATCH (company)-[:REL]-(employee:Entity {EntityType: ""Employee""}) WHERE NOT EXISTS { MATCH (employee)<-[:CORR]-(onboardEvent) } RETURN CASE WHEN COUNT(company)>0 THEN false ELSE true END AS ruleSatisfied"
"If a patient undergoes two diagnoses in a specific order, then the corresponding treatments should be administered in that order as well.","Activity: [""Diagnosis"", ""Treatment""], EntityType: [""Patient"", ""Case""], Actor: []","MATCH (patient:Entity {EntityType: ""Patient""})<-[:CORR]-(diagEvent1:Event {Activity: ""Diagnosis""})-[:CORR]->(case1:Entity {EntityType: ""Case""}) MATCH (patient)<-[:CORR]-(diagEvent2:Event {Activity: ""Diagnosis""})-[:CORR]->(case2:Entity {EntityType: ""Case""}) WHERE diagEvent1.timestamp < diagEvent2.timestamp OPTIONAL MATCH (case1)<-[:CORR]-(treatEvent1:Event {Activity: ""Treatment""}) OPTIONAL MATCH (case2)<-[:CORR]-(treatEvent2:Event {Activity: ""Treatment""}) WITH patient, case1, case2, treatEvent1, treatEvent2 WHERE treatEvent1 IS NOT NULL AND treatEvent2 IS NOT NULL AND treatEvent1.timestamp > treatEvent2.timestamp WITH COUNT(*) AS violations RETURN CASE WHEN violations = 0 THEN true ELSE false END AS ruleSatisfied"
"When a student completes two assignments in sequence, their corresponding grading should also be done in that sequence.","Activity: [""Submit Assignment"", ""Grade Assignment""], EntityType: [""Student"", ""Assignment""], Actor: []","MATCH (student:Entity {EntityType: ""Student""})<-[:CORR]-(submitEvent1:Event {Activity: ""Submit Assignment""})-[:CORR]->(assignment1:Entity {EntityType: ""Assignment""}) MATCH (student)<-[:CORR]-(submitEvent2:Event {Activity: ""Submit Assignment""})-[:CORR]->(assignment2:Entity {EntityType: ""Assignment""}) WHERE submitEvent1.timestamp < submitEvent2.timestamp OPTIONAL MATCH (assignment1)<-[:CORR]-(gradeEvent1:Event {Activity: ""Grade Assignment""}) OPTIONAL MATCH (assignment2)<-[:CORR]-(gradeEvent2:Event {Activity: ""Grade Assignment""}) WITH student, assignment1, assignment2, gradeEvent1, gradeEvent2 WHERE gradeEvent1 IS NOT NULL AND gradeEvent2 IS NOT NULL AND gradeEvent1.timestamp > gradeEvent2.timestamp WITH COUNT(*) AS violations RETURN CASE WHEN violations = 0 THEN true ELSE false END AS ruleSatisfied"
"If a factory processes two batches of products in a particular order, the respective quality checks should also be performed in the same order.","Activity: [""process batch"", ""quality check""], EntityType: [""factory"", ""batch""], Actor: []","MATCH (factory:Entity {EntityType: ""factory""})<-[:CORR]-(processEvent1:Event {Activity: ""process batch""})-[:CORR]->(batch1:Entity {EntityType: ""batch""}) MATCH (factory)<-[:CORR]-(processEvent2:Event {Activity: ""process batch""})-[:CORR]->(batch2:Entity {EntityType: ""batch""}) WHERE processEvent1.timestamp < processEvent2.timestamp OPTIONAL MATCH (batch1)<-[:CORR]-(qcEvent1:Event {Activity: ""quality check""}) OPTIONAL MATCH (batch2)<-[:CORR]-(qcEvent2:Event {Activity: ""quality check""}) WITH factory, batch1, batch2, qcEvent1, qcEvent2 WHERE qcEvent1 IS NOT NULL AND qcEvent2 IS NOT NULL AND qcEvent1.timestamp > qcEvent2.timestamp WITH COUNT(*) AS violations RETURN CASE WHEN violations = 0 THEN true ELSE false END AS ruleSatisfied"
A traveler booking two flights in sequence should also check in for those flights in the same order.,"Activity: [""book flight"", ""check-in""], EntityType: [""traveler"", ""flight""], Actor: []","MATCH (traveler:Entity {EntityType: ""traveler""})<-[:CORR]-(bookEvent1:Event {Activity: ""book flight""})-[:CORR]->(flight1:Entity {EntityType: ""flight""}) MATCH (traveler)<-[:CORR]-(bookEvent2:Event {Activity: ""book flight""})-[:CORR]->(flight2:Entity {EntityType: ""flight""}) WHERE bookEvent1.timestamp < bookEvent2.timestamp OPTIONAL MATCH (flight1)<-[:CORR]-(checkinEvent1:Event {Activity: ""check-in""}) OPTIONAL MATCH (flight2)<-[:CORR]-(checkinEvent2:Event {Activity: ""check-in""}) WITH traveler, flight1, flight2, checkinEvent1, checkinEvent2 WHERE checkinEvent1 IS NOT NULL AND checkinEvent2 IS NOT NULL AND checkinEvent1.timestamp > checkinEvent2.timestamp WITH COUNT(*) AS violations RETURN CASE WHEN violations = 0 THEN true ELSE false END AS ruleSatisfied"
"If a researcher submits two research papers in a specific order, the reviews for them should also be done in that order.","Activity: [""submit paper"", ""review paper""], EntityType: [""researcher"", ""paper""], Actor: []","MATCH (researcher:Entity {EntityType: ""researcher""})<-[:CORR]-(submitEvent1:Event {Activity: ""submit paper""})-[:CORR]->(paper1:Entity {EntityType: ""paper""}) MATCH (researcher)<-[:CORR]-(submitEvent2:Event {Activity: ""submit paper""})-[:CORR]->(paper2:Entity {EntityType: ""paper""}) WHERE submitEvent1.timestamp < submitEvent2.timestamp OPTIONAL MATCH (paper1)<-[:CORR]-(reviewEvent1:Event {Activity: ""review paper""}) OPTIONAL MATCH (paper2)<-[:CORR]-(reviewEvent2:Event {Activity: ""review paper""}) WITH researcher, paper1, paper2, reviewEvent1, reviewEvent2 WHERE reviewEvent1 IS NOT NULL AND reviewEvent2 IS NOT NULL AND reviewEvent1.timestamp > reviewEvent2.timestamp WITH COUNT(*) AS violations RETURN CASE WHEN violations = 0 THEN true ELSE false END AS ruleSatisfied"
"If a developer merges two pull requests in order, the corresponding test executions should follow the same order.","Activity: [""merge pr"", ""run tests""], EntityType: [""developer"", ""pull request""], Actor: []","MATCH (developer:Entity {EntityType: ""developer""})<-[:CORR]-(mergeEvent1:Event {Activity: ""merge pr""})-[:CORR]->(pr1:Entity {EntityType: ""pull request""}) MATCH (developer)<-[:CORR]-(mergeEvent2:Event {Activity: ""merge pr""})-[:CORR]->(pr2:Entity {EntityType: ""pull request""}) WHERE mergeEvent1.timestamp < mergeEvent2.timestamp OPTIONAL MATCH (pr1)<-[:CORR]-(testEvent1:Event {Activity: ""run tests""}) OPTIONAL MATCH (pr2)<-[:CORR]-(testEvent2:Event {Activity: ""run tests""}) WITH developer, pr1, pr2, testEvent1, testEvent2 WHERE testEvent1 IS NOT NULL AND testEvent2 IS NOT NULL AND testEvent1.timestamp > testEvent2.timestamp WITH COUNT(*) AS violations RETURN CASE WHEN violations = 0 THEN true ELSE false END AS ruleSatisfied"
"If a teacher assigns two homework tasks in order, they should also be graded in the same sequence.","Activity: [""assign homework"", ""grade homework""], EntityType: [""teacher"", ""homework""], Actor: []","MATCH (teacher:Entity {EntityType: ""teacher""})<-[:CORR]-(assignEvent1:Event {Activity: ""assign homework""})-[:CORR]->(hw1:Entity {EntityType: ""homework""}) MATCH (teacher)<-[:CORR]-(assignEvent2:Event {Activity: ""assign homework""})-[:CORR]->(hw2:Entity {EntityType: ""homework""}) WHERE assignEvent1.timestamp < assignEvent2.timestamp OPTIONAL MATCH (hw1)<-[:CORR]-(gradeEvent1:Event {Activity: ""grade homework""}) OPTIONAL MATCH (hw2)<-[:CORR]-(gradeEvent2:Event {Activity: ""grade homework""}) WITH teacher, hw1, hw2, gradeEvent1, gradeEvent2 WHERE gradeEvent1 IS NOT NULL AND gradeEvent2 IS NOT NULL AND gradeEvent1.timestamp > gradeEvent2.timestamp WITH COUNT(*) AS violations RETURN CASE WHEN violations = 0 THEN true ELSE false END AS ruleSatisfied"
"When an employer schedules two interviews in a particular order, the feedback should also be recorded in that order.","Activity: [""schedule interview"", ""give feedback""], EntityType: [""employer"", ""candidate""], Actor: []","MATCH (employer:Entity {EntityType: ""employer""})<-[:CORR]-(scheduleEvent1:Event {Activity: ""schedule interview""})-[:CORR]->(candidate1:Entity {EntityType: ""candidate""}) MATCH (employer)<-[:CORR]-(scheduleEvent2:Event {Activity: ""schedule interview""})-[:CORR]->(candidate2:Entity {EntityType: ""candidate""}) WHERE scheduleEvent1.timestamp < scheduleEvent2.timestamp OPTIONAL MATCH (candidate1)<-[:CORR]-(feedbackEvent1:Event {Activity: ""give feedback""}) OPTIONAL MATCH (candidate2)<-[:CORR]-(feedbackEvent2:Event {Activity: ""give feedback""}) WITH employer, candidate1, candidate2, feedbackEvent1, feedbackEvent2 WHERE feedbackEvent1 IS NOT NULL AND feedbackEvent2 IS NOT NULL AND feedbackEvent1.timestamp > feedbackEvent2.timestamp WITH COUNT(*) AS violations RETURN CASE WHEN violations = 0 THEN true ELSE false END AS ruleSatisfied"
"If a librarian issues books to a reader in order, the return process should also follow the same order.","Activity: [""issue book"", ""return book""], EntityType: [""librarian"", ""book""], Actor: []","MATCH (librarian:Entity {EntityType: ""librarian""})<-[:CORR]-(issueEvent1:Event {Activity: ""issue book""})-[:CORR]->(book1:Entity {EntityType: ""book""}) MATCH (librarian)<-[:CORR]-(issueEvent2:Event {Activity: ""issue book""})-[:CORR]->(book2:Entity {EntityType: ""book""}) WHERE issueEvent1.timestamp < issueEvent2.timestamp OPTIONAL MATCH (book1)<-[:CORR]-(returnEvent1:Event {Activity: ""return book""}) OPTIONAL MATCH (book2)<-[:CORR]-(returnEvent2:Event {Activity: ""return book""}) WITH librarian, book1, book2, returnEvent1, returnEvent2 WHERE returnEvent1 IS NOT NULL AND returnEvent2 IS NOT NULL AND returnEvent1.timestamp > returnEvent2.timestamp WITH COUNT(*) AS violations RETURN CASE WHEN violations = 0 THEN true ELSE false END AS ruleSatisfied"
"When an online shopper adds multiple products to the cart sequentially, they should also check out in that order.","Activity: [""add to cart"", ""checkout""], EntityType: [""shopper"", ""product""], Actor: []","MATCH (shopper:Entity {EntityType: ""shopper""})<-[:CORR]-(addEvent1:Event {Activity: ""add to cart""})-[:CORR]->(product1:Entity {EntityType: ""product""}) MATCH (shopper)<-[:CORR]-(addEvent2:Event {Activity: ""add to cart""})-[:CORR]->(product2:Entity {EntityType: ""product""}) WHERE addEvent1.timestamp < addEvent2.timestamp OPTIONAL MATCH (product1)<-[:CORR]-(checkoutEvent1:Event {Activity: ""checkout""}) OPTIONAL MATCH (product2)<-[:CORR]-(checkoutEvent2:Event {Activity: ""checkout""}) WITH shopper, product1, product2, checkoutEvent1, checkoutEvent2 WHERE checkoutEvent1 IS NOT NULL AND checkoutEvent2 IS NOT NULL AND checkoutEvent1.timestamp > checkoutEvent2.timestamp WITH COUNT(*) AS violations RETURN CASE WHEN violations = 0 THEN true ELSE false END AS ruleSatisfied"
"If a customer places two ""Purchase Order"" events for different orders in sequence, the corresponding ""Payment Processing"" for those orders must also occur in the same order.","Activity: [""purchase order"", ""payment processing""], EntityType: [""customer"", ""order""], Actor: []","MATCH (customer:Entity {EntityType: ""customer""})<-[:CORR]-(purchaseEvent1:Event {Activity: ""purchase order""})-[:CORR]->(order1:Entity {EntityType: ""order""}) MATCH (customer)<-[:CORR]-(purchaseEvent2:Event {Activity: ""purchase order""})-[:CORR]->(order2:Entity {EntityType: ""order""}) WHERE purchaseEvent1.timestamp < purchaseEvent2.timestamp OPTIONAL MATCH (order1)<-[:CORR]-(paymentEvent1:Event {Activity: ""payment processing""}) OPTIONAL MATCH (order2)<-[:CORR]-(paymentEvent2:Event {Activity: ""payment processing""}) WITH customer, order1, order2, paymentEvent1, paymentEvent2 WHERE paymentEvent1 IS NOT NULL AND paymentEvent2 IS NOT NULL AND paymentEvent1.timestamp > paymentEvent2.timestamp WITH COUNT(*) AS violations RETURN CASE WHEN violations = 0 THEN true ELSE false END AS ruleSatisfied"
"If a patient undergoes two ""Medical Examination"" events for different cases in a specific order, the corresponding ""Diagnosis Confirmation"" for those cases must also occur in that order.","Activity: [""medical examination"", ""diagnosis confirmation""], EntityType: [""patient"", ""case""], Actor: []","MATCH (patient:Entity {EntityType: ""patient""})<-[:CORR]-(examEvent1:Event {Activity: ""medical examination""})-[:CORR]->(case1:Entity {EntityType: ""case""}) MATCH (patient)<-[:CORR]-(examEvent2:Event {Activity: ""medical examination""})-[:CORR]->(case2:Entity {EntityType: ""case""}) WHERE examEvent1.timestamp < examEvent2.timestamp OPTIONAL MATCH (case1)<-[:CORR]-(diagEvent1:Event {Activity: ""diagnosis confirmation""}) OPTIONAL MATCH (case2)<-[:CORR]-(diagEvent2:Event {Activity: ""diagnosis confirmation""}) WITH patient, case1, case2, diagEvent1, diagEvent2 WHERE diagEvent1 IS NOT NULL AND diagEvent2 IS NOT NULL AND diagEvent1.timestamp > diagEvent2.timestamp WITH COUNT(*) AS violations RETURN CASE WHEN violations = 0 THEN true ELSE false END AS ruleSatisfied"
"If a warehouse processes two ""Stock Replenishment"" events for different inventory items in sequence, the corresponding ""Stock Verification"" events for those items must also follow the same order.","Activity: [""Stock Replenishment"", ""Stock Verification""], EntityType: [""Warehouse"", ""Inventory""], Actor: []","MATCH (warehouse:Entity {EntityType: ""Warehouse""})<-[:CORR]-(replenishEvent1:Event {Activity: ""Stock Replenishment""})-[:CORR]->(inventory1:Entity {EntityType: ""Inventory""}) MATCH (warehouse)<-[:CORR]-(replenishEvent2:Event {Activity: ""Stock Replenishment""})-[:CORR]->(inventory2:Entity {EntityType: ""Inventory""}) WHERE replenishEvent1.timestamp < replenishEvent2.timestamp OPTIONAL MATCH (inventory1)<-[:CORR]-(verifyEvent1:Event {Activity: ""Stock Verification""}) OPTIONAL MATCH (inventory2)<-[:CORR]-(verifyEvent2:Event {Activity: ""Stock Verification""}) WITH warehouse, inventory1, inventory2, verifyEvent1, verifyEvent2 WHERE verifyEvent1 IS NOT NULL AND verifyEvent2 IS NOT NULL AND verifyEvent1.timestamp > verifyEvent2.timestamp WITH COUNT(*) AS violations RETURN CASE WHEN violations = 0 THEN true ELSE false END AS ruleSatisfied"
"If an employee submits two ""Expense Report"" events for different reports in sequence, the corresponding ""Approval Review"" for those reports must also follow the same order.","Activity: [""Expense Report"", ""Approval Review""], EntityType: [""Employee"", ""Report""], Actor: []","MATCH (employee:Entity {EntityType: ""Employee""})<-[:CORR]-(reportEvent1:Event {Activity: ""Expense Report""})-[:CORR]->(report1:Entity {EntityType: ""Report""}) MATCH (employee)<-[:CORR]-(reportEvent2:Event {Activity: ""Expense Report""})-[:CORR]->(report2:Entity {EntityType: ""Report""}) WHERE reportEvent1.timestamp < reportEvent2.timestamp OPTIONAL MATCH (report1)<-[:CORR]-(reviewEvent1:Event {Activity: ""Approval Review""}) OPTIONAL MATCH (report2)<-[:CORR]-(reviewEvent2:Event {Activity: ""Approval Review""}) WITH employee, report1, report2, reviewEvent1, reviewEvent2 WHERE reviewEvent1 IS NOT NULL AND reviewEvent2 IS NOT NULL AND reviewEvent1.timestamp > reviewEvent2.timestamp WITH COUNT(*) AS violations RETURN CASE WHEN violations = 0 THEN true ELSE false END AS ruleSatisfied"
"If a vendor processes two ""Product Shipment"" events for different orders in sequence, the corresponding ""Delivery Confirmation"" for those orders must also occur in that order.","Activity: [""Product Shipment"", ""Delivery Confirmation""], EntityType: [""Vendor"", ""Order""], Actor: []","MATCH (vendor:Entity {EntityType: ""Vendor""})<-[:CORR]-(shipEvent1:Event {Activity: ""Product Shipment""})-[:CORR]->(order1:Entity {EntityType: ""Order""}) MATCH (vendor)<-[:CORR]-(shipEvent2:Event {Activity: ""Product Shipment""})-[:CORR]->(order2:Entity {EntityType: ""Order""}) WHERE shipEvent1.timestamp < shipEvent2.timestamp OPTIONAL MATCH (order1)<-[:CORR]-(deliveryEvent1:Event {Activity: ""Delivery Confirmation""}) OPTIONAL MATCH (order2)<-[:CORR]-(deliveryEvent2:Event {Activity: ""Delivery Confirmation""}) WITH vendor, order1, order2, deliveryEvent1, deliveryEvent2 WHERE deliveryEvent1 IS NOT NULL AND deliveryEvent2 IS NOT NULL AND deliveryEvent1.timestamp > deliveryEvent2.timestamp WITH COUNT(*) AS violations RETURN CASE WHEN violations = 0 THEN true ELSE false END AS ruleSatisfied"
"Whenever a recruiter schedules two ""Candidate Interviews"" for different candidates in a given order, the respective ""Interview Feedback Submission"" must follow the same sequence.","Activity: [""Candidate Interview"", ""Interview Feedback Submission""], EntityType: [""Recruiter"", ""Candidate""], Actor: []","MATCH (recruiter:Entity {EntityType: ""Recruiter""})<-[:CORR]-(interviewEvent1:Event {Activity: ""Candidate Interview""})-[:CORR]->(candidate1:Entity {EntityType: ""Candidate""}) MATCH (recruiter)<-[:CORR]-(interviewEvent2:Event {Activity: ""Candidate Interview""})-[:CORR]->(candidate2:Entity {EntityType: ""Candidate""}) WHERE interviewEvent1.timestamp < interviewEvent2.timestamp OPTIONAL MATCH (candidate1)<-[:CORR]-(feedbackEvent1:Event {Activity: ""Interview Feedback Submission""}) OPTIONAL MATCH (candidate2)<-[:CORR]-(feedbackEvent2:Event {Activity: ""Interview Feedback Submission""}) WITH recruiter, candidate1, candidate2, feedbackEvent1, feedbackEvent2 WHERE feedbackEvent1 IS NOT NULL AND feedbackEvent2 IS NOT NULL AND feedbackEvent1.timestamp > feedbackEvent2.timestamp WITH COUNT(*) AS violations RETURN CASE WHEN violations = 0 THEN true ELSE false END AS ruleSatisfied"
"If a legal team files multiple ""Court Case Submissions"" related to different cases, the corresponding ""Case Review"" processes must take place in the same order.","Activity: [""Court Case Submission"", ""Case Review""], EntityType: [""Legal Team"", ""Case""], Actor: []","MATCH (legalTeam:Entity {EntityType: ""Legal Team""})<-[:CORR]-(submissionEvent1:Event {Activity: ""Court Case Submission""})-[:CORR]->(case1:Entity {EntityType: ""Case""}) MATCH (legalTeam)<-[:CORR]-(submissionEvent2:Event {Activity: ""Court Case Submission""})-[:CORR]->(case2:Entity {EntityType: ""Case""}) WHERE submissionEvent1.timestamp < submissionEvent2.timestamp OPTIONAL MATCH (case1)<-[:CORR]-(reviewEvent1:Event {Activity: ""Case Review""}) OPTIONAL MATCH (case2)<-[:CORR]-(reviewEvent2:Event {Activity: ""Case Review""}) WITH legalTeam, case1, case2, reviewEvent1, reviewEvent2 WHERE reviewEvent1 IS NOT NULL AND reviewEvent2 IS NOT NULL AND reviewEvent1.timestamp > reviewEvent2.timestamp WITH COUNT(*) AS violations RETURN CASE WHEN violations = 0 THEN true ELSE false END AS ruleSatisfied"
"An auditor submitting two ""Compliance Audit Reports"" for separate audits must ensure that the respective ""Audit Approval"" steps follow the same chronological order.","Activity: [""Compliance Audit Report"", ""Audit Approval""], EntityType: [""Auditor"", ""Audit""], Actor: []","MATCH (auditor:Entity {EntityType: ""Auditor""})<-[:CORR]-(auditEvent1:Event {Activity: ""Compliance Audit Report""})-[:CORR]->(audit1:Entity {EntityType: ""Audit""}) MATCH (auditor)<-[:CORR]-(auditEvent2:Event {Activity: ""Compliance Audit Report""})-[:CORR]->(audit2:Entity {EntityType: ""Audit""}) WHERE auditEvent1.timestamp < auditEvent2.timestamp OPTIONAL MATCH (audit1)<-[:CORR]-(approvalEvent1:Event {Activity: ""Audit Approval""}) OPTIONAL MATCH (audit2)<-[:CORR]-(approvalEvent2:Event {Activity: ""Audit Approval""}) WITH auditor, audit1, audit2, approvalEvent1, approvalEvent2 WHERE approvalEvent1 IS NOT NULL AND approvalEvent2 IS NOT NULL AND approvalEvent1.timestamp > approvalEvent2.timestamp WITH COUNT(*) AS violations RETURN CASE WHEN violations = 0 THEN true ELSE false END AS ruleSatisfied"
"If a quality manager logs two ""Defect Reports"" on different products in a specific order, the corresponding ""Corrective Action"" for those products should occur in the same sequence.","Activity: [""Defect Report"", ""Corrective Action""], EntityType: [""Quality Manager"", ""Product""], Actor: []","MATCH (manager:Entity {EntityType: ""Quality Manager""})<-[:CORR]-(defectEvent1:Event {Activity: ""Defect Report""})-[:CORR]->(product1:Entity {EntityType: ""Product""}) MATCH (manager)<-[:CORR]-(defectEvent2:Event {Activity: ""Defect Report""})-[:CORR]->(product2:Entity {EntityType: ""Product""}) WHERE defectEvent1.timestamp < defectEvent2.timestamp OPTIONAL MATCH (product1)<-[:CORR]-(actionEvent1:Event {Activity: ""Corrective Action""}) OPTIONAL MATCH (product2)<-[:CORR]-(actionEvent2:Event {Activity: ""Corrective Action""}) WITH manager, product1, product2, actionEvent1, actionEvent2 WHERE actionEvent1 IS NOT NULL AND actionEvent2 IS NOT NULL AND actionEvent1.Timestamp > actionEvent2.Timestamp WITH COUNT(*) AS violations RETURN CASE WHEN violations = 0 THEN true ELSE false END AS ruleSatisfied"
"Whenever a financial analyst submits two ""Investment Risk Assessments"" for different investments, the corresponding ""Approval Decision"" steps should be recorded in the same sequence.","Activity: [""Investment Risk Assessment"", ""Approval Decision""], EntityType: [""Financial Analyst"", ""Investment""], Actor: []","MATCH (analyst:Entity {EntityType: ""Financial Analyst""})<-[:CORR]-(assessmentEvent1:Event {Activity: ""Investment Risk Assessment""})-[:CORR]->(investment1:Entity {EntityType: ""Investment""}) MATCH (analyst)<-[:CORR]-(assessmentEvent2:Event {Activity: ""Investment Risk Assessment""})-[:CORR]->(investment2:Entity {EntityType: ""Investment""}) WHERE assessmentEvent1.timestamp < assessmentEvent2.timestamp OPTIONAL MATCH (investment1)<-[:CORR]-(decisionEvent1:Event {Activity: ""Approval Decision""}) OPTIONAL MATCH (investment2)<-[:CORR]-(decisionEvent2:Event {Activity: ""Approval Decision""}) WITH analyst, investment1, investment2, decisionEvent1, decisionEvent2 WHERE decisionEvent1 IS NOT NULL AND decisionEvent2 IS NOT NULL AND decisionEvent1.timestamp > decisionEvent2.timestamp WITH COUNT(*) AS violations RETURN CASE WHEN violations = 0 THEN true ELSE false END AS ruleSatisfied"
"If a customer does not confirm their booking within 48 hours after making a reservation, a reminder email must be sent.","Activity: [""Make Reservation"", ""Confirm Booking"", ""Send Reminder""], EntityType: [""Booking""], Actor: []","MATCH (reserveEvent:Event {Activity: ""Make Reservation""})-[:CORR]->(booking:Entity {EntityType: ""Booking""}) OPTIONAL MATCH (confirmEvent:Event {Activity: ""Confirm Booking""})-[:CORR]->(booking) WHERE confirmEvent.timestamp <= reserveEvent.timestamp + duration({hours: 48}) WITH booking, reserveEvent, confirmEvent WHERE confirmEvent IS NULL OPTIONAL MATCH (reminderEvent:Event {Activity: ""Send Reminder""})-[:CORR]->(booking) WHERE reminderEvent.timestamp > reserveEvent.timestamp + duration({hours: 48}) WITH booking, reminderEvent, COUNT(reminderEvent) AS remindersSent RETURN CASE WHEN any(x in COLLECT(remindersSent) WHERE x=0) THEN false ELSE true END AS ruleSatisfied"
"If no payment is received within 10 days after an invoice is issued, the system should trigger a follow-up notification.","Activity: [""Issue Invoice"", ""Receive Payment"", ""Follow-up Notification""], EntityType: [""Invoice""], Actor: []","MATCH (invoiceEvent:Event {Activity: ""Issue Invoice""})-[:CORR]->(invoice:Entity {EntityType: ""Invoice""}) OPTIONAL MATCH (paymentEvent:Event {Activity: ""Receive Payment""})-[:CORR]->(invoice) WHERE paymentEvent.timestamp <= invoiceEvent.timestamp + duration({days: 10}) WITH invoice, invoiceEvent, paymentEvent WHERE paymentEvent IS NULL OPTIONAL MATCH (reminderEvent:Event {Activity: ""Follow-up Notification""})-[:CORR]->(invoice) WHERE reminderEvent.timestamp > invoiceEvent.timestamp + duration({days: 10}) WITH invoice, reminderEvent, COUNT(reminderEvent) AS remindersSent RETURN CASE WHEN any(x in COLLECT(remindersSent) WHERE x=0) THEN false ELSE true END AS ruleSatisfied"
"When an employee does not submit their monthly timesheet within 3 days after the end of the month, a reminder must be sent.","Activity: [""End of Month"", ""Submit Timesheet"", ""HR Reminder""], EntityType: [""Timesheet""], Actor: []","MATCH (endMonthEvent:Event {Activity: ""End of Month""})-[:CORR]->(timesheet:Entity {EntityType: ""Timesheet""}) OPTIONAL MATCH (submitEvent:Event {Activity: ""Submit Timesheet""})-[:CORR]->(timesheet) WHERE submitEvent.timestamp <= endMonthEvent.timestamp + duration({days: 3}) WITH timesheet, endMonthEvent, submitEvent WHERE submitEvent IS NULL OPTIONAL MATCH (reminderEvent:Event {Activity: ""HR Reminder""})-[:CORR]->(timesheet) WHERE reminderEvent.timestamp > endMonthEvent.timestamp + duration({days: 3}) WITH timesheet, reminderEvent, COUNT(reminderEvent) AS remindersSent RETURN CASE WHEN any(x in COLLECT(remindersSent) WHERE x=0) THEN false ELSE true END AS ruleSatisfied"
"If a library book is not returned within 14 days of being checked out, a penalty warning must be issued.","Activity: [""Check Out Book"", ""Return Book"", ""Penalty Warning""], EntityType: [""Library Book""], Actor: []","MATCH (checkoutEvent:Event {Activity: ""Check Out Book""})-[:CORR]->(book:Entity {EntityType: ""Library Book""}) OPTIONAL MATCH (returnEvent:Event {Activity: ""Return Book""})-[:CORR]->(book) WHERE returnEvent.timestamp <= checkoutEvent.timestamp + duration({days: 14}) WITH book, checkoutEvent, returnEvent WHERE returnEvent IS NULL OPTIONAL MATCH (penaltyEvent:Event {Activity: ""Penalty Warning""})-[:CORR]->(book) WHERE penaltyEvent.timestamp > checkoutEvent.timestamp + duration({days: 14}) WITH book, penaltyEvent, COUNT(penaltyEvent) AS warningsSent RETURN CASE WHEN any(x in COLLECT(warningsSent) WHERE x=0) THEN false ELSE true END AS ruleSatisfied"
A follow-up call should be made if a customer does not respond to a created service request within 5 days.,"Activity: [""Create Service Request"", ""Respond to Request"", ""Follow-up Call""], EntityType: [""Service Request""], Actor: []","MATCH (requestEvent:Event {Activity: ""Create Service Request""})-[:CORR]->(service:Entity {EntityType: ""Service Request""}) OPTIONAL MATCH (responseEvent:Event {Activity: ""Respond to Request""})-[:CORR]->(service) WHERE responseEvent.timestamp <= requestEvent.timestamp + duration({days: 5}) WITH service, requestEvent, responseEvent WHERE responseEvent IS NULL OPTIONAL MATCH (followUpEvent:Event {Activity: ""Follow-up Call""})-[:CORR]->(service) WHERE followUpEvent.timestamp > requestEvent.timestamp + duration({days: 5}) WITH service, followUpEvent, COUNT(followUpEvent) AS followUps RETURN CASE WHEN any(x in COLLECT(followUps) WHERE x=0) THEN false ELSE true END AS ruleSatisfied"
"If a subscription renewal is not completed within 7 days after the expiration date, the system should notify the user.","Activity: [""Subscription Expired"", ""Renew Subscription"", ""Notify User""], EntityType: [""Subscription""], Actor: []","MATCH (expireEvent:Event {Activity: ""Subscription Expired""})-[:CORR]->(subscription:Entity {EntityType: ""Subscription""}) OPTIONAL MATCH (renewEvent:Event {Activity: ""Renew Subscription""})-[:CORR]->(subscription) WHERE renewEvent.timestamp <= expireEvent.timestamp + duration({days: 7}) WITH subscription, expireEvent, renewEvent WHERE renewEvent IS NULL OPTIONAL MATCH (notifyEvent:Event {Activity: ""Notify User""})-[:CORR]->(subscription) WHERE notifyEvent.timestamp > expireEvent.timestamp + duration({days: 7}) WITH subscription, notifyEvent, COUNT(notifyEvent) AS notifications RETURN CASE WHEN any(x in COLLECT(notifications) WHERE x=0) THEN false ELSE true END AS ruleSatisfied"
A student must receive a reminder if they do not register for the next semester within a week of course registration opening.,"Activity: [""Open Registration"", ""Register Courses"", ""Send Registration Reminder""], EntityType: [""Student""], Actor: []","MATCH (openRegEvent:Event {Activity: ""Open Registration""})-[:CORR]->(student:Entity {EntityType: ""Student""}) OPTIONAL MATCH (registerEvent:Event {Activity: ""Register Courses""})-[:CORR]->(student) WHERE registerEvent.timestamp <= openRegEvent.timestamp + duration({days: 7}) WITH student, openRegEvent, registerEvent WHERE registerEvent IS NULL OPTIONAL MATCH (reminderEvent:Event {Activity: ""Send Registration Reminder""})-[:CORR]->(student) WHERE reminderEvent.timestamp > openRegEvent.timestamp + duration({days: 7}) WITH student, reminderEvent, COUNT(reminderEvent) AS remindersSent RETURN CASE WHEN any(x in COLLECT(remindersSent) WHERE x=0) THEN false ELSE true END AS ruleSatisfied"
"If a work order is not approved within 24 hours after submission, an escalation notice should be sent to the manager.","Activity: [""Submit Work Order"", ""Approve Work Order"", ""Escalation Notice""], EntityType: [""Work Order""], Actor: []","MATCH (submitEvent:Event {Activity: ""Submit Work Order""})-[:CORR]->(workOrder:Entity {EntityType: ""Work Order""}) OPTIONAL MATCH (approveEvent:Event {Activity: ""Approve Work Order""})-[:CORR]->(workOrder) WHERE approveEvent.timestamp <= submitEvent.timestamp + duration({hours: 24}) WITH workOrder, submitEvent, approveEvent WHERE approveEvent IS NULL OPTIONAL MATCH (escalationEvent:Event {Activity: ""Escalation Notice""})-[:CORR]->(workOrder) WHERE escalationEvent.timestamp > submitEvent.timestamp + duration({hours: 24}) WITH workOrder, escalationEvent, COUNT(escalationEvent) AS escalationsSent RETURN CASE WHEN any(x in COLLECT(escalationsSent) WHERE x=0) THEN false ELSE true END AS ruleSatisfied"
"If a patient does not confirm their appointment within 48 hours of scheduling, a reminder must be sent.","Activity: [""Schedule Appointment"", ""Confirm Appointment"", ""Send Appointment Reminder""], EntityType: [""Medical Appointment""], Actor: []","MATCH (scheduleEvent:Event {Activity: ""Schedule Appointment""})-[:CORR]->(appointment:Entity {EntityType: ""Medical Appointment""}) OPTIONAL MATCH (confirmEvent:Event {Activity: ""Confirm Appointment""})-[:CORR]->(appointment) WHERE confirmEvent.timestamp <= scheduleEvent.timestamp + duration({hours: 48}) WITH appointment, scheduleEvent, confirmEvent WHERE confirmEvent IS NULL OPTIONAL MATCH (reminderEvent:Event {Activity: ""Send Appointment Reminder""})-[:CORR]->(appointment) WHERE reminderEvent.timestamp > scheduleEvent.timestamp + duration({hours: 48}) WITH appointment, reminderEvent, COUNT(reminderEvent) AS remindersSent RETURN CASE WHEN any(x in COLLECT(remindersSent) WHERE x=0) THEN false ELSE true END AS ruleSatisfied"
"If for a given ""Product"" object, a ""Product Approval"" event does not occur within 48 hours after a ""Product Listing"" event, a ""Review Required"" event must take place.","Activity: [""Product Listing"", ""Product Approval"", ""Review Required""], EntityType: [""Product""], Actor: []","MATCH (listingEvent:Event {Activity: ""Product Listing""})-[:CORR]->(product:Entity {EntityType: ""Product""}) OPTIONAL MATCH (approvalEvent:Event {Activity: ""Product Approval""})-[:CORR]->(product) WHERE approvalEvent.timestamp <= listingEvent.timestamp + duration({hours: 48}) WITH product, listingEvent, approvalEvent WHERE approvalEvent IS NULL OPTIONAL MATCH (reviewEvent:Event {Activity: ""Review Required""})-[:CORR]->(product) WHERE reviewEvent.timestamp > listingEvent.timestamp + duration({hours: 48}) WITH product, reviewEvent, COUNT(reviewEvent) AS reviewCounts RETURN CASE WHEN any(x in COLLECT(reviewCounts) WHERE x=0) THEN false ELSE true END AS ruleSatisfied"
"If for a given ""Employee"" object, a ""Training Completion"" event does not occur within 14 days after an ""Employee Onboarding"" event, an ""HR Follow-up"" event must be triggered.","Activity: [""Employee Onboarding"", ""Training Completion"",, ""HR Follow-up""], EntityType: [""Employee""], Actor: []","MATCH (onboardingEvent:Event {Activity: ""Employee Onboarding""})-[:CORR]->(employee:Entity {EntityType: ""Employee""}) OPTIONAL MATCH (trainingEvent:Event {Activity: ""Training Completion""})-[:CORR]->(employee) WHERE trainingEvent.timestamp <= onboardingEvent.timestamp + duration({days: 14}) WITH employee, onboardingEvent, trainingEvent WHERE trainingEvent IS NULL OPTIONAL MATCH (followUpEvent:Event {Activity: ""HR Follow-up""})-[:CORR]->(employee) WHERE followUpEvent.timestamp > onboardingEvent.timestamp + duration({days: 14}) WITH employee, followUpEvent, COUNT(followUpEvent) AS followUps RETURN CASE WHEN any(x in COLLECT(followUps) WHERE x=0) THEN false ELSE true END AS ruleSatisfied"
"If for a given ""Loan"" object, a ""Document Submission"" event does not occur within 7 days after a ""Loan Application"" event, a ""Missing Documents Reminder"" event must be sent.","Activity: [""Loan Application"", ""Document Submission"", ""Missing Documents Reminder""], EntityType: [""Loan""], Actor: []","MATCH (applicationEvent:Event {Activity: ""Loan Application""})-[:CORR]->(loan:Entity {EntityType: ""Loan""}) OPTIONAL MATCH (submissionEvent:Event {Activity: ""Document Submission""})-[:CORR]->(loan) WHERE submissionEvent.timestamp <= applicationEvent.timestamp + duration({days: 7}) WITH loan, applicationEvent, submissionEvent WHERE submissionEvent IS NULL OPTIONAL MATCH (reminderEvent:Event {Activity: ""Missing Documents Reminder""})-[:CORR]->(loan) WHERE reminderEvent.timestamp > applicationEvent.timestamp + duration({days: 7}) WITH loan, reminderEvent, COUNT(reminderEvent) AS reminders RETURN CASE WHEN any(x in COLLECT(reminders) WHERE x=0) THEN false ELSE true END AS ruleSatisfied"
"If for a given ""Support Ticket"" object, an ""Agent Response"" event does not occur within 24 hours after a ""Support Ticket Creation"" event, an ""Escalation Alert"" event must be generated.","Activity: [""Support Ticket Creation"", ""Agent Response"", ""Escalation Alert""], EntityType: [""Support Ticket""], Actor: []","MATCH (ticketEvent:Event {Activity: ""Support Ticket Creation""})-[:CORR]->(ticket:Entity {EntityType: ""Support Ticket""}) OPTIONAL MATCH (responseEvent:Event {Activity: ""Agent Response""})-[:CORR]->(ticket) WHERE responseEvent.timestamp <= ticketEvent.timestamp + duration({hours: 24}) WITH ticket, ticketEvent, responseEvent WHERE responseEvent IS NULL OPTIONAL MATCH (alertEvent:Event {Activity: ""Escalation Alert""})-[:CORR]->(ticket) WHERE alertEvent.timestamp > ticketEvent.timestamp + duration({hours: 24}) WITH ticket, alertEvent, COUNT(alertEvent) AS alerts RETURN CASE WHEN any(x in COLLECT(alerts) WHERE x=0) THEN false ELSE true END AS ruleSatisfied"
"If for a given ""Candidate"" object, an ""Interview Scheduling"" event does not occur within 5 days after a ""Job Application"" event, a ""Candidate Follow-up"" event must take place.","Activity: [""Job Application"", ""Interview Scheduling"", ""Candidate Follow-up""], EntityType: [""Candidate""], Actor: []","MATCH (applicationEvent:Event {Activity: ""Job Application""})-[:CORR]->(candidate:Entity {EntityType: ""Candidate""}) OPTIONAL MATCH (schedulingEvent:Event {Activity: ""Interview Scheduling""})-[:CORR]->(candidate) WHERE schedulingEvent.timestamp <= applicationEvent.timestamp + duration({days: 5}) WITH candidate, applicationEvent, schedulingEvent WHERE schedulingEvent IS NULL OPTIONAL MATCH (followUpEvent:Event {Activity: ""Candidate Follow-up""})-[:CORR]->(candidate) WHERE followUpEvent.timestamp > applicationEvent.timestamp + duration({days: 5}) WITH candidate, followUpEvent, COUNT(followUpEvent) AS followUps RETURN CASE WHEN any(x in COLLECT(followUps) WHERE x=0) THEN false ELSE true END AS ruleSatisfied"
"If for a given ""Purchase Order"" object, a ""Supplier Confirmation"" event does not occur within 48 hours after a ""Purchase Order Submission"" event, a ""Supplier Reminder"" event must be sent.","Activity: [""Purchase Order Submission"", ""Supplier Confirmation"", ""Supplier Reminder""], EntityType: [""Purchase Order""], Actor: []","MATCH (submissionEvent:Event {Activity: ""Purchase Order Submission""})-[:CORR]->(order:Entity {EntityType: ""Purchase Order""}) OPTIONAL MATCH (confirmationEvent:Event {Activity: ""Supplier Confirmation""})-[:CORR]->(order) WHERE confirmationEvent.timestamp <= submissionEvent.timestamp + duration({hours: 48}) WITH order, submissionEvent, confirmationEvent WHERE confirmationEvent IS NULL OPTIONAL MATCH (reminderEvent:Event {Activity: ""Supplier Reminder""})-[:CORR]->(order) WHERE reminderEvent.timestamp > submissionEvent.timestamp + duration({hours: 48}) WITH order, reminderEvent, COUNT(reminderEvent) AS reminders RETURN CASE WHEN any(x in COLLECT(reminders) WHERE x=0) THEN false ELSE true END AS ruleSatisfied"
"If for a given ""Medical Test"" object, a ""Lab Test Completion"" event does not occur within 72 hours after a ""Medical Test Request"" event, a ""Doctor Notification"" event must be triggered.","Activity: [""Medical Test Request"", ""Lab Test Completion"", ""Doctor Notification""], EntityType: [""Medical Test""], Actor: []","MATCH (requestEvent:Event {Activity: ""Medical Test Request""})-[:CORR]->(test:Entity {EntityType: ""Medical Test""}) OPTIONAL MATCH (completionEvent:Event {Activity: ""Lab Test Completion""})-[:CORR]->(test) WHERE completionEvent.timestamp <= requestEvent.timestamp + duration({hours: 72}) WITH test, requestEvent, completionEvent WHERE completionEvent IS NULL OPTIONAL MATCH (notificationEvent:Event {Activity: ""Doctor Notification""})-[:CORR]->(test) WHERE notificationEvent.timestamp > requestEvent.timestamp + duration({hours: 72}) WITH test, notificationEvent, COUNT(notificationEvent) AS notifications RETURN CASE WHEN any(x in COLLECT(notifications) WHERE x=0) THEN false ELSE true END AS ruleSatisfied"
"If a ""Customer Registration"" event occurs for a given ""Customer"" object and no ""Email Verification"" event follows within 24 hours, a ""Verification Reminder"" must be sent.","Activity: [""Customer Registration"", ""Email Verification"", ""Verification Reminder""], EntityType: [""Customer""], Actor: []","MATCH (registrationEvent:Event {Activity: ""Customer Registration""})-[:CORR]->(customer:Entity {EntityType: ""Customer""}) OPTIONAL MATCH (verificationEvent:Event {Activity: ""Email Verification""})-[:CORR]->(customer) WHERE verificationEvent.timestamp <= registrationEvent.timestamp + duration({hours: 24}) WITH customer, registrationEvent, verificationEvent WHERE verificationEvent IS NULL OPTIONAL MATCH (reminderEvent:Event {Activity: ""Verification Reminder""})-[:CORR]->(customer) WHERE reminderEvent.timestamp > registrationEvent.timestamp + duration({hours: 24}) WITH customer, reminderEvent,COUNT(reminderEvent) AS reminders RETURN CASE WHEN any(x in COLLECT(reminders) WHERE x=0) THEN false ELSE true END AS ruleSatisfied"
"Whenever a ""Shipment Dispatch"" event happens for a given ""Shipment"" object, if no ""Delivery Confirmation"" event is recorded within 5 days, a ""Delivery Inquiry"" should be triggered.","Activity: [""Shipment Dispatch"", ""Delivery Confirmation"", ""Deliver Inquiry""], EntityType: [""Shipment""], Actor: []","MATCH (dispatchEvent:Event {Activity: ""Shipment Dispatch""})-[:CORR]->(shipment:Entity {EntityType: ""Shipment""}) OPTIONAL MATCH (confirmationEvent:Event {Activity: ""Delivery Confirmation""})-[:CORR]->(shipment) WHERE confirmationEvent.timestamp <= dispatchEvent.timestamp + duration({days: 5}) WITH shipment, dispatchEvent, confirmationEvent WHERE confirmationEvent IS NULL OPTIONAL MATCH (inquiryEvent:Event {Activity: ""Delivery Inquiry""})-[:CORR]->(shipment) WHERE inquiryEvent.timestamp > dispatchEvent.timestamp + duration({days: 5}) WITH shipment, inquiryEvent, COUNT(inquiryEvent) AS inquiries RETURN CASE WHEN any(x in COLLECT(inquiries) WHERE x=0) THEN false ELSE true END AS ruleSatisfied"
"A ""Job Application"" event for a ""Candidate"" object must be followed by an ""Interview Scheduling"" event within 5 days. If not, a ""Candidate Follow-up"" event must occur.","Activity: [""Job Application"", ""Interview Scheduling"", ""Candidate Follow-up""], EntityType: [""Candidate""], Actor: []","MATCH (applicationEvent:Event {Activity: ""Job Application""})-[:CORR]->(candidate:Entity {EntityType: ""Candidate""}) OPTIONAL MATCH (schedulingEvent:Event {Activity: ""Interview Scheduling""})-[:CORR]->(candidate) WHERE schedulingEvent.timestamp <= applicationEvent.timestamp + duration({days: 5}) WITH candidate, applicationEvent, schedulingEvent WHERE schedulingEvent IS NULL OPTIONAL MATCH (followUpEvent:Event {Activity: ""Candidate Follow-up""})-[:CORR]->(candidate) WHERE followUpEvent.timestamp > applicationEvent.timestamp + duration({days: 5}) WITH candidate, followUpEvent, COUNT(followUpEvent) AS followUps RETURN CASE WHEN any(x in COLLECT(followUps) WHERE x=0) THEN false ELSE true END AS ruleSatisfied"
"After a ""Content Submission"" event for a given ""Article"" object, if an ""Editorial Review"" event does not take place within 3 days, a ""Review Request"" event must be initiated.","Activity: [""Content Submission"", ""Editorial Review"", ""Review Request""], EntityType: [""Article""], Actor: []","MATCH (submissionEvent:Event {Activity: ""Content Submission""})-[:CORR]->(article:Entity {EntityType: ""Article""}) OPTIONAL MATCH (reviewEvent:Event {Activity: ""Editorial Review""})-[:CORR]->(article) WHERE reviewEvent.timestamp <= submissionEvent.timestamp + duration({days: 3}) WITH article, submissionEvent, reviewEvent WHERE reviewEvent IS NULL OPTIONAL MATCH (requestEvent:Event {Activity: ""Review Request""})-[:CORR]->(article) WHERE requestEvent.timestamp > submissionEvent.timestamp + duration({days: 3}) WITH article, requestEvent, COUNT(requestEvent) AS requests RETURN CASE WHEN any(x in COLLECT(requests) WHERE x=0) THEN false ELSE true END AS ruleSatisfied"
"If an employee does not submit a report within 7 days of drafting it, they cannot draft another report afterward.","Activity: [""Draft Report"", ""Submit Report""], EntityType: [""Employee"", ""Report""], Actor: []","MATCH (employee:Entity {EntityType: ""Employee""})-[:REL]-(unsubmittedReport:Entity {EntityType: ""Report""})<-[:CORR]-(draftEvent:Event {Activity: ""Draft Report""}) WHERE NOT EXISTS { MATCH (unsubmittedReport)<-[:CORR]-(submitEvent:Event {Activity: ""Submit Report""}) WHERE submitEvent.timestamp < draftEvent.timestamp + duration({days: 7}) } OPTIONAL MATCH (employee)-[:REL]-(newReport:Entity {EntityType: ""Report""})<-[:CORR]-(newDraftEvent:Event {Activity: ""Draft Report""}) WHERE newDraftEvent.timestamp > draftEvent.timestamp + duration({days: 7}) WITH employee, COUNT(newReport) AS newReportsDrafted RETURN CASE WHEN any (x in COLLECT(newReportsDrafted) WHERE x>0) THEN false ELSE true END AS ruleSatisfied"
A driver must not rent another vehicle if they fail to return a previously rented vehicle within 14 days.,"Activity: [""Rent Vehicle"", ""Return Vehicle""], EntityType: [""Driver"", ""Vehicle""], Actor: []","MATCH (driver:Entity {EntityType: ""Driver""})-[:REL]-(unreturnedVehicle:Entity {EntityType: ""Vehicle""})<-[:CORR]-(rentEvent:Event {Activity: ""Rent Vehicle""}) WHERE NOT EXISTS { MATCH (unreturnedVehicle)<-[:CORR]-(returnEvent:Event {Activity: ""Return Vehicle""}) WHERE returnEvent.timestamp < rentEvent.timestamp + duration({days: 14}) } OPTIONAL MATCH (driver)-[:REL]-(newVehicle:Entity {EntityType: ""Vehicle""})<-[:CORR]-(newRentEvent:Event {Activity: ""Rent Vehicle""}) WHERE newRentEvent.timestamp > rentEvent.timestamp + duration({days: 14}) WITH driver, COUNT(newVehicle) AS newVehiclesRented RETURN CASE WHEN any (x in COLLECT(newVehiclesRented) WHERE x>0) THEN false ELSE true END AS ruleSatisfied"
"If a student does not submit their assignment within 5 days of starting it, they cannot start another one.","Activity: [""Start Assignment"", ""Submit Assignment""], EntityType: [""Student"", ""Assignment""], Actor: []","MATCH (student:Entity {EntityType: ""Student""})-[:REL]-(unsubmittedAssignment:Entity {EntityType: ""Assignment""})<-[:CORR]-(startEvent:Event {Activity: ""Start Assignment""}) WHERE NOT EXISTS { MATCH (unsubmittedAssignment)<-[:CORR]-(submitEvent:Event {Activity: ""Submit Assignment""}) WHERE submitEvent.timestamp < startEvent.timestamp + duration({days: 5}) } OPTIONAL MATCH (student)-[:REL]-(newAssignment:Entity {EntityType: ""Assignment""})<-[:CORR]-(newStartEvent:Event {Activity: ""Start Assignment""}) WHERE newStartEvent.timestamp > startEvent.timestamp + duration({days: 5}) WITH student, COUNT(newAssignment) AS newAssignmentsStarted RETURN CASE WHEN any (x in COLLECT(newAssignmentsStarted) WHERE x>0) THEN false ELSE true END AS ruleSatisfied"
A project cannot be initiated by a manager if they did not complete a previously initiated project within 60 days.,"Activity: [""Initiate Project"", ""Complete Project""], EntityType: [""Manager"", ""Project""], Actor: []","MATCH (manager:Entity {EntityType: ""Manager""})-[:REL]-(incompleteProject:Entity {EntityType: ""Project""})<-[:CORR]-(initiateEvent:Event {Activity: ""Initiate Project""}) WHERE NOT EXISTS { MATCH (incompleteProject)<-[:CORR]-(completeEvent:Event {Activity: ""Complete Project""}) WHERE completeEvent.timestamp < initiateEvent.timestamp + duration({days: 60}) } OPTIONAL MATCH (manager)-[:REL]-(newProject:Entity {EntityType: ""Project""})<-[:CORR]-(newInitiateEvent:Event {Activity: ""Initiate Project""}) WHERE newInitiateEvent.timestamp > initiateEvent.timestamp + duration({days: 60}) WITH manager, COUNT(newProject) AS newProjectsInitiated RETURN CASE WHEN any (x in COLLECT(newProjectsInitiated) WHERE x>0) THEN false ELSE true END AS ruleSatisfied"
"If an airline passenger does not check in within 24 hours of booking a ticket, they cannot book another ticket.","Activity: [""Book Ticket"", ""Check-in""], EntityType: [""Passenger"", ""Ticket""], Actor: []","MATCH (passenger:Entity {EntityType: ""Passenger""})-[:REL]-(uncheckedTicket:Entity {EntityType: ""Ticket""})<-[:CORR]-(bookEvent:Event {Activity: ""Book Ticket""}) WHERE NOT EXISTS { MATCH (uncheckedTicket)<-[:CORR]-(checkinEvent:Event {Activity: ""Check-in""}) WHERE checkinEvent.timestamp < bookEvent.timestamp + duration({hours: 24}) } OPTIONAL MATCH (passenger)-[:REL]-(newTicket:Entity {EntityType: ""Ticket""})<-[:CORR]-(newBookEvent:Event {Activity: ""Book Ticket""}) WHERE newBookEvent.timestamp > bookEvent.timestamp + duration({hours: 24}) WITH passenger, COUNT(newTicket) AS newTicketsBooked RETURN CASE WHEN any (x in COLLECT(newTicketsBooked) WHERE x>0) THEN false ELSE true END AS ruleSatisfied"
"If a patient does not schedule a follow-up appointment within 10 days of their last consultation, they cannot book another consultation.","Activity: [""Consultation"", ""Schedule Follow-up""], EntityType: [""Patient"", ""Appointment""], Actor: []","MATCH (patient:Entity {EntityType: ""Patient""})-[:REL]-(missedFollowup:Entity {EntityType: ""Appointment""})<-[:CORR]-(consultEvent:Event {Activity: ""Consultation""}) WHERE NOT EXISTS { MATCH (missedFollowup)<-[:CORR]-(followupEvent:Event {Activity: ""Schedule Follow-up""}) WHERE followupEvent.timestamp < consultEvent.timestamp + duration({days: 10}) } OPTIONAL MATCH (patient)-[:REL]-(newConsultation:Entity {EntityType: ""Appointment""})<-[:CORR]-(newConsultEvent:Event {Activity: ""Consultation""}) WHERE newConsultEvent.timestamp > consultEvent.timestamp + duration({days: 10}) WITH patient, COUNT(newConsultation) AS newConsultations RETURN CASE WHEN any (x in COLLECT(newConsultations) WHERE x>0) THEN false ELSE true END AS ruleSatisfied"
A library member who does not return a borrowed book within 30 days cannot borrow another book.,"Activity: [""Borrow Book"", ""Return Book""], EntityType: [""Library Member"", ""Book""], Actor: []","MATCH (member:Entity {EntityType: ""Library Member""})-[:REL]-(unreturnedBook:Entity {EntityType: ""Book""})<-[:CORR]-(borrowEvent:Event {Activity: ""Borrow Book""}) WHERE NOT EXISTS { MATCH (unreturnedBook)<-[:CORR]-(returnEvent:Event {Activity: ""Return Book""}) WHERE returnEvent.timestamp < borrowEvent.timestamp + duration({days: 30}) } OPTIONAL MATCH (member)-[:REL]-(newBook:Entity {EntityType: ""Book""})<-[:CORR]-(newBorrowEvent:Event {Activity: ""Borrow Book""}) WHERE newBorrowEvent.timestamp > borrowEvent.timestamp + duration({days: 30}) WITH member, COUNT(newBook) AS newBooksBorrowed RETURN CASE WHEN any (x in COLLECT(newBooksBorrowed) WHERE x>0) THEN false ELSE true END AS ruleSatisfied"
A software developer must not start a new task if they did not complete the previous task within 15 days.,"Activity: [""Start Task"", ""Complete Task""], EntityType: [""Developer"", ""Task""], Actor: []","MATCH (developer:Entity {EntityType: ""Developer""})-[:REL]-(unfinishedTask:Entity {EntityType: ""Task""})<-[:CORR]-(startEvent:Event {Activity: ""Start Task""}) WHERE NOT EXISTS { MATCH (unfinishedTask)<-[:CORR]-(completeEvent:Event {Activity: ""Complete Task""}) WHERE completeEvent.timestamp < startEvent.timestamp + duration({days: 15}) } OPTIONAL MATCH (developer)-[:REL]-(newTask:Entity {EntityType: ""Task""})<-[:CORR]-(newStartEvent:Event {Activity: ""Start Task""}) WHERE newStartEvent.timestamp > startEvent.timestamp + duration({days: 15}) WITH developer, COUNT(newTask) AS newTasksStarted RETURN CASE WHEN any (x in COLLECT(newTasksStarted) WHERE x>0) THEN false ELSE true END AS ruleSatisfied"
"If a student does not register for an exam within 20 days of enrolling in a course, they cannot enroll in another course afterward.","Activity: [""Enroll Course"", ""Register Exam""], EntityType: [""Student"", ""Course""], Actor: []","MATCH (student:Entity {EntityType: ""Student""})-[:REL]-(unenrolledCourse:Entity {EntityType: ""Course""})<-[:CORR]-(enrollEvent:Event {Activity: ""Enroll Course""}) WHERE NOT EXISTS { MATCH (unenrolledCourse)<-[:CORR]-(registerEvent:Event {Activity: ""Register Exam""}) WHERE registerEvent.timestamp < enrollEvent.timestamp + duration({days: 20}) } OPTIONAL MATCH (student)-[:REL]-(newCourse:Entity {EntityType: ""Course""})<-[:CORR]-(newEnrollEvent:Event {Activity: ""Enroll Course""}) WHERE newEnrollEvent.timestamp > enrollEvent.timestamp + duration({days: 20}) WITH student, COUNT(newCourse) AS newCoursesEnrolled RETURN CASE WHEN any (x in COLLECT(newCoursesEnrolled) WHERE x>0) THEN false ELSE true END AS ruleSatisfied"
A tenant cannot sign a new lease if they have not made their rent payment within 5 days of the due date.,"Activity: [""Due Rent"", ""Pay Rent""], EntityType: [""Tenant"", ""Lease""], Actor: []","MATCH (tenant:Entity {EntityType: ""Tenant""})-[:REL]-(unpaidLease:Entity {EntityType: ""Lease""})<-[:CORR]-(dueEvent:Event {Activity: ""Due Rent""}) WHERE NOT EXISTS { MATCH (unpaidLease)<-[:CORR]-(payEvent:Event {Activity: ""Pay Rent""}) WHERE payEvent.timestamp < dueEvent.timestamp + duration({days: 5}) } OPTIONAL MATCH (tenant)-[:REL]-(newLease:Entity {EntityType: ""Lease""})<-[:CORR]-(newSignEvent:Event {Activity: ""Sign Lease""}) WHERE newSignEvent.timestamp > dueEvent.timestamp + duration({days: 5}) WITH tenant, COUNT(newLease) AS newLeasesSigned RETURN CASE WHEN any (x in COLLECT(newLeasesSigned) WHERE x>0) THEN false ELSE true END AS ruleSatisfied"
"If a user does not complete the ""Verify Identity"" activity within 3 days after starting the ""Create Account"" activity, they should not be able to initiate another ""Create Account"" event for a different account later.","Activity: [""Create Account"", ""Verify Identity""], EntityType: [""User"", ""Account""], Actor: []","MATCH (user:Entity {EntityType: ""User""})-[:REL]-(unverifiedAccount:Entity {EntityType: ""Account""})<-[:CORR]-(createEvent:Event {Activity: ""Create Account""}) WHERE NOT EXISTS { MATCH (unverifiedAccount)<-[:CORR]-(verifyEvent:Event {Activity: ""Verify Identity""}) WHERE verifyEvent.timestamp < createEvent.timestamp + duration({days: 3}) } OPTIONAL MATCH (user)-[:REL]-(newAccount:Entity {EntityType: ""Account""})<-[:CORR]-(newCreateEvent:Event {Activity: ""Create Account""}) WHERE newCreateEvent.timestamp > createEvent.timestamp + duration({days: 3}) WITH user, COUNT(newAccount) AS newAccountsCreated RETURN CASE WHEN any (x in COLLECT(newAccountsCreated) WHERE x>0) THEN false ELSE true END AS ruleSatisfied"
"If a company does not complete the ""Submit Proposal"" activity within 14 days after starting the ""Bid for Project"" activity, it should not be able to initiate another instance of the ""Bid for Project"" activity for a different project later.","Activity: [""Bid for Project"", ""Submit Proposal""], EntityType: [""Company"", ""Project""], Actor: []","MATCH (company:Entity {EntityType: ""Company""})-[:REL]-(unsubmittedProject:Entity {EntityType: ""Project""})<-[:CORR]-(bidEvent:Event {Activity: ""Bid for Project""}) WHERE NOT EXISTS { MATCH (unsubmittedProject)<-[:CORR]-(submitEvent:Event {Activity: ""Submit Proposal""}) WHERE submitEvent.timestamp < bidEvent.timestamp + duration({days: 14}) } OPTIONAL MATCH (company)-[:REL]-(newProject:Entity {EntityType: ""Project""})<-[:CORR]-(newBidEvent:Event {Activity: ""Bid for Project""}) WHERE newBidEvent.timestamp > bidEvent.timestamp + duration({days: 14}) WITH company, COUNT(newProject) AS newProjectsBid RETURN CASE WHEN any (x in COLLECT(newProjectsBid) WHERE x>0) THEN false ELSE true END AS ruleSatisfied"
"If an author does not complete a ""Submit Manuscript"" event within 30 days of performing a ""Draft Manuscript"" event, they should not be able to initiate another ""Draft Manuscript"" event for a different manuscript later.","Activity: [""Draft Manuscript"", ""Submit Manuscript""], EntityType: [""Author"", ""Manuscript""], Actor: []","MATCH (author:Entity {EntityType: ""Author""})-[:REL]-(undeliveredManuscript:Entity {EntityType: ""Manuscript""})<-[:CORR]-(draftEvent:Event {Activity: ""Draft Manuscript""}) WHERE NOT EXISTS { MATCH (undeliveredManuscript)<-[:CORR]-(submitEvent:Event {Activity: ""Submit Manuscript""}) WHERE submitEvent.timestamp < draftEvent.timestamp + duration({days: 30}) } OPTIONAL MATCH (author)-[:REL]-(newManuscript:Entity {EntityType: ""Manuscript""})<-[:CORR]-(newDraftEvent:Event {Activity: ""Draft Manuscript""}) WHERE newDraftEvent.timestamp > draftEvent.timestamp + duration({days: 30}) WITH author, COUNT(newManuscript) AS newManuscriptsDrafted RETURN CASE WHEN any (x in COLLECT(newManuscriptsDrafted) WHERE x>0) THEN false ELSE true END AS ruleSatisfied"
"If an employee does not complete the ""Finish Training"" activity within 7 days of starting the ""Enroll Training"" activity, they should not be able to initiate another ""Enroll Training"" event for a different  entity of type ""Training"" later.","Activity: [""Enroll Training"", ""Finish Training""], EntityType: [""Employee"", ""Training""], Actor: []","MATCH (employee:Entity {EntityType: ""Employee""})-[:REL]-(unfinishedTraining:Entity {EntityType: ""Training""})<-[:CORR]-(enrollEvent:Event {Activity: ""Enroll Training""}) WHERE NOT EXISTS { MATCH (unfinishedTraining)<-[:CORR]-(finishEvent:Event {Activity: ""Finish Training""}) WHERE finishEvent.timestamp < enrollEvent.timestamp + duration({days: 7}) } OPTIONAL MATCH (employee)-[:REL]-(newTraining:Entity {EntityType: ""Training""})<-[:CORR]-(newEnrollEvent:Event {Activity: ""Enroll Training""}) WHERE newEnrollEvent.timestamp > enrollEvent.timestamp + duration({days: 7}) WITH employee, COUNT(newTraining) AS newTrainingsEnrolled RETURN CASE WHEN any (x in COLLECT(newTrainingsEnrolled) WHERE x>0) THEN false ELSE true END AS ruleSatisfied"
"If a researcher does not complete the ""Submit Ethics Approval"" activity within 20 days after the ""Start Study"" activity, they should not be allowed to initiate another occurrence of the ""Start Study"" activity for a different study later.","Activity: [""Start Study"", ""Submit Ethics Approval""], EntityType: [""Researcher"", ""Study""], Actor: []","MATCH (researcher:Entity {EntityType: ""Researcher""})-[:REL]-(unapprovedStudy:Entity {EntityType: ""Study""})<-[:CORR]-(startEvent:Event {Activity: ""Start Study""}) WHERE NOT EXISTS { MATCH (unapprovedStudy)<-[:CORR]-(submitEvent:Event {Activity: ""Submit Ethics Approval""}) WHERE submitEvent.timestamp < startEvent.timestamp + duration({days: 20}) } OPTIONAL MATCH (researcher)-[:REL]-(newStudy:Entity {EntityType: ""Study""})<-[:CORR]-(newStartEvent:Event {Activity: ""Start Study""}) WHERE newStartEvent.timestamp > startEvent.timestamp + duration({days: 20}) WITH researcher, COUNT(newStudy) AS newStudiesStarted RETURN CASE WHEN any (x in COLLECT(newStudiesStarted) WHERE x>0) THEN false ELSE true END AS ruleSatisfied"
"If a contractor does not complete ""Submit Invoice""  within 15 days after ""Complete Work"", they should not be allowed to perform another ""Complete Work"" event for a different job later.","Activity: [""Complete Work"", ""Submit Invoice""], EntityType: [""Contractor"", ""Job""], Actor: []","MATCH (contractor:Entity {EntityType: ""Contractor""})-[:REL]-(unbilledJob:Entity {EntityType: ""Job""})<-[:CORR]-(completeEvent:Event {Activity: ""Complete Work""}) WHERE NOT EXISTS { MATCH (unbilledJob)<-[:CORR]-(submitEvent:Event {Activity: ""Submit Invoice""}) WHERE submitEvent.timestamp < completeEvent.timestamp + duration({days: 15}) } OPTIONAL MATCH (contractor)-[:REL]-(newJob:Entity {EntityType: ""Job""})<-[:CORR]-(newCompleteEvent:Event {Activity: ""Complete Work""}) WHERE newCompleteEvent.timestamp > completeEvent.timestamp + duration({days: 15}) WITH contractor, COUNT(newJob) AS newJobsCompleted RETURN CASE WHEN any (x in COLLECT(newJobsCompleted) WHERE x>0) THEN false ELSE true END AS ruleSatisfied"
"If for a ""Freelancer"" no ""Submit Work"" activity is performed within 10 days of starting the ""Begin Project"" activity, they must not perform another event of the ""Begin Project"" activity for another project in the future.","Activity: [""Begin Project"", ""Submit Work""], EntityType: [""Freelancer"", ""Project""], Actor: []","MATCH (freelancer:Entity {EntityType: ""Freelancer""})-[:REL]-(unsubmittedProject:Entity {EntityType: ""Project""})<-[:CORR]-(beginEvent:Event {Activity: ""Begin Project""}) WHERE NOT EXISTS { MATCH (unsubmittedProject)<-[:CORR]-(submitEvent:Event {Activity: ""Submit Work""}) WHERE submitEvent.timestamp < beginEvent.timestamp + duration({days: 10}) } OPTIONAL MATCH (freelancer)-[:REL]-(newProject:Entity {EntityType: ""Project""})<-[:CORR]-(newBeginEvent:Event {Activity: ""Begin Project""}) WHERE newBeginEvent.timestamp > beginEvent.timestamp + duration({days: 10}) WITH freelancer, COUNT(newProject) AS newProjectsStarted RETURN CASE WHEN any (x in COLLECT(newProjectsStarted) WHERE x>0) THEN false ELSE true END AS ruleSatisfied"
"A retailer without a ""Ship Order"" event within 5 days after performing the ""Receive Order"" activity should not be allowed to have ""Receive Order"" again for a different order.","Activity: [""Receive Order"", ""Ship Order""], EntityType: [""Retailer"", ""Order""], Actor: []","MATCH (retailer:Entity {EntityType: ""Retailer""})-[:REL]-(unshippedOrder:Entity {EntityType: ""Order""})<-[:CORR]-(receiveEvent:Event {Activity: ""Receive Order""}) WHERE NOT EXISTS { MATCH (unshippedOrder)<-[:CORR]-(shipEvent:Event {Activity: ""Ship Order""}) WHERE shipEvent.timestamp < receiveEvent.timestamp + duration({days: 5}) } OPTIONAL MATCH (retailer)-[:REL]-(newOrder:Entity {EntityType: ""Order""})<-[:CORR]-(newReceiveEvent:Event {Activity: ""Receive Order""}) WHERE newReceiveEvent.timestamp > receiveEvent.timestamp + duration({days: 5}) WITH retailer, COUNT(newOrder) AS newOrdersReceived RETURN CASE WHEN any (x in COLLECT(newOrdersReceived) WHERE x>0) THEN false ELSE true END AS ruleSatisfied"
"If for a given a customer no ""Confirm Payment"" event occurs within 48 hours of initiating the ""Checkout"" activity, another ""Checkout"" event for a different purchase is not allowed.","Activity: [""Checkout"", ""Confirm Payment""], EntityType: [""Customer"", ""Purchase""], Actor: []","MATCH (customer:Entity {EntityType: ""Customer""})-[:REL]-(unpaidPurchase:Entity {EntityType: ""Purchase""})<-[:CORR]-(checkoutEvent:Event {Activity: ""Checkout""}) WHERE NOT EXISTS { MATCH (unpaidPurchase)<-[:CORR]-(paymentEvent:Event {Activity: ""Confirm Payment""}) WHERE paymentEvent.timestamp < checkoutEvent.timestamp + duration({hours: 48}) } OPTIONAL MATCH (customer)-[:REL]-(newPurchase:Entity {EntityType: ""Purchase""})<-[:CORR]-(newCheckoutEvent:Event {Activity: ""Checkout""}) WHERE newCheckoutEvent.timestamp > checkoutEvent.timestamp + duration({hours: 48}) WITH customer, COUNT(newPurchase) AS newPurchasesCheckedOut RETURN CASE WHEN any (x in COLLECT(newPurchasesCheckedOut) WHERE x>0) THEN false ELSE true END AS ruleSatisfied"
"A student for which no ""Submit Exam"" activity happens within 2 hours after beginning the ""Start Exam"" activity is not allowed to start another ""Start Exam"" event for a different exam.","Activity: [""Start Exam"", ""Submit Exam""], EntityType: [""Student"", ""Exam""], Actor: []","MATCH (student:Entity {EntityType: ""Student""})-[:REL]-(unsubmittedExam:Entity {EntityType: ""Exam""})<-[:CORR]-(startEvent:Event {Activity: ""Start Exam""}) WHERE NOT EXISTS { MATCH (unsubmittedExam)<-[:CORR]-(submitEvent:Event {Activity: ""Submit Exam""}) WHERE submitEvent.timestamp < startEvent.timestamp + duration({hours: 2}) } OPTIONAL MATCH (student)-[:REL]-(newExam:Entity {EntityType: ""Exam""})<-[:CORR]-(newStartEvent:Event {Activity: ""Start Exam""}) WHERE newStartEvent.timestamp > startEvent.timestamp + duration({hours: 2}) WITH student, COUNT(newExam) AS newExamsStarted RETURN CASE WHEN any (x in COLLECT(newExamsStarted) WHERE x>0) THEN false ELSE true END AS ruleSatisfied"
"If for a vendor the""Deliver Goods"" activity does not happen within 7 days of starting the ""Accept Order"" activity, they are prohibited from initiating the ""Accept Order"" activity again for another order.","Activity: [""Accept Order"", ""Deliver Goods""], EntityType: [""Vendor"", ""Order""], Actor: []","MATCH (vendor:Entity {EntityType: ""Vendor""})-[:REL]-(undeliveredOrder:Entity {EntityType: ""Order""})<-[:CORR]-(acceptEvent:Event {Activity: ""Accept Order""}) WHERE NOT EXISTS { MATCH (undeliveredOrder)<-[:CORR]-(deliverEvent:Event {Activity: ""Deliver Goods""}) WHERE deliverEvent.timestamp < acceptEvent.timestamp + duration({days: 7}) } OPTIONAL MATCH (vendor)-[:REL]-(newOrder:Entity {EntityType: ""Order""})<-[:CORR]-(newAcceptEvent:Event {Activity: ""Accept Order""}) WHERE newAcceptEvent.timestamp > acceptEvent.timestamp + duration({days: 7}) WITH vendor, COUNT(newOrder) AS newOrdersAccepted RETURN CASE WHEN any (x in COLLECT(newOrdersAccepted) WHERE x>0) THEN false ELSE true END AS ruleSatisfied"
All items included in a purchase must be dispatched at the same time.,"Activity: [""Dispatch""], EntityType: [""Item"", ""Purchase""], Actor: []","MATCH (purchase:Entity {EntityType: ""Purchase""})-[:REL]-(item:Entity {EntityType: ""Item""}) MATCH (item)<-[:CORR]-(dispatchEvent:Event {Activity: ""Dispatch""}) WITH purchase, COUNT(DISTINCT dispatchEvent) AS dispatchEvents RETURN CASE WHEN any (x in COLLECT(dispatchEvents) WHERE x>1) THEN false ELSE true END AS ruleSatisfied"
Components assigned to a specific project must be assembled together.,"Activity: [""Assemble""], EntityType: [""Component"", ""Project""], Actor: []","MATCH (project:Entity {EntityType: ""Project""})-[:REL]-(component:Entity {EntityType: ""Component""}) MATCH (component)<-[:CORR]-(assembleEvent:Event {Activity: ""Assemble""}) WITH project, COUNT(DISTINCT assembleEvent) AS assembleEvents RETURN CASE WHEN any (x in COLLECT(assembleEvents) WHERE x>1) THEN false ELSE true END AS ruleSatisfied"
Passengers under the same booking must take the same flight.,"Activity: [""Board""], EntityType: [""Passenger"", ""Booking""], Actor: []","MATCH (booking:Entity {EntityType: ""Booking""})-[:REL]-(passenger:Entity {EntityType: ""Passenger""}) MATCH (passenger)<-[:CORR]-(boardEvent:Event {Activity: ""Board""}) WITH booking, COUNT(DISTINCT boardEvent) AS boardEvents RETURN CASE WHEN any (x in COLLECT(boardEvents) WHERE x>1) THEN false ELSE true END AS ruleSatisfied"
Items from a shared delivery batch should be sent in one go.,"Activity: [""Send""], EntityType: [""Item"", ""Batch""], Actor: []","MATCH (batch:Entity {EntityType: ""Batch""})-[:REL]-(item:Entity {EntityType: ""Item""}) MATCH (item)<-[:CORR]-(sendEvent:Event {Activity: ""Send""}) WITH batch, COUNT(DISTINCT sendEvent) AS sendEvents RETURN CASE WHEN any (x in COLLECT(sendEvents) WHERE x>1) THEN false ELSE true END AS ruleSatisfied"
Employees assigned to the same project should undergo training together.,"Activity: [""Train""], EntityType: [""Employee"", ""Project""], Actor: []","MATCH (project:Entity {EntityType: ""Project""})-[:REL]-(employee:Entity {EntityType: ""Employee""}) MATCH (employee)<-[:CORR]-(trainEvent:Event {Activity: ""Train""}) WITH project, COUNT(DISTINCT trainEvent) AS trainEvents RETURN CASE WHEN any (x in COLLECT(trainEvents) WHERE x>1) THEN false ELSE true END AS ruleSatisfied"
Students from the same class should take the exam at the same time.,"Activity: [""Exam""], EntityType: [""Student"", ""Class""], Actor: []","MATCH (class:Entity {EntityType: ""Class""})-[:REL]-(student:Entity {EntityType: ""Student""}) MATCH (student)<-[:CORR]-(examEvent:Event {Activity: ""Exam""}) WITH class, COUNT(DISTINCT examEvent) AS examEvents RETURN CASE WHEN any (x in COLLECT(examEvents) WHERE x>1) THEN false ELSE true END AS ruleSatisfied"
All packages in a shipment must be scanned together before departure.,"Activity: [""Scan""], EntityType: [""Package"", ""Shipment""], Actor: []","MATCH (shipment:Entity {EntityType: ""Shipment""})-[:REL]-(package:Entity {EntityType: ""Package""}) MATCH (package)<-[:CORR]-(scanEvent:Event {Activity: ""Scan""}) WITH shipment, COUNT(DISTINCT scanEvent) AS scanEvents RETURN CASE WHEN any (x in COLLECT(scanEvents) WHERE x>1) THEN false ELSE true END AS ruleSatisfied"
Products grouped in a manufacturing batch should undergo quality control simultaneously.,"Activity: [""Quality Check""], EntityType: [""Product"", ""Manufacturing Batch""], Actor: []","MATCH (batch:Entity {EntityType: ""Manufacturing Batch""})-[:REL]-(product:Entity {EntityType: ""Product""}) MATCH (product)<-[:CORR]-(qualityCheckEvent:Event {Activity: ""Quality Check""}) WITH batch, COUNT(DISTINCT qualityCheckEvent) AS qualityCheckEvents RETURN CASE WHEN any (x in COLLECT(qualityCheckEvents) WHERE x>1) THEN false ELSE true END AS ruleSatisfied"
All guests of a group reservation must check in at the same time.,"Activity: [""Check-In""], EntityType: [""Guest"", ""Group Reservation""], Actor: []","MATCH (reservation:Entity {EntityType: ""Group Reservation""})-[:REL]-(guest:Entity {EntityType: ""Guest""}) MATCH (guest)<-[:CORR]-(checkInEvent:Event {Activity: ""Check-In""}) WITH reservation, COUNT(DISTINCT checkInEvent) AS checkInEvents RETURN CASE WHEN any (x in COLLECT(checkInEvents) WHERE x>1) THEN false ELSE true END AS ruleSatisfied"
Books borrowed under the same loan agreement should be returned together.,"Activity: [""Return""], EntityType: [""Book"", ""Loan Agreement""], Actor: []","MATCH (loan:Entity {EntityType: ""Loan Agreement""})-[:REL]-(book:Entity {EntityType: ""Book""}) MATCH (book)<-[:CORR]-(returnEvent:Event {Activity: ""Return""}) WITH loan, COUNT(DISTINCT returnEvent) AS returnEvents RETURN CASE WHEN any (x in COLLECT(returnEvents) WHERE x>1) THEN false ELSE true END AS ruleSatisfied"
"Every product entity associated with the same order entity must have the ""Ship Order"" activity executed together.","Activity: [""Ship Order""], EntityType: [""Product"", ""Order""], Actor: []","MATCH (order:Entity {EntityType: ""Order""})-[:REL]-(product:Entity {EntityType: ""Product""}) MATCH (product)<-[:CORR]-(shipOrderEvent:Event {Activity: ""Ship Order""}) WITH order, COUNT(DISTINCT shipOrderEvent) AS shipOrderEvents RETURN CASE WHEN any (x in COLLECT(shipOrderEvents) WHERE x>1) THEN false ELSE true END AS ruleSatisfied"
"All entities of type ""Patient"" registered under the same medical case must have ""Discharge Patient"" performed simultaneously.","Activity: [""Discharge Patient""], EntityType: [""Patient"", ""Medical Case""], Actor: []","MATCH (case:Entity {EntityType: ""Medical Case""})-[:REL]-(patient:Entity {EntityType: ""Patient""}) MATCH (patient)<-[:CORR]-(dischargeEvent:Event {Activity: ""Discharge Patient""}) WITH case, COUNT(DISTINCT dischargeEvent) AS dischargeEvents RETURN CASE WHEN any (x in COLLECT(dischargeEvents) WHERE x>1) THEN false ELSE true END AS ruleSatisfied"
"Every parcel object assigned to the same shipment object must have the ""Process Shipment"" event occur together.","Activity: [""Process Shipment""], EntityType: [""Parcel"", ""Shipment""], Actor: []","MATCH (shipment:Entity {EntityType: ""Shipment""})-[:REL]-(parcel:Entity {EntityType: ""Parcel""}) MATCH (parcel)<-[:CORR]-(processShipmentEvent:Event {Activity: ""Process Shipment""}) WITH shipment, COUNT(DISTINCT processShipmentEvent) AS processShipmentEvents RETURN CASE WHEN any (x in COLLECT(processShipmentEvents) WHERE x>1) THEN false ELSE true END AS ruleSatisfied"
"All employees assigned to the same project must undergo ""Complete Training"" together.","Activity: [""Complete Training""], EntityType: [""Employee"", ""Project""], Actor: []","MATCH (project:Entity {EntityType: ""Project""})-[:REL]-(employee:Entity {EntityType: ""Employee""}) MATCH (employee)<-[:CORR]-(trainingEvent:Event {Activity: ""Complete Training""}) WITH project, COUNT(DISTINCT trainingEvent) AS trainingEvents RETURN CASE WHEN any (x in COLLECT(trainingEvents) WHERE x>1) THEN false ELSE true END AS ruleSatisfied"
"Packages in a delivery batch must all be marked with the ""Confirm Delivery"" activity at the same time.","Activity: [""Confirm Delivery""], EntityType: [""Package"", ""Delivery Batch""], Actor: []","MATCH (batch:Entity {EntityType: ""Delivery Batch""})-[:REL]-(package:Entity {EntityType: ""Package""}) MATCH (package)<-[:CORR]-(confirmDeliveryEvent:Event {Activity: ""Confirm Delivery""}) WITH batch, COUNT(DISTINCT confirmDeliveryEvent) AS confirmDeliveryEvents RETURN CASE WHEN any (x in COLLECT(confirmDeliveryEvents) WHERE x>1) THEN false ELSE true END AS ruleSatisfied"
"All students in a course should participate in ""Submit Assignment"" at the same deadline.","Activity: [""Submit Assignment""], EntityType: [""Student"", ""Course""], Actor: []","MATCH (course:Entity {EntityType: ""Course""})-[:REL]-(student:Entity {EntityType: ""Student""}) MATCH (student)<-[:CORR]-(submitAssignmentEvent:Event {Activity: ""Submit Assignment""}) WITH course, COUNT(DISTINCT submitAssignmentEvent) AS submitAssignmentEvents RETURN CASE WHEN any (x in COLLECT(submitAssignmentEvents) WHERE x>1) THEN false ELSE true END AS ruleSatisfied"
"All vehicles under a fleet should undergo ""Routine Inspection"" together.","Activity: [""Routine Inspection""], EntityType: [""Vehicle"", ""Fleet""], Actor: []","MATCH (fleet:Entity {EntityType: ""Fleet""})-[:REL]-(vehicle:Entity {EntityType: ""Vehicle""}) MATCH (vehicle)<-[:CORR]-(inspectionEvent:Event {Activity: ""Routine Inspection""}) WITH fleet, COUNT(DISTINCT inspectionEvent) AS inspectionEvents RETURN CASE WHEN any (x in COLLECT(inspectionEvents) WHERE x>1) THEN false ELSE true END AS ruleSatisfied"
"Items in a restocking order must all be processed under the ""Receive Stock"" event at once.","Activity: [""Receive Stock""], EntityType: [""Item"", ""Restocking Order""], Actor: []","MATCH (order:Entity {EntityType: ""Restocking Order""})-[:REL]-(item:Entity {EntityType: ""Item""}) MATCH (item)<-[:CORR]-(receiveStockEvent:Event {Activity: ""Receive Stock""}) WITH order, COUNT(DISTINCT receiveStockEvent) AS receiveStockEvents RETURN CASE WHEN any (x in COLLECT(receiveStockEvents) WHERE x>1) THEN false ELSE true END AS ruleSatisfied"
"All materials linked to the same construction site must go through ""Material Inspection"" at the same time.","Activity: [""Material Inspection""], EntityType: [""Material"", ""Construction Site""], Actor: []","MATCH (site:Entity {EntityType: ""Construction Site""})-[:REL]-(material:Entity {EntityType: ""Material""}) MATCH (material)<-[:CORR]-(inspectionEvent:Event {Activity: ""Material Inspection""}) WITH site, COUNT(DISTINCT inspectionEvent) AS inspectionEvents RETURN CASE WHEN any (x in COLLECT(inspectionEvents) WHERE x>1) THEN false ELSE true END AS ruleSatisfied"
"All books associated with a bulk rental must be checked out under the same ""Lend Book"" event.","Activity: [""Lend Book""], EntityType: [""Book"", ""Bulk Rental""], Actor: []","MATCH (rental:Entity {EntityType: ""Bulk Rental""})-[:REL]-(book:Entity {EntityType: ""Book""}) MATCH (book)<-[:CORR]-(lendBookEvent:Event {Activity: ""Lend Book""}) WITH rental, COUNT(DISTINCT lendBookEvent) AS lendBookEvents RETURN CASE WHEN any (x in COLLECT(lendBookEvents) WHERE x>1) THEN false ELSE true END AS ruleSatisfied"
"Whenever a new employee is onboarded, an introductory training session must be held for all assigned mentors.","Activity: [""Onboard Employee"", ""Conduct Introductory Training""], EntityType: [""Employee"", ""Mentor""], Actor: []","MATCH (employee:Entity {EntityType: ""Employee""})<-[:CORR]-(onboardEvent:Event {Activity: ""Onboard Employee""}) MATCH (employee)-[:REL]-(mentor:Entity {EntityType: ""Mentor""}) WHERE NOT EXISTS { MATCH (mentor)<-[:CORR]-(trainingEvent:Event {Activity: ""Conduct Introductory Training""}) } WITH COUNT(mentor) AS mentorsWithoutTraining RETURN CASE WHEN mentorsWithoutTraining = 0 THEN true ELSE false END AS ruleSatisfied"
"If a customer submits a complaint, then a resolution must be provided for each reported issue.","Activity: [""Submit Complaint"", ""Provide Resolution""], EntityType: [""Customer"", ""Issue""], Actor: []","MATCH (customer:Entity {EntityType: ""Customer""})<-[:CORR]-(complaintEvent:Event {Activity: ""Submit Complaint""}) MATCH (customer)-[:REL]-(issue:Entity {EntityType: ""Issue""}) WHERE NOT EXISTS { MATCH (issue)<-[:CORR]-(resolutionEvent:Event {Activity: ""Provide Resolution""}) } WITH COUNT(issue) AS issuesWithoutResolution RETURN CASE WHEN issuesWithoutResolution = 0 THEN true ELSE false END AS ruleSatisfied"
"For every supplier contract, if the initial payment is made, then an order confirmation must be sent for each purchased item.","Activity: [""Make Initial Payment"", ""Send Order Confirmation""], EntityType: [""Supplier Contract"", ""Item""], Actor: []","MATCH (contract:Entity {EntityType: ""Supplier Contract""})<-[:CORR]-(paymentEvent:Event {Activity: ""Make Initial Payment""}) MATCH (contract)-[:REL]-(item:Entity {EntityType: ""Item""}) WHERE NOT EXISTS { MATCH (item)<-[:CORR]-(confirmationEvent:Event {Activity: ""Send Order Confirmation""}) } WITH COUNT(item) AS itemsWithoutConfirmation RETURN CASE WHEN itemsWithoutConfirmation = 0 THEN true ELSE false END AS ruleSatisfied"
"When a manufacturing order is placed, production must start for all specified components.","Activity: [""Place Manufacturing Order"", ""Start Production""], EntityType: [""Manufacturing Order"", ""Component""], Actor: []","MATCH (order:Entity {EntityType: ""Manufacturing Order""})<-[:CORR]-(orderEvent:Event {Activity: ""Place Manufacturing Order""}) MATCH (order)-[:REL]-(component:Entity {EntityType: ""Component""}) WHERE NOT EXISTS { MATCH (component)<-[:CORR]-(productionEvent:Event {Activity: ""Start Production""}) } WITH COUNT(component) AS componentsWithoutProduction RETURN CASE WHEN componentsWithoutProduction = 0 THEN true ELSE false END AS ruleSatisfied"
"If a software development sprint begins, then each assigned task must be started.","Activity: [""Start Sprint"", ""Start Task""], EntityType: [""Sprint"", ""Task""], Actor: []","MATCH (sprint:Entity {EntityType: ""Sprint""})<-[:CORR]-(sprintStartEvent:Event {Activity: ""Start Sprint""}) MATCH (sprint)-[:REL]-(task:Entity {EntityType: ""Task""}) WHERE NOT EXISTS { MATCH (task)<-[:CORR]-(taskStartEvent:Event {Activity: ""Start Task""}) } WITH COUNT(task) AS tasksWithoutStart RETURN CASE WHEN tasksWithoutStart = 0 THEN true ELSE false END AS ruleSatisfied"
"When a vehicle is registered, an inspection must be scheduled for all components.","Activity: [""Register Vehicle"", ""Schedule Inspection""], EntityType: [""Vehicle"", ""Component""], Actor: []","MATCH (vehicle:Entity {EntityType: ""Vehicle""})<-[:CORR]-(registrationEvent:Event {Activity: ""Register Vehicle""}) MATCH (vehicle)-[:REL]-(component:Entity {EntityType: ""Component""}) WHERE NOT EXISTS { MATCH (component)<-[:CORR]-(inspectionEvent:Event {Activity: ""Schedule Inspection""}) } WITH COUNT(component) AS componentsWithoutInspection RETURN CASE WHEN componentsWithoutInspection = 0 THEN true ELSE false END AS ruleSatisfied"
"Whenever a warehouse receives an incoming shipment, all included goods must be checked in.","Activity: [""Receive Shipment"", ""Check In Goods""], EntityType: [""Warehouse"", ""Goods""], Actor: []","MATCH (warehouse:Entity {EntityType: ""Warehouse""})<-[:CORR]-(shipmentEvent:Event {Activity: ""Receive Shipment""}) MATCH (warehouse)-[:REL]-(goods:Entity {EntityType: ""Goods""}) WHERE NOT EXISTS { MATCH (goods)<-[:CORR]-(checkInEvent:Event {Activity: ""Check In Goods""}) } WITH COUNT(goods) AS goodsWithoutCheckIn RETURN CASE WHEN goodsWithoutCheckIn = 0 THEN true ELSE false END AS ruleSatisfied"
"If an online purchase is made, then a confirmation email must be sent for each item in the order.","Activity: [""Make Online Purchase"", ""Send Confirmation Email""], EntityType: [""Purchase"", ""Item""], Actor: []","MATCH (purchase:Entity {EntityType: ""Purchase""})<-[:CORR]-(purchaseEvent:Event {Activity: ""Make Online Purchase""}) MATCH (purchase)-[:REL]-(item:Entity {EntityType: ""Item""}) WHERE NOT EXISTS { MATCH (item)<-[:CORR]-(emailEvent:Event {Activity: ""Send Confirmation Email""}) } WITH COUNT(item) AS itemsWithoutEmail RETURN CASE WHEN itemsWithoutEmail = 0 THEN true ELSE false END AS ruleSatisfied"
"For every employee, if a ""Hire Employee"" event occurs, then a ""Sign Contract"" event must occur for all agreements related to that employee.","Activity: [""Hire Employee"", ""Sign Contract""], EntityType: [""Employee"", ""Employment Agreement""], Actor: []","MATCH (employee:Entity {EntityType: ""Employee""})<-[:CORR]-(hireEvent:Event {Activity: ""Hire Employee""}) MATCH (employee)-[:REL]-(agreement:Entity {EntityType: ""Employment Agreement""}) WHERE NOT EXISTS { MATCH (agreement)<-[:CORR]-(contractSignEvent:Event {Activity: ""Sign Contract""}) } WITH COUNT(agreement) AS agreementsWithoutContract RETURN CASE WHEN agreementsWithoutContract = 0 THEN true ELSE false END AS ruleSatisfied"
"For every customer, if a ""Request Refund"" event occurs, then a ""Process Refund"" event must take place for all orders made by that customer.","Activity: [""Request Refund"", ""Process Refund""], EntityType: [""Customer"", ""Order""], Actor: []","MATCH (customer:Entity {EntityType: ""Customer""})<-[:CORR]-(refundEvent:Event {Activity: ""Request Refund""}) MATCH (customer)-[:REL]-(order:Entity {EntityType: ""Order""}) WHERE NOT EXISTS { MATCH (order)<-[:CORR]-(processRefundEvent:Event {Activity: ""Process Refund""}) } WITH COUNT(order) AS ordersWithoutRefund RETURN CASE WHEN ordersWithoutRefund = 0 THEN true ELSE false END AS ruleSatisfied"
"For every article, if a ""Publish Article"" event occurs, then a ""Review Article"" event must follow for all assigned reviewers of that article.","Activity: [""Publish Article"", ""Review Article""], EntityType: [""Article"", ""Reviewer""], Actor: []","MATCH (article:Entity {EntityType: ""Article""})<-[:CORR]-(publishEvent:Event {Activity: ""Publish Article""}) MATCH (article)-[:REL]-(reviewer:Entity {EntityType: ""Reviewer""}) WHERE NOT EXISTS { MATCH (reviewer)<-[:CORR]-(reviewEvent:Event {Activity: ""Review Article""}) } WITH COUNT(reviewer) AS reviewersWithoutReview RETURN CASE WHEN reviewersWithoutReview = 0 THEN true ELSE false END AS ruleSatisfied"
"When an ""Create Invoice"" event happens for an ""Invoice"" entity, it is necessary for a ""Send Invoice"" event to be executed for each related transaction.","Activity: [""Create Invoice"", ""Send Invoice""], EntityType: [""Invoice"", ""Transaction""], Actor: []","MATCH (invoice:Entity {EntityType: ""Invoice""})<-[:CORR]-(createInvoiceEvent:Event {Activity: ""Create Invoice""}) MATCH (invoice)-[:REL]-(transaction:Entity {EntityType: ""Transaction""}) WHERE NOT EXISTS { MATCH (transaction)<-[:CORR]-(sendInvoiceEvent:Event {Activity: ""Send Invoice""}) } WITH COUNT(transaction) AS transactionsWithoutInvoice RETURN CASE WHEN transactionsWithoutInvoice = 0 THEN true ELSE false END AS ruleSatisfied"
"For every maintenance plan, if a ""Schedule Maintenance"" event is recorded, then a ""Complete Maintenance"" event must take place for all machines included in that plan.","Activity: [""Schedule Maintenance"", ""Complete Maintenance""], EntityType: [""Facility"", ""Equipment""], Actor: []","MATCH (facility:Entity {EntityType: ""Facility""})<-[:CORR]-(scheduleEvent:Event {Activity: ""Schedule Maintenance""}) MATCH (facility)-[:REL]-(equipment:Entity {EntityType: ""Equipment""}) WHERE NOT EXISTS { MATCH (equipment)<-[:CORR]-(completeEvent:Event {Activity: ""Complete Maintenance""}) } WITH COUNT(equipment) AS equipmentWithoutMaintenance RETURN CASE WHEN equipmentWithoutMaintenance = 0 THEN true ELSE false END AS ruleSatisfied"
"Every time an applicant submits a new application with a ""Submit Application"" event, the corresponding ""Review Application"" event must be completed for each of their applications.","Activity: [""Submit Application"", ""Review Application""], EntityType: [""Applicant"", ""Application""], Actor: []","MATCH (applicant:Entity {EntityType: ""Applicant""})<-[:CORR]-(submitEvent:Event {Activity: ""Submit Application""}) MATCH (applicant)-[:REL]-(application:Entity {EntityType: ""Application""}) WHERE NOT EXISTS { MATCH (application)<-[:CORR]-(reviewEvent:Event {Activity: ""Review Application""}) } WITH COUNT(application) AS applicationsWithoutReview RETURN CASE WHEN applicationsWithoutReview = 0 THEN true ELSE false END AS ruleSatisfied"
"For every order, if a ""Ship Order"" event occurs, then a ""Receive Order"" event must follow for all items included in that order.","Activity: [""Ship Order"", ""Receive Order""], EntityType: [""Order"", ""Item""], Actor: []","MATCH (order:Entity {EntityType: ""Order""})<-[:CORR]-(shipEvent:Event {Activity: ""Ship Order""}) MATCH (order)-[:REL]-(item:Entity {EntityType: ""Item""}) WHERE NOT EXISTS { MATCH (item)<-[:CORR]-(receiveEvent:Event {Activity: ""Receive Order""}) } WITH COUNT(item) AS itemsWithoutReceipt RETURN CASE WHEN itemsWithoutReceipt = 0 THEN true ELSE false END AS ruleSatisfied"
"For every budget approval, if an ""Approve Budget"" event occurs, then a ""Distribute Funds"" event must be triggered for all departments receiving allocations from that budget.","Activity: [""Approve Budget"", ""Distribute Funds""], EntityType: [""Budget"", ""Department""], Actor: []","MATCH (budget:Entity {EntityType: ""Budget""})<-[:CORR]-(approveEvent:Event {Activity: ""Approve Budget""}) MATCH (budget)-[:REL]-(department:Entity {EntityType: ""Department""}) WHERE NOT EXISTS { MATCH (department)<-[:CORR]-(distributeEvent:Event {Activity: ""Distribute Funds""}) } WITH COUNT(department) AS departmentsWithoutFunds RETURN CASE WHEN departmentsWithoutFunds = 0 THEN true ELSE false END AS ruleSatisfied"
"For every bank account closure, if a ""Close Bank Account"" event is initiated, then a ""Notify Customer"" event must be executed for all individuals associated with that account.","Activity: [""Close Bank Account"", ""Notify Customer""], EntityType: [""Bank Account"", ""Customer""], Actor: []","MATCH (account:Entity {EntityType: ""Bank Account""})<-[:CORR]-(closeEvent:Event {Activity: ""Close Bank Account""}) MATCH (account)-[:REL]-(customer:Entity {EntityType: ""Customer""}) WHERE NOT EXISTS { MATCH (customer)<-[:CORR]-(notifyEvent:Event {Activity: ""Notify Customer""}) } WITH COUNT(customer) AS customersWithoutNotification RETURN CASE WHEN customersWithoutNotification = 0 THEN true ELSE false END AS ruleSatisfied"
"For every contract, if a ""Terminate Contract"" event occurs, then a ""Process Final Payment"" event must be recorded for all invoices associated with that contract.","Activity: [""Terminate Contract"", ""Process Final Payment""], EntityType: [""Contract"", ""Invoice""], Actor: []","MATCH (contract:Entity {EntityType: ""Contract""})<-[:CORR]-(terminateEvent:Event {Activity: ""Terminate Contract""}) MATCH (contract)-[:REL]-(invoice:Entity {EntityType: ""Invoice""}) WHERE NOT EXISTS { MATCH (invoice)<-[:CORR]-(paymentEvent:Event {Activity: ""Process Final Payment""}) } WITH COUNT(invoice) AS invoicesWithoutPayment RETURN CASE WHEN invoicesWithoutPayment = 0 THEN true ELSE false END AS ruleSatisfied"
"For every purchase order, if an approval action takes place, all invoices related to the purchase order must be verified within 2 days.","Activity: [""Approval"", ""Verification""], EntityType: [""Purchase Order"", ""Invoice""], Actor: []","MATCH (order:Entity {EntityType: ""Purchase Order""})<-[:CORR]-(approvalEvent:Event {Activity: ""Approval""}) MATCH (order)-[:REL]-(invoice:Entity {EntityType: ""Invoice""}) WHERE NOT EXISTS { MATCH (invoice)<-[:CORR]-(verificationEvent:Event {Activity: ""Verification""}) WHERE verificationEvent.timestamp <= approvalEvent.timestamp + duration({days: 2}) } WITH COUNT(invoice) AS invoicesWithoutVerification RETURN CASE WHEN invoicesWithoutVerification = 0 THEN true ELSE false END AS ruleSatisfied"
"If a customer submits a loan application, all documents related to that loan application must be submitted within 5 days.","Activity: [""Application Submission"", ""Document Submission""], EntityType: [""Loan Application"", ""Document""], Actor: []","MATCH (application:Entity {EntityType: ""Loan Application""})<-[:CORR]-(submitEvent:Event {Activity: ""Application Submission""}) MATCH (application)-[:REL]-(document:Entity {EntityType: ""Document""}) WHERE NOT EXISTS { MATCH (document)<-[:CORR]-(documentEvent:Event {Activity: ""Document Submission""}) WHERE documentEvent.timestamp <= submitEvent.timestamp + duration({days: 5}) } WITH COUNT(document) AS documentsWithoutSubmission RETURN CASE WHEN documentsWithoutSubmission = 0 THEN true ELSE false END AS ruleSatisfied"
"Whenever a new employee completes onboarding, all training sessions related to that employee must be attended within one month.","Activity: [""Onboarding Completion"", ""Training Attendance""], EntityType: [""Employee"", ""Training""], Actor: []","MATCH (employee:Entity {EntityType: ""Employee""})<-[:CORR]-(onboardEvent:Event {Activity: ""Onboarding Completion""}) MATCH (employee)-[:REL]-(training:Entity {EntityType: ""Training""}) WHERE NOT EXISTS { MATCH (training)<-[:CORR]-(trainingEvent:Event {Activity: ""Training Attendance""}) WHERE trainingEvent.timestamp <= onboardEvent.timestamp + duration({months: 1}) } WITH COUNT(training) AS trainingsWithoutAttendance RETURN CASE WHEN trainingsWithoutAttendance = 0 THEN true ELSE false END AS ruleSatisfied"
"When a warehouse receives goods, all items related to that shipment must be recorded in inventory within 3 hours.","Activity: [""Goods Received"", ""Inventory Entry""], EntityType: [""Shipment"", ""Item""], Actor: []","MATCH (shipment:Entity {EntityType: ""Shipment""})<-[:CORR]-(receivedEvent:Event {Activity: ""Goods Received""}) MATCH (shipment)-[:REL]-(item:Entity {EntityType: ""Item""}) WHERE NOT EXISTS { MATCH (item)<-[:CORR]-(inventoryEvent:Event {Activity: ""Inventory Entry""}) WHERE inventoryEvent.timestamp <= receivedEvent.timestamp + duration({hours: 3}) } WITH COUNT(item) AS itemsWithoutEntry RETURN CASE WHEN itemsWithoutEntry = 0 THEN true ELSE false END AS ruleSatisfied"
"If a case is opened in customer support, all follow-up actions related to that case must be taken within 48 hours.","Activity: [""Case Opened"", ""Follow-up Action""], EntityType: [""Customer Case"", ""Action""], Actor: []","MATCH (case:Entity {EntityType: ""Customer Case""})<-[:CORR]-(openEvent:Event {Activity: ""Case Opened""}) MATCH (case)-[:REL]-(action:Entity {EntityType: ""Action""}) WHERE NOT EXISTS { MATCH (action)<-[:CORR]-(followUpEvent:Event {Activity: ""Follow-up Action""}) WHERE followUpEvent.timestamp <= openEvent.timestamp + duration({hours: 48}) } WITH COUNT(action) AS actionsWithoutFollowUp RETURN CASE WHEN actionsWithoutFollowUp = 0 THEN true ELSE false END AS ruleSatisfied"
"If a request for leave is approved, all documents related to that leave request must be provided within one week.","Activity: [""Leave Approved"", ""Document Submission""], EntityType: [""Leave Request"", ""Document""], Actor: []","MATCH (leave:Entity {EntityType: ""Leave Request""})<-[:CORR]-(approvalEvent:Event {Activity: ""Leave Approved""}) MATCH (leave)-[:REL]-(document:Entity {EntityType: ""Document""}) WHERE NOT EXISTS { MATCH (document)<-[:CORR]-(docEvent:Event {Activity: ""Document Submission""}) WHERE docEvent.timestamp <= approvalEvent.timestamp + duration({days: 7}) } WITH COUNT(document) AS documentsWithoutSubmission RETURN CASE WHEN documentsWithoutSubmission = 0 THEN true ELSE false END AS ruleSatisfied"
"When a property is sold, all legal paperwork related to that property must be completed within 10 days.","Activity: [""Property Sold"", ""Paperwork Completed""], EntityType: [""Property"", ""Legal Paperwork""], Actor: []","MATCH (property:Entity {EntityType: ""Property""})<-[:CORR]-(soldEvent:Event {Activity: ""Property Sold""}) MATCH (property)-[:REL]-(paperwork:Entity {EntityType: ""Legal Paperwork""}) WHERE NOT EXISTS { MATCH (paperwork)<-[:CORR]-(paperworkEvent:Event {Activity: ""Paperwork Completed""}) WHERE paperworkEvent.timestamp <= soldEvent.timestamp + duration({days: 10}) } WITH COUNT(paperwork) AS paperworkWithoutCompletion RETURN CASE WHEN paperworkWithoutCompletion = 0 THEN true ELSE false END AS ruleSatisfied"
"If an online order is confirmed, all items related to that order must be packed within 4 hours.","Activity: [""Order Confirmed"", ""Packing""], EntityType: [""Order"", ""Item""], Actor: []","MATCH (order:Entity {EntityType: ""Order""})<-[:CORR]-(confirmEvent:Event {Activity: ""Order Confirmed""}) MATCH (order)-[:REL]-(item:Entity {EntityType: ""Item""}) WHERE NOT EXISTS { MATCH (item)<-[:CORR]-(packingEvent:Event {Activity: ""Packing""}) WHERE packingEvent.timestamp <= confirmEvent.timestamp + duration({hours: 4}) } WITH COUNT(item) AS itemsWithoutPacking RETURN CASE WHEN itemsWithoutPacking = 0 THEN true ELSE false END AS ruleSatisfied"
"When a university student registers for a course, all course materials related to that student must be uploaded within 2 days.","Activity: [""Course Registration"", ""Material Upload""], EntityType: [""Student"", ""Course Material""], Actor: []","MATCH (student:Entity {EntityType: ""Student""})<-[:CORR]-(registerEvent:Event {Activity: ""Course Registration""}) MATCH (student)-[:REL]-(material:Entity {EntityType: ""Course Material""}) WHERE NOT EXISTS { MATCH (material)<-[:CORR]-(uploadEvent:Event {Activity: ""Material Upload""}) WHERE uploadEvent.timestamp <= registerEvent.timestamp + duration({days: 2}) } WITH COUNT(material) AS materialsWithoutUpload RETURN CASE WHEN materialsWithoutUpload = 0 THEN true ELSE false END AS ruleSatisfied"
"If an insurance claim is submitted, all assessments related to that claim must be completed within 7 days.","Activity: [""Claim Submitted"", ""Assessment Completed""], EntityType: [""Insurance Claim"", ""Assessment""], Actor: []","MATCH (claim:Entity {EntityType: ""Insurance Claim""})<-[:CORR]-(submitEvent:Event {Activity: ""Claim Submitted""}) MATCH (claim)-[:REL]-(assessment:Entity {EntityType: ""Assessment""}) WHERE NOT EXISTS { MATCH (assessment)<-[:CORR]-(assessmentEvent:Event {Activity: ""Assessment Completed""}) WHERE assessmentEvent.timestamp <= submitEvent.timestamp + duration({days: 7}) } WITH COUNT(assessment) AS assessmentsWithoutCompletion RETURN CASE WHEN assessmentsWithoutCompletion = 0 THEN true ELSE false END AS ruleSatisfied"
"For every order, if an ""Order Placement"" event occurs, then all items related to that order must have an ""Item Allocation"" event within 3 hours.","Activity: [""Order Placement"", ""Item Allocation""], EntityType: [""Order"", ""Item""], Actor: []","MATCH (order:Entity {EntityType: ""Order""})<-[:CORR]-(placementEvent:Event {Activity: ""Order Placement""}) MATCH (order)-[:REL]-(item:Entity {EntityType: ""Item""}) WHERE NOT EXISTS { MATCH (item)<-[:CORR]-(allocationEvent:Event {Activity: ""Item Allocation""}) WHERE allocationEvent.timestamp <= placementEvent.timestamp + duration({hours: 3}) } WITH COUNT(item) AS itemsWithoutAllocation RETURN CASE WHEN itemsWithoutAllocation = 0 THEN true ELSE false END AS ruleSatisfied"
"If a ""Payment Received"" event is recorded for an invoice, then all associated products must have a ""Shipment Confirmation"" event within 24 hours.","Activity: [""Payment Received"", ""Shipment Confirmation""], EntityType: [""Invoice"", ""Product""], Actor: []","MATCH (invoice:Entity {EntityType: ""Invoice""})<-[:CORR]-(paymentEvent:Event {Activity: ""Payment Received""}) MATCH (invoice)-[:REL]-(product:Entity {EntityType: ""Product""}) WHERE NOT EXISTS { MATCH (product)<-[:CORR]-(shipmentEvent:Event {Activity: ""Shipment Confirmation""}) WHERE shipmentEvent.timestamp <= paymentEvent.timestamp + duration({hours: 24}) } WITH COUNT(product) AS productsWithoutShipment RETURN CASE WHEN productsWithoutShipment = 0 THEN true ELSE false END AS ruleSatisfied"
"Whenever a ""Contract Signed"" event occurs for a legal agreement, all related documents must have a ""Verification Completed"" event within 5 days.","Activity: [""Contract Signed"", ""Verification Completed""], EntityType: [""Legal Agreement"", ""Document""], Actor: []","MATCH (agreement:Entity {EntityType: ""Legal Agreement""})<-[:CORR]-(signingEvent:Event {Activity: ""Contract Signed""}) MATCH (agreement)-[:REL]-(document:Entity {EntityType: ""Document""}) WHERE NOT EXISTS { MATCH (document)<-[:CORR]-(verificationEvent:Event {Activity: ""Verification Completed""}) WHERE verificationEvent.timestamp <= signingEvent.timestamp + duration({days: 5}) } WITH COUNT(document) AS documentsWithoutVerification RETURN CASE WHEN documentsWithoutVerification = 0 THEN true ELSE false END AS ruleSatisfied"
"For every ""Service Request"", if a ""Request Logged"" event occurs, all corresponding tasks must have a ""Task Assigned"" event within 6 hours.","Activity: [""Request Logged"", ""Task Assigned""], EntityType: [""Service Request"", ""Task""], Actor: []","MATCH (request:Entity {EntityType: ""Service Request""})<-[:CORR]-(logEvent:Event {Activity: ""Request Logged""}) MATCH (request)-[:REL]-(task:Entity {EntityType: ""Task""}) WHERE NOT EXISTS { MATCH (task)<-[:CORR]-(assignmentEvent:Event {Activity: ""Task Assigned""}) WHERE assignmentEvent.timestamp <= logEvent.timestamp + duration({hours: 6}) } WITH COUNT(task) AS tasksWithoutAssignment RETURN CASE WHEN tasksWithoutAssignment = 0 THEN true ELSE false END AS ruleSatisfied"
"If an ""Equipment Checkout"" event happens for a machine, then all related safety checklists must have a ""Safety Check Completed"" event within 2 hours.","Activity: [""Equipment Checkout"", ""Safety Check Completed""], EntityType: [""Machine"", ""Checklist""], Actor: []","MATCH (machine:Entity {EntityType: ""Machine""})<-[:CORR]-(checkoutEvent:Event {Activity: ""Equipment Checkout""}) MATCH (machine)-[:REL]-(checklist:Entity {EntityType: ""Checklist""}) WHERE NOT EXISTS { MATCH (checklist)<-[:CORR]-(checkEvent:Event {Activity: ""Safety Check Completed""}) WHERE checkEvent.timestamp <= checkoutEvent.timestamp + duration({hours: 2}) } WITH COUNT(checklist) AS checklistsWithoutCheck RETURN CASE WHEN checklistsWithoutCheck = 0 THEN true ELSE false END AS ruleSatisfied"
"If a ""Contract Termination"" event occurs for an employee, then all associated access permissions must have a ""Revocation Completed"" event within 24 hours.","Activity: [""Contract Termination"", ""Revocation Completed""], EntityType: [""Employee"", ""Access Permission""], Actor: []","MATCH (employee:Entity {EntityType: ""Employee""})<-[:CORR]-(terminationEvent:Event {Activity: ""Contract Termination""}) MATCH (employee)-[:REL]-(permission:Entity {EntityType: ""Access Permission""}) WHERE NOT EXISTS { MATCH (permission)<-[:CORR]-(revocationEvent:Event {Activity: ""Revocation Completed""}) WHERE revocationEvent.timestamp <= terminationEvent.timestamp + duration({hours: 24}) } WITH COUNT(permission) AS permissionsWithoutRevocation RETURN CASE WHEN permissionsWithoutRevocation = 0 THEN true ELSE false END AS ruleSatisfied"
"If a ""Vehicle Maintenance Request"" is created, all related parts must have a ""Parts Ordered"" event within 1 day.","Activity: [""Vehicle Maintenance Request"", ""Parts Ordered""], EntityType: [""Vehicle"", ""Part""], Actor: []","MATCH (vehicle:Entity {EntityType: ""Vehicle""})<-[:CORR]-(requestEvent:Event {Activity: ""Vehicle Maintenance Request""}) MATCH (vehicle)-[:REL]-(part:Entity {EntityType: ""Part""}) WHERE NOT EXISTS { MATCH (part)<-[:CORR]-(orderEvent:Event {Activity: ""Parts Ordered""}) WHERE orderEvent.timestamp <= requestEvent.timestamp + duration({days: 1}) } WITH COUNT(part) AS partsWithoutOrder RETURN CASE WHEN partsWithoutOrder = 0 THEN true ELSE false END AS ruleSatisfied"
"Whenever a ""Building Inspection Completed"" event is recorded, all related violations must have a ""Violation Addressed"" event within 15 days.","Activity: [""Building Inspection Completed"", ""Violation Addressed""], EntityType: [""Building"", ""Violation""], Actor: []","MATCH (building:Entity {EntityType: ""Building""})<-[:CORR]-(inspectionEvent:Event {Activity: ""Building Inspection Completed""}) MATCH (building)-[:REL]-(violation:Entity {EntityType: ""Violation""}) WHERE NOT EXISTS { MATCH (violation)<-[:CORR]-(addressEvent:Event {Activity: ""Violation Addressed""}) WHERE addressEvent.timestamp <= inspectionEvent.timestamp + duration({days: 15}) } WITH COUNT(violation) AS violationsWithoutAddress RETURN CASE WHEN violationsWithoutAddress = 0 THEN true ELSE false END AS ruleSatisfied"
"If a ""Security Incident Logged"" event occurs for a system, then all affected components must have a ""Mitigation Applied"" event within 12 hours.","Activity: [""Security Incident Logged"", ""Mitigation Applied""], EntityType: [""System"", ""Component""], Actor: []","MATCH (system:Entity {EntityType: ""System""})<-[:CORR]-(incidentEvent:Event {Activity: ""Security Incident Logged""}) MATCH (system)-[:REL]-(component:Entity {EntityType: ""Component""}) WHERE NOT EXISTS { MATCH (component)<-[:CORR]-(mitigationEvent:Event {Activity: ""Mitigation Applied""}) WHERE mitigationEvent.timestamp <= incidentEvent.timestamp + duration({hours: 12}) } WITH COUNT(component) AS componentsWithoutMitigation RETURN CASE WHEN componentsWithoutMitigation = 0 THEN true ELSE false END AS ruleSatisfied"
"When a ""Research Study Initiated"" event happens for a project, all related participants must have a ""Consent Form Signed"" event within 1 week.","Activity: [""Research Study Initiated"", ""Consent Form Signed""], EntityType: [""Project"", ""Participant""], Actor: []","MATCH (project:Entity {EntityType: ""Project""})<-[:CORR]-(studyEvent:Event {Activity: ""Research Study Initiated""}) MATCH (project)-[:REL]-(participant:Entity {EntityType: ""Participant""}) WHERE NOT EXISTS { MATCH (participant)<-[:CORR]-(consentEvent:Event {Activity: ""Consent Form Signed""}) WHERE consentEvent.timestamp <= studyEvent.timestamp + duration({days: 7}) } WITH COUNT(participant) AS participantsWithoutConsent RETURN CASE WHEN participantsWithoutConsent = 0 THEN true ELSE false END AS ruleSatisfied"
"For every patient, if a ""Schedule Appointment"" event is immediately followed by a ""Visit Doctor"" event, then a ""Complete Payment"" event must take place before a ""Receive Prescription"" event.","Activity: [""Schedule Appointment"", ""Visit Doctor"", ""Complete Payment"", ""Receive Prescription""], EntityType: [""Patient""], Actor: []","MATCH (patient:Entity {EntityType: ""Patient""})<-[:CORR]-(scheduleEvent:Event {Activity: ""Schedule Appointment""}) MATCH (patient)<-[:CORR]-(visitEvent:Event {Activity: ""Visit Doctor""})<-[:DF]-(scheduleEvent) WHERE NOT EXISTS { MATCH (patient)<-[:CORR]-(paymentEvent:Event {Activity: ""Complete Payment""}) MATCH (patient)<-[:CORR]-(prescriptionEvent:Event {Activity: ""Receive Prescription""}) WHERE paymentEvent.timestamp < prescriptionEvent.timestamp } RETURN CASE WHEN COUNT(patient)>0 THEN false ELSE true END AS ruleSatisfied"
"In an e-commerce platform, whenever a person adds an item to their cart and the very next action is proceeding to checkout, they must enter their payment details before completing the purchase.","Activity: [""Add to Cart"", ""Proceed to Checkout"", ""Enter Payment Details"", ""Complete Purchase""], EntityType: [""User""], Actor: []","MATCH (user:Entity {EntityType: ""User""})<-[:CORR]-(cartEvent:Event {Activity: ""Add to Cart""}) MATCH (user)<-[:CORR]-(checkoutEvent:Event {Activity: ""Proceed to Checkout""})<-[:DF]-(cartEvent) WHERE NOT EXISTS { MATCH (user)<-[:CORR]-(paymentEvent:Event {Activity: ""Enter Payment Details""}) MATCH (user)<-[:CORR]-(purchaseEvent:Event {Activity: ""Complete Purchase""}) WHERE paymentEvent.timestamp < purchaseEvent.timestamp } RETURN CASE WHEN COUNT(user)>0 THEN false ELSE true END AS ruleSatisfied"
"For every driver, if they ""Start Ride"" and the next event is ""End Ride"", they need to ""Rate Experience"" before ""Receive Payment Confirmation"".","Activity: [""Start Ride"", ""End Ride"", ""Rate Experience"", ""Receive Payment Confirmation""], EntityType: [""Driver""], Actor: []","MATCH (driver:Entity {EntityType: ""Driver""})<-[:CORR]-(startEvent:Event {Activity: ""Start Ride""}) MATCH (driver)<-[:CORR]-(endEvent:Event {Activity: ""End Ride""})<-[:DF]-(startEvent) WHERE NOT EXISTS { MATCH (driver)<-[:CORR]-(rateEvent:Event {Activity: ""Rate Experience""}) MATCH (driver)<-[:CORR]-(confirmEvent:Event {Activity: ""Receive Payment Confirmation""}) WHERE rateEvent.timestamp < confirmEvent.timestamp } RETURN CASE WHEN COUNT(driver)>0 THEN false ELSE true END AS ruleSatisfied"
"If a bank account holder requests a withdrawal and the approval follows immediately, they must verify their identity before receiving the funds.","Activity: [""Request Withdrawal"", ""Approve Withdrawal"", ""Verify Identity"", ""Receive Funds""], EntityType: [""Account Holder""], Actor: []","MATCH (holder:Entity {EntityType: ""Account Holder""})<-[:CORR]-(requestEvent:Event {Activity: ""Request Withdrawal""}) MATCH (holder)<-[:CORR]-(approveEvent:Event {Activity: ""Approve Withdrawal""})<-[:DF]-(requestEvent) WHERE NOT EXISTS { MATCH (holder)<-[:CORR]-(verifyEvent:Event {Activity: ""Verify Identity""}) MATCH (holder)<-[:CORR]-(fundsEvent:Event {Activity: ""Receive Funds""}) WHERE verifyEvent.timestamp < fundsEvent.timestamp } RETURN CASE WHEN COUNT(holder)>0 THEN false ELSE true END AS ruleSatisfied"
"Whenever an employee submits a leave request and it is approved immediately after, the HR team must document it in their system before payroll adjustments are made.","Activity: [""Submit Leave Request"", ""Approve Leave"", ""Document Leave"", ""Adjust Payroll""], EntityType: [""Employee""], Actor: []","MATCH (employee:Entity {EntityType: ""Employee""})<-[:CORR]-(requestEvent:Event {Activity: ""Submit Leave Request""}) MATCH (employee)<-[:CORR]-(approveEvent:Event {Activity: ""Approve Leave""})<-[:DF]-(requestEvent) WHERE NOT EXISTS {MATCH (employee)<-[:CORR]-(documentEvent:Event {Activity: ""Document Leave""}) MATCH (employee)<-[:CORR]-(payrollEvent:Event {Activity: ""Adjust Payroll""}) WHERE documentEvent.timestamp < payrollEvent.timestamp } RETURN CASE WHEN COUNT(employee)>0 THEN false ELSE true END AS ruleSatisfied"
"If a supplier submits an invoice and the next recorded event is the invoice being approved, then the payment must be processed before a confirmation receipt is sent.","Activity: [""Submit Invoice"", ""Approve Invoice"", ""Process Payment"", ""Send Receipt""], EntityType: [""Supplier""], Actor: []","MATCH (supplier:Entity {EntityType: ""Supplier""})<-[:CORR]-(submitEvent:Event {Activity: ""Submit Invoice""}) MATCH (supplier)<-[:CORR]-(approveEvent:Event {Activity: ""Approve Invoice""})<-[:DF]-(submitEvent) WHERE NOT EXISTS {  MATCH (supplier)<-[:CORR]-(paymentEvent:Event {Activity: ""Process Payment""}) MATCH (supplier)<-[:CORR]-(receiptEvent:Event {Activity: ""Send Receipt""}) WHERE paymentEvent.timestamp < receiptEvent.timestamp } RETURN CASE WHEN COUNT(supplier)>0 THEN false ELSE true END AS ruleSatisfied"
"Whenever a student completes registration and the next event is accessing course content, they must verify their email before they can submit assignments.","Activity: [""Complete Registration"", ""Access Course"", ""Verify Email"", ""Submit Assignment""], EntityType: [""Student""], Actor: []","MATCH (student:Entity {EntityType: ""Student""})<-[:CORR]-(registerEvent:Event {Activity: ""Complete Registration""}) MATCH (student)<-[:CORR]-(accessEvent:Event {Activity: ""Access Course""})<-[:DF]-(registerEvent) WHERE NOT EXISTS { MATCH (student)<-[:CORR]-(verifyEvent:Event {Activity: ""Verify Email""}) MATCH (student)<-[:CORR]-(submitEvent:Event {Activity: ""Submit Assignment""}) WHERE verifyEvent.timestamp < submitEvent.timestamp } RETURN CASE WHEN COUNT(student)>0 THEN false ELSE true END AS ruleSatisfied"
"For a given product, if an assembly starts and the very next step is the quality inspection, then the product must be packaged before it is shipped.","Activity: [""Start Assembly"", ""Quality Inspection"", ""Package Product"", ""Ship Product""], EntityType: [""Product""], Actor: []","MATCH (product:Entity {EntityType: ""Product""})<-[:CORR]-(startEvent:Event {Activity: ""Start Assembly""}) MATCH (product)<-[:CORR]-(inspectionEvent:Event {Activity: ""Quality Inspection""})<-[:DF]-(startEvent) WHERE NOT EXISTS { MATCH (product)<-[:CORR]-(packageEvent:Event {Activity: ""Package Product""}) MATCH (product)<-[:CORR]-(shipEvent:Event {Activity: ""Ship Product""}) WHERE packageEvent.timestamp < shipEvent.timestamp } RETURN CASE WHEN COUNT(product)>0 THEN false ELSE true END AS ruleSatisfied"
"If an employee logs in and the next action is accessing a restricted file, they must provide additional authentication before downloading confidential data.","Activity: [""Log In"", ""Access Restricted File"", ""Provide Authentication"", ""Download Data""], EntityType: [""Employee""], Actor: []","MATCH (employee:Entity {EntityType: ""Employee""})<-[:CORR]-(loginEvent:Event {Activity: ""Log In""}) MATCH (employee)<-[:CORR]-(accessEvent:Event {Activity: ""Access Restricted File""})<-[:DF]-(loginEvent) WHERE NOT EXISTS { MATCH (employee)<-[:CORR]-(authEvent:Event {Activity: ""Provide Authentication""}) MATCH (employee)<-[:CORR]-(downloadEvent:Event {Activity: ""Download Data""}) WHERE authEvent.timestamp < downloadEvent.timestamp } RETURN CASE WHEN COUNT(employee)>0 THEN false ELSE true END AS ruleSatisfied"
"If a user books a hotel stay and the next step is confirming their reservation, then they must make the payment before receiving their check-in details.","Activity: [""Book Hotel"", ""Confirm Reservation"", ""Make Payment"", ""Receive Check-in Details""], EntityType: [""User""], Actor: []","MATCH (user:Entity {EntityType: ""User""})<-[:CORR]-(bookEvent:Event {Activity: ""Book Hotel""}) MATCH (user)<-[:CORR]-(confirmEvent:Event {Activity: ""Confirm Reservation""})<-[:DF]-(bookEvent) WHERE NOT EXISTS { MATCH (user)<-[:CORR]-(paymentEvent:Event {Activity: ""Make Payment""}) MATCH (user)<-[:CORR]-(checkinEvent:Event {Activity: ""Receive Check-in Details""}) WHERE paymentEvent.timestamp < checkinEvent.timestamp } RETURN CASE WHEN COUNT(user)>0 THEN false ELSE true END AS ruleSatisfied"
"For every Product Batch, if a ""Start Production"" event is immediately followed by a ""Quality Check"" event, then a ""Package Product"" event must occur before a ""Ship Product"" event.","Activity: [""Start Production"", ""Quality Check"", ""Package Product"", ""Ship Product""], EntityType: [""Product Batch""], Actor: []","MATCH (batch:Entity {EntityType: ""Product Batch""})<-[:CORR]-(startEvent:Event {Activity: ""Start Production""}) MATCH (batch)<-[:CORR]-(checkEvent:Event {Activity: ""Quality Check""})<-[:DF]-(startEvent) WHERE NOT EXISTS { MATCH (batch)<-[:CORR]-(packageEvent:Event {Activity: ""Package Product""}) MATCH (batch)<-[:CORR]-(shipEvent:Event {Activity: ""Ship Product""}) WHERE packageEvent.timestamp < shipEvent.timestamp } RETURN CASE WHEN COUNT(batch)>0 THEN false ELSE true END AS ruleSatisfied"
"Whenever an Order Object undergoes a ""Payment Processed"" event and the next recorded event is ""Order Packed"", then a ""Generate Invoice"" event must be completed before an ""Order Shipped"" event.","Activity: [""Payment Processed"", ""Order Packed"", ""Generate Invoice"", ""Order Shipped""], EntityType: [""Order Object""], Actor: []","MATCH (order:Entity {EntityType: ""Order Object""})<-[:CORR]-(paymentEvent:Event {Activity: ""Payment Processed""}) MATCH (order)<-[:CORR]-(packEvent:Event {Activity: ""Order Packed""})<-[:DF]-(paymentEvent) WHERE NOT EXISTS { MATCH (order)<-[:CORR]-(invoiceEvent:Event {Activity: ""Generate Invoice""}) MATCH (order)<-[:CORR]-(shipEvent:Event {Activity: ""Order Shipped""}) WHERE invoiceEvent.timestamp < shipEvent.timestamp } RETURN CASE WHEN COUNT(order)>0 THEN false ELSE true END AS ruleSatisfied"
"If a Shipment experiences a ""Customs Clearance"" event directly followed by a ""Ready for Delivery"" event, then a ""Final Inspection"" event must occur before a ""Delivery Completed"" event.","Activity: [""Customs Clearance"", ""Ready for Delivery"", ""Final Inspection"", ""Delivery Completed""], EntityType: [""Shipment""], Actor: []","MATCH (shipment:Entity {EntityType: ""Shipment""})<-[:CORR]-(customsEvent:Event {Activity: ""Customs Clearance""}) MATCH (shipment)<-[:CORR]-(readyEvent:Event {Activity: ""Ready for Delivery""})<-[:DF]-(customsEvent) WHERE NOT EXISTS {  MATCH (shipment)<-[:CORR]-(inspectionEvent:Event {Activity: ""Final Inspection""}) MATCH (shipment)<-[:CORR]-(deliveryEvent:Event {Activity: ""Delivery Completed""}) WHERE inspectionEvent.timestamp < deliveryEvent.timestamp } RETURN CASE WHEN COUNT(shipment)>0 THEN false ELSE true END AS ruleSatisfied"
"For every Warehouse Storage Unit, if an item undergoes a ""Check-in"" event and the next event is ""Storage Assignment"", then a ""Temperature Control Check"" must happen before a ""Stock Update"" event.","Activity: [""Check-in"", ""Storage Assignment"", ""Temperature Control Check"", ""Stock Update""], EntityType: [""Warehouse Storage Unit""], Actor: []","MATCH (storage:Entity {EntityType: ""Warehouse Storage Unit""})<-[:CORR]-(checkinEvent:Event {Activity: ""Check-in""}) MATCH (storage)<-[:CORR]-(assignmentEvent:Event {Activity: ""Storage Assignment""})<-[:DF]-(checkinEvent) WHERE NOT EXISTS { MATCH (storage)<-[:CORR]-(tempCheckEvent:Event {Activity: ""Temperature Control Check""}) MATCH (storage)<-[:CORR]-(stockUpdateEvent:Event {Activity: ""Stock Update""}) WHERE tempCheckEvent.timestamp < stockUpdateEvent.timestamp } RETURN CASE WHEN COUNT(storage)>0 THEN false ELSE true END AS ruleSatisfied"
"If a Device Instance completes a ""Software Installation"" event and the next event is ""System Reboot"", then a ""Security Patch Update"" must occur before an ""Operational Check"" event.","Activity: [""Software Installation"", ""System Reboot"", ""Security Patch Update"", ""Operational Check""], EntityType: [""Device Instance""], Actor: []","MATCH (device:Entity {EntityType: ""Device Instance""})<-[:CORR]-(installEvent:Event {Activity: ""Software Installation""}) MATCH (device)<-[:CORR]-(rebootEvent:Event {Activity: ""System Reboot""})<-[:DF]-(installEvent) WHERE NOT EXISTS { MATCH (device)<-[:CORR]-(patchEvent:Event {Activity: ""Security Patch Update""}) MATCH (device)<-[:CORR]-(checkEvent:Event {Activity: ""Operational Check""}) WHERE patchEvent.timestamp < checkEvent.timestamp } RETURN CASE WHEN COUNT(device)>0 THEN false ELSE true END AS ruleSatisfied"
"If a Vehicle Object undergoes a ""Pre-Inspection"" event and the next event is ""Assembly Completed"", then a ""Final Safety Check"" must occur before a ""Vehicle Dispatched"" event.","Activity: [""Pre-Inspection"", ""Assembly Completed"", ""Final Safety Check"", ""Vehicle Dispatched""], EntityType: [""Vehicle Object""], Actor: []","MATCH (vehicle:Entity {EntityType: ""Vehicle Object""})<-[:CORR]-(inspectEvent:Event {Activity: ""Pre-Inspection""}) MATCH (vehicle)<-[:CORR]-(assemblyEvent:Event {Activity: ""Assembly Completed""})<-[:DF]-(inspectEvent) WHERE NOT EXISTS { MATCH (vehicle)<-[:CORR]-(safetyEvent:Event {Activity: ""Final Safety Check""}) MATCH (vehicle)<-[:CORR]-(dispatchEvent:Event {Activity: ""Vehicle Dispatched""}) WHERE safetyEvent.Ttmestamp < dispatchEvent.timestamp } RETURN CASE WHEN COUNT(vehicle)>0 THEN false ELSE true END AS ruleSatisfied"
"Whenever a Data Backup System executes a ""Backup Started"" event and the next recorded event is ""Backup Completed"", then a ""Data Integrity Check"" must be performed before a ""Backup Archived"" event.","Activity: [""Backup Started"", ""Backup Completed"", ""Data Integrity Check"", ""Backup Archived""], EntityType: [""Data Backup System""], Actor: []","MATCH (backup:Entity {EntityType: ""Data Backup System""})<-[:CORR]-(startEvent:Event {Activity: ""Backup Started""}) MATCH (backup)<-[:CORR]-(completeEvent:Event {Activity: ""Backup Completed""})<-[:DF]-(startEvent) WHERE NOT EXISTS { MATCH (backup)<-[:CORR]-(checkEvent:Event {Activity: ""Data Integrity Check""}) MATCH (backup)<-[:CORR]-(archiveEvent:Event {Activity: ""Backup Archived""}) WHERE checkEvent.timestamp < archiveEvent.timestamp } RETURN CASE WHEN COUNT(backup)>0 THEN false ELSE true END AS ruleSatisfied"
"For every Energy Grid Node, if an ""Energy Demand Spike"" event is immediately followed by a ""Load Redistribution"" event, then a ""Grid Stability Check"" must take place before an ""Energy Supply Adjusted"" event.","Activity: [""Energy Demand Spike"", ""Load Redistribution"", ""Grid Stability Check"", ""Energy Supply Adjusted""], EntityType: [""Energy Grid Node""], Actor: []","MATCH (grid:Entity {EntityType: ""Energy Grid Node""})<-[:CORR]-(demandEvent:Event {Activity: ""Energy Demand Spike""}) MATCH (grid)<-[:CORR]-(redistributeEvent:Event {Activity: ""Load Redistribution""})<-[:DF]-(demandEvent) WHERE NOT EXISTS { MATCH (grid)<-[:CORR]-(stabilityEvent:Event {Activity: ""Grid Stability Check""}) MATCH (grid)<-[:CORR]-(supplyEvent:Event {Activity: ""Energy Supply Adjusted""}) WHERE stabilityEvent.timestamp < supplyEvent.timestamp } RETURN CASE WHEN COUNT(grid)>0 THEN false ELSE true END AS ruleSatisfied"
"If a Container Object experiences an ""Inbound Arrival"" event and the next event is ""Customs Processing"", then a ""Security Screening"" must be completed before a ""Container Released"" event.","Activity: [""Inbound Arrival"", ""Customs Processing"", ""Security Screening"", ""Container Released""], EntityType: [""Container Object""], Actor: []","MATCH (container:Entity {EntityType: ""Container Object""})<-[:CORR]-(arrivalEvent:Event {Activity: ""Inbound Arrival""}) MATCH (container)<-[:CORR]-(customsEvent:Event {Activity: ""Customs Processing""})<-[:DF]-(arrivalEvent) WHERE NOT EXISTS {  MATCH (container)<-[:CORR]-(securityEvent:Event {Activity: ""Security Screening""}) MATCH (container)<-[:CORR]-(releaseEvent:Event {Activity: ""Container Released""}) WHERE securityEvent.timestamp < releaseEvent.timestamp } RETURN CASE WHEN COUNT(container)>0 THEN false ELSE true END AS ruleSatisfied"
"If an IoT Sensor logs a ""Temperature Threshold Exceeded"" event and the next event is ""Cooling System Activated"", then a ""System Performance Log"" must be recorded before an ""Alert Reset"" event.","Activity: [""Temperature Threshold Exceeded"", ""Cooling System Activated"", ""System Performance Log"", ""Alert Reset""], EntityType: [""IoT Sensor""], Actor: []","MATCH (sensor:Entity {EntityType: ""IoT Sensor""})<-[:CORR]-(tempEvent:Event {Activity: ""Temperature Threshold Exceeded""}) MATCH (sensor)<-[:CORR]-(coolingEvent:Event {Activity: ""Cooling System Activated""})<-[:DF]-(tempEvent) WHERE NOT EXISTS { MATCH (sensor)<-[:CORR]-(logEvent:Event {Activity: ""System Performance Log""}) MATCH (sensor)<-[:CORR]-(resetEvent:Event {Activity: ""Alert Reset""}) WHERE logEvent.timestamp < resetEvent.timestamp } RETURN CASE WHEN COUNT(sensor)>0 THEN false ELSE true END AS ruleSatisfied"
"Whenever a customer books a hotel room, the payment must be completed within 3 days, and check-in must happen after the payment.","Activity: [""Book Room"", ""Complete Payment"", ""Check-In""], EntityType: [""Hotel Reservation""], Actor: []","MATCH (reservation:Entity {EntityType: ""Hotel Reservation""})<-[:CORR]-(bookEvent:Event {Activity: ""Book Room""}) WHERE NOT EXISTS{ MATCH (reservation)<-[:CORR]-(paymentEvent:Event {Activity: ""Complete Payment""}) WHERE paymentEvent.timestamp <= bookEvent.timestamp + duration({days: 3}) MATCH (reservation)<-[:CORR]-(checkInEvent:Event {Activity: ""Check-In""}) WHERE checkInEvent.timestamp > paymentEvent.timestamp } RETURN CASE WHEN COUNT(reservation)>0 THEN false ELSE true END AS ruleSatisfied"
"If an employee submits a leave request, one must approve it within 5 days, and the leave must begin only after approval.","Activity: [""Submit Leave"", ""Approve Leave"", ""Start Leave""], EntityType: [""Leave Request""], Actor: []","MATCH (leaveRequest:Entity {EntityType: ""Leave Request""})<-[:CORR]-(submitEvent:Event {Activity: ""Submit Leave""}) WHERE NOT EXISTS{ MATCH (leaveRequest)<-[:CORR]-(approveEvent:Event {Activity: ""Approve Leave""}) WHERE approveEvent.timestamp <= submitEvent.timestamp + duration({days: 5}) MATCH (leaveRequest)<-[:CORR]-(startEvent:Event {Activity: ""Start Leave""}) WHERE startEvent.timestamp > approveEvent.timestamp } RETURN CASE WHEN COUNT(leaveRequest)>0 THEN false ELSE true END AS ruleSatisfied"
"For every job application, if an interview is scheduled, then a hiring decision must be made within 14 days, and onboarding should happen afterward.","Activity: [""Schedule Interview"", ""Make Hiring Decision"", ""Onboarding""], EntityType: [""Job Application""], Actor: []","MATCH (application:Entity {EntityType: ""Job Application""})<-[:CORR]-(interviewEvent:Event {Activity: ""Schedule Interview""}) WHERE NOT EXISTS{ MATCH (application)<-[:CORR]-(decisionEvent:Event {Activity: ""Make Hiring Decision""}) WHERE decisionEvent.timestamp <= interviewEvent.timestamp + duration({days: 14}) MATCH (application)<-[:CORR]-(onboardEvent:Event {Activity: ""Onboarding""}) WHERE onboardEvent.timestamp > decisionEvent.timestamp } RETURN CASE WHEN COUNT(application)>0 THEN false ELSE true END AS ruleSatisfied"
"When a new user registers on the platform, their email must be verified within 2 hours, and account activation must occur only after verification.","Activity: [""Register User"", ""Verify Email"", ""Activate Account""], EntityType: [""User Registration""], Actor: []","MATCH (registration:Entity {EntityType: ""User Registration""})<-[:CORR]-(registerEvent:Event {Activity: ""Register User""}) WHERE NOT EXISTS{ MATCH (registration)<-[:CORR]-(verifyEvent:Event {Activity: ""Verify Email""}) WHERE verifyEvent.timestamp <= registerEvent.timestamp + duration({hours: 2}) MATCH (registration)<-[:CORR]-(activateEvent:Event {Activity: ""Activate Account""}) WHERE activateEvent.timestamp > verifyEvent.timestamp } RETURN CASE WHEN COUNT(registration)>0 THEN false ELSE true END AS ruleSatisfied"
"If a ticket is created in the support system, an agent must respond within 24 hours, and the issue must be resolved after the response.","Activity: [""Create Ticket"", ""Agent Responds"", ""Resolve Issue""], EntityType: [""Support Ticket""], Actor: []","MATCH (ticket:Entity {EntityType: ""Support Ticket""})<-[:CORR]-(createEvent:Event {Activity: ""Create Ticket""}) WHERE NOT EXISTS{ MATCH (ticket)<-[:CORR]-(respondEvent:Event {Activity: ""Agent Responds""}) WHERE respondEvent.timestamp <= createEvent.timestamp + duration({hours: 24}) MATCH (ticket)<-[:CORR]-(resolveEvent:Event {Activity: ""Resolve Issue""}) WHERE resolveEvent.timestamp > respondEvent.timestamp } RETURN CASE WHEN COUNT(ticket)>0 THEN false ELSE true END AS ruleSatisfied"
"Each patient who books a medical appointment must receive a confirmation within 6 hours, and the consultation must take place after confirmation.","Activity: [""Book Appointment"", ""Confirm Appointment"", ""Consultation""], EntityType: [""Medical Appointment""], Actor: []","MATCH (appointment:Entity {EntityType: ""Medical Appointment""})<-[:CORR]-(bookEvent:Event {Activity: ""Book Appointment""}) WHERE NOT EXISTS{ MATCH (appointment)<-[:CORR]-(confirmEvent:Event {Activity: ""Confirm Appointment""}) WHERE confirmEvent.timestamp <= bookEvent.timestamp + duration({hours: 6}) MATCH (appointment)<-[:CORR]-(consultEvent:Event {Activity: ""Consultation""}) WHERE consultEvent.timestamp > confirmEvent.timestamp } RETURN CASE WHEN COUNT(appointment)>0 THEN false ELSE true END AS ruleSatisfied"
"When a product is ordered, payment must be processed within 5 days, and shipment should follow.","Activity: [""Order Product"", ""Process Payment"", ""Ship Product""], EntityType: [""Product Order""], Actor: []","MATCH (order:Entity {EntityType: ""Product Order""})<-[:CORR]-(orderEvent:Event {Activity: ""Order Product""}) WHERE NOT EXISTS{ MATCH (order)<-[:CORR]-(paymentEvent:Event {Activity: ""Process Payment""}) WHERE paymentEvent.timestamp <= orderEvent.timestamp + duration({days: 5}) MATCH (order)<-[:CORR]-(shipEvent:Event {Activity: ""Ship Product""}) WHERE shipEvent.timestamp > paymentEvent.timestamp } RETURN CASE WHEN COUNT(order)>0 THEN false ELSE true END AS ruleSatisfied"
"Whenever a loan application is submitted, the approval process must be completed within 10 days, and the funds must be disbursed afterward.","Activity: [""Submit Loan"", ""Approve Loan"", ""Disburse Funds""], EntityType: [""Loan Application""], Actor: []","MATCH (loan:Entity {EntityType: ""Loan Application""})<-[:CORR]-(submitEvent:Event {Activity: ""Submit Loan""}) WHERE NOT EXISTS{ MATCH (loan)<-[:CORR]-(approveEvent:Event {Activity: ""Approve Loan""}) WHERE approveEvent.timestamp <= submitEvent.timestamp + duration({days: 10}) MATCH (loan)<-[:CORR]-(disburseEvent:Event {Activity: ""Disburse Funds""}) WHERE disburseEvent.timestamp > approveEvent.timestamp } RETURN CASE WHEN COUNT(loan)>0 THEN false ELSE true END AS ruleSatisfied"
"If an online course is purchased, access must be granted within 1 hour, and the certificate should be issued only after course completion.","Activity: [""Purchase Course"", ""Grant Access"", ""Issue Certificate""], EntityType: [""Course Purchase""], Actor: []","MATCH (course:Entity {EntityType: ""Course Purchase""})<-[:CORR]-(purchaseEvent:Event {Activity: ""Purchase Course""}) WHERE NOT EXISTS{ MATCH (course)<-[:CORR]-(accessEvent:Event {Activity: ""Grant Access""}) WHERE accessEvent.timestamp <= purchaseEvent.timestamp + duration({hours: 1}) MATCH (course)<-[:CORR]-(certificateEvent:Event {Activity: ""Issue Certificate""}) WHERE certificateEvent.timestamp > accessEvent.timestamp } RETURN CASE WHEN COUNT(course)>0 THEN false ELSE true END AS ruleSatisfied"
"When a car rental is booked, the deposit must be received within 2 days, and the vehicle should be handed over only afterward.","Activity: [""Book Rental"", ""Receive Deposit"", ""Hand Over Vehicle""], EntityType: [""Car Rental""], Actor: []","MATCH (rental:Entity {EntityType: ""Car Rental""})<-[:CORR]-(bookEvent:Event {Activity: ""Book Rental""}) WHERE NOT EXISTS{ MATCH (rental)<-[:CORR]-(depositEvent:Event {Activity: ""Receive Deposit""}) WHERE depositEvent.timestamp <= bookEvent.timestamp + duration({days: 2}) MATCH (rental)<-[:CORR]-(handoverEvent:Event {Activity: ""Hand Over Vehicle""}) WHERE handoverEvent.timestamp > depositEvent.timestamp } RETURN CASE WHEN COUNT(rental)>0 THEN false ELSE true END AS ruleSatisfied"
"For every Product Order, if a ""Create Order"" event occurs, then a ""Process Payment"" event must be completed within 5 days, and a ""Dispatch Order"" event must follow the payment.","Activity: [""Create Order"", ""Process Payment"", ""Dispatch Order""], EntityType: [""Product Order""], Actor: []","MATCH (order:Entity {EntityType: ""Product Order""})<-[:CORR]-(createEvent:Event {Activity: ""Create Order""}) WHERE NOT EXISTS{ MATCH (order)<-[:CORR]-(paymentEvent:Event {Activity: ""Process Payment""}) WHERE paymentEvent.timestamp <= createEvent.timestamp + duration({days: 5}) MATCH (order)<-[:CORR]-(dispatchEvent:Event {Activity: ""Dispatch Order""}) WHERE dispatchEvent.timestamp > paymentEvent.timestamp } RETURN CASE WHEN COUNT(order)>0 THEN false ELSE true END AS ruleSatisfied"
"If a Vehicle Rental undergoes a ""Book Rental"" event, then a ""Confirm Booking"" event must happen within 24 hours, and a ""Vehicle Pick-Up"" event must occur afterward.","Activity: [""Book Rental"", ""Confirm Booking"", ""Vehicle Pick-Up""], EntityType: [""Vehicle Rental""], Actor: []","MATCH (rental:Entity {EntityType: ""Vehicle Rental""})<-[:CORR]-(bookEvent:Event {Activity: ""Book Rental""}) WHERE NOT EXISTS{ MATCH (rental)<-[:CORR]-(confirmEvent:Event {Activity: ""Confirm Booking""}) WHERE confirmEvent.timestamp <= bookEvent.timestamp + duration({hours: 24}) MATCH (rental)<-[:CORR]-(pickupEvent:Event {Activity: ""Vehicle Pick-Up""}) WHERE pickupEvent.timestamp > confirmEvent.timestamp } RETURN CASE WHEN COUNT(rental)>0 THEN false ELSE true END AS ruleSatisfied"
"For every Warehouse Shipment, if a ""Receive Shipment"" event is recorded, then a ""Quality Check"" event must be conducted within 3 days, and a ""Stock Update"" event must follow.","Activity: [""Receive Shipment"", ""Quality Check"", ""Stock Update""], EntityType: [""Warehouse Shipment""], Actor: []","MATCH (shipment:Entity {EntityType: ""Warehouse Shipment""})<-[:CORR]-(receiveEvent:Event {Activity: ""Receive Shipment""}) WHERE NOT EXISTS{ MATCH (shipment)<-[:CORR]-(qualityEvent:Event {Activity: ""Quality Check""}) WHERE qualityEvent.timestamp <= receiveEvent.timestamp + duration({days: 3}) MATCH (shipment)<-[:CORR]-(stockEvent:Event {Activity: ""Stock Update""}) WHERE stockEvent.timestamp > qualityEvent.timestamp } RETURN CASE WHEN COUNT(shipment)>0 THEN false ELSE true END AS ruleSatisfied"
"When a Construction Project has a ""Sign Contract"" event, a ""Material Procurement"" event must be completed within 15 days, and a ""Start Construction"" event must follow.","Activity: [""Sign Contract"", ""Material Procurement"", ""Start Construction""], EntityType: [""Construction Project""], Actor: []","MATCH (project:Entity {EntityType: ""Construction Project""})<-[:CORR]-(contractEvent:Event {Activity: ""Sign Contract""}) WHERE NOT EXISTS{ MATCH (project)<-[:CORR]-(procureEvent:Event {Activity: ""Material Procurement""}) WHERE procureEvent.timestamp <= contractEvent.timestamp + duration({days: 15}) MATCH (project)<-[:CORR]-(startEvent:Event {Activity: ""Start Construction""}) WHERE startEvent.timestamp > procureEvent.timestamp } RETURN CASE WHEN COUNT(project)>0 THEN false ELSE true END AS ruleSatisfied"
"If a Bank Loan Application undergoes a ""Submit Loan Request"" event, a ""Credit Check"" event must occur within 10 days, followed by an ""Approval Decision"" event.","Activity: [""Submit Loan Request"", ""Credit Check"", ""Approval Decision""], EntityType: [""Bank Loan Application""], Actor: []","MATCH (loan:Entity {EntityType: ""Bank Loan Application""})<-[:CORR]-(submitEvent:Event {Activity: ""Submit Loan Request""}) WHERE NOT EXISTS{ MATCH (loan)<-[:CORR]-(creditEvent:Event {Activity: ""Credit Check""}) WHERE creditEvent.timestamp <= submitEvent.timestamp + duration({days: 10}) MATCH (loan)<-[:CORR]-(approvalEvent:Event {Activity: ""Approval Decision""}) WHERE approvalEvent.timestamp > creditEvent.timestamp } RETURN CASE WHEN COUNT(loan)>0 THEN false ELSE true END AS ruleSatisfied"
"Every IT System Upgrade that starts with a ""Schedule Maintenance"" event must have a ""Backup Data"" event within 6 hours, and a ""Deploy Upgrade"" event must follow.","Activity: [""Schedule Maintenance"", ""Backup Data"", ""Deploy Upgrade""], EntityType: [""IT System Upgrade""], Actor: []","MATCH (upgrade:Entity {EntityType: ""IT System Upgrade""})<-[:CORR]-(scheduleEvent:Event {Activity: ""Schedule Maintenance""}) WHERE NOT EXISTS{ MATCH (upgrade)<-[:CORR]-(backupEvent:Event {Activity: ""Backup Data""}) WHERE backupEvent.timestamp <= scheduleEvent.timestamp + duration({hours: 6}) MATCH (upgrade)<-[:CORR]-(deployEvent:Event {Activity: ""Deploy Upgrade""}) WHERE deployEvent.timestamp > backupEvent.timestamp } RETURN CASE WHEN COUNT(upgrade)>0 THEN false ELSE true END AS ruleSatisfied"
"When a Patent Application is submitted via a ""File Patent"" event, a ""Preliminary Review"" event must take place within 60 days, and a ""Final Examination"" event must follow.","Activity: [""File Patent"", ""Preliminary Review"", ""Final Examination""], EntityType: [""Patent Application""], Actor: []","MATCH (patent:Entity {EntityType: ""Patent Application""})<-[:CORR]-(fileEvent:Event {Activity: ""File Patent""}) WHERE NOT EXISTS{ MATCH (patent)<-[:CORR]-(reviewEvent:Event {Activity: ""Preliminary Review""}) WHERE reviewEvent.timestamp <= fileEvent.timestamp + duration({days: 60}) MATCH (patent)<-[:CORR]-(finalEvent:Event {Activity: ""Final Examination""}) WHERE finalEvent.timestamp > reviewEvent.timestamp } RETURN CASE WHEN COUNT(patent)>0 THEN false ELSE true END AS ruleSatisfied"
"If a Factory Production Batch has a ""Begin Manufacturing"" event, a ""Quality Inspection"" event must occur within 2 days, followed by a ""Batch Released"" event.","Activity: [""Begin Manufacturing"", ""Quality Inspection"", ""Batch Released""], EntityType: [""Factory Production Batch""], Actor: []","MATCH (batch:Entity {EntityType: ""Factory Production Batch""})<-[:CORR]-(beginEvent:Event {Activity: ""Begin Manufacturing""}) WHERE NOT EXISTS{ MATCH (batch)<-[:CORR]-(inspectEvent:Event {Activity: ""Quality Inspection""}) WHERE inspectEvent.timestamp <= beginEvent.timestamp + duration({days: 2}) MATCH (batch)<-[:CORR]-(releaseEvent:Event {Activity: ""Batch Released""}) WHERE releaseEvent.timestamp > inspectEvent.timestamp } RETURN CASE WHEN COUNT(batch)>0 THEN false ELSE true END AS ruleSatisfied"
"For every Software Deployment, if a ""Push Code"" event occurs, a ""Automated Testing"" event must follow within 8 hours, and a ""Go Live"" event must take place afterward.","Activity: [""Push Code"", ""Automated Testing"", ""Go Live""], EntityType: [""Software Deployment""], Actor: []","MATCH (deployment:Entity {EntityType: ""Software Deployment""})<-[:CORR]-(pushEvent:Event {Activity: ""Push Code""}) WHERE NOT EXISTS{ MATCH (deployment)<-[:CORR]-(testEvent:Event {Activity: ""Automated Testing""}) WHERE testEvent.timestamp <= pushEvent.timestamp + duration({hours: 8}) MATCH (deployment)<-[:CORR]-(liveEvent:Event {Activity: ""Go Live""}) WHERE liveEvent.timestamp > testEvent.timestamp } RETURN CASE WHEN COUNT(deployment)>0 THEN false ELSE true END AS ruleSatisfied"
"When a Construction Permit undergoes a ""Submit Permit Application"" event, a ""Initial Review"" event must take place within 14 days, and a ""Permit Issued"" event must happen afterward.","Activity: [""Submit Permit Application"", ""Initial Review"", ""Permit Issued""], EntityType: [""Construction Permit""], Actor: []","MATCH (permit:Entity {EntityType: ""Construction Permit""})<-[:CORR]-(submitEvent:Event {Activity: ""Submit Permit Application""}) WHERE NOT EXISTS{ MATCH (permit)<-[:CORR]-(reviewEvent:Event {Activity: ""Initial Review""}) WHERE reviewEvent.timestamp <= submitEvent.timestamp + duration({days: 14}) MATCH (permit)<-[:CORR]-(issueEvent:Event {Activity: ""Permit Issued""}) WHERE issueEvent.timestamp > reviewEvent.timestamp } RETURN CASE WHEN COUNT(permit)>0 THEN false ELSE true END AS ruleSatisfied"
No ticket bookings are allowed on Saturdays.,"Activity: [""Book Ticket""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Book Ticket""}) WHERE date(e.timestamp).dayOfWeek = 6 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Payments must not be processed on Sundays.,"Activity: [""Process Payment""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Process Payment""}) WHERE date(e.timestamp).dayOfWeek = 7 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Product shipments are forbidden on Mondays.,"Activity: [""Ship Product""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Ship Product""}) WHERE date(e.timestamp).dayOfWeek = 1 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Customer support tickets cannot be closed on Tuesdays.,"Activity: [""Close Support Ticket""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Close Support Ticket""}) WHERE date(e.timestamp).dayOfWeek = 2 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Inventory updates are not permitted on Wednesdays.,"Activity: [""Update Inventory""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Update Inventory""}) WHERE date(e.timestamp).dayOfWeek = 3 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Employee onboarding is prohibited on Thursdays.,"Activity: [""Onboard Employee""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Onboard Employee""}) WHERE date(e.timestamp).dayOfWeek = 4 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Maintenance tasks are not allowed on Fridays.,"Activity: [""Perform Maintenance""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Perform Maintenance""}) WHERE date(e.timestamp).dayOfWeek = 5 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Feedback surveys must not be sent on Saturdays.,"Activity: [""Send Feedback Survey""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Send Feedback Survey""}) WHERE date(e.timestamp).dayOfWeek = 6 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
System backups are banned on Sundays.,"Activity: [""Initiate System Backup""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Initiate System Backup""}) WHERE date(e.timestamp).dayOfWeek = 7 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Order confirmation events are prohibited on Fridays.,"Activity: [""Confirm Order""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Confirm Order""}) WHERE date(e.timestamp).dayOfWeek = 5 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
"It is strictly forbidden to perform ""Resolve Customer Complaint"" on Sundays.","Activity: [""Resolve Customer Complaint""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Resolve Customer Complaint""}) WHERE date(e.timestamp).dayOfWeek = 7 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
No employee training sessions should be scheduled on Mondays.,"Activity: [""Schedule Training Session""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Schedule Training Session""}) WHERE date(e.timestamp).dayOfWeek = 1 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
"On Tuesdays, activity ""Update Cusotmer Record"" is not allowed.","Activity: [""Update Customer Record""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Update Customer Record""}) WHERE date(e.timestamp).dayOfWeek = 2 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
No system updates have been performed on Wednesdays.,"Activity: [""Perform System Update""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Perform System Update""}) WHERE date(e.timestamp).dayOfWeek = 3 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Activity Process Refund may not occur on Thursdays.,"Activity: [""Process Refund""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Process Refund""}) WHERE date(e.timestamp).dayOfWeek = 4 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
No customer onboarding activities are permitted on Fridays.,"Activity: [""Onboard Customer""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Onboard Customer""}) WHERE date(e.timestamp).dayOfWeek = 5 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Saturdays are not for conducting performance reviews.,"Activity: [""Conduct Performance Review""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Conduct Performance Review""}) WHERE date(e.timestamp).dayOfWeek = 6 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
No data exports should be initiated on Sundays.,"Activity: [""Initiate Data Export""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Initiate Data Export""}) WHERE date(e.timestamp).dayOfWeek = 7 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
"""Confirm Order"" may not take place between 10 PM and 6 AM.","Activity: [""Confirm Order""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Confirm Order""}) WHERE time(e.timestamp).hour >= 22 OR time(e.timestamp).hour < 6 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
"Events of type ""Book Ticket"" are prohibited between 11 PM and 5 AM.","Activity: [""Book Ticket""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Book Ticket""}) WHERE time(e.timestamp).hour >= 23 OR time(e.timestamp).hour < 5 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Payments must not be processed between 9 PM and 7 AM.,"Activity: [""Process Payment""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Process Payment""}) WHERE time(e.timestamp).hour >= 21 OR time(e.timestamp).hour < 7 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Product shipments are forbidden between 8 AM and 4 PM.,"Activity: [""Ship Product""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Ship Product""}) WHERE time(e.timestamp).hour >= 8 AND time(e.timestamp).hour < 16 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Inventory updates are not permitted between 7 PM and 5 AM.,"Activity: [""Update Inventory""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Update Inventory""}) WHERE time(e.timestamp).hour >= 19 OR time(e.timestamp).hour < 5 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
"Between 6PM and 6AM, employee onboarding is prohibited.","Activity: [""Onboard Employee""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Onboard Employee""}) WHERE time(e.timestamp).hour >= 18 OR time(e.timestamp).hour < 6 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Maintenance tasks are not allowed between 10 AM and 4 PM.,"Activity: [""Perform Maintenance""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Perform Maintenance""}) WHERE time(e.timestamp).hour <= 16 AND time(e.timestamp).hour > 10 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
System backups are banned between 9 PM and 5 AM.,"Activity: [""Initiate System Backup""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Initiate System Backup""}) WHERE time(e.timestamp).hour >= 21 OR time(e.timestamp).hour < 5 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
No financial transactions should be processed between 8 AM and 6 PM.,"Activity: [""Process Financial Transaction""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Process Financial Transaction""}) WHERE time(e.timestamp).hour <= 18 AND time(e.timestamp).hour > 8 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
It is not allowed to approve invoices between 7 PM and 7 AM.,"Activity: [""Approve Invoice""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Approve Invoice""}) WHERE time(e.timestamp).hour >= 19 OR time(e.timestamp).hour < 7 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Creating new user accounts is forbidden between 10 PM and 8 AM.,"Activity: [""Create User Account""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Create User Account""}) WHERE time(e.timestamp).hour >= 22 OR time(e.timestamp).hour < 8 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
No product returns should be processed between 11 PM and 9 AM.,"Activity: [""Process Product Return""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Process Product Return""}) WHERE time(e.timestamp).hour >= 23 OR time(e.timestamp).hour < 9 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
No marketing campaigns should be initiated between 10 PM and 6 AM.,"Activity: [""Initiate Marketing Campaign""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Initiate Marketing Campaign""}) WHERE time(e.timestamp).hour >= 22 OR time(e.timestamp).hour < 6 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
"Activity ""Resolve Customer Complaint"" is strictly forbidden between 12 AM and 8 PM.","Activity: [""Resolve Customer Complaint""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Resolve Customer Complaint""}) WHERE time(e.timestamp).hour >= 12 AND time(e.timestamp).hour < 20 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
No employee training sessions should be scheduled between 7 AM and 7 PM.,"Activity: [""Schedule Training Session""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Schedule Training Session""}) WHERE time(e.timestamp).hour <= 7 AND time(e.timestamp).hour > 19 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
No system updates should be performed between 9 PM and 5 AM.,"Activity: [""Perform System Update""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Perform System Update""}) WHERE time(e.timestamp).hour >= 21 OR time(e.timestamp).hour < 5 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
No customer onboarding activities are permitted between 11 PM and 7 AM.,"Activity: [""Onboard Customer""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Onboard Customer""}) WHERE time(e.timestamp).hour >= 23 OR time(e.timestamp).hour < 7 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
"If a User is associated with more than 10 Posts, the user must be correlated with at least 3 Tags.","Activity: [], EntityType: [""User"", ""Post"", ""Tag""], Actor: []","MATCH (ent1:Entity {EntityType: ""User""})-[:REL]-(ent2:Entity {EntityType: ""Post""}) WITH ent1, COUNT(DISTINCT ent2) AS postCount WHERE postCount > 10 OPTIONAL MATCH (ent1)-[:REL]-(ent3:Entity {EntityType: ""Tag""}) WITH ent1, COUNT(DISTINCT ent3) AS tagCount WHERE tagCount < 3 RETURN CASE WHEN COUNT(ent1) > 0 THEN false ELSE true END AS ruleHolds"
A Student with more than 8 Assignments must have at least 4 Submissions.,"Activity: [], EntityType: [""Student"", ""Assignment"", ""Submission""], Actor: []","MATCH (ent1:Entity {EntityType: ""Student""})-[:REL]-(ent2:Entity {EntityType: ""Assignment""}) WITH ent1, COUNT(DISTINCT ent2) AS assignmentCount WHERE assignmentCount > 8 OPTIONAL MATCH (ent1)-[:REL]-(ent3:Entity {EntityType: ""Submission""}) WITH ent1, COUNT(DISTINCT ent3) AS submissionCount WHERE submissionCount < 4 RETURN CASE WHEN COUNT(ent1) > 0 THEN false ELSE true END AS ruleHolds"
"If a Product is associated with more than 20 Reviews, the product must be correlated with at least 5 Ratings.","Activity: [], EntityType: [""Product"", ""Review"", ""Rating""], Actor: []","MATCH (ent1:Entity {EntityType: ""Product""})-[:REL]-(ent2:Entity {EntityType: ""Review""}) WITH ent1, COUNT(DISTINCT ent2) AS reviewCount WHERE reviewCount > 20 OPTIONAL MATCH (ent1)-[:REL]-(ent3:Entity {EntityType: ""Rating""}) WITH ent1, COUNT(DISTINCT ent3) AS ratingCount WHERE ratingCount < 5 RETURN CASE WHEN COUNT(ent1) > 0 THEN false ELSE true END AS ruleHolds"
A Project with more than 15 Tasks must have at least 6 Milestones.,"Activity: [], EntityType: [""Project"", ""Task"", ""Milestone""], Actor: []","MATCH (ent1:Entity {EntityType: ""Project""})-[:REL]-(ent2:Entity {EntityType: ""Task""}) WITH ent1, COUNT(DISTINCT ent2) AS taskCount WHERE taskCount > 15 OPTIONAL MATCH (ent1)-[:REL]-(ent3:Entity {EntityType: ""Milestone""}) WITH ent1, COUNT(DISTINCT ent3) AS milestoneCount WHERE milestoneCount < 6 RETURN CASE WHEN COUNT(ent1) > 0 THEN false ELSE true END AS ruleHolds"
"If a Customer has more than 3 Complaints, they must be associated with at least 2 Resolutions.","Activity: [], EntityType: [""Customer"", ""Complaint"", ""Resolution""], Actor: []","MATCH (ent1:Entity {EntityType: ""Customer""})-[:REL]-(ent2:Entity {EntityType: ""Complaint""}) WITH ent1, COUNT(DISTINCT ent2) AS complaintCount WHERE complaintCount > 3 OPTIONAL MATCH (ent1)-[:REL]-(ent3:Entity {EntityType: ""Resolution""}) WITH ent1, COUNT(DISTINCT ent3) AS resolutionCount WHERE resolutionCount < 2 RETURN CASE WHEN COUNT(ent1) > 0 THEN false ELSE true END AS ruleHolds"
"If a Customer is associated with more than 5 Orders, the customer must be correlated with at least 2 Payment Methods.","Activity: [], EntityType: [""Customer"", ""Order"", ""Payment Method""], Actor: []","MATCH (ent1:Entity {EntityType: ""Customer""})-[:REL]-(ent2:Entity {EntityType: ""Order""}) WITH ent1, COUNT(DISTINCT ent2) AS orderCount WHERE orderCount > 5 OPTIONAL MATCH (ent1)-[:REL]-(ent3:Entity {EntityType: ""Payment Method""}) WITH ent1, COUNT(DISTINCT ent3) AS paymentMethodCount WHERE paymentMethodCount < 2 RETURN CASE WHEN COUNT(ent1) > 0 THEN false ELSE true END AS ruleHolds"
"If a Library has more than 100 Books, it must have at least 5 Librarians.","Activity: [], EntityType: [""Library"", ""Book"", ""Librarian""], Actor: []","MATCH (ent1:Entity {EntityType: ""Library""})-[:REL]-(ent2:Entity {EntityType: ""Book""}) WITH ent1, COUNT(DISTINCT ent2) AS bookCount WHERE bookCount > 100 OPTIONAL MATCH (ent1)-[:REL]-(ent3:Entity {EntityType: ""Librarian""}) WITH ent1, COUNT(DISTINCT ent3) AS librarianCount WHERE librarianCount < 5 RETURN CASE WHEN COUNT(ent1) > 0 THEN false ELSE true END AS ruleHolds"
A Hospital with more than 50 Patients must have at least 10 Doctors.,"Activity: [], EntityType: [""Hospital"", ""Patient"", ""Doctor""], Actor: []","MATCH (ent1:Entity {EntityType: ""Hospital""})-[:REL]-(ent2:Entity {EntityType: ""Patient""}) WITH ent1, COUNT(DISTINCT ent2) AS patientCount WHERE patientCount > 50 OPTIONAL MATCH (ent1)-[:REL]-(ent3:Entity {EntityType: ""Doctor""}) WITH ent1, COUNT(DISTINCT ent3) AS doctorCount WHERE doctorCount < 10 RETURN CASE WHEN COUNT(ent1) > 0 THEN false ELSE true END AS ruleHolds"
"If a Restaurant has more than 30 Menu Items, it must have at least 3 Chefs.","Activity: [], EntityType: [""Restaurant"", ""Menu Item"", ""Chef""], Actor: []","MATCH (ent1:Entity {EntityType: ""Restaurant""})-[:REL]-(ent2:Entity {EntityType: ""Menu Item""}) WITH ent1, COUNT(DISTINCT ent2) AS menuItemCount WHERE menuItemCount > 30 OPTIONAL MATCH (ent1)-[:REL]-(ent3:Entity {EntityType: ""Chef""}) WITH ent1, COUNT(DISTINCT ent3) AS chefCount WHERE chefCount < 3 RETURN CASE WHEN COUNT(ent1) > 0 THEN false ELSE true END AS ruleHolds"
A School with more than 20 Classes must have at least 5 Teachers.,"Activity: [], EntityType: [""School"", ""Class"", ""Teacher""], Actor: []","MATCH (ent1:Entity {EntityType: ""School""})-[:REL]-(ent2:Entity {EntityType: ""Class""}) WITH ent1, COUNT(DISTINCT ent2) AS classCount WHERE classCount > 20 OPTIONAL MATCH (ent1)-[:REL]-(ent3:Entity {EntityType: ""Teacher""}) WITH ent1, COUNT(DISTINCT ent3) AS teacherCount WHERE teacherCount < 5 RETURN CASE WHEN COUNT(ent1) > 0 THEN false ELSE true END AS ruleHolds"
"If a Warehouse has more than 200 Products, it must have at least 10 Suppliers.","Activity: [], EntityType: [""Warehouse"", ""Product"", ""Supplier""], Actor: []","MATCH (ent1:Entity {EntityType: ""Warehouse""})-[:REL]-(ent2:Entity {EntityType: ""Product""}) WITH ent1, COUNT(DISTINCT ent2) AS productCount WHERE productCount > 200 OPTIONAL MATCH (ent1)-[:REL]-(ent3:Entity {EntityType: ""Supplier""}) WITH ent1, COUNT(DISTINCT ent3) AS supplierCount WHERE supplierCount < 10 RETURN CASE WHEN COUNT(ent1) > 0 THEN false ELSE true END AS ruleHolds"
A Gym with more than 100 Members must have at least 5 Trainers.,"Activity: [], EntityType: [""Gym"", ""Member"", ""Trainer""], Actor: []","MATCH (ent1:Entity {EntityType: ""Gym""})-[:REL]-(ent2:Entity {EntityType: ""Member""}) WITH ent1, COUNT(DISTINCT ent2) AS memberCount WHERE memberCount > 100 OPTIONAL MATCH (ent1)-[:REL]-(ent3:Entity {EntityType: ""Trainer""}) WITH ent1, COUNT(DISTINCT ent3) AS trainerCount WHERE trainerCount < 5 RETURN CASE WHEN COUNT(ent1) > 0 THEN false ELSE true END AS ruleHolds"
"If a Museum has more than 50 Exhibits, it must have at least 3 Curators.","Activity: [], EntityType: [""Museum"", ""Exhibit"", ""Curator""], Actor: []","MATCH (ent1:Entity {EntityType: ""Museum""})-[:REL]-(ent2:Entity {EntityType: ""Exhibit""}) WITH ent1, COUNT(DISTINCT ent2) AS exhibitCount WHERE exhibitCount > 50 OPTIONAL MATCH (ent1)-[:REL]-(ent3:Entity {EntityType: ""Curator""}) WITH ent1, COUNT(DISTINCT ent3) AS curatorCount WHERE curatorCount < 3 RETURN CASE WHEN COUNT(ent1) > 0 THEN false ELSE true END AS ruleHolds"
A Zoo with more than 30 Animals must have at least 4 Zookeepers.,"Activity: [], EntityType: [""Zoo"", ""Animal"", ""Zookeeper""], Actor: []","MATCH (ent1:Entity {EntityType: ""Zoo""})-[:REL]-(ent2:Entity {EntityType: ""Animal""}) WITH ent1, COUNT(DISTINCT ent2) AS animalCount WHERE animalCount > 30 OPTIONAL MATCH (ent1)-[:REL]-(ent3:Entity {EntityType: ""Zookeeper""}) WITH ent1, COUNT(DISTINCT ent3) AS zookeeperCount WHERE zookeeperCount < 4 RETURN CASE WHEN COUNT(ent1) > 0 THEN false ELSE true END AS ruleHolds"
"If a Theater has more than 20 Shows, it must have at least 3 Directors.","Activity: [], EntityType: [""Theater"", ""Show"", ""Director""], Actor: []","MATCH (ent1:Entity {EntityType: ""Theater""})-[:REL]-(ent2:Entity {EntityType: ""Show""}) WITH ent1, COUNT(DISTINCT ent2) AS showCount WHERE showCount > 20 OPTIONAL MATCH (ent1)-[:REL]-(ent3:Entity {EntityType: ""Director""}) WITH ent1, COUNT(DISTINCT ent3) AS directorCount WHERE directorCount < 3 RETURN CASE WHEN COUNT(ent1) > 0 THEN false ELSE true END AS ruleHolds"
A Farm with more than 50 Animals must have at least 5 Farmers.,"Activity: [], EntityType: [""Farm"", ""Animal"", ""Farmer""], Actor: []","MATCH (ent1:Entity {EntityType: ""Farm""})-[:REL]-(ent2:Entity {EntityType: ""Animal""}) WITH ent1, COUNT(DISTINCT ent2) AS animalCount WHERE animalCount > 50 OPTIONAL MATCH (ent1)-[:REL]-(ent3:Entity {EntityType: ""Farmer""}) WITH ent1, COUNT(DISTINCT ent3) AS farmerCount WHERE farmerCount < 5 RETURN CASE WHEN COUNT(ent1) > 0 THEN false ELSE true END AS ruleHolds"
"On average, no more than 5 events of type ""Order Creation"" may occur on a Saturday.","Activity: [""Order Creation""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Order Creation""}) WHERE date(e.timestamp).dayOfWeek = 6 WITH date(e.timestamp) AS orderDate, COUNT(e) AS ordersPerDay WITH AVG(ordersPerDay) AS avgOrders RETURN avgOrders <= 5 AS ruleSatisfied"
"The average number of ""Customer Support"" events on Sundays must not exceed 3.","Activity: [""Customer Support""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Customer Support""}) WHERE date(e.timestamp).dayOfWeek = 7 WITH date(e.timestamp) AS eventDate, COUNT(e) AS eventsPerDay WITH AVG(eventsPerDay) AS avgEvents RETURN avgEvents <= 3 AS ruleSatisfied"
"Ensure that, on average, fewer than 10 ""Product Delivery"" events happen on Mondays.","Activity: [""Product Delivery""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Product Delivery""}) WHERE date(e.timestamp).dayOfWeek = 1 WITH date(e.timestamp) AS eventDate, COUNT(e) AS eventsPerDay WITH AVG(eventsPerDay) AS avgEvents RETURN avgEvents <= 10 AS ruleSatisfied"
"No more than 2 ""Training Session"" events, on average, should take place on Tuesdays.","Activity: [""Training Session""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Training Session""}) WHERE date(e.timestamp).dayOfWeek = 2 WITH date(e.timestamp) AS eventDate, COUNT(e) AS eventsPerDay WITH AVG(eventsPerDay) AS avgEvents RETURN avgEvents <= 2 AS ruleSatisfied"
"The average count of ""Order Cancellation"" events on Wednesdays must stay below 7.","Activity: [""Order Cancellation""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Order Cancellation""}) WHERE date(e.timestamp).dayOfWeek = 3 WITH date(e.timestamp) AS eventDate, COUNT(e) AS eventsPerDay WITH AVG(eventsPerDay) AS avgEvents RETURN avgEvents <= 7 AS ruleSatisfied"
"On Thursdays, the average number of ""Payment Processing"" events should not surpass 4.","Activity: [""Payment Processing""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Payment Processing""}) WHERE date(e.timestamp).dayOfWeek = 4 WITH date(e.timestamp) AS eventDate, COUNT(e) AS eventsPerDay WITH AVG(eventsPerDay) AS avgEvents RETURN avgEvents <= 4 AS ruleSatisfied"
"Fridays should not see more than 6 ""Inventory Update"" events on average.","Activity: [""Inventory Update""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Inventory Update""}) WHERE date(e.timestamp).dayOfWeek = 5 WITH date(e.timestamp) AS eventDate, COUNT(e) AS eventsPerDay WITH AVG(eventsPerDay) AS avgEvents RETURN avgEvents <= 6 AS ruleSatisfied"
"The average number of ""Shipment Dispatch"" events on Saturdays must remain under 8.","Activity: [""Shipment Dispatch""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Shipment Dispatch""}) WHERE date(e.timestamp).dayOfWeek = 6 WITH date(e.timestamp) AS eventDate, COUNT(e) AS eventsPerDay WITH AVG(eventsPerDay) AS avgEvents RETURN avgEvents <= 8 AS ruleSatisfied"
"On Sundays, the average count of ""Maintenance Activity"" events should not exceed 1.","Activity: [""Maintenance Activity""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Maintenance Activity""}) WHERE date(e.timestamp).dayOfWeek = 7 WITH date(e.timestamp) AS eventDate, COUNT(e) AS eventsPerDay WITH AVG(eventsPerDay) AS avgEvents RETURN avgEvents <= 1 AS ruleSatisfied"
"On Tuesdays, the average number of email campaigns sent must stay below 5.","Activity: [""Email Campaign""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Email Campaign""}) WHERE date(e.timestamp).dayOfWeek = 2 WITH date(e.timestamp) AS eventDate, COUNT(e) AS eventsPerDay WITH AVG(eventsPerDay) AS avgEvents RETURN avgEvents <= 5 AS ruleSatisfied"
The average number of feedback surveys collected on Wednesdays should not surpass 4.,"Activity: [""Feedback Collection""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Feedback Collection""}) WHERE date(e.timestamp).dayOfWeek = 3 WITH date(e.timestamp) AS eventDate, COUNT(e) AS eventsPerDay WITH AVG(eventsPerDay) AS avgEvents RETURN avgEvents <= 4 AS ruleSatisfied"
"On Thursdays, ensure that the average number of bug fixes does not exceed 6.","Activity: [""Bug Fix""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Bug Fix""}) WHERE date(e.timestamp).dayOfWeek = 4 WITH date(e.timestamp) AS eventDate, COUNT(e) AS eventsPerDay WITH AVG(eventsPerDay) AS avgEvents RETURN avgEvents <= 6 AS ruleSatisfied"
The average count of server maintenance tasks on Fridays must remain under 7.,"Activity: [""Server Maintenance""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Server Maintenance""}) WHERE date(e.timestamp).dayOfWeek = 5 WITH date(e.timestamp) AS eventDate, COUNT(e) AS eventsPerDay WITH AVG(eventsPerDay) AS avgEvents RETURN avgEvents <= 7 AS ruleSatisfied"
"On Saturdays, the average number of orders processed should not go above 5.","Activity: [""Order Processing""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Order Processing""}) WHERE date(e.timestamp).dayOfWeek = 6 WITH date(e.timestamp) AS eventDate, COUNT(e) AS eventsPerDay WITH AVG(eventsPerDay) AS avgEvents RETURN avgEvents <= 5 AS ruleSatisfied"
Ensure that the average number of new customer onboarding tasks on Sundays is no more than 3.,"Activity: [""Customer Onboarding""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Customer Onboarding""}) WHERE date(e.timestamp).dayOfWeek = 7 WITH date(e.timestamp) AS eventDate, COUNT(e) AS eventsPerDay WITH AVG(eventsPerDay) AS avgEvents RETURN avgEvents <= 3 AS ruleSatisfied"
"On Mondays, the average number of product launches must not exceed 2.","Activity: [""Product Launch""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Product Launch""}) WHERE date(e.timestamp).dayOfWeek = 1 WITH date(e.timestamp) AS eventDate, COUNT(e) AS eventsPerDay WITH AVG(eventsPerDay) AS avgEvents RETURN avgEvents <= 2 AS ruleSatisfied"
"On Saturdays, the average number of ""Order Processing"" events should not go above 5.","Activity: [""Order Processing""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Order Processing""}) WHERE date(e.timestamp).dayOfWeek = 6 WITH date(e.timestamp) AS eventDate, COUNT(e) AS eventsPerDay WITH AVG(eventsPerDay) AS avgEvents RETURN avgEvents <= 5 AS ruleSatisfied"
"Ensure that the average number of ""Customer Onboarding"" events on Sundays is no more than 3.","Activity: [""Customer Onboarding""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Customer Onboarding""}) WHERE date(e.timestamp).dayOfWeek = 7 WITH date(e.timestamp) AS eventDate, COUNT(e) AS eventsPerDay WITH AVG(eventsPerDay) AS avgEvents RETURN avgEvents <= 3 AS ruleSatisfied"
"On Mondays, the average number of ""Product Launch"" events must not exceed 2.","Activity: [""Product Launch""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Product Launch""}) WHERE date(e.timestamp).dayOfWeek = 1 WITH date(e.timestamp) AS eventDate, COUNT(e) AS eventsPerDay WITH AVG(eventsPerDay) AS avgEvents RETURN avgEvents <= 2 AS ruleSatisfied"
"In each week, no more than 3 Create Order events may occur between Monday and Friday.","Activity: [""Create Order""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Create Order""}) WHERE date(e.timestamp).dayOfWeek >= 1 AND date(e.timestamp).dayOfWeek <= 5 WITH date(e.timestamp).year AS year, date(e.timestamp).week AS week, COUNT(e) AS eventsPerWeek RETURN CASE WHEN MAX(eventsPerWeek) > 3 THEN false ELSE true END AS ruleSatisfied"
"Ensure that, in any given week, there are no more than 5 instances of customer support interactions from Tuesday to Thursday.","Activity: [""Customer Support""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Customer Support""}) WHERE date(e.timestamp).dayOfWeek >= 2 AND date(e.timestamp).dayOfWeek <= 4 WITH date(e.timestamp).year AS year, date(e.timestamp).week AS week, COUNT(e) AS eventsPerWeek RETURN CASE WHEN MAX(eventsPerWeek) > 5 THEN false ELSE true END AS ruleSatisfied"
The number of product delivery events between Wednesday and Saturday must not exceed 4 in any week.,"Activity: [""Product Delivery""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Product Delivery""}) WHERE date(e.timestamp).dayOfWeek >= 3 AND date(e.timestamp).dayOfWeek <= 6 WITH date(e.timestamp).year AS year, date(e.timestamp).week AS week, COUNT(e) AS eventsPerWeek RETURN CASE WHEN MAX(eventsPerWeek) > 4 THEN false ELSE true END AS ruleSatisfied"
No more than 2 training sessions are allowed from Friday to Sunday in a single week.,"Activity: [""Training Session""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Training Session""}) WHERE date(e.timestamp).dayOfWeek >= 5 AND date(e.timestamp).dayOfWeek <= 7 WITH date(e.timestamp).year AS year, date(e.timestamp).week AS week, COUNT(e) AS eventsPerWeek RETURN CASE WHEN MAX(eventsPerWeek) > 2 THEN false ELSE true END AS ruleSatisfied"
"In any week, the count of payment processing events between Monday and Wednesday should not surpass 6.","Activity: [""Payment Processing""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Payment Processing""}) WHERE date(e.timestamp).dayOfWeek >= 1 AND date(e.timestamp).dayOfWeek <= 3 WITH date(e.timestamp).year AS year, date(e.timestamp).week AS week, COUNT(e) AS eventsPerWeek RETURN CASE WHEN MAX(eventsPerWeek) > 6 THEN false ELSE true END AS ruleSatisfied"
"Ensure that, during weekends (Saturday and Sunday), no more than 1 system update event occurs.","Activity: [""System Update""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""System Update""}) WHERE date(e.timestamp).dayOfWeek >= 6 AND date(e.timestamp).dayOfWeek <= 7 WITH date(e.timestamp).year AS year, date(e.timestamp).week AS week, COUNT(e) AS eventsPerWeek RETURN CASE WHEN MAX(eventsPerWeek) > 1 THEN false ELSE true END AS ruleSatisfied"
The maximum number of shipment dispatch events allowed between Thursday and Saturday in a week is 3.,"Activity: [""Shipment Dispatch""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Shipment Dispatch""}) WHERE date(e.timestamp).dayOfWeek >= 4 AND date(e.timestamp).dayOfWeek <= 6 WITH date(e.timestamp).year AS year, date(e.timestamp).week AS week, COUNT(e) AS eventsPerWeek RETURN CASE WHEN MAX(eventsPerWeek) > 3 THEN false ELSE true END AS ruleSatisfied"
"In each week, the number of inventory update events from Tuesday to Friday must not exceed 7.","Activity: [""Inventory Update""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Inventory Update""}) WHERE date(e.timestamp).dayOfWeek >= 2 AND date(e.timestamp).dayOfWeek <= 5 WITH date(e.timestamp).year AS year, date(e.timestamp).week AS week, COUNT(e) AS eventsPerWeek RETURN CASE WHEN MAX(eventsPerWeek) > 7 THEN false ELSE true END AS ruleSatisfied"
No more than 4 maintenance activity events are permitted between Monday and Thursday in any given week.,"Activity: [""Maintenance Activity""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Maintenance Activity""}) WHERE date(e.timestamp).dayOfWeek >= 1 AND date(e.timestamp).dayOfWeek <= 4 WITH date(e.timestamp).year AS year, date(e.timestamp).week AS week, COUNT(e) AS eventsPerWeek RETURN CASE WHEN MAX(eventsPerWeek) > 4 THEN false ELSE true END AS ruleSatisfied"
The weekly limit for user registration events between Wednesday and Friday is 5.,"Activity: [""User Registration""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""User Registration""}) WHERE date(e.timestamp).dayOfWeek >= 3 AND date(e.timestamp).dayOfWeek <= 5 WITH date(e.timestamp).year AS year, date(e.timestamp).week AS week, COUNT(e) AS eventsPerWeek RETURN CASE WHEN MAX(eventsPerWeek) > 5 THEN false ELSE true END AS ruleSatisfied"
No more than 3 events of type Create Order are allowed between Monday and Friday in any week.,"Activity: [""Create Order""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Create Order""}) WHERE date(e.timestamp).dayOfWeek >= 1 AND date(e.timestamp).dayOfWeek <= 5 WITH date(e.timestamp).year AS year, date(e.timestamp).week AS week, COUNT(e) AS eventsPerWeek RETURN CASE WHEN MAX(eventsPerWeek) > 3 THEN false ELSE true END AS ruleSatisfied"
"Ensure that, in any given week, there are no more than 5 events of Activity: Customer Support between Tuesday and Thursday.","Activity: [""Customer Support""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Customer Support""}) WHERE date(e.timestamp).dayOfWeek >= 2 AND date(e.timestamp).dayOfWeek <= 4 WITH date(e.timestamp).year AS year, date(e.timestamp).week AS week, COUNT(e) AS eventsPerWeek RETURN CASE WHEN MAX(eventsPerWeek) > 5 THEN false ELSE true END AS ruleSatisfied"
The number of Product Delivery events  between Wednesday and Saturday must not exceed 4 in any week.,"Activity: [""Product Delivery""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Product Delivery""}) WHERE date(e.timestamp).dayOfWeek >= 3 AND date(e.timestamp).dayOfWeek <= 6 WITH date(e.timestamp).year AS year, date(e.timestamp).week AS week, COUNT(e) AS eventsPerWeek RETURN CASE WHEN MAX(eventsPerWeek) > 4 THEN false ELSE true END AS ruleSatisfied"
No more than 2 events of type Training Session are allowed from Friday to Sunday in a single week.,"Activity: [""Training Session""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Training Session""}) WHERE date(e.timestamp).dayOfWeek >= 5 AND date(e.timestamp).dayOfWeek <= 7 WITH date(e.timestamp).year AS year, date(e.timestamp).week AS week, COUNT(e) AS eventsPerWeek RETURN CASE WHEN MAX(eventsPerWeek) > 2 THEN false ELSE true END AS ruleSatisfied"
"In any week, the count of Activity: Payment Processing between Monday and Wednesday should not surpass 6.","Activity: [""Payment Processing""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Payment Processing""}) WHERE date(e.timestamp).dayOfWeek >= 1 AND date(e.timestamp).dayOfWeek <= 3 WITH date(e.timestamp).year AS year, date(e.timestamp).week AS week, COUNT(e) AS eventsPerWeek RETURN CASE WHEN MAX(eventsPerWeek) > 6 THEN false ELSE true END AS ruleSatisfied"
"Ensure that, during weekends, no more than 1 event of type System Update occurs.","Activity: [""System Update""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""System Update""}) WHERE date(e.timestamp).dayOfWeek >= 6 AND date(e.timestamp).dayOfWeek <= 7 WITH date(e.timestamp).year AS year, date(e.timestamp).week AS week, COUNT(e) AS eventsPerWeek RETURN CASE WHEN MAX(eventsPerWeek) > 1 THEN false ELSE true END AS ruleSatisfied"
The maximum number of Shipment Dispatch allowed between Thursday and Saturday in a week is 3.,"Activity: [""Shipment Dispatch""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Shipment Dispatch""}) WHERE date(e.timestamp).dayOfWeek >= 4 AND date(e.timestamp).dayOfWeek <= 6 WITH date(e.timestamp).year AS year, date(e.timestamp).week AS week, COUNT(e) AS eventsPerWeek RETURN CASE WHEN MAX(eventsPerWeek) > 3 THEN false ELSE true END AS ruleSatisfied"
"In each week, the number of events of type Activity: Inventory Update from Tuesday to Friday must not exceed 7.","Activity: [""Inventory Update""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Inventory Update""}) WHERE date(e.timestamp).dayOfWeek >= 2 AND date(e.timestamp).dayOfWeek <= 5 WITH date(e.timestamp).year AS year, date(e.timestamp).week AS week, COUNT(e) AS eventsPerWeek RETURN CASE WHEN MAX(eventsPerWeek) > 7 THEN false ELSE true END AS ruleSatisfied"
"No more than 4 events  ""Maintenance Activity"" are permitted between Monday and Thursday in any given week.","Activity: [""Maintenance Activity""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Maintenance Activity""}) WHERE date(e.timestamp).dayOfWeek >= 1 AND date(e.timestamp).dayOfWeek <= 4 WITH date(e.timestamp).year AS year, date(e.timestamp).week AS week, COUNT(e) AS eventsPerWeek RETURN CASE WHEN MAX(eventsPerWeek) > 4 THEN false ELSE true END AS ruleSatisfied"
The weekly limit for events User Registration between Wednesday and Friday is 5.,"Activity: [""User Registration""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""User Registration""}) WHERE date(e.timestamp).dayOfWeek >= 3 AND date(e.timestamp).dayOfWeek <= 5 WITH date(e.timestamp).year AS year, date(e.timestamp).week AS week, COUNT(e) AS eventsPerWeek RETURN CASE WHEN MAX(eventsPerWeek) > 5 THEN false ELSE true END AS ruleSatisfied"
"The average time between an event of type ""Submit Support Ticket"" for an entity of type ""Ticket"" and an event of type ""Send First Response"" for an entity of type ""Response"" related to that ""Ticket"" should be less than 2 hours.","Activity: [""Submit Support Ticket"", ""Send First Response""], EntityType: [""Ticket"", ""Response""], Actor: []","MATCH (e1:Event {Activity:""Submit Support Ticket""})-[:CORR]->(ent1:Entity {EntityType: ""Ticket""})-[:REL]-(ent2:Entity {EntityType:""Response""})<-[:CORR]-(e2:Event {Activity:""Send First Response""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp,e2.timestamp).seconds)) < (2*60*60) as ruleSatisfied"
"The typical delay between the activity ""Schedule Delivery"" for an entity of type ""Order"" and the activity ""Dispatch Item"" for an entity of type ""Shipment"" related to that ""Order"" must not exceed 24 hours.","Activity: [""Schedule Delivery"", ""Dispatch Item""], EntityType: [""Order"", ""Shipment""], Actor: []","MATCH (e1:Event {Activity:""Schedule Delivery""})-[:CORR]->(ent1:Entity {EntityType: ""Order""})-[:REL]-(ent2:Entity {EntityType:""Shipment""})<-[:CORR]-(e2:Event {Activity:""Dispatch Item""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp,e2.timestamp).seconds)) < (24*60*60) as ruleSatisfied"
"The average time from an event ""User Registration"" for an entity of type ""User"" until an event ""First Purchase"" for an entity of type ""Transaction"" related to that ""User"" should be greater than 1 day.","Activity: [""User Registration"", ""First Purchase""], EntityType: [""User"", ""Transaction""], Actor: []","MATCH (e1:Event {Activity:""User Registration""})-[:CORR]->(ent1:Entity {EntityType: ""User""})-[:REL]-(ent2:Entity {EntityType:""Transaction""})<-[:CORR]-(e2:Event {Activity:""First Purchase""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp,e2.timestamp).seconds)) > (1*24*60*60) as ruleSatisfied"
"The average time between the activity ""Submit Leave Request"" for an entity of type ""Employee"" before the activity ""Approve Leave"" for an entity of type ""Request"" related to that ""Employee"" must not exceed 3 days.","Activity: [""Submit Leave Request"", ""Approve Leave""], EntityType: [""Employee"", ""Request""], Actor: []","MATCH (e1:Event {Activity:""Submit Leave Request""})-[:CORR]->(ent1:Entity {EntityType: ""Employee""})-[:REL]-(ent2:Entity {EntityType:""Request""})<-[:CORR]-(e2:Event {Activity:""Approve Leave""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp,e2.timestamp).seconds)) < (3*24*60*60) as ruleSatisfied"
"The average time between the activity ""Place Order"" for an entity of type ""Order"" and the following activity ""Process Payment"" for an entity of type ""Payment"" related to that ""Order"" should not be less than 30 minutes.","Activity: [""Place Order"", ""Process Payment""], EntityType: [""Order"", ""Payment""], Actor: []","MATCH (e1:Event {Activity:""Place Order""})-[:CORR]->(ent1:Entity {EntityType: ""Order""})-[:REL]-(ent2:Entity {EntityType:""Payment""})<-[:CORR]-(e2:Event {Activity:""Process Payment""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp,e2.timestamp).seconds)) > (30*60) as ruleSatisfied"
"The time gap between the activity ""Schedule Delivery"" for an ""Order"" until the related ""Shipment"" undergoing ""Dispatch Item"" should, on average, be less than 24 hours.","Activity: [""Schedule Delivery"", ""Dispatch Item""], EntityType: [""Order"", ""Shipment""], Actor: []","MATCH (e1:Event {Activity:""Schedule Delivery""})-[:CORR]->(ent1:Entity {EntityType: ""Order""})-[:REL]-(ent2:Entity {EntityType:""Shipment""})<-[:CORR]-(e2:Event {Activity:""Dispatch Item""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp,e2.timestamp).seconds)) < (24*60*60) as ruleSatisfied"
"On average, at least 1 day should pass between a ""User"" completing the activity ""User Registration"" before the linked ""Transaction"" performing ""First Purchase.""","Activity: [""User Registration"", ""First Purchase""], EntityType: [""User"", ""Transaction""], Actor: []","MATCH (e1:Event {Activity:""User Registration""})-[:CORR]->(ent1:Entity {EntityType: ""User""})-[:REL]-(ent2:Entity {EntityType:""Transaction""})<-[:CORR]-(e2:Event {Activity:""First Purchase""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp,e2.timestamp).seconds)) > (1*24*60*60) as ruleSatisfied"
"On average, an ""Employee"" who performs ""Submit Leave Request"" should receive approval for their linked ""Request"" within 3 days.","Activity: [""Submit Leave Request"", ""Approve Leave""], EntityType: [""Employee"", ""Request""], Actor: []","MATCH (e1:Event {Activity:""Submit Leave Request""})-[:CORR]->(ent1:Entity {EntityType: ""Employee""})-[:REL]-(ent2:Entity {EntityType:""Request""})<-[:CORR]-(e2:Event {Activity:""Approve Leave""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp,e2.timestamp).seconds)) < (3*24*60*60) as ruleSatisfied"
"On average, no less than 30 minutes should elapse between an ""Order"" undergoing ""Place Order"" and the related ""Payment"" experiencing ""Process Payment.""","Activity: [""Place Order"", ""Process Payment""], EntityType: [""Order"", ""Payment""], Actor: []","MATCH (e1:Event {Activity:""Place Order""})-[:CORR]->(ent1:Entity {EntityType: ""Order""})-[:REL]-(ent2:Entity {EntityType:""Payment""})<-[:CORR]-(e2:Event {Activity:""Process Payment""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp,e2.timestamp).seconds)) > (30*60) as ruleSatisfied"
"The time taken from a ""Candidate"" completing ""Submit Job Application"" to an ""Interview"" linked to that ""Application"" being scheduled  must not exceed 7 days on average.","Activity: [""Submit Job Application"", ""Schedule Interview""], EntityType: [""Application"", ""Interview""], Actor: []","MATCH (e1:Event {Activity:""Submit Job Application""})-[:CORR]->(ent1:Entity {EntityType: ""Application""})-[:REL]-(ent2:Entity {EntityType:""Interview""})<-[:CORR]-(e2:Event {Activity:""Schedule Interview""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp,e2.timestamp).seconds)) < (7*24*60*60) as ruleSatisfied"
"After an employee submits a leave request, the leave request should be approved within 3 days on average.","Activity: [""Submit Leave Request"", ""Approve Leave""], EntityType: [""Employee"", ""Request""], Actor: []","MATCH (e1:Event {Activity:""Submit Leave Request""})-[:CORR]->(ent1:Entity {EntityType: ""Employee""})-[:REL]-(ent2:Entity {EntityType:""Request""})<-[:CORR]-(e2:Event {Activity:""Approve Leave""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp,e2.timestamp).seconds)) < (3*24*60*60) as ruleSatisfied"
The time from when a customer places an order to when the related shipment is dispatched should not exceed 2 days on average.,"Activity: [""Place Order"", ""Dispatch Item""], EntityType: [""Order"", ""Shipment""], Actor: []","MATCH (e1:Event {Activity:""Place Order""})-[:CORR]->(ent1:Entity {EntityType: ""Order""})-[:REL]-(ent2:Entity {EntityType:""Shipment""})<-[:CORR]-(e2:Event {Activity:""Dispatch Item""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp,e2.timestamp).seconds)) < (2*24*60*60) as ruleSatisfied"
"When a job seeker submits a job application, the job application should result in an interview being scheduled within one week on average.","Activity: [""Submit Job Application"", ""Schedule Interview""], EntityType: [""Application"", ""Interview""], Actor: []","MATCH (e1:Event {Activity:""Submit Job Application""})-[:CORR]->(ent1:Entity {EntityType: ""Application""})-[:REL]-(ent2:Entity {EntityType:""Interview""})<-[:CORR]-(e2:Event {Activity:""Schedule Interview""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp,e2.timestamp).seconds)) < (7*24*60*60) as ruleSatisfied"
"When an insurance policyholder files an insurance claim, the related claim should be processed and settled within 20 days on average.","Activity: [""Open Insurance Claim"", ""Settle Claim""], EntityType: [""Claim"", ""Settlement""], Actor: []","MATCH (e1:Event {Activity:""Open Insurance Claim""})-[:CORR]->(ent1:Entity {EntityType: ""Claim""})-[:REL]-(ent2:Entity {EntityType:""Settlement""})<-[:CORR]-(e2:Event {Activity:""Settle Claim""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp,e2.timestamp).seconds)) < (20*24*60*60) as ruleSatisfied"
"After a user submits a feedback form, the corresponding feedback should be reviewed within 4 days on average.","Activity: [""Submit Feedback"", ""Review Feedback""], EntityType: [""User"", ""Feedback""], Actor: []","MATCH (e1:Event {Activity:""Submit Feedback""})-[:CORR]->(ent1:Entity {EntityType: ""User""})-[:REL]-(ent2:Entity {EntityType:""Feedback""})<-[:CORR]-(e2:Event {Activity:""Review Feedback""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp,e2.timestamp).seconds)) < (4*24*60*60) as ruleSatisfied"
"When a company launches a marketing campaign, the linked campaign should generate an initial sales report within 5 days on average.","Activity: [""Launch Marketing Campaign"", ""Generate Sales Report""], EntityType: [""Company"", ""Campaign""], Actor: []","MATCH (e1:Event {Activity:""Launch Marketing Campaign""})-[:CORR]->(ent1:Entity {EntityType: ""Company""})-[:REL]-(ent2:Entity {EntityType:""Campaign""})<-[:CORR]-(e2:Event {Activity:""Generate Sales Report""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp,e2.timestamp).seconds)) < (5*24*60*60) as ruleSatisfied"
"When a patient books a medical consultation, the consultation should be completed within 7 days on average.","Activity: [""Book Medical Consultation"", ""Complete Consultation""], EntityType: [""Patient"", ""Consultation""], Actor: []","MATCH (e1:Event {Activity:""Book Medical Consultation""})-[:CORR]->(ent1:Entity {EntityType: ""Patient""})-[:REL]-(ent2:Entity {EntityType:""Consultation""})<-[:CORR]-(e2:Event {Activity:""Complete Consultation""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp,e2.timestamp).seconds)) < (7*24*60*60) as ruleSatisfied"
"After a student submits an assignment, the assignment should be graded within 3 days on average.","Activity: [""Submit Assignment"", ""Grade Assignment""], EntityType: [""Student"", ""Assignment""], Actor: []","MATCH (e1:Event {Activity:""Submit Assignment""})-[:CORR]->(ent1:Entity {EntityType: ""Student""})-[:REL]-(ent2:Entity {EntityType:""Assignment""})<-[:CORR]-(e2:Event {Activity:""Grade Assignment""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp,e2.timestamp).seconds)) < (3*24*60*60) as ruleSatisfied"
The time between when a user places an order and the order being shipped should not exceed 3 days on average.,"Activity: [""Place Order"", ""Ship Order""], EntityType: [""User"", ""Order""], Actor: []","MATCH (e1:Event {Activity:""Place Order""})-[:CORR]->(ent1:Entity {EntityType: ""User""})-[:REL]-(ent2:Entity {EntityType:""Order""})<-[:CORR]-(e2:Event {Activity:""Ship Order""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp,e2.timestamp).seconds)) < (3*24*60*60) as ruleSatisfied"
"After a customer requests a refund, the refund should be processed within 5 days on average.","Activity: [""Request Refund"", ""Process Refund""], EntityType: [""Customer"", ""Refund""], Actor: []","MATCH (e1:Event {Activity:""Request Refund""})-[:CORR]->(ent1:Entity {EntityType: ""Customer""})-[:REL]-(ent2:Entity {EntityType:""Refund""})<-[:CORR]-(e2:Event {Activity:""Process Refund""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp,e2.timestamp).seconds)) < (5*24*60*60) as ruleSatisfied"
A single individual must not perform more than 10 actions related to approving or rejecting invoices.,"Activity: [""Approve Invoice"", ""Reject Invoice""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN [""Approve Invoice"", ""Reject Invoice""] WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 10 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
It is prohibited for one person to execute more than 7 events involving the creation or deletion of customer support tickets.,"Activity: [""Create Support Ticket"", ""Close Support Ticket""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN [""Create Support Ticket"", ""Close Support Ticket""] WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 7 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
No individual is allowed to carry out more than 15 events related to updating or deleting inventory items.,"Activity: [""Update Inventory"", ""Delete Inventory Item""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN [""Update Inventory"", ""Delete Inventory Item""] WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 15 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
One person must not perform more than 5 events involving the creation or deletion of employee records.,"Activity: [""Create Employee Record"", ""Delete Employee Record""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN [""Create Employee Record"", ""Delete Employee Record""] WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 5 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
No single person should execute more than 20 events related to processing or refunding payments.,"Activity: [""Process Payment"", ""Refund Payment""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN [""Process Payment"", ""Refund Payment""] WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 20 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
It is not permitted for one person to handle more than 8 events involving the creation or deletion of marketing campaigns.,"Activity: [""Create Marketing Campaign"", ""Delete Marketing Campaign""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN [""Create Marketing Campaign"", ""Delete Marketing Campaign""] WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 8 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
No single individual is allowed to perform more than 12 events related to creating or deleting system backups.,"Activity: [""Create System Backup"", ""Delete System Backup""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN [""Create System Backup"", ""Delete System Backup""] WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 12 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
One person must not carry out more than 6 events involving the creation or deletion of customer accounts.,"Activity: [""Create Customer Account"", ""Delete Customer Account""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN [""Create Customer Account"", ""Delete Customer Account""] WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 6 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
No single person should perform more than 4 events related to creating or deleting product listings.,"Activity: [""Create Product Listing"", ""Delete Product Listing""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN [""Create Product Listing"", ""Delete Product Listing""] WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 4 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
Performing more than 10 tasks of type Approve Invoice or Reject Invoice by a single person is prohibited.,"Activity: [""Approve Invoice"", ""Reject Invoice""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN [""Approve Invoice"", ""Reject Invoice""] WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 10 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
"It is forbidden for any individual to execute more than 7 events from activity set {Create Support Ticket, Close Support Ticket}.","Activity: [""Create Support Ticket"", ""Close Support Ticket""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN [""Create Support Ticket"", ""Close Support Ticket""] WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 7 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
A single person must not carry out more than 15 events with activity Update Inventory or Delete Inventory Item.,"Activity: [""Update Inventory"", ""Delete Inventory Item""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN [""Update Inventory"", ""Delete Inventory Item""] WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 15 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
No individual should handle more than 5 actions of activity Create Employee Record or Delete Employee Record.,"Activity: [""Create Employee Record"", ""Delete Employee Record""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN [""Create Employee Record"", ""Delete Employee Record""] WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 5 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
Executing more than 20 events having type Process Payment or Refund Payment by one person is not permitted.,"Activity: [""Process Payment"", ""Refund Payment""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN [""Process Payment"", ""Refund Payment""] WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 20 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
No one is allowed to perform over 12 tasks with activity Create System Backup or Delete System Backup.,"Activity: [""Create System Backup"", ""Delete System Backup""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN [""Create System Backup"", ""Delete System Backup""] WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 12 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
A single individual must not execute more than 6 events of type Create Customer Account or Delete Customer Account.,"Activity: [""Create Customer Account"", ""Delete Customer Account""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN [""Create Customer Account"", ""Delete Customer Account""] WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 6 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
"Performing more than 4 events of type ""Create Product Listing"" or ""Delete Product Listing"" by one person is not allowed.","Activity: [""Create Product Listing"", ""Delete Product Listing""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN [""Create Product Listing"", ""Delete Product Listing""] WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 4 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
"From March to June 2021, at least 5 different activities occur.","Activity: [], EntityType: [], Actor: []",MATCH (e:Event) WHERE e.timestamp >= '2021-03-01' AND e.timestamp <= '2021-06-30' WITH COUNT(DISTINCT e.Activity) AS distinctActivities RETURN distinctActivities >= 5 AS ruleSatisfied
"From January to April 2020, there are at least 8 different activities.","Activity: [], EntityType: [], Actor: []",MATCH (e:Event) WHERE e.timestamp >= '2020-01-01' AND e.timestamp <= '2020-04-30' WITH COUNT(DISTINCT e.Activity) AS distinctActivities RETURN distinctActivities >= 8 AS ruleSatisfied
"During the months of August to December 2022, at least 12 distinct activities take place.","Activity: [], EntityType: [], Actor: []",MATCH (e:Event) WHERE e.timestamp >= '2022-08-01' AND e.timestamp <= '2022-12-31' WITH COUNT(DISTINCT e.Activity) AS distinctActivities RETURN distinctActivities >= 12 AS ruleSatisfied
"From May to September 2021, at most 6 different activities are performed.","Activity: [], EntityType: [], Actor: []",MATCH (e:Event) WHERE e.timestamp >= '2021-05-01' AND e.timestamp <= '2021-09-30' WITH COUNT(DISTINCT e.Activity) AS distinctActivities RETURN distinctActivities <= 6 AS ruleSatisfied
"Between February and May 2020, there are at least 3 different activities.","Activity: [], EntityType: [], Actor: []",MATCH (e:Event) WHERE e.timestamp >= '2020-02-01' AND e.timestamp <= '2020-05-31' WITH COUNT(DISTINCT e.Activity) AS distinctActivities RETURN distinctActivities >= 3 AS ruleSatisfied
"During the summer of 2022 (June to August), there are at least 10 different activities.","Activity: [], EntityType: [], Actor: []",MATCH (e:Event) WHERE e.timestamp >= '2022-06-01' AND e.timestamp <= '2022-08-31' WITH COUNT(DISTINCT e.Activity) AS distinctActivities RETURN distinctActivities >= 10 AS ruleSatisfied
"From February to May 2021, at least 6 different activities occur.","Activity: [], EntityType: [], Actor: []",MATCH (e:Event) WHERE e.timestamp >= '2021-02-01' AND e.timestamp <= '2021-05-31' WITH COUNT(DISTINCT e.Activity) AS distinctActivities RETURN distinctActivities >= 6 AS ruleSatisfied
"During the months of October to December 2022, there are at least 15 distinct activities.","Activity: [], EntityType: [], Actor: []",MATCH (e:Event) WHERE e.timestamp >= '2022-10-01' AND e.timestamp <= '2022-12-31' WITH COUNT(DISTINCT e.Activity) AS distinctActivities RETURN distinctActivities >= 15 AS ruleSatisfied
"Between March and August 2020, at least 7 different activities occur.","Activity: [], EntityType: [], Actor: []",MATCH (e:Event) WHERE e.timestamp >= '2020-03-01' AND e.timestamp <= '2020-08-31' WITH COUNT(DISTINCT e.Activity) AS distinctActivities RETURN distinctActivities >= 7 AS ruleSatisfied
"From July to November 2021, at most 10 different activities take place.","Activity: [], EntityType: [], Actor: []",MATCH (e:Event) WHERE e.timestamp >= '2021-07-01' AND e.timestamp <= '2021-11-30' WITH COUNT(DISTINCT e.Activity) AS distinctActivities RETURN distinctActivities <= 10 AS ruleSatisfied
"In the months of September to December 2020, there are at least 20 distinct activities.","Activity: [], EntityType: [], Actor: []",MATCH (e:Event) WHERE e.timestamp >= '2020-09-01' AND e.timestamp <= '2020-12-31' WITH COUNT(DISTINCT e.Activity) AS distinctActivities RETURN distinctActivities >= 20 AS ruleSatisfied
"From January to March 2021, at least 4 different activities happen.","Activity: [], EntityType: [], Actor: []",MATCH (e:Event) WHERE e.timestamp >= '2021-01-01' AND e.timestamp <= '2021-03-31' WITH COUNT(DISTINCT e.Activity) AS distinctActivities RETURN distinctActivities >= 4 AS ruleSatisfied
"Between April and July 2022, there are at least 9 distinct activities.","Activity: [], EntityType: [], Actor: []",MATCH (e:Event) WHERE e.timestamp >= '2022-04-01' AND e.timestamp <= '2022-07-31' WITH COUNT(DISTINCT e.Activity) AS distinctActivities RETURN distinctActivities >= 9 AS ruleSatisfied
"In the summer of 2023 (June to August), at most 5 distinct activities occur.","Activity: [], EntityType: [], Actor: []",MATCH (e:Event) WHERE e.timestamp >= '2023-06-01' AND e.timestamp <= '2023-08-31' WITH COUNT(DISTINCT e.Activity) AS distinctActivities RETURN distinctActivities <= 5 AS ruleSatisfied
"From March to October 2021, at least 10 distinct activities take place.","Activity: [], EntityType: [], Actor: []",MATCH (e:Event) WHERE e.timestamp >= '2021-03-01' AND e.timestamp <= '2021-10-31' WITH COUNT(DISTINCT e.Activity) AS distinctActivities RETURN distinctActivities >= 10 AS ruleSatisfied
"Between June and September 2022, at most 3 distinct activities are recorded.","Activity: [], EntityType: [], Actor: []",MATCH (e:Event) WHERE e.timestamp >= '2022-06-01' AND e.timestamp <= '2022-09-30' WITH COUNT(DISTINCT e.Activity) AS distinctActivities RETURN distinctActivities <= 3 AS ruleSatisfied
"From March to June 2021, at least 100 events occur.","Activity: [], EntityType: [], Actor: []",MATCH (e:Event) WHERE e.timestamp >= '2021-03-01' AND e.timestamp <= '2021-06-30' WITH COUNT(e) AS events RETURN events >= 100 AS ruleSatisfied
"From January to April 2020, there are at least 150 events.","Activity: [], EntityType: [], Actor: []",MATCH (e:Event) WHERE e.timestamp >= '2020-01-01' AND e.timestamp <= '2020-04-30' WITH COUNT(e) AS events RETURN events >= 150 AS ruleSatisfied
"During the months of August to December 2022, at least 200 events take place.","Activity: [], EntityType: [], Actor: []",MATCH (e:Event) WHERE e.timestamp >= '2022-08-01' AND e.timestamp <= '2022-12-31' WITH COUNT(e) AS events RETURN events >= 200 AS ruleSatisfied
"From May to September 2021, at most 50 events are recorded.","Activity: [], EntityType: [], Actor: []",MATCH (e:Event) WHERE e.timestamp >= '2021-05-01' AND e.timestamp <= '2021-09-30' WITH COUNT(e) AS events RETURN events <= 50 AS ruleSatisfied
"Between February and May 2020, there are at least 30 events.","Activity: [], EntityType: [], Actor: []",MATCH (e:Event) WHERE e.timestamp >= '2020-02-01' AND e.timestamp <= '2020-05-31' WITH COUNT(e) AS events RETURN events >= 30 AS ruleSatisfied
"During the summer of 2022 (June to August), there are at least 120 events.","Activity: [], EntityType: [], Actor: []",MATCH (e:Event) WHERE e.timestamp >= '2022-06-01' AND e.timestamp <= '2022-08-31' WITH COUNT(e) AS events RETURN events >= 120 AS ruleSatisfied
"From February to May 2021, at least 60 events occur.","Activity: [], EntityType: [], Actor: []",MATCH (e:Event) WHERE e.timestamp >= '2021-02-01' AND e.timestamp <= '2021-05-31' WITH COUNT(e) AS events RETURN events >= 60 AS ruleSatisfied
"During the months of October to December 2022, there are at least 250 events.","Activity: [], EntityType: [], Actor: []",MATCH (e:Event) WHERE e.timestamp >= '2022-10-01' AND e.timestamp <= '2022-12-31' WITH COUNT(e) AS events RETURN events >= 250 AS ruleSatisfied
"Between March and August 2020, at least 100 events occur.","Activity: [], EntityType: [], Actor: []",MATCH (e:Event) WHERE e.timestamp >= '2020-03-01' AND e.timestamp <= '2020-08-31' WITH COUNT(e) AS events RETURN events >= 100 AS ruleSatisfied
"From July to November 2021, at most 70 events take place.","Activity: [], EntityType: [], Actor: []",MATCH (e:Event) WHERE e.timestamp >= '2021-07-01' AND e.timestamp <= '2021-11-30' WITH COUNT(e) AS events RETURN events <= 70 AS ruleSatisfied
"In the months of September to December 2020, there are at least 80 events.","Activity: [], EntityType: [], Actor: []",MATCH (e:Event) WHERE e.timestamp >= '2020-09-01' AND e.timestamp <= '2020-12-31' WITH COUNT(e) AS events RETURN events >= 80 AS ruleSatisfied
"From January to March 2021, at least 40 events happen.","Activity: [], EntityType: [], Actor: []",MATCH (e:Event) WHERE e.timestamp >= '2021-01-01' AND e.timestamp <= '2021-03-31' WITH COUNT(e) AS events RETURN events >= 40 AS ruleSatisfied
"Between April and July 2022, there are at least 90 events.","Activity: [], EntityType: [], Actor: []",MATCH (e:Event) WHERE e.timestamp >= '2022-04-01' AND e.timestamp <= '2022-07-31' WITH COUNT(e) AS events RETURN events >= 90 AS ruleSatisfied
"In the summer of 2023 (June to August), at most 40 events occur.","Activity: [], EntityType: [], Actor: []",MATCH (e:Event) WHERE e.timestamp >= '2023-06-01' AND e.timestamp <= '2023-08-31' WITH COUNT(e) AS events RETURN events <= 40 AS ruleSatisfied
"From March to October 2021, at least 150 events take place.","Activity: [], EntityType: [], Actor: []",MATCH (e:Event) WHERE e.timestamp >= '2021-03-01' AND e.timestamp <= '2021-10-31' WITH COUNT(e) AS events RETURN events >= 150 AS ruleSatisfied
"Between June and September 2022, at most 60 events are recorded.","Activity: [], EntityType: [], Actor: []",MATCH (e:Event) WHERE e.timestamp >= '2022-06-01' AND e.timestamp <= '2022-09-30' WITH COUNT(e) AS events RETURN events <= 60 AS ruleSatisfied
"The average time between ""Start Video Call"" directly followed by ""End Video Call"" must be greater than 5 minutes.","Activity: [""Start Video Call"", ""End Video Call""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Start Video Call""})-[:DF]->(e2:Event {Activity:""End Video Call""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp, e2.timestamp).seconds)) > (5*60) as ruleSatisfied"
"The average time between ""Open App"" directly followed by ""Perform Search"" does not exceed 3 seconds.","Activity: [""Open App"", ""Perform Search""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Open App""})-[:DF]->(e2:Event {Activity:""Perform Search""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp, e2.timestamp).seconds)) < 3 as ruleSatisfied"
"The average delay between ""Click Ad"" directly followed by ""Landing Page Load"" must not exceed 2 seconds.","Activity: [""Click Ad"", ""Landing Page Load""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Click Ad""})-[:DF]->(e2:Event {Activity:""Landing Page Load""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp, e2.timestamp).seconds)) < 2 as ruleSatisfied"
"The average time between ""Receive Message"" directly followed by ""Read Message"" is within 10 seconds.","Activity: [""Receive Message"", ""Read Message""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Receive Message""})-[:DF]->(e2:Event {Activity:""Read Message""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp, e2.timestamp).seconds)) < 10 as ruleSatisfied"
"The average time between ""Submit Payment"" directly followed by ""Receive Payment Confirmation"" must be less than 1 minute.","Activity: [""Submit Payment"", ""Receive Payment Confirmation""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Submit Payment""})-[:DF]->(e2:Event {Activity:""Receive Payment Confirmation""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp, e2.timestamp).seconds)) < (1*60) as ruleSatisfied"
"The average delay from ""User Logs In"" directly followed by ""Access Dashboard"" should not exceed 2 seconds.","Activity: [""User Logs In"", ""Access Dashboard""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""User Logs In""})-[:DF]->(e2:Event {Activity:""Access Dashboard""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp, e2.timestamp).seconds)) < 2 as ruleSatisfied"
"The average time from ""Receive Order"" directly followed by ""Begin Packing"" must be less than 10 minutes.","Activity: [""Receive Order"", ""Begin Packing""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Receive Order""})-[:DF]->(e2:Event {Activity:""Begin Packing""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp, e2.timestamp).seconds)) < (10*60) as ruleSatisfied"
"The average time from ""Submit Assignment"" directly followed by ""Receive Grade"" must be greater than 1 day.","Activity: [""Submit Assignment"", ""Receive Grade""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Submit Assignment""})-[:DF]->(e2:Event {Activity:""Receive Grade""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp, e2.timestamp).seconds)) > (24*60*60) as ruleSatisfied"
"The average time between ""Generate Report"" directly followed by ""Download Report"" should be within 15 seconds.","Activity: [""Generate Report"", ""Download Report""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Generate Report""})-[:DF]->(e2:Event {Activity:""Download Report""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp, e2.timestamp).seconds)) < 15 as ruleSatisfied"
"The average time from ""User Signs Up"" directly followed by ""Email Confirmation"" must not be more than 5 minutes.","Activity: [""User Signs Up"", ""Email Confirmation""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""User Signs Up""})-[:DF]->(e2:Event {Activity:""Email Confirmation""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp, e2.timestamp).seconds)) < (5*60) as ruleSatisfied"
The average time between scanning a product at checkout and immediately completing the payment must not exceed 30 seconds.,"Activity: [""Scan Product"", ""Complete Payment""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Scan Product""})-[:DF]->(e2:Event {Activity:""Complete Payment""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp, e2.timestamp).seconds)) < (30) as ruleSatisfied"
"On average, the delay from unlocking a phone to directly opening the first application is less than 2 seconds.","Activity: [""Unlock Phone"", ""Open First App""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Unlock Phone""})-[:DF]->(e2:Event {Activity:""Open First App""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp, e2.timestamp).seconds)) < 2 as ruleSatisfied"
The average duration between starting a download and immediately completing it should be at least 5 minutes.,"Activity: [""Start Download"", ""Complete Download""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Start Download""})-[:DF]->(e2:Event {Activity:""Complete Download""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp, e2.timestamp).seconds)) > (5*60) as ruleSatisfied"
"The average response time from clicking the ""Submit Feedback"" button until a confirmation message directly appears does not exceed 1 second.","Activity: [""Submit Feedback"", ""Receive Confirmation""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Submit Feedback""})-[:DF]->(e2:Event {Activity:""Receive Confirmation""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp, e2.timestamp).seconds)) < 1 as ruleSatisfied"
"On average, the time between initiating a video upload and the moment it directly becomes available must be less than 10 minutes.","Activity: [""Start Video Upload"", ""Video Available""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Start Video Upload""})-[:DF]->(e2:Event {Activity:""Video Available""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp, e2.timestamp).seconds)) < (10*60) as ruleSatisfied"
The average time from when an order is placed to when its confirmation email is immediately sent should not exceed 5 minutes.,"Activity: [""Place Order"", ""Send Confirmation Email""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Place Order""})-[:DF]->(e2:Event {Activity:""Send Confirmation Email""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp, e2.timestamp).seconds)) < (5*60) as ruleSatisfied"
The average delay from clicking the login button to directly gaining access to the dashboard must be under 3 seconds.,"Activity: [""Click Login"", ""Load Dashboard""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Click Login""})-[:DF]->(e2:Event {Activity:""Load Dashboard""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp, e2.timestamp).seconds)) < 3 as ruleSatisfied"
The average time from submitting a bug report to its immediate acknowledgment is at least 12 hours.,"Activity: [""Submit Bug Report"", ""Acknowledge Bug""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Submit Bug Report""})-[:DF]->(e2:Event {Activity:""Acknowledge Bug""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp, e2.timestamp).seconds)) > (12*60*60) as ruleSatisfied"
"On average, the time it takes to receive a password reset email after requesting it, when it follows immediately, should not exceed 2 minutes.","Activity: [""Request Password Reset"", ""Receive Reset Email""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Request Password Reset""})-[:DF]->(e2:Event {Activity:""Receive Reset Email""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp, e2.timestamp).seconds)) < (2*60) as ruleSatisfied"
"The average time from clicking ""Play Song"" to immediately hearing the first sound must not exceed 1 second.","Activity: [""Play Song"", ""Hear First Sound""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Play Song""})-[:DF]->(e2:Event {Activity:""Hear First Sound""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp, e2.timestamp).seconds)) < 1 as ruleSatisfied"
No entity of type Item may be correlated to fewer than 10 events.,"Activity: [], EntityType: [""Item""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Item""}) WITH ent, COUNT(e) AS events WHERE events < 10 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
An entity of type Product must not be correlated with more than 15 events.,"Activity: [], EntityType: [""Product""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Product""}) WITH ent, COUNT(e) AS events WHERE events > 15 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
No entity of type User may be correlated to fewer than 3 events.,"Activity: [], EntityType: [""User""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""User""}) WITH ent, COUNT(e) AS events WHERE events < 3 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
An entity of type Order should not be correlated to more than 7 events.,"Activity: [], EntityType: [""Order""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Order""}) WITH ent, COUNT(e) AS events WHERE events > 7 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
No entity of type Category may be correlated to fewer than 5 events.,"Activity: [], EntityType: [""Category""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Category""}) WITH ent, COUNT(e) AS events WHERE events < 5 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
An entity of type Customer may not be correlated to fewer than 2 events.,"Activity: [], EntityType: [""Customer""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Customer""}) WITH ent, COUNT(e) AS events WHERE events < 2 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
An entity of type User must not have more than 20 events related to it.,"Activity: [], EntityType: [""User""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""User""}) WITH ent, COUNT(e) AS events WHERE events > 20 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
No entity of type Product may be correlated to more than 25 events.,"Activity: [], EntityType: [""Product""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Product""}) WITH ent, COUNT(e) AS events WHERE events > 25 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
An entity of type Order must be correlated to at least 10 events.,"Activity: [], EntityType: [""Order""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Order""}) WITH ent, COUNT(e) AS events WHERE events >= 10 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
An entity of type Customer should not be correlated to more than 5 events.,"Activity: [], EntityType: [""Customer""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Customer""}) WITH ent, COUNT(e) AS events WHERE events > 5 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
No employee may be correlated to fewer than 5 events.,"Activity: [], EntityType: [""Employee""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Employee""}) WITH ent, COUNT(e) AS events WHERE events < 5 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
A Project must not be correlated to more than 20 events.,"Activity: [], EntityType: [""Project""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Project""}) WITH ent, COUNT(e) AS events WHERE events > 20 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
A supplier may not have more than 12 events related to it.,"Activity: [], EntityType: [""Supplier""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Supplier""}) WITH ent, COUNT(e) AS events WHERE events > 12 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
No  Store may be correlated to fewer than 15 events.,"Activity: [], EntityType: [""Store""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Store""}) WITH ent, COUNT(e) AS events WHERE events < 15 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
A Vendor must not be correlated to more than 25 events.,"Activity: [], EntityType: [""Vendor""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Vendor""}) WITH ent, COUNT(e) AS events WHERE events > 25 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
No Department may be related to fewer than 3 distinct activities.,"Activity: [], EntityType: [""Department""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Department""}) WITH ent, COUNT(DISTINCT e.Activity) AS activities WHERE activities < 3 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
A Machine must not be associated with more than 8 different activities.,"Activity: [], EntityType: [""Machine""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Machine""}) WITH ent, COUNT(DISTINCT e.Activity) AS activities WHERE activities > 8 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
No Product should be linked to fewer than 4 unique activities.,"Activity: [], EntityType: [""Product""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Product""}) WITH ent, COUNT(DISTINCT e.Activity) AS activities WHERE activities < 4 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
A Customer Account may not be involved in more than 6 different activities.,"Activity: [], EntityType: [""Customer Account""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Customer Account""}) WITH ent, COUNT(DISTINCT e.Activity) AS activities WHERE activities > 6 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
Every Warehouse must be linked to at least 5 distinct activities.,"Activity: [], EntityType: [""Warehouse""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Warehouse""}) WITH ent, COUNT(DISTINCT e.Activity) AS activities WHERE activities < 5 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
No Supplier entity may be associated with fewer than 5 distinct activities.,"Activity: [], EntityType: [""Supplier""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Supplier""}) WITH ent, COUNT(DISTINCT e.Activity) AS activities WHERE activities < 5 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
A Vehicle must not be involved in more than 7 different activities.,"Activity: [], EntityType: [""Vehicle""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Vehicle""}) WITH ent, COUNT(DISTINCT e.Activity) AS activities WHERE activities > 7 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
Any Project must be linked to at least 6 unique activities.,"Activity: [], EntityType: [""Project""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Project""}) WITH ent, COUNT(DISTINCT e.Activity) AS activities WHERE activities < 6 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
A Software System may not have more than 10 distinct activities recorded.,"Activity: [], EntityType: [""Software System""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Software System""}) WITH ent, COUNT(DISTINCT e.Activity) AS activities WHERE activities > 10 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
No Research Study object should be associated with fewer than 4 different activities.,"Activity: [], EntityType: [""Research Study""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Research Study""}) WITH ent, COUNT(DISTINCT e.Activity) AS activities WHERE activities < 4 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
A Service Contract must involve at least 3 distinct activities.,"Activity: [], EntityType: [""Service Contract""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Service Contract""}) WITH ent, COUNT(DISTINCT e.Activity) AS activities WHERE activities < 3 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
No Loan Application may be tied to more than 8 different activities.,"Activity: [], EntityType: [""Loan Application""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Loan Application""}) WITH ent, COUNT(DISTINCT e.Activity) AS activities WHERE activities > 8 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
Any Training Program entity must be related to at least 5 activities.,"Activity: [], EntityType: [""Training Program""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Training Program""}) WITH ent, COUNT(DISTINCT e.Activity) AS activities WHERE activities < 5 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
A Manufacturing Line must not have fewer than 6 different recorded activities.,"Activity: [], EntityType: [""Manufacturing Line""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Manufacturing Line""}) WITH ent, COUNT(DISTINCT e.Activity) AS activities WHERE activities < 6 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
No Bank Account should be linked to more than 9 unique activities.,"Activity: [], EntityType: [""Bank Account""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Bank Account""}) WITH ent, COUNT(DISTINCT e.Activity) AS activities WHERE activities > 9 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
