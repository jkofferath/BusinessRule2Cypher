NL input,Key Values,Cypher Query
A user may not modify an order’s quantity more than 5 times.,"Activity: [""Change Quantity""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Change Quantity""}) WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 5 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
The same person must not create more than 4 purchase order item.,"Activity: [""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Create Purchase Order Item""}) WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 4 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
The same employee cannot acknowledge the receipt of goods more than 10 times.,"Activity: [""Record Goods Receipt""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Record Goods Receipt""}) WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 10 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
The same person cannot confirm an order more than 7 times.,"Activity: [""Receive Order Confirmation""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Receive Order Confirmation""}) WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 7 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
No single resource should finalize more than 5 service entry sheets.,"Activity: [""Record Service Entry Sheet""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Record Service Entry Sheet""}) WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 5 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
"An actor must not perform the ""Create Purchase Requisition Item"" activity more than 5 times.","Activity: [""Create Purchase Requisition Item""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Create Purchase Requisition Item""}) WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 5 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
"The same resource cannot execute ""Create Purchase Order Item"" more than 3 times.","Activity: [""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Create Purchase Order Item""}) WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 3 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
"A user may not log ""Record Goods Receipt"" more than 8 times.","Activity: [""Record Goods Receipt""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Record Goods Receipt""}) WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 8 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
"The same person should not complete ""Record Invoice Receipt"" more than 2 times.","Activity: [""Record Invoice Receipt""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Record Invoice Receipt""}) WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 2 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
"The same individual must not carry out ""Clear Invoice"" more than 6 times.","Activity: [""Clear Invoice""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Clear Invoice""}) WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 6 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
A task performed by user_429 must be immediately followed by an action from user_407 no more than 5 times.,"Activity: [], EntityType: [], Actor: [""user_429"", ""user_407""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'user_429' AND e2.Actor = 'user_407' WITH COUNT(*) AS handovers RETURN handovers <= 5 AS ruleSatisfied
The person identified as user_258 must transfer work to user_235 at least 7 times.,"Activity: [], EntityType: [], Actor: [""user_258"", ""user_235""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'user_258' AND e2.Actor = 'user_235' WITH COUNT(*) AS handovers RETURN handovers >= 7 AS ruleSatisfied
Work assigned to user_068 must be handed over to user_059 a minimum of 6 times.,"Activity: [], EntityType: [], Actor: [""user_068"", ""user_059""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'user_068' AND e2.Actor = 'user_059' WITH COUNT(*) AS handovers RETURN handovers >= 6 AS ruleSatisfied
An event executed by user_031 should not be immediately succeeded by an event performed by user_007 more than 3 times.,"Activity: [], EntityType: [], Actor: [""user_031"", ""user_007""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'user_031' AND e2.Actor = 'user_007' WITH COUNT(*) AS handovers RETURN handovers <= 3 AS ruleSatisfied
The individual referred to as user_002 is required to transfer tasks to batch_10 at least 4 times.,"Activity: [], EntityType: [], Actor: [""user_002"", ""batch_10""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'user_002' AND e2.Actor = 'batch_10' WITH COUNT(*) AS handovers RETURN handovers >= 4 AS ruleSatisfied
It is required that a task completed by batch_06 is followed by an event from user_013 at most 2 times.,"Activity: [], EntityType: [], Actor: [""batch_06"", ""user_013""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'batch_06' AND e2.Actor = 'user_013' WITH COUNT(*) AS handovers RETURN handovers <= 2 AS ruleSatisfied
"Whenever user_105 completes an action, user_077 must take over at least 9 times.","Activity: [], EntityType: [], Actor: [""user_105"", ""user_077""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'user_105' AND e2.Actor = 'user_077' WITH COUNT(*) AS handovers RETURN handovers >= 9 AS ruleSatisfied
The task of user_020 must be directly succeeded by an action from user_085 at least 3 times.,"Activity: [], EntityType: [], Actor: [""user_020"", ""user_085""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'user_020' AND e2.Actor = 'user_085' WITH COUNT(*) AS handovers RETURN handovers >= 3 AS ruleSatisfied
Actions executed by user_087 should precede those performed by user_012 a minimum of 8 times.,"Activity: [], EntityType: [], Actor: [""user_087"", ""user_012""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'user_087' AND e2.Actor = 'user_012' WITH COUNT(*) AS handovers RETURN handovers >= 8 AS ruleSatisfied
user_429 must not immediately transfer work to user_407.,"Activity: [], EntityType: [], Actor: [""user_429"", ""user_407""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'user_429' AND e2.Actor = 'user_407' WITH count(*) AS pairCount RETURN pairCount = 0 AS ruleSatisfied
There should be no instances where batch_10 hands over work to user_059.,"Activity: [], EntityType: [], Actor: [""batch_10"", ""user_059""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'batch_10' AND e2.Actor = 'user_059' WITH count(*) AS pairCount RETURN pairCount = 0 AS ruleSatisfied
user_258 is prohibited from handing over work to user_204.,"Activity: [], EntityType: [], Actor: [""user_258"", ""user_204""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'user_258' AND e2.Actor = 'user_204' WITH count(*) AS pairCount RETURN pairCount = 0 AS ruleSatisfied
It is required that no task performed by user_235 is directly followed by a task performed by user_006.,"Activity: [], EntityType: [], Actor: [""user_235"", ""user_006""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'user_235' AND e2.Actor = 'user_006' WITH count(*) AS pairCount RETURN pairCount = 0 AS ruleSatisfied
user_068 must refrain from passing work to user_033.,"Activity: [], EntityType: [], Actor: [""user_068"", ""user_033""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'user_068' AND e2.Actor = 'user_033' WITH count(*) AS pairCount RETURN pairCount = 0 AS ruleSatisfied
No instances are allowed where user_059 performs an event directly followed by user_204 performing another event.,"Activity: [], EntityType: [], Actor: [""user_059"", ""user_204""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'user_059' AND e2.Actor = 'user_204' WITH count(*) AS pairCount RETURN pairCount = 0 AS ruleSatisfied
user_012 is prohibited from handing over work to batch_16.,"Activity: [], EntityType: [], Actor: [""user_012"", ""batch_16""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'user_012' AND e2.Actor = 'batch_16' WITH count(*) AS pairCount RETURN pairCount = 0 AS ruleSatisfied
It is prohibited for user_105 to transfer work to user_044.,"Activity: [], EntityType: [], Actor: [""user_105"", ""user_044""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'user_105' AND e2.Actor = 'user_044' WITH count(*) AS pairCount RETURN pairCount = 0 AS ruleSatisfied
There should be no instances where batch_03 hands over work to user_019.,"Activity: [], EntityType: [], Actor: [""batch_03"", ""user_019""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'batch_03' AND e2.Actor = 'user_019' WITH count(*) AS pairCount RETURN pairCount = 0 AS ruleSatisfied
user_424 is not allowed to immediately transfer work to user_034.,"Activity: [], EntityType: [], Actor: [""user_424"", ""user_034""]",MATCH (e1:Event)-[:DF]->(e2:Event) WHERE e1.Actor = 'user_424' AND e2.Actor = 'user_034' WITH count(*) AS pairCount RETURN pairCount = 0 AS ruleSatisfied
User_429 and User_407 must not perform the same activity.,"Activity: [], EntityType: [], Actor: [""user_429"", ""user_407""]","MATCH (e1:Event {Actor: 'user_429'}) WITH COLLECT(DISTINCT e1.Activity) AS user_429_activities MATCH (e2:Event {Actor: 'user_407'}) WITH user_429_activities, COLLECT(DISTINCT e2.Activity) AS user_407_activities RETURN CASE WHEN ANY(activity IN user_429_activities WHERE activity IN user_407_activities) THEN false ELSE true END AS rule_satisfied"
User_258 and User_235 must not perform overlapping tasks.,"Activity: [], EntityType: [], Actor: [""user_258"", ""user_235""]","MATCH (e1:Event {Actor: 'user_258'}) WITH COLLECT(DISTINCT e1.Activity) AS user_258_activities MATCH (e2:Event {Actor: 'user_235'}) WITH user_258_activities, COLLECT(DISTINCT e2.Activity) AS user_235_activities RETURN CASE WHEN ANY(activity IN user_258_activities WHERE activity IN user_235_activities) THEN false ELSE true END AS rule_satisfied"
User_068 and User_059 must never engage in the same activities.,"Activity: [], EntityType: [], Actor: [""user_068"", ""user_059""]","MATCH (e1:Event {Actor: 'user_068'}) WITH COLLECT(DISTINCT e1.Activity) AS user_068_activities MATCH (e2:Event {Actor: 'user_059'}) WITH user_068_activities, COLLECT(DISTINCT e2.Activity) AS user_059_activities RETURN CASE WHEN ANY(activity IN user_068_activities WHERE activity IN user_059_activities) THEN false ELSE true END AS rule_satisfied"
There should be no overlap between the activities of User_031 and User_007.,"Activity: [], EntityType: [], Actor: [""user_031"", ""user_007""]","MATCH (e1:Event {Actor: 'user_031'}) WITH COLLECT(DISTINCT e1.Activity) AS user_031_activities MATCH (e2:Event {Actor: 'user_007'}) WITH user_031_activities, COLLECT(DISTINCT e2.Activity) AS user_007_activities RETURN CASE WHEN ANY(activity IN user_031_activities WHERE activity IN user_007_activities) THEN false ELSE true END AS rule_satisfied"
User_002 and User_013 must not share any activities.,"Activity: [], EntityType: [], Actor: [""user_002"", ""user_013""]","MATCH (e1:Event {Actor: 'user_002'}) WITH COLLECT(DISTINCT e1.Activity) AS user_002_activities MATCH (e2:Event {Actor: 'user_013'}) WITH user_002_activities, COLLECT(DISTINCT e2.Activity) AS user_013_activities RETURN CASE WHEN ANY(activity IN user_002_activities WHERE activity IN user_013_activities) THEN false ELSE true END AS rule_satisfied"
User_105 and User_077 should not perform overlapping tasks.,"Activity: [], EntityType: [], Actor: [""user_105"", ""user_077""]","MATCH (e1:Event {Actor: 'user_105'}) WITH COLLECT(DISTINCT e1.Activity) AS user_105_activities MATCH (e2:Event {Actor: 'user_077'}) WITH user_105_activities, COLLECT(DISTINCT e2.Activity) AS user_077_activities RETURN CASE WHEN ANY(activity IN user_105_activities WHERE activity IN user_077_activities) THEN false ELSE true END AS rule_satisfied"
User_204 and User_188 must perform different activities.,"Activity: [], EntityType: [], Actor: [""user_204"", ""user_188""]","MATCH (e1:Event {Actor: 'user_204'}) WITH COLLECT(DISTINCT e1.Activity) AS user_204_activities MATCH (e2:Event {Actor: 'user_188'}) WITH user_204_activities, COLLECT(DISTINCT e2.Activity) AS user_188_activities RETURN CASE WHEN ANY(activity IN user_204_activities WHERE activity IN user_188_activities) THEN false ELSE true END AS rule_satisfied"
User_020 and User_085 must work on completely distinct tasks.,"Activity: [], EntityType: [], Actor: [""user_020"", ""user_085""]","MATCH (e1:Event {Actor: 'user_020'}) WITH COLLECT(DISTINCT e1.Activity) AS user_020_activities MATCH (e2:Event {Actor: 'user_085'}) WITH user_020_activities, COLLECT(DISTINCT e2.Activity) AS user_085_activities RETURN CASE WHEN ANY(activity IN user_020_activities WHERE activity IN user_085_activities) THEN false ELSE true END AS rule_satisfied"
Tasks performed by user_429 and user_407 must be identical.,"Activity: [], EntityType: [], Actor: [""user_429"", ""user_407""]","MATCH (e1:Event {Actor: 'user_429'}) WITH COLLECT(DISTINCT e1.Activity) AS activitiesUser429 MATCH (e2:Event {Actor: 'user_407'}) WITH activitiesUser429, COLLECT(DISTINCT e2.Activity) AS activitiesUser407 RETURN activitiesUser429 = activitiesUser407 AS sameActivities"
Every activity performed by user_258 should also be handled by user_235.,"Activity: [], EntityType: [], Actor: [""user_258"", ""user_235""]","MATCH (e1:Event {Actor: 'user_258'}) WITH COLLECT(DISTINCT e1.Activity) AS activitiesUser258 MATCH (e2:Event {Actor: 'user_235'}) WITH activitiesUser258, COLLECT(DISTINCT e2.Activity) AS activitiesUser235 RETURN activitiesUser258 = activitiesUser235 AS sameActivities"
User_068 and user_059 must share the same tasks.,"Activity: [], EntityType: [], Actor: [""user_068"", ""user_059""]","MATCH (e1:Event {Actor: 'user_068'}) WITH COLLECT(DISTINCT e1.Activity) AS activitiesUser068 MATCH (e2:Event {Actor: 'user_059'}) WITH activitiesUser068, COLLECT(DISTINCT e2.Activity) AS activitiesUser059 RETURN activitiesUser068 = activitiesUser059 AS sameActivities"
"Tasks performed by the users with IDs user_031, user_007, and user_002 must overlap completely.","Activity: [], EntityType: [], Actor: [""user_031"", ""user_007"", ""user_002""]","MATCH (e1:Event {Actor: 'user_031'}) WITH COLLECT(DISTINCT e1.Activity) AS activitiesUser031 MATCH (e2:Event {Actor: 'user_007'}) WITH activitiesUser031, COLLECT(DISTINCT e2.Activity) AS activitiesUser007 MATCH (e3:Event {Actor: 'user_002'}) WITH activitiesUser031, activitiesUser007, COLLECT(DISTINCT e3.Activity) AS activitiesUser002 RETURN activitiesUser031 = activitiesUser007 AND activitiesUser031 = activitiesUser002 AS sameActivities"
The batch with ID batch_10 must perform the same activities as batch_06.,"Activity: [], EntityType: [], Actor: [""batch_10"", ""batch_06""]","MATCH (e1:Event {Actor: 'batch_10'}) WITH COLLECT(DISTINCT e1.Activity) AS activitiesBatch10 MATCH (e2:Event {Actor: 'batch_06'}) WITH activitiesBatch10, COLLECT(DISTINCT e2.Activity) AS activitiesBatch06 RETURN activitiesBatch10 = activitiesBatch06 AS sameActivities"
Users user_013 and user_105 must have identical roles and tasks.,"Activity: [], EntityType: [], Actor: [""user_013"", ""user_105""]","MATCH (e1:Event {Actor: 'user_013'}) WITH COLLECT(DISTINCT e1.Activity) AS activitiesUser013 MATCH (e2:Event {Actor: 'user_105'}) WITH activitiesUser013, COLLECT(DISTINCT e2.Activity) AS activitiesUser105 RETURN activitiesUser013 = activitiesUser105 AS sameActivities"
"Any task performed by user_077 must also be handled by user_204, and vice versa.","Activity: [], EntityType: [], Actor: [""user_077"", ""user_204""]","MATCH (e1:Event {Actor: 'user_077'}) WITH COLLECT(DISTINCT e1.Activity) AS activitiesUser077 MATCH (e2:Event {Actor: 'user_204'}) WITH activitiesUser077, COLLECT(DISTINCT e2.Activity) AS activitiesUser204 RETURN activitiesUser077 = activitiesUser204 AS sameActivities"
Activities performed by user_188 must also be performed by user_020.,"Activity: [], EntityType: [], Actor: [""user_188"", ""user_020""]","MATCH (e1:Event {Actor: 'user_188'}) WITH COLLECT(DISTINCT e1.Activity) AS activitiesUser188 MATCH (e2:Event {Actor: 'user_020'}) WITH activitiesUser188, COLLECT(DISTINCT e2.Activity) AS activitiesUser020 RETURN activitiesUser188 = activitiesUser020 AS sameActivities"
The tasks performed by user_085 must match those of user_087.,"Activity: [], EntityType: [], Actor: [""user_085"", ""user_087""]","MATCH (e1:Event {Actor: 'user_085'}) WITH COLLECT(DISTINCT e1.Activity) AS activitiesUser085 MATCH (e2:Event {Actor: 'user_087'}) WITH activitiesUser085, COLLECT(DISTINCT e2.Activity) AS activitiesUser087 RETURN activitiesUser085 = activitiesUser087 AS sameActivities"
"The users user_012 and user_274 should perform identical tasks, with no discrepancies.","Activity: [], EntityType: [], Actor: [""user_012"", ""user_274""]","MATCH (e1:Event {Actor: 'user_012'}) WITH COLLECT(DISTINCT e1.Activity) AS activitiesUser012 MATCH (e2:Event {Actor: 'user_274'}) WITH activitiesUser012, COLLECT(DISTINCT e2.Activity) AS activitiesUser274 RETURN activitiesUser012 = activitiesUser274 AS sameActivities"
User 429 is only allowed to perform actions related to Purchase Orders.,"Activity: [], EntityType: [""PO""], Actor: [""user_429""]",MATCH (e:Event {Actor: 'user_429'})-[:CORR]->(entity:Entity) WITH COLLECT(DISTINCT entity.EntityType) AS entityTypes RETURN CASE WHEN ALL(type IN entityTypes WHERE type = 'PO') THEN true ELSE false END AS ruleSatisfied
Only user 407 can manage Purchase Order Items.,"Activity: [], EntityType: [""POI""], Actor: [""user_407""]",MATCH (e:Event {Actor: 'user_407'})-[:CORR]->(entity:Entity) WITH COLLECT(DISTINCT entity.EntityType) AS entityTypes RETURN CASE WHEN ALL(type IN entityTypes WHERE type = 'POI') THEN true ELSE false END AS ruleSatisfied
Tasks performed by user 258 should exclusively be related to Purchase Orders.,"Activity: [], EntityType: [""PO""], Actor: [""user_258""]",MATCH (e:Event {Actor: 'user_258'})-[:CORR]->(entity:Entity) WITH COLLECT(DISTINCT entity.EntityType) AS entityTypes RETURN CASE WHEN ALL(type IN entityTypes WHERE type = 'PO') THEN true ELSE false END AS ruleSatisfied
Only Purchase Order Items can be processed by user 235.,"Activity: [], EntityType: [""POI""], Actor: [""user_235""]",MATCH (e:Event {Actor: 'user_235'})-[:CORR]->(entity:Entity) WITH COLLECT(DISTINCT entity.EntityType) AS entityTypes RETURN CASE WHEN ALL(type IN entityTypes WHERE type = 'POI') THEN true ELSE false END AS ruleSatisfied
Batch 10 is restricted to processing only Purchase Orders.,"Activity: [], EntityType: [""PO""], Actor: [""batch_10""]",MATCH (e:Event {Actor: 'batch_10'})-[:CORR]->(entity:Entity) WITH COLLECT(DISTINCT entity.EntityType) AS entityTypes RETURN CASE WHEN ALL(type IN entityTypes WHERE type = 'PO') THEN true ELSE false END AS ruleSatisfied
User 059 is required to work exclusively with Purchase Order Items.,"Activity: [], EntityType: [""POI""], Actor: [""user_059""]",MATCH (e:Event {Actor: 'user_059'})-[:CORR]->(entity:Entity) WITH COLLECT(DISTINCT entity.EntityType) AS entityTypes RETURN CASE WHEN ALL(type IN entityTypes WHERE type = 'POI') THEN true ELSE false END AS ruleSatisfied
Batch 16 is restricted to actions involving Purchase Order Items only.,"Activity: [], EntityType: [""POI""], Actor: [""batch_16""]",MATCH (e:Event {Actor: 'batch_16'})-[:CORR]->(entity:Entity) WITH COLLECT(DISTINCT entity.EntityType) AS entityTypes RETURN CASE WHEN ALL(type IN entityTypes WHERE type = 'POI') THEN true ELSE false END AS ruleSatisfied
User 034 must strictly perform tasks related to Purchase Orders.,"Activity: [], EntityType: [""PO""], Actor: [""user_034""]",MATCH (e:Event {Actor: 'user_034'})-[:CORR]->(entity:Entity) WITH COLLECT(DISTINCT entity.EntityType) AS entityTypes RETURN CASE WHEN ALL(type IN entityTypes WHERE type = 'PO') THEN true ELSE false END AS ruleSatisfied
At least 3 employees must be involved in handling every Purchase Order Item.,"Activity: [], EntityType: [""POI""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType: ""POI""}) WITH ent, COLLECT(DISTINCT e.Actor) as actors WITH COLLECT(SIZE(actors)) as actorCounts RETURN CASE WHEN ANY(count IN actorCounts WHERE count < 3) THEN false ELSE true END AS ruleSatisfied"
No more than 5 workers may be involved in processing a Purchase Order (PO).,"Activity: [], EntityType: [""PO""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType: ""PO""}) WITH ent, COLLECT(DISTINCT e.Actor) as actors WITH COLLECT(SIZE(actors)) as actorCounts RETURN CASE WHEN ANY(count IN actorCounts WHERE count > 5) THEN false ELSE true END AS ruleSatisfied"
A minimum of 4 distinct contributors must handle each Purchase Order Item (POI).,"Activity: [], EntityType: [""POI""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType: ""POI""}) WITH ent, COLLECT(DISTINCT e.Actor) as actors WITH COLLECT(SIZE(actors)) as actorCounts RETURN CASE WHEN ANY(count IN actorCounts WHERE count < 4) THEN false ELSE true END AS ruleSatisfied"
No single Purchase Order can have more than 4 workers assigned to it.,"Activity: [], EntityType: [""PO""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType: ""PO""}) WITH ent, COLLECT(DISTINCT e.Actor) as actors WITH COLLECT(SIZE(actors)) as actorCounts RETURN CASE WHEN ANY(count IN actorCounts WHERE count > 4) THEN false ELSE true END AS ruleSatisfied"
Every POI must have at least 2 unique participants.,"Activity: [], EntityType: [""POI""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType: ""POI""}) WITH ent, COLLECT(DISTINCT e.Actor) as actors WITH COLLECT(SIZE(actors)) as actorCounts RETURN CASE WHEN ANY(count IN actorCounts WHERE count < 2) THEN false ELSE true END AS ruleSatisfied"
Each Purchase Order must have exactly 3 distinct participants involved.,"Activity: [], EntityType: [""PO""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType: ""PO""}) WITH ent, COLLECT(DISTINCT e.Actor) as actors WITH COLLECT(SIZE(actors)) as actorCounts RETURN CASE WHEN ANY(count IN actorCounts WHERE count <> 3) THEN false ELSE true END AS ruleSatisfied"
No Purchase Order Item can have fewer than 3 participants.,"Activity: [], EntityType: [""POI""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType: ""POI""}) WITH ent, COLLECT(DISTINCT e.Actor) as actors WITH COLLECT(SIZE(actors)) as actorCounts RETURN CASE WHEN ANY(count IN actorCounts WHERE count < 3) THEN false ELSE true END AS ruleSatisfied"
No more than 2 distinct workers can be involved in processing each Purchase Order Item.,"Activity: [], EntityType: [""POI""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType: ""POI""}) WITH ent, COLLECT(DISTINCT e.Actor) as actors WITH COLLECT(SIZE(actors)) as actorCounts RETURN CASE WHEN ANY(count IN actorCounts WHERE count > 2) THEN false ELSE true END AS ruleSatisfied"
A maximum of 5 unique workers should be assigned to a Purchase Order.,"Activity: [], EntityType: [""PO""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType: ""PO""}) WITH ent, COLLECT(DISTINCT e.Actor) as actors WITH COLLECT(SIZE(actors)) as actorCounts RETURN CASE WHEN ANY(count IN actorCounts WHERE count > 5) THEN false ELSE true END AS ruleSatisfied"
Every Purchase Order Item must have at least 4 distinct contributors handling it.,"Activity: [], EntityType: [""POI""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType: ""POI""}) WITH ent, COLLECT(DISTINCT e.Actor) as actors WITH COLLECT(SIZE(actors)) as actorCounts RETURN CASE WHEN ANY(count IN actorCounts WHERE count < 4) THEN false ELSE true END AS ruleSatisfied"
A user must not create more than 3 Purchase Requisition Items within 7 days.,"Activity: [""Create Purchase Requisition Item""], EntityType: [], Actor: []","MATCH (event:Event {Activity: ""Create Purchase Requisition Item""}) WITH event.Actor AS actor, event WITH actor, COLLECT(event.timestamp) AS timestamps WITH actor, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 7})]) <= 3) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS actorRules RETURN ALL(rule IN actorRules WHERE rule = true) AS ruleHoldsForAllActors"
No actor is allowed to create more than 5 Purchase Order Items in a single day.,"Activity: [""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (event:Event {Activity: ""Create Purchase Order Item""}) WITH event.Actor AS actor, event WITH actor, COLLECT(event.timestamp) AS timestamps WITH actor, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE date.truncate('day', t) = date.truncate('day', timestamps[idx])]) <= 5) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS actorRules RETURN ALL(rule IN actorRules WHERE rule = true) AS ruleHoldsForAllActors"
A vendor must not create more than 2 invoices per day.,"Activity: [""Vendor creates invoice""], EntityType: [], Actor: []","MATCH (event:Event {Activity: ""Vendor creates invoice""}) WITH event.Actor AS actor, event WITH actor, COLLECT(event.timestamp) AS timestamps WITH actor, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE date.truncate('day', t) = date.truncate('day', timestamps[idx])]) <= 2) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS actorRules RETURN ALL(rule IN actorRules WHERE rule = true) AS ruleHoldsForAllActors"
A user is not allowed to delete more than 1 purchase Order Item in a single day.,"Activity: [""Delete Purchase Order Item""], EntityType: [], Actor: []","MATCH (event:Event {Activity: ""Delete Purchase Order Item""}) WITH event.Actor AS actor, event WITH actor, COLLECT(event.timestamp) AS timestamps WITH actor, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE date.truncate('day', t) = date.truncate('day', timestamps[idx])]) <= 1) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS actorRules RETURN ALL(rule IN actorRules WHERE rule = true) AS ruleHoldsForAllActors"
A goods receipt event must not be recorded more than once by the same user within 3 days.,"Activity: [""Record Goods Receipt""], EntityType: [], Actor: []","MATCH (event:Event {Activity: ""Record Goods Receipt""}) WITH event.Actor AS actor, event WITH actor, COLLECT(event.timestamp) AS timestamps WITH actor, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 3})]) <= 1) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS actorRules RETURN ALL(rule IN actorRules WHERE rule = true) AS ruleHoldsForAllActors"
The same user should not record more than 2 Invoice Receipts within a 7-day period.,"Activity: [""Record Invoice Receipt""], EntityType: [], Actor: []","MATCH (event:Event {Activity: ""Record Invoice Receipt""}) WITH event.Actor AS actor, event WITH actor, COLLECT(event.timestamp) AS timestamps WITH actor, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 7})]) <= 2) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS actorRules RETURN ALL(rule IN actorRules WHERE rule = true) AS ruleHoldsForAllActors"
A user may not change the quantity more than once within 2 days.,"Activity: [""Change Quantity""], EntityType: [], Actor: []","MATCH (event:Event {Activity: ""Change Quantity""}) WITH event.Actor AS actor, event WITH actor, COLLECT(event.timestamp) AS timestamps WITH actor, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 2})]) <= 1) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS actorRules RETURN ALL(rule IN actorRules WHERE rule = true) AS ruleHoldsForAllActors"
An actor must not remove more than 3 payment blocks in a 5-day window.,"Activity: [""Remove Payment Block""], EntityType: [], Actor: []","MATCH (event:Event {Activity: ""Remove Payment Block""}) WITH event.Actor AS actor, event WITH actor, COLLECT(event.timestamp) AS timestamps WITH actor, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 5})]) <= 3) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS actorRules RETURN ALL(rule IN actorRules WHERE rule = true) AS ruleHoldsForAllActors"
A worker may not create more than 4 Service Entry Sheets in a single week.,"Activity: [""Record Service Entry Sheet""], EntityType: [], Actor: []","MATCH (event:Event {Activity: ""Record Service Entry Sheet""}) WITH event.Actor AS actor, event WITH actor, COLLECT(event.timestamp) AS timestamps WITH actor, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 7})]) <= 4) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS actorRules RETURN ALL(rule IN actorRules WHERE rule = true) AS ruleHoldsForAllActors"
"Within a period of 30 days, no actor is allowed to receive more than 10 Order Confirmations.","Activity: [""Receive Order Confirmation""], EntityType: [], Actor: []","MATCH (event:Event {Activity: ""Receive Order Confirmation""}) WITH event.Actor AS actor, event WITH actor, COLLECT(event.timestamp) AS timestamps WITH actor, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 30})]) <= 10) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS actorRules RETURN ALL(rule IN actorRules WHERE rule = true) AS ruleHoldsForAllActors"
A user must not create more than 5 purchase requisition items between January 1st 2023 and January 10th 2023.,"Activity: [""Create Purchase Requisition Item""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Create Purchase Requisition Item""}) WHERE e.timestamp >= datetime(""2023-01-01T00:00:00"") AND e.timestamp <= datetime(""2023-01-10T23:59:59"") WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 5 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
No employee may record more than 3 goods receipts in a single month between February 1st 2023 and February 28th 2023.,"Activity: [""Record Goods Receipt""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Record Goods Receipt""}) WHERE e.timestamp >= datetime(""2023-02-01T00:00:00"") AND e.timestamp <= datetime(""2023-02-28T23:59:59"") WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 3 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
A vendor can only create one invoice between March 1st 2023 at 10:00 AM and March 2nd 2023 at 10:00 AM.,"Activity: [""Vendor creates invoice""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Vendor creates invoice""}) WHERE e.timestamp >= datetime(""2023-03-01T10:00:00"") AND e.timestamp <= datetime(""2023-03-02T10:00:00"") WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 1 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
No user can delete more than 2 purchase order items within a 24-hour period from July 1st 2023 12:00 PM to July 2nd 2023 12:00 PM.,"Activity: [""Delete Purchase Order Item""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Delete Purchase Order Item""}) WHERE e.timestamp >= datetime(""2023-07-01T12:00:00"") AND e.timestamp <= datetime(""2023-07-02T12:00:00"") WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 2 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
A user is not allowed to create more than 3 purchase order items between May 1st 2023 and May 15th 2023.,"Activity: [""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Create Purchase Order Item""}) WHERE e.timestamp >= datetime(""2023-05-01T00:00:00"") AND e.timestamp <= datetime(""2023-05-15T23:59:59"") WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 3 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
An employee cannot record more than 2 invoice receipts between June 1st 2023 at 8:00 AM and June 1st 2023 at 5:00 PM.,"Activity: [""Record Invoice Receipt""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Record Invoice Receipt""}) WHERE e.timestamp >= datetime(""2023-06-01T08:00:00"") AND e.timestamp <= datetime(""2023-06-01T17:00:00"") WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 2 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
A user may not clear more than 5 invoices between August 1st 2023 at 10:00 AM and August 1st 2023 at 10:00 PM.,"Activity: [""Clear Invoice""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Clear Invoice""}) WHERE e.timestamp >= datetime(""2023-08-01T10:00:00"") AND e.timestamp <= datetime(""2023-08-01T22:00:00"") WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 5 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
A person is not allowed to modify the quantity more than 3 times between October 1st 2023 at 9:00 AM and October 3rd 2023 at 5:00 PM.,"Activity: [""Change Quantity""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Change Quantity""}) WHERE e.timestamp >= datetime(""2023-10-01T09:00:00"") AND e.timestamp <= datetime(""2023-10-03T17:00:00"") WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 3 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
A user must not remove the payment block more than once between April 1st 2023 and April 7th 2023.,"Activity: [""Remove Payment Block""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Remove Payment Block""}) WHERE e.timestamp >= datetime(""2023-04-01T00:00:00"") AND e.timestamp <= datetime(""2023-04-07T23:59:59"") WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 1 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
A person may not receive more than 5 order confirmations between September 1st 2023 at 9:00 AM and September 5th 2023 at 5:00 PM.,"Activity: [""Receive Order Confirmation""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Receive Order Confirmation""}) WHERE e.timestamp >= datetime(""2023-09-01T09:00:00"") AND e.timestamp <= datetime(""2023-09-05T17:00:00"") WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 5 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
The same employee must not create a purchase requisition item and create a purchase order item.,"Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (requisitionEvent:Event {Activity: 'Create Purchase Requisition Item'}) WITH COLLECT(DISTINCT requisitionEvent.Actor) AS requisitionActors MATCH (orderEvent:Event {Activity: 'Create Purchase Order Item'}) WITH requisitionActors, COLLECT(DISTINCT orderEvent.Actor) AS orderActors WITH requisitionActors, orderActors, [actor IN requisitionActors WHERE actor IN orderActors] AS commonActors RETURN CASE WHEN SIZE(commonActors) > 0 THEN false ELSE true END AS ruleSatisfied"
A single person is prohibited from recording both goods receipt and invoice receipt.,"Activity: [""Record Goods Receipt"", ""Record Invoice Receipt""], EntityType: [], Actor: []","MATCH (goodsReceiptEvent:Event {Activity: 'Record Goods Receipt'}) WITH COLLECT(DISTINCT goodsReceiptEvent.Actor) AS goodsReceiptActors MATCH (invoiceReceiptEvent:Event {Activity: 'Record Invoice Receipt'}) WITH goodsReceiptActors, COLLECT(DISTINCT invoiceReceiptEvent.Actor) AS invoiceReceiptActors WITH goodsReceiptActors, invoiceReceiptActors, [actor IN goodsReceiptActors WHERE actor IN invoiceReceiptActors] AS commonActors RETURN CASE WHEN SIZE(commonActors) > 0 THEN false ELSE true END AS ruleSatisfied"
An employee should not both remove a payment block and approve an invoice by recording its receipt.,"Activity: [""Remove Payment Block"", ""Record Invoice Receipt""], EntityType: [], Actor: []","MATCH (removeBlockEvent:Event {Activity: 'Remove Payment Block'}) WITH COLLECT(DISTINCT removeBlockEvent.Actor) AS removeBlockActors MATCH (recordInvoiceEvent:Event {Activity: 'Record Invoice Receipt'}) WITH removeBlockActors, COLLECT(DISTINCT recordInvoiceEvent.Actor) AS recordInvoiceActors WITH removeBlockActors, recordInvoiceActors, [actor IN removeBlockActors WHERE actor IN recordInvoiceActors] AS commonActors RETURN CASE WHEN SIZE(commonActors) > 0 THEN false ELSE true END AS ruleSatisfied"
No employee is allowed to both receive order confirmation and delete purchase order items.,"Activity: [""Receive Order Confirmation"", ""Delete Purchase Order Item""], EntityType: [], Actor: []","MATCH (confirmOrderEvent:Event {Activity: 'Receive Order Confirmation'}) WITH COLLECT(DISTINCT confirmOrderEvent.Actor) AS orderConfirmers MATCH (deleteOrderEvent:Event {Activity: 'Delete Purchase Order Item'}) WITH orderConfirmers, COLLECT(DISTINCT deleteOrderEvent.Actor) AS deleteOrderActors WITH orderConfirmers, deleteOrderActors, [actor IN orderConfirmers WHERE actor IN deleteOrderActors] AS commonActors RETURN CASE WHEN SIZE(commonActors) > 0 THEN false ELSE true END AS ruleSatisfied"
A person must not both record a service entry and modify order quantities.,"Activity: [""Record Service Entry Sheet"", ""Change Quantity""], EntityType: [], Actor: []","MATCH (serviceEntryEvent:Event {Activity: 'Record Service Entry Sheet'}) WITH COLLECT(DISTINCT serviceEntryEvent.Actor) AS serviceEntryActors MATCH (changeQuantityEvent:Event {Activity: 'Change Quantity'}) WITH serviceEntryActors, COLLECT(DISTINCT changeQuantityEvent.Actor) AS quantityChangers WITH serviceEntryActors, quantityChangers, [actor IN serviceEntryActors WHERE actor IN quantityChangers] AS commonActors RETURN CASE WHEN SIZE(commonActors) > 0 THEN false ELSE true END AS ruleSatisfied"
"An employee must not perform both ""Create Purchase Requisition Item"" and ""Create Purchase Order Item"" activities.","Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (requisitionEvent:Event {Activity: 'Create Purchase Requisition Item'}) WITH COLLECT(DISTINCT requisitionEvent.Actor) AS requisitionActors MATCH (orderEvent:Event {Activity: 'Create Purchase Order Item'}) WITH requisitionActors, COLLECT(DISTINCT orderEvent.Actor) AS orderActors WITH requisitionActors, orderActors, [actor IN requisitionActors WHERE actor IN orderActors] AS commonActors RETURN CASE WHEN SIZE(commonActors) > 0 THEN false ELSE true END AS ruleSatisfied"
"No individual is allowed to execute both ""Vendor creates invoice"" and ""Clear Invoice"".","Activity: [""Vendor creates invoice"", ""Clear Invoice""], EntityType: [], Actor: []","MATCH (invoiceEvent:Event {Activity: 'Vendor creates invoice'}) WITH COLLECT(DISTINCT invoiceEvent.Actor) AS invoiceCreators MATCH (clearEvent:Event {Activity: 'Clear Invoice'}) WITH invoiceCreators, COLLECT(DISTINCT clearEvent.Actor) AS clearInvoiceActors WITH invoiceCreators, clearInvoiceActors, [actor IN invoiceCreators WHERE actor IN clearInvoiceActors] AS commonActors RETURN CASE WHEN SIZE(commonActors) > 0 THEN false ELSE true END AS ruleSatisfied"
"No employee should perform both ""Delete Purchase Order Item"" and ""Record Service Entry Sheet"".","Activity: [""Delete Purchase Order Item"", ""Record Service Entry Sheet""], EntityType: [], Actor: []","MATCH (deleteOrderEvent:Event {Activity: 'Delete Purchase Order Item'}) WITH COLLECT(DISTINCT deleteOrderEvent.Actor) AS deleteOrderActors MATCH (serviceEntryEvent:Event {Activity: 'Record Service Entry Sheet'}) WITH deleteOrderActors, COLLECT(DISTINCT serviceEntryEvent.Actor) AS serviceEntryActors WITH deleteOrderActors, serviceEntryActors, [actor IN deleteOrderActors WHERE actor IN serviceEntryActors] AS commonActors RETURN CASE WHEN SIZE(commonActors) > 0 THEN false ELSE true END AS ruleSatisfied"
"A single individual must not be responsible for both ""Change Quantity"" and ""Record Goods Receipt"".","Activity: [""Change Quantity"", ""Record Goods Receipt""], EntityType: [], Actor: []","MATCH (changeQuantityEvent:Event {Activity: 'Change Quantity'}) WITH COLLECT(DISTINCT changeQuantityEvent.Actor) AS quantityChangers MATCH (goodsReceiptEvent:Event {Activity: 'Record Goods Receipt'}) WITH quantityChangers, COLLECT(DISTINCT goodsReceiptEvent.Actor) AS goodsReceiptActors WITH quantityChangers, goodsReceiptActors, [actor IN quantityChangers WHERE actor IN goodsReceiptActors] AS commonActors RETURN CASE WHEN SIZE(commonActors) > 0 THEN false ELSE true END AS ruleSatisfied"
"No person may execute both ""Receive Order Confirmation"" and ""Delete Purchase Order Item"".","Activity: [""Receive Order Confirmation"", ""Delete Purchase Order Item""], EntityType: [], Actor: []","MATCH (confirmOrderEvent:Event {Activity: 'Receive Order Confirmation'}) WITH COLLECT(DISTINCT confirmOrderEvent.Actor) AS orderConfirmers MATCH (deleteOrderEvent:Event {Activity: 'Delete Purchase Order Item'}) WITH orderConfirmers, COLLECT(DISTINCT deleteOrderEvent.Actor) AS deleteOrderActors WITH orderConfirmers, deleteOrderActors, [actor IN orderConfirmers WHERE actor IN deleteOrderActors] AS commonActors RETURN CASE WHEN SIZE(commonActors) > 0 THEN false ELSE true END AS ruleSatisfied"
"It is prohibited for a single actor to initiate an order, approve a receipt, and clear an invoice.","Activity: [""Create Purchase Order Item"", ""Record Goods Receipt"", ""Clear Invoice""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Purchase Order Item""}) MATCH (e2:Event {Activity: ""Record Goods Receipt""}) MATCH (e3:Event {Activity: ""Clear Invoice""}) WHERE e1.Actor = e2.Actor AND e1.Actor = e3.Actor AND e2.Actor = e3.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied;"
"No employee should have control over all three: submitting an invoice, recording an invoice receipt, and clearing an invoice.","Activity: [""Vendor creates invoice"", ""Record Invoice Receipt"", ""Clear Invoice""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Vendor creates invoice""}) MATCH (e2:Event {Activity: ""Record Invoice Receipt""}) MATCH (e3:Event {Activity: ""Clear Invoice""}) WHERE e1.Actor = e2.Actor AND e1.Actor = e3.Actor AND e2.Actor = e3.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied;"
"No actor should perform all three actions: ""Create Purchase Order Item"", ""Record Goods Receipt"", and ""Clear Invoice"".","Activity: [""Create Purchase Order Item"", ""Record Goods Receipt"", ""Clear Invoice""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Purchase Order Item""}) MATCH (e2:Event {Activity: ""Record Goods Receipt""}) MATCH (e3:Event {Activity: ""Clear Invoice""}) WHERE e1.Actor = e2.Actor AND e1.Actor = e3.Actor AND e2.Actor = e3.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied;"
"The same person cannot be responsible for ""Receive Order Confirmation"", ""Change Quantity"", and ""Delete Purchase Order Item"".","Activity: [""Receive Order Confirmation"", ""Change Quantity"", ""Delete Purchase Order Item""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Receive Order Confirmation""}) MATCH (e2:Event {Activity: ""Change Quantity""}) MATCH (e3:Event {Activity: ""Delete Purchase Order Item""}) WHERE e1.Actor = e2.Actor AND e1.Actor = e3.Actor AND e2.Actor = e3.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied;"
"No one should manage all of these: ""Vendor creates invoice"", ""Record Invoice Receipt"", and ""Clear Invoice"".","Activity: [""Vendor creates invoice"", ""Record Invoice Receipt"", ""Clear Invoice""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Vendor creates invoice""}) MATCH (e2:Event {Activity: ""Record Invoice Receipt""}) MATCH (e3:Event {Activity: ""Clear Invoice""}) WHERE e1.Actor = e2.Actor AND e1.Actor = e3.Actor AND e2.Actor = e3.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied;"
"No single person should be in charge of documenting received goods, logging invoice receipts, and clearing payments.","Activity: [""Record Goods Receipt"", ""Record Invoice Receipt"", ""Clear Invoice""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Record Goods Receipt""}) MATCH (e2:Event {Activity: ""Record Invoice Receipt""}) MATCH (e3:Event {Activity: ""Clear Invoice""}) WHERE e1.Actor = e2.Actor AND e1.Actor = e3.Actor AND e2.Actor = e3.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied;"
"The same individual must not be responsible for deleting purchase order items, changing item quantities, and confirming orders.","Activity: [""Delete Purchase Order Item"", ""Change Quantity"", ""Receive Order Confirmation""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Delete Purchase Order Item""}) MATCH (e2:Event {Activity: ""Change Quantity""}) MATCH (e3:Event {Activity: ""Receive Order Confirmation""}) WHERE e1.Actor = e2.Actor AND e1.Actor = e3.Actor AND e2.Actor = e3.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied;"
"The same actor must not be assigned to ""Record Goods Receipt"", ""Record Service Entry Sheet"", and ""Receive Order Confirmation"".","Activity: [""Record Goods Receipt"", ""Record Service Entry Sheet"", ""Receive Order Confirmation""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Record Goods Receipt""}) MATCH (e2:Event {Activity: ""Record Service Entry Sheet""}) MATCH (e3:Event {Activity: ""Receive Order Confirmation""}) WHERE e1.Actor = e2.Actor AND e1.Actor = e3.Actor AND e2.Actor = e3.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied;"
"No person should perform each of the following tasks: ""Delete Purchase Order Item"", ""Change Quantity"", and ""Remove Payment Block"" .","Activity: [""Delete Purchase Order Item"", ""Change Quantity"", ""Remove Payment Block""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Delete Purchase Order Item""}) MATCH (e2:Event {Activity: ""Change Quantity""}) MATCH (e3:Event {Activity: ""Remove Payment Block""}) WHERE e1.Actor = e2.Actor AND e1.Actor = e3.Actor AND e2.Actor = e3.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied;"
No single actor should complete all steps for a single purchase order.,"Activity: [], EntityType: [""PO""], Actor: []","MATCH (e:Entity {EntityType: 'PO'})<-[:CORR]-(ev:Event) WITH e, COLLECT(DISTINCT ev.Actor) AS actors RETURN CASE WHEN ANY(actors IN COLLECT(actors) WHERE SIZE(actors) = 1) THEN false ELSE true END AS ruleSatisfied;"
A purchase order item must not be fully processed by a single individual.,"Activity: [], EntityType: [""POI""], Actor: []","MATCH (e:Entity {EntityType: 'POI'})<-[:CORR]-(ev:Event) WITH e, COLLECT(DISTINCT ev.Actor) AS actors RETURN CASE WHEN ANY(actors IN COLLECT(actors) WHERE SIZE(actors) = 1) THEN false ELSE true END AS ruleSatisfied;"
The entire set of tasks for any PO must not be executed by one person.,"Activity: [], EntityType: [""PO""], Actor: []","MATCH (e:Entity {EntityType: 'PO'})<-[:CORR]-(ev:Event) WITH e, COLLECT(DISTINCT ev.Actor) AS actors RETURN CASE WHEN ANY(actors IN COLLECT(actors) WHERE SIZE(actors) = 1) THEN false ELSE true END AS ruleSatisfied;"
No person should be responsible for all actions related to a single purchase order item.,"Activity: [], EntityType: [""POI""], Actor: []","MATCH (e:Entity {EntityType: 'POI'})<-[:CORR]-(ev:Event) WITH e, COLLECT(DISTINCT ev.Actor) AS actors RETURN CASE WHEN ANY(actors IN COLLECT(actors) WHERE SIZE(actors) = 1) THEN false ELSE true END AS ruleSatisfied;"
The full sequence of events for a PO must not be completed by only one actor.,"Activity: [], EntityType: [""PO""], Actor: []","MATCH (e:Entity {EntityType: 'PO'})<-[:CORR]-(ev:Event) WITH e, COLLECT(DISTINCT ev.Actor) AS actors RETURN CASE WHEN ANY(actors IN COLLECT(actors) WHERE SIZE(actors) = 1) THEN false ELSE true END AS ruleSatisfied;"
It is required that multiple actors participate in the processing of each purchase order item.,"Activity: [], EntityType: [""POI""], Actor: []","MATCH (e:Entity {EntityType: 'POI'})<-[:CORR]-(ev:Event) WITH e, COLLECT(DISTINCT ev.Actor) AS actors RETURN CASE WHEN ANY(actors IN COLLECT(actors) WHERE SIZE(actors) = 1) THEN false ELSE true END AS ruleSatisfied;"
The handling of a purchase order item must involve more than one individual.,"Activity: [], EntityType: [""POI""], Actor: []","MATCH (e:Entity {EntityType: 'POI'})<-[:CORR]-(ev:Event) WITH e, COLLECT(DISTINCT ev.Actor) AS actors RETURN CASE WHEN ANY(actors IN COLLECT(actors) WHERE SIZE(actors) = 1) THEN false ELSE true END AS ruleSatisfied;"
It is mandatory that no actor completes all events for an object of entity type PO.,"Activity: [], EntityType: [""PO""], Actor: []","MATCH (e:Entity {EntityType: 'PO'})<-[:CORR]-(ev:Event) WITH e, COLLECT(DISTINCT ev.Actor) AS actors RETURN CASE WHEN ANY(actors IN COLLECT(actors) WHERE SIZE(actors) = 1) THEN false ELSE true END AS ruleSatisfied;"
It is prohibited for one individual to execute all tasks within any process instance of entity type POI.,"Activity: [], EntityType: [""POI""], Actor: []","MATCH (e:Entity {EntityType: 'POI'})<-[:CORR]-(ev:Event) WITH e, COLLECT(DISTINCT ev.Actor) AS actors RETURN CASE WHEN ANY(actors IN COLLECT(actors) WHERE SIZE(actors) = 1) THEN false ELSE true END AS ruleSatisfied;"
"For any object of type PO, a single resource must not execute all tasks.","Activity: [], EntityType: [""PO""], Actor: []","MATCH (e:Entity {EntityType: 'PO'})<-[:CORR]-(ev:Event) WITH e, COLLECT(DISTINCT ev.Actor) AS actors RETURN CASE WHEN ANY(actors IN COLLECT(actors) WHERE SIZE(actors) = 1) THEN false ELSE true END AS ruleSatisfied;"
The full set of activities in any process instance of entity type POI must not be carried out by a single person.,"Activity: [], EntityType: [""POI""], Actor: []","MATCH (e:Entity {EntityType: 'POI'})<-[:CORR]-(ev:Event) WITH e, COLLECT(DISTINCT ev.Actor) AS actors RETURN CASE WHEN ANY(actors IN COLLECT(actors) WHERE SIZE(actors) = 1) THEN false ELSE true END AS ruleSatisfied;"
"All activities related to purchase requisition item creation, purchase order item creation, and invoice creation must be executed by one person.","Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item"", ""Vendor creates invoice""]","MATCH (e:Event) WHERE e.Activity IN ['Create Purchase Requisition Item', 'Create Purchase Order Item', 'Vendor creates invoice'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
A single individual should handle recording goods and invoice receipts. No one else may participate.,"Activity: [""Record Goods Receipt"", ""Record Invoice Receipt""]","MATCH (e:Event) WHERE e.Activity IN ['Record Goods Receipt', 'Record Invoice Receipt'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
Only one designated actor is allowed to delete purchase order items and clear invoices.,"Activity: [""Delete Purchase Order Item"", ""Clear Invoice""]","MATCH (e:Event) WHERE e.Activity IN ['Delete Purchase Order Item', 'Clear Invoice'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
One actor alone is tasked with confirming orders and making any necessary quantity adjustments.,"Activity: [""Receive Order Confirmation"", ""Change Quantity""]","MATCH (e:Event) WHERE e.Activity IN ['Receive Order Confirmation', 'Change Quantity'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
Exactly one person should be responsible for creating invoices and confirming orders.,"Activity: [""Vendor creates invoice"", ""Receive Order Confirmation""]","MATCH (e:Event) WHERE e.Activity IN ['Vendor creates invoice', 'Receive Order Confirmation'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
"The full set of actions involving purchase order item management, i.e.  creation to deletion, must be executed by a single individual.","Activity: [""Create Purchase Order Item"", ""Delete Purchase Order Item""]","MATCH (e:Event) WHERE e.Activity IN ['Create Purchase Order Item', 'Delete Purchase Order Item'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
No one other than an assigned individual may handle quantity changes and service entry recordings.,"Activity: [""Change Quantity"", ""Record Service Entry Sheet""]","MATCH (e:Event) WHERE e.Activity IN ['Change Quantity', 'Record Service Entry Sheet'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
"The activities ""Create Purchase Requisition Item"" and ""Create Purchase Order Item"" must be performed by a single actor.","Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item""]","MATCH (e:Event) WHERE e.Activity IN ['Create Purchase Requisition Item', 'Create Purchase Order Item'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
"Only one individual may perform the ""Vendor creates invoice"" and ""Record Goods Receipt"" activities.","Activity: [""Vendor creates invoice"", ""Record Goods Receipt""]","MATCH (e:Event) WHERE e.Activity IN ['Vendor creates invoice', 'Record Goods Receipt'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
"Only one individual is allowed to handle both ""Change Quantity"" and ""Receive Order Confirmation"" tasks.","Activity: [""Change Quantity"", ""Receive Order Confirmation""]","MATCH (e:Event) WHERE e.Activity IN ['Change Quantity', 'Receive Order Confirmation'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
"The full set of activities, including ""Create Purchase Requisition Item"", ""Create Purchase Order Item"", and ""Vendor creates invoice"", must be performed by the same individual.","Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item"", ""Vendor creates invoice""]","MATCH (e:Event) WHERE e.Activity IN ['Create Purchase Requisition Item', 'Create Purchase Order Item', 'Vendor creates invoice'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
A single actor must handle the creation and deletion of purchase order items for all purchase orders.,"Activity: [""Create Purchase Order Item"", ""Delete Purchase Order Item""], EntityType: [""PO""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""PO""}) WHERE e.Activity IN ['Create Purchase Order Item', 'Delete Purchase Order Item'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
Exactly one person should record goods receipt and invoice receipt for the entirety of purchase order items.,"Activity: [""Record Goods Receipt"", ""Record Invoice Receipt""], EntityType: [""POI""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""POI""}) WHERE e.Activity IN ['Record Goods Receipt', 'Record Invoice Receipt'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
A single actor should be responsible for both clearing invoice and removing the payment block for all purchase order items.,"Activity: [""Clear Invoice"", ""Remove Payment Block""], EntityType: [""POI""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""POI""}) WHERE e.Activity IN ['Clear Invoice', 'Remove Payment Block'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
One individual must be responsible for both creating a purchase order item and changing its quantity for all existent purchase orders.,"Activity: [""Create Purchase Order Item"", ""Change Quantity""], EntityType: [""PO""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""PO""}) WHERE e.Activity IN ['Create Purchase Order Item', 'Change Quantity'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
A specific person must be responsible for the creation of purchase order items and removal of a payment block across all purchase orders.,"Activity: [""Create Purchase Order Item"", ""Remove Payment Block""], EntityType: [""PO""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""PO""}) WHERE e.Activity IN ['Create Purchase Order Item', 'Remove Payment Block'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
"Exactly one person must handle the activity ""Create Purchase Order Item"" and ""Delete Purchase Order Item"" for all objects of type ""PO"".","Activity: [""Create Purchase Order Item"", ""Delete Purchase Order Item""], EntityType: [""PO""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""PO""}) WHERE e.Activity IN ['Create Purchase Order Item', 'Delete Purchase Order Item'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
"A single actor is required to create a ""Purchase Requisition Item"" and create the corresponding ""Purchase Order Item"" for all ""POI"" entities.","Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item""], EntityType: [""POI""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""POI""}) WHERE e.Activity IN ['Create Purchase Requisition Item', 'Approve Purchase Order Item'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
"One person must be responsible for both recording the ""Goods Receipt"" and the ""Invoice Receipt"" for any ""POI"".","Activity: [""Record Goods Receipt"", ""Record Invoice Receipt""], EntityType: [""POI""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""POI""}) WHERE e.Activity IN ['Record Goods Receipt', 'Record Invoice Receipt'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
"A single actor must both create a ""Purchase Order Item"" and remove its ""Payment Block"" for all ""POI"" entities.","Activity: [""Create Purchase Order Item"", ""Remove Payment Block""], EntityType: [""POI""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""POI""}) WHERE e.Activity IN ['Create Purchase Order Item', 'Remove Payment Block'] WITH COLLECT(DISTINCT e.Actor) AS actors RETURN size(actors) = 1 AS ruleSatisfied;"
Every Purchase Order Item must be created at least once.,"Activity: [""Create Purchase Order Item""], EntityType: [""POI""], Actor: []",MATCH (ent:Entity {EntityType: 'POI'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'Create Purchase Requisition Item'})-[:CORR]->(ent) } AND NOT EXISTS { MATCH (event:Event {Activity: 'Create Purchase Order Item'})-[:CORR]->(ent) } RETURN CASE WHEN count(ent) = 0 THEN true ELSE false END AS ruleSatisfied
At least one invoice must be created for every Purchase Order Item.,"Activity: [""Vendor creates invoice""], EntityType: [""POI""], Actor: []",MATCH (ent:Entity {EntityType: 'POI'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'Vendor creates invoice'})-[:CORR]->(ent) } RETURN CASE WHEN count(ent) = 0 THEN true ELSE false END AS ruleSatisfied
Every Purchase Order Item (POI) must be linked to a recording a service entry sheet.,"Activity: [""Record Service Entry Sheet""], EntityType: [""POI""], Actor: []",MATCH (ent:Entity {EntityType: 'POI'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'Record Service Entry Sheet'})-[:CORR]->(ent) } RETURN CASE WHEN count(ent) = 0 THEN true ELSE false END AS ruleSatisfied
"Every ""Purchase Order"" must have at least one ""Create Purchase Order Item"" event.","Activity: [""Create Purchase Order Item""], EntityType: [""PO""]",MATCH (ent:Entity {EntityType: 'PO'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'Create Purchase Order Item'})-[:CORR]->(ent) } RETURN CASE WHEN count(ent) = 0 THEN true ELSE false END AS ruleSatisfied
"A ""Purchase Order Item"" should have at least one ""Record Goods Receipt"" event associated with it.","Activity: [""Record Goods Receipt""], EntityType: [""POI""]",MATCH (ent:Entity {EntityType: 'POI'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'Record Goods Receipt'})-[:CORR]->(ent) } RETURN CASE WHEN count(ent) = 0 THEN true ELSE false END AS ruleSatisfied
"Each ""Purchase Order"" must be associated with at least one ""Vendor creates invoice"" event.","Activity: [""Vendor creates invoice""], EntityType: [""PO""]",MATCH (ent:Entity {EntityType: 'PO'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'Vendor creates invoice'})-[:CORR]->(ent) } RETURN CASE WHEN count(ent) = 0 THEN true ELSE false END AS ruleSatisfied
"At least one ""Record Invoice Receipt"" event must occur for each ""Purchase Order"" entity.","Activity: [""Record Invoice Receipt""], EntityType: [""PO""]",MATCH (ent:Entity {EntityType: 'PO'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'Record Invoice Receipt'})-[:CORR]->(ent) } RETURN CASE WHEN count(ent) = 0 THEN true ELSE false END AS ruleSatisfied
"A ""Purchase Order"" must have a ""Record Service Entry Sheet"" performed at least once.","Activity: [""Record Service Entry Sheet""], EntityType: [""PO""]",MATCH (ent:Entity {EntityType: 'PO'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'Record Service Entry Sheet'})-[:CORR]->(ent) } RETURN CASE WHEN count(ent) = 0 THEN true ELSE false END AS ruleSatisfied
"A ""Purchase Order"" must have a ""Change Quantity"" event performed at least once.","Activity: [""Change Quantity""], EntityType: [""PO""]",MATCH (ent:Entity {EntityType: 'PO'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'Change Quantity'})-[:CORR]->(ent) } RETURN CASE WHEN count(ent) = 0 THEN true ELSE false END AS ruleSatisfied
"At least one ""Receive Order Confirmation"" event must be performed for each ""Purchase Order Item"".","Activity: [""Receive Order Confirmation""], EntityType: [""POI""]",MATCH (ent:Entity {EntityType: 'POI'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'Receive Order Confirmation'})-[:CORR]->(ent) } RETURN CASE WHEN count(ent) = 0 THEN true ELSE false END AS ruleSatisfied
"A ""Purchase Order"" must have at least one associated ""Remove Payment Block"" event.","Activity: [""Remove Payment Block""], EntityType: [""PO""]",MATCH (ent:Entity {EntityType: 'PO'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'Remove Payment Block'})-[:CORR]->(ent) } RETURN CASE WHEN count(ent) = 0 THEN true ELSE false END AS ruleSatisfied
"A ""Create Purchase Requisition Item"" event must occur between 3 and 7 times.","Activity: [""Create Purchase Requisition Item""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Create Purchase Requisition Item'}) RETURN COUNT(e) >= 3 AND COUNT(e) <= 7 AS ruleSatisfied
"The number of times a ""Vendor creates invoice"" event takes place must be no fewer than 2 but no more than 4.","Activity: [""Vendor creates invoice""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Vendor creates invoice'}) RETURN COUNT(e) >= 2 AND COUNT(e) <= 4 AS ruleSatisfied
"At least one instance of ""Record Goods Receipt"" must occur, but no more than 3 are allowed.","Activity: [""Record Goods Receipt""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Record Goods Receipt'}) RETURN COUNT(e) >= 1 AND COUNT(e) <= 3 AS ruleSatisfied
"An event of type ""Delete Purchase Order Item"" must happen between 1 and 5 times.","Activity: [""Delete Purchase Order Item""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Delete Purchase Order Item'}) RETURN COUNT(e) >= 1 AND COUNT(e) <= 5 AS ruleSatisfied
"The action of ""Clear Invoice"" must take place at least 2 times but no more than 6 times.","Activity: [""Clear Invoice""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Clear Invoice'}) RETURN COUNT(e) >= 2 AND COUNT(e) <= 6 AS ruleSatisfied
"The event ""Remove Payment Block"" must occur between 2 and 5 times inclusively.","Activity: [""Remove Payment Block""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Remove Payment Block'}) RETURN COUNT(e) >= 2 AND COUNT(e) <= 5 AS ruleSatisfied
Creating a new order item should occur a minimum of 2 times and a maximum of 4 times.,"Activity: [""Create Purchase Order Item""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Create Purchase Order Item'}) RETURN COUNT(e) >=2 AND COUNT(e) <=4 AS ruleSatisfied
"At least 1 event for receiving an invoice from the vendor must happen, but no more than 3 invoices are allowed.","Activity: [""Vendor creates invoice""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Vendor creates invoice'}) RETURN COUNT(e) >=1 AND COUNT(e) <=3 AS ruleSatisfied
Goods receipt must be recorded between 3 and 7 times.,"Activity: [""Record Goods Receipt""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Record Goods Receipt'}) RETURN COUNT(e) >=3 AND COUNT(e) <=7 AS ruleSatisfied
The deletion of order items should not occur more than 4 times.,"Activity: [""Delete Purchase Order Item""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Delete Purchase Order Item'}) RETURN COUNT(e) <=4 AS ruleSatisfied
"A Purchase Order Item (POI) must have at least 1 and at most 3 ""Create Purchase Requisition Item"" events.","Activity: [""Create Purchase Requisition Item""], EntityType: [""POI""], Actor: []","MATCH (ent:Entity {EntityType: 'POI'}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event {Activity: 'Create Purchase Requisition Item'}) WITH ent, COUNT(event) AS requisitionCount WHERE requisitionCount < 1 OR requisitionCount > 3 WITH COUNT(ent) AS violatingEntities RETURN CASE WHEN violatingEntities > 0 THEN FALSE ELSE TRUE END AS ruleSatisfied"
"For every PO, there must be at least 2 and no more than 5 ""Vendor creates invoice"" events logged.","Activity: [""Vendor creates invoice""], EntityType: [""PO""], Actor: []","MATCH (ent:Entity {EntityType: 'PO'}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event {Activity: 'Vendor creates invoice'}) WITH ent, COUNT(event) AS invoiceCount WHERE invoiceCount < 2 OR invoiceCount > 5 WITH COUNT(ent) AS violatingEntities RETURN CASE WHEN violatingEntities > 0 THEN FALSE ELSE TRUE END AS ruleSatisfied"
"A Purchase Order (PO) must always have between 1 and 4 ""Record Goods Receipt"" events.","Activity: [""Record Goods Receipt""], EntityType: [""PO""], Actor: []","MATCH (ent:Entity {EntityType: 'PO'}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event {Activity: 'Record Goods Receipt'}) WITH ent, COUNT(event) AS goodsReceiptCount WHERE goodsReceiptCount < 1 OR goodsReceiptCount > 4 WITH COUNT(ent) AS violatingEntities RETURN CASE WHEN violatingEntities > 0 THEN FALSE ELSE TRUE END AS ruleSatisfied"
"No Purchase Order Item (POI) should have more than 2 ""Delete Purchase Order Item"" events logged.","Activity: [""Delete Purchase Order Item""], EntityType: [""POI""], Actor: []","MATCH (ent:Entity {EntityType: 'POI'}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event {Activity: 'Delete Purchase Order Item'}) WITH ent, COUNT(event) AS deleteCount WHERE deleteCount > 2 WITH COUNT(ent) AS violatingEntities RETURN CASE WHEN violatingEntities > 0 THEN FALSE ELSE TRUE END AS ruleSatisfied"
"Every Purchase Order Item (POI) must have exactly 1 ""Record Invoice Receipt"" event logged.","Activity: [""Record Invoice Receipt""], EntityType: [""POI""], Actor: []","MATCH (ent:Entity {EntityType: 'POI'}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event {Activity: 'Record Invoice Receipt'}) WITH ent, COUNT(event) AS invoiceReceiptCount WHERE invoiceReceiptCount <> 1 WITH COUNT(ent) AS violatingEntities RETURN CASE WHEN violatingEntities > 0 THEN FALSE ELSE TRUE END AS ruleSatisfied"
"At least 2 ""Record Service Entry Sheet"" events must be logged for each POI.","Activity: [""Record Service Entry Sheet""], EntityType: [""POI""], Actor: []","MATCH (ent:Entity {EntityType: 'POI'}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event {Activity: 'Record Service Entry Sheet'}) WITH ent, COUNT(event) AS serviceEntryCount WHERE serviceEntryCount < 2 WITH COUNT(ent) AS violatingEntities RETURN CASE WHEN violatingEntities > 0 THEN FALSE ELSE TRUE END AS ruleSatisfied"
"A Purchase Order (PO) must have no more than 1 ""Change Quantity"" event logged.","Activity: [""Change Quantity""], EntityType: [""PO""], Actor: []","MATCH (ent:Entity {EntityType: 'PO'}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event {Activity: 'Change Quantity'}) WITH ent, COUNT(event) AS quantityChangeCount WHERE quantityChangeCount > 1 WITH COUNT(ent) AS violatingEntities RETURN CASE WHEN violatingEntities > 0 THEN FALSE ELSE TRUE END AS ruleSatisfied"
Every purchase order item must have at least 1 event confirming that an order item has been created.,"Activity: [""Create Purchase Order Item""], EntityType: [""POI""], Actor: []","MATCH (ent:Entity {EntityType: 'POI'}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event {Activity: 'Create Purchase Order Item'}) WITH ent, COUNT(event) AS orderItemCount WHERE orderItemCount < 1 WITH COUNT(ent) AS violatingEntities RETURN CASE WHEN violatingEntities > 0 THEN FALSE ELSE TRUE END AS ruleSatisfied"
"For every purchase order, there should be at least 2 instances where an invoice is generated by the vendor.","Activity: [""Vendor creates invoice""], EntityType: [""PO""], Actor: []","MATCH (ent:Entity {EntityType: 'PO'}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event {Activity: 'Vendor creates invoice'}) WITH ent, COUNT(event) AS invoiceCount WHERE invoiceCount < 2 WITH COUNT(ent) AS violatingEntities RETURN CASE WHEN violatingEntities > 0 THEN FALSE ELSE TRUE END AS ruleSatisfied"
"A ""Create Purchase Requisition Item"" event and a ""Create Purchase Order Item"" event cannot occur together for the same object.","Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item""], EntityType: [], Actor: []",MATCH (e:Entity)<-[:CORR]-(event1:Event {Activity: 'Create Purchase Requisition Item'}) MATCH (e)<-[:CORR]-(event2:Event {Activity: 'Create Purchase Order Item'}) RETURN CASE WHEN COUNT(e) = 0 THEN true ELSE false END AS ruleSatisfied
A vendor cannot create an invoice and record a goods receipt for the same entity.,"Activity: [""Vendor creates invoice"", ""Record Goods Receipt""], EntityType: [], Actor: []",MATCH (e:Entity)<-[:CORR]-(event1:Event {Activity: 'Vendor creates invoice'}) MATCH (e)<-[:CORR]-(event2:Event {Activity: 'Record Goods Receipt'}) RETURN CASE WHEN COUNT(e) = 0 THEN true ELSE false END AS ruleSatisfied
Deleting a purchase order item and clearing an invoice should not happen for the same entity.,"Activity: [""Delete Purchase Order Item"", ""Clear Invoice""], EntityType: [], Actor: []",MATCH (e:Entity)<-[:CORR]-(event1:Event {Activity: 'Delete Purchase Order Item'}) MATCH (e)<-[:CORR]-(event2:Event {Activity: 'Clear Invoice'}) RETURN CASE WHEN COUNT(e) = 0 THEN true ELSE false END AS ruleSatisfied
"A ""Record Service Entry Sheet"" event and a ""Receive Order Confirmation"" event cannot occur for the same object.","Activity: [""Record Service Entry Sheet"", ""Receive Order Confirmation""], EntityType: [], Actor: []",MATCH (e:Entity)<-[:CORR]-(event1:Event {Activity: 'Record Service Entry Sheet'}) MATCH (e)<-[:CORR]-(event2:Event {Activity: 'Receive Order Confirmation'}) RETURN CASE WHEN COUNT(e) = 0 THEN true ELSE false END AS ruleSatisfied
"For the same entity, a goods receipt and an invoice receipt cannot be recorded both.","Activity: [""Record Goods Receipt"", ""Record Invoice Receipt""], EntityType: [], Actor: []",MATCH (e:Entity)<-[:CORR]-(event1:Event {Activity: 'Record Goods Receipt'}) MATCH (e)<-[:CORR]-(event2:Event {Activity: 'Record Invoice Receipt'}) RETURN CASE WHEN COUNT(e) = 0 THEN true ELSE false END AS ruleSatisfied
"Activities ""Create Purchase Requisition Item"" and ""Delete Purchase Order Item"" are mutually exclusive for any entity.","Activity: [""Create Purchase Requisition Item"", ""Delete Purchase Order Item""], EntityType: [], Actor: []",MATCH (e:Entity)<-[:CORR]-(event1:Event {Activity: 'Create Purchase Requisition Item'}) MATCH (e)<-[:CORR]-(event2:Event {Activity: 'Delete Purchase Order Item'}) RETURN CASE WHEN COUNT(e) = 0 THEN true ELSE false END AS ruleSatisfied
" ""Record Goods Receipt"" and ""Record Invoice Receipt"" may not both occur for the same entity.","Activity: [""Record Goods Receipt"", ""Record Invoice Receipt""], EntityType: [], Actor: []",MATCH (e:Entity)<-[:CORR]-(event1:Event {Activity: 'Record Goods Receipt'}) MATCH (e)<-[:CORR]-(event2:Event {Activity: 'Record Invoice Receipt'}) RETURN CASE WHEN COUNT(e) = 0 THEN true ELSE false END AS ruleSatisfied
It is prohibited for an entity to record both a service entry sheet and clear an invoice.,"Activity: [""Record Service Entry Sheet"", ""Clear Invoice""], EntityType: [], Actor: []",MATCH (e:Entity)<-[:CORR]-(event1:Event {Activity: 'Record Service Entry Sheet'}) MATCH (e)<-[:CORR]-(event2:Event {Activity: 'Clear Invoice'}) RETURN CASE WHEN COUNT(e) = 0 THEN true ELSE false END AS ruleSatisfied
"An entity cannot have both ""Vendor creates invoice"" and ""Remove Payment Block"" events.","Activity: [""Vendor creates invoice"", ""Remove Payment Block""], EntityType: [], Actor: []",MATCH (e:Entity)<-[:CORR]-(event1:Event {Activity: 'Vendor creates invoice'}) MATCH (e)<-[:CORR]-(event2:Event {Activity: 'Remove Payment Block'}) RETURN CASE WHEN COUNT(e) = 0 THEN true ELSE false END AS ruleSatisfied
Changing the quantity and recording the invoice receipt for the same object is not allowed.,"Activity: [""Change Quantity"", ""Record Invoice Receipt""], EntityType: [], Actor: []",MATCH (e:Entity)<-[:CORR]-(event1:Event {Activity: 'Change Quantity'}) MATCH (e)<-[:CORR]-(event2:Event {Activity: 'Record Invoice Receipt'}) RETURN CASE WHEN COUNT(e) = 0 THEN true ELSE false END AS ruleSatisfied
"For every Purchase Order Item (POI), if a ""Create Purchase Requisition Item"" is performed, a ""Create Purchase Order Item"" must also occur.","Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item""], EntityType: [""POI""], Actor: []",MATCH (e1:Event {Activity: 'Create Purchase Requisition Item'})-[:CORR]->(ent:Entity {EntityType: 'POI'}) WHERE NOT EXISTS { MATCH (e2:Event {Activity: 'Create Purchase Order Item'})-[:CORR]->(ent) } RETURN COUNT(e1) = 0 AS ruleSatisfied
"If a Purchase Order item is created for a PO, then a ""Record Goods Receipt"" must also be performed for it.","Activity: [""Create Purchase Order Item"", ""Record Goods Receipt""], EntityType: [""PO""], Actor: []",MATCH (e1:Event {Activity: 'Create Purchase Order Item'})-[:CORR]->(ent:Entity {EntityType: 'PO'}) WHERE NOT EXISTS { MATCH (e2:Event {Activity: 'Record Goods Receipt'})-[:CORR]->(ent) } RETURN COUNT(e1) = 0 AS ruleSatisfied
"When for a PO, an invoice is created by a vendor, it must also be recorded.","Activity: [""Vendor creates invoice"", ""Record Invoice Receipt""], EntityType: [""PO""], Actor: []",MATCH (e1:Event {Activity: 'Vendor creates invoice'})-[:CORR]->(ent:Entity {EntityType: 'PO'}) WHERE NOT EXISTS { MATCH (e2:Event {Activity: 'Record Invoice Receipt'})-[:CORR]->(ent) } RETURN COUNT(e1) = 0 AS ruleSatisfied
"For every Purchase Order (PO), if the ""Change Quantity"" event occurs, the ""Record Service Entry Sheet"" must also be performed.","Activity: [""Change Quantity"", ""Record Service Entry Sheet""], EntityType: [""PO""], Actor: []",MATCH (e1:Event {Activity: 'Change Quantity'})-[:CORR]->(ent:Entity {EntityType: 'PO'}) WHERE NOT EXISTS { MATCH (e2:Event {Activity: 'Record Service Entry Sheet'})-[:CORR]->(ent) } RETURN COUNT(e1) = 0 AS ruleSatisfied
"For every POI, if a ""Create Purchase Requisition Item"" event is performed, ""Create Purchase Order Item"" must also happen.","Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item""], EntityType: [""POI""], Actor: []",MATCH (e1:Event {Activity: 'Create Purchase Requisition Item'})-[:CORR]->(ent:Entity {EntityType: 'POI'}) WHERE NOT EXISTS { MATCH (e2:Event {Activity: 'Create Purchase Order Item'})-[:CORR]->(ent) } RETURN COUNT(e1) = 0 AS ruleSatisfied
"For every Purchase Order Item (POI), if the quantity is changed, the corresponding invoice receipt must also be recorded.","Activity: [""Change Quantity"", ""Record Invoice Receipt""], EntityType: [""POI""], Actor: []",MATCH (e1:Event {Activity: 'Change Quantity'})-[:CORR]->(ent:Entity {EntityType: 'POI'}) WHERE NOT EXISTS { MATCH (e2:Event {Activity: 'Record Invoice Receipt'})-[:CORR]->(ent) } RETURN COUNT(e1) = 0 AS ruleSatisfied
"If a Purchase Order Item (POI) is created, then an invoice receipt must be recorded.","Activity: [""Create Purchase Order Item"", ""Record Invoice Receipt""], EntityType: [""POI""], Actor: []",MATCH (e1:Event {Activity: 'Create Purchase Order Item'})-[:CORR]->(ent:Entity {EntityType: 'POI'}) WHERE NOT EXISTS { MATCH (e2:Event {Activity: 'Record Invoice Receipt'})-[:CORR]->(ent) } RETURN COUNT(e1) = 0 AS ruleSatisfied
"Every time a vendor issues an invoice for a purchase order item, an entry for service verification must also be made.","Activity: [""Vendor creates invoice"", ""Record Service Entry Sheet""], EntityType: [""POI""], Actor: []",MATCH (e1:Event {Activity: 'Vendor creates invoice'})-[:CORR]->(ent:Entity {EntityType: 'POI'}) WHERE NOT EXISTS { MATCH (e2:Event {Activity: 'Record Service Entry Sheet'})-[:CORR]->(ent) } RETURN COUNT(e1) = 0 AS ruleSatisfied
"If an order confirmation is received for a purchase order, an event for creating purchase order items must also occur.","Activity: [""Receive Order Confirmation"", ""Create Purchase Order Item""], EntityType: [""PO""], Actor: []",MATCH (e1:Event {Activity: 'Receive Order Confirmation'})-[:CORR]->(ent:Entity {EntityType: 'PO'}) WHERE NOT EXISTS { MATCH (e2:Event {Activity: 'Create Purchase Order Item'})-[:CORR]->(ent) } RETURN COUNT(e1) = 0 AS ruleSatisfied
"For every purchase order item, if the quantity changes, the corresponding invoice receipt must be recorded.","Activity: [""Change Quantity"", ""Record Invoice Receipt""], EntityType: [""POI""], Actor: []",MATCH (e1:Event {Activity: 'Change Quantity'})-[:CORR]->(ent:Entity {EntityType: 'POI'}) WHERE NOT EXISTS { MATCH (e2:Event {Activity: 'Record Invoice Receipt'})-[:CORR]->(ent) } RETURN COUNT(e1) = 0 AS ruleSatisfied
"At least 3 activities from the set {Create Purchase Requisition Item, Create Purchase Order Item, Vendor creates invoice, Record Goods Receipt} must be performed for each Purchase Order Item (POI).","Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item"", ""Vendor creates invoice"", ""Record Goods Receipt""], EntityType: [""POI""], Actor: []","MATCH (ent:Entity {EntityType: ""POI""}) OPTIONAL MATCH (ent)<-[:CORR]-(ev:Event) WITH ent, COLLECT(DISTINCT ev.Activity) AS activities, ['Create Purchase Requisition Item', 'Create Purchase Order Item', 'Vendor creates invoice', 'Record Goods Receipt'] AS requiredActivities WITH activities, requiredActivities, SIZE([activity IN requiredActivities WHERE activity IN activities]) AS countRequired WITH COLLECT(countRequired) AS counts RETURN CASE WHEN ANY(count IN counts WHERE count < 3) THEN false ELSE true END AS ruleSatisfied"
"Every Purchase Order must have at least 2 activities from the set {Record Invoice Receipt, Clear Invoice}.","Activity: [""Record Invoice Receipt"", ""Clear Invoice""], EntityType: [""PO""], Actor: []","MATCH (ent:Entity {EntityType: ""PO""}) OPTIONAL MATCH (ent)<-[:CORR]-(ev:Event) WITH ent, COLLECT(DISTINCT ev.Activity) AS activities, ['Record Invoice Receipt', 'Clear Invoice'] AS requiredActivities WITH activities, requiredActivities, SIZE([activity IN requiredActivities WHERE activity IN activities]) AS countRequired WITH COLLECT(countRequired) AS counts RETURN CASE WHEN ANY(count IN counts WHERE count < 2) THEN false ELSE true END AS ruleSatisfied"
"For each Purchase Order, at least one activity from the set {Record Goods Receipt, Vendor creates invoice} must be performed.","Activity: [""Record Goods Receipt"", ""Vendor creates invoice""], EntityType: [""PO""], Actor: []","MATCH (ent:Entity {EntityType: ""PO""}) OPTIONAL MATCH (ent)<-[:CORR]-(ev:Event) WITH ent, COLLECT(DISTINCT ev.Activity) AS activities, ['Record Goods Receipt', 'Vendor creates invoice'] AS requiredActivities WITH activities, requiredActivities, SIZE([activity IN requiredActivities WHERE activity IN activities]) AS countRequired WITH COLLECT(countRequired) AS counts RETURN CASE WHEN ANY(count IN counts WHERE count < 1) THEN false ELSE true END AS ruleSatisfied"
"A Purchase Order Item must have performed at least 2 actions from {Change Quantity, Remove Payment Block}.","Activity: [""Change Quantity"", ""Remove Payment Block""], EntityType: [""POI""], Actor: []","MATCH (ent:Entity {EntityType: ""POI""}) OPTIONAL MATCH (ent)<-[:CORR]-(ev:Event) WITH ent, COLLECT(DISTINCT ev.Activity) AS activities, ['Change Quantity', 'Remove Payment Block'] AS requiredActivities WITH activities, requiredActivities, SIZE([activity IN requiredActivities WHERE activity IN activities]) AS countRequired WITH COLLECT(countRequired) AS counts RETURN CASE WHEN ANY(count IN counts WHERE count < 2) THEN false ELSE true END AS ruleSatisfied"
"Every Purchase Order Item must have been linked to at least 1 of ""Create Purchase Order Item"" or ""Record Invoice Receipt"".","Activity: [""Create Purchase Order Item"", ""Record Invoice Receipt""], EntityType: [""POI""], Actor: []","MATCH (ent:Entity {EntityType: ""POI""}) OPTIONAL MATCH (ent)<-[:CORR]-(ev:Event) WITH ent, COLLECT(DISTINCT ev.Activity) AS activities, ['Create Purchase Order Item', 'Record Invoice Receipt'] AS requiredActivities WITH activities, requiredActivities, SIZE([activity IN requiredActivities WHERE activity IN activities]) AS countRequired WITH COLLECT(countRequired) AS counts RETURN CASE WHEN ANY(count IN counts WHERE count < 1) THEN false ELSE true END AS ruleSatisfied"
"For each Purchase Order Item, at least 2 activities from the set {Vendor creates invoice, Record Service Entry Sheet} must be performed.","Activity: [""Vendor creates invoice"", ""Record Service Entry Sheet""], EntityType: [""POI""], Actor: []","MATCH (ent:Entity {EntityType: ""POI""}) OPTIONAL MATCH (ent)<-[:CORR]-(ev:Event) WITH ent, COLLECT(DISTINCT ev.Activity) AS activities, ['Vendor creates invoice', 'Record Service Entry Sheet'] AS requiredActivities WITH activities, requiredActivities, SIZE([activity IN requiredActivities WHERE activity IN activities]) AS countRequired WITH COLLECT(countRequired) AS counts RETURN CASE WHEN ANY(count IN counts WHERE count < 2) THEN false ELSE true END AS ruleSatisfied"
"For each Purchase Order, at least one action from the set {Record Goods Receipt, Remove Payment Block} must be completed.","Activity: [""Record Goods Receipt"", ""Remove Payment Block""], EntityType: [""PO""], Actor: []","MATCH (ent:Entity {EntityType: ""PO""}) OPTIONAL MATCH (ent)<-[:CORR]-(ev:Event) WITH ent, COLLECT(DISTINCT ev.Activity) AS activities, ['Record Goods Receipt', 'Remove Payment Block'] AS requiredActivities WITH activities, requiredActivities, SIZE([activity IN requiredActivities WHERE activity IN activities]) AS countRequired WITH COLLECT(countRequired) AS counts RETURN CASE WHEN ANY(count IN counts WHERE count < 1) THEN false ELSE true END AS ruleSatisfied"
"For every Purchase Order, at least 4 actions from Create Purchase Order Item, Record Goods Receipt, Vendor creates invoice, Record Invoice Receipt must be performed.","Activity: [""Create Purchase Order Item"", ""Record Goods Receipt"", ""Vendor creates invoice"", ""Record Invoice Receipt""], EntityType: [""PO""], Actor: []","MATCH (ent:Entity {EntityType: ""PO""}) OPTIONAL MATCH (ent)<-[:CORR]-(ev:Event) WITH ent, COLLECT(DISTINCT ev.Activity) AS activities, ['Create Purchase Order Item', 'Record Goods Receipt', 'Vendor creates invoice', 'Record Invoice Receipt'] AS requiredActivities WITH activities, requiredActivities, SIZE([activity IN requiredActivities WHERE activity IN activities]) AS countRequired WITH COLLECT(countRequired) AS counts RETURN CASE WHEN ANY(count IN counts WHERE count < 4) THEN false ELSE true END AS ruleSatisfied"
The maximum processing time for a Purchase Order is less than 48 hours.,"Activity: [], EntityType: [""PO""], Actor: []","MATCH (ent:Entity {EntityType: ""PO""})<-[:CORR]-(e:Event) WITH ent, MIN(e.timestamp) as earliestEvent, MAX(e.timestamp) as latestEvent WITH duration.between(earliestEvent, latestEvent) AS processingTime RETURN MAX(processingTime.seconds) < (48 * 60 * 60) AS ruleSatisfied"
The average duration between the first and last event for Purchase Order Items is more than 3 days.,"Activity: [], EntityType: [""POI""], Actor: []","MATCH (ent:Entity {EntityType: ""POI""})<-[:CORR]-(e:Event) WITH ent, MIN(e.timestamp) as earliestEvent, MAX(e.timestamp) as latestEvent WITH duration.between(earliestEvent, latestEvent) AS eventDuration RETURN AVG(eventDuration.seconds) > (3 * 24 * 60 * 60) AS ruleSatisfied"
A Purchase Order entity is processed for at least 12 hours on average.,"Activity: [], EntityType: [""PO""], Actor: []","MATCH (ent:Entity {EntityType: ""PO""})<-[:CORR]-(e:Event) WITH ent, MIN(e.timestamp) as earliestEvent, MAX(e.timestamp) as latestEvent WITH duration.between(earliestEvent, latestEvent) AS processingTime RETURN AVG(processingTime.seconds) >= (12 * 60 * 60) AS ruleSatisfied"
The processing time for PO Items should never exceed 2 hours.,"Activity: [], EntityType: [""POI""], Actor: []","MATCH (ent:Entity {EntityType: ""POI""})<-[:CORR]-(e:Event) WITH ent, MIN(e.timestamp) as earliestEvent, MAX(e.timestamp) as latestEvent WITH duration.between(earliestEvent, latestEvent) AS processingTime RETURN MAX(processingTime.seconds) < (2 * 60 * 60) AS ruleSatisfied"
The average processing duration for a PO is greater than 24 hours.,"Activity: [], EntityType: [""PO""], Actor: []","MATCH (ent:Entity {EntityType: ""PO""})<-[:CORR]-(e:Event) WITH ent, MIN(e.timestamp) as earliestEvent, MAX(e.timestamp) as latestEvent WITH duration.between(earliestEvent, latestEvent) AS processingTime RETURN AVG(processingTime.seconds) > (24 * 60 * 60) AS ruleSatisfied"
A PO Item should be processed within a maximum of 72 hours.,"Activity: [], EntityType: [""POI""], Actor: []","MATCH (ent:Entity {EntityType: ""POI""})<-[:CORR]-(e:Event) WITH ent, MIN(e.timestamp) as earliestEvent, MAX(e.timestamp) as latestEvent WITH duration.between(earliestEvent, latestEvent) AS processingTime RETURN MAX(processingTime.seconds) <= (72 * 60 * 60) AS ruleSatisfied"
A Purchase Order should be handled for no more than 2 days.,"Activity: [], EntityType: [""PO""], Actor: []","MATCH (ent:Entity {EntityType: ""PO""})<-[:CORR]-(e:Event) WITH ent, MIN(e.timestamp) as earliestEvent, MAX(e.timestamp) as latestEvent WITH duration.between(earliestEvent, latestEvent) AS processingTime RETURN MAX(processingTime.seconds) <= (2 * 24 * 60 * 60) AS ruleSatisfied"
The time it takes to process PO Items is less than 3 days on average.,"Activity: [], EntityType: [""POI""], Actor: []","MATCH (ent:Entity {EntityType: ""POI""})<-[:CORR]-(e:Event) WITH ent, MIN(e.timestamp) as earliestEvent, MAX(e.timestamp) as latestEvent WITH duration.between(earliestEvent, latestEvent) AS processingTime RETURN AVG(processingTime.seconds) < (3 * 24 * 60 * 60) AS ruleSatisfied"
PO Items must not exist for more than 5 days.,"Activity: [], EntityType: [""POI""], Actor: []","MATCH (ent:Entity {EntityType: ""POI""})<-[:CORR]-(e:Event) WITH ent, MIN(e.timestamp) as earliestEvent, MAX(e.timestamp) as latestEvent WITH duration.between(earliestEvent, latestEvent) AS processingTime RETURN MAX(processingTime.seconds) <= (5 * 24 * 60 * 60) AS ruleSatisfied"
A PO can never exist for more than 7 days.,"Activity: [], EntityType: [""PO""], Actor: []","MATCH (ent:Entity {EntityType: ""PO""})<-[:CORR]-(e:Event) WITH ent, MIN(e.timestamp) as earliestEvent, MAX(e.timestamp) as latestEvent WITH duration.between(earliestEvent, latestEvent) AS processingTime RETURN MAX(processingTime.seconds) <= (7 * 24 * 60 * 60) AS ruleSatisfied"
A purchase requisition item must be created before a purchase order item can be made.,"Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Create Purchase Requisition Item""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e2, count(e1) AS precedingRequisitionCount RETURN CASE WHEN any(e IN collect(precedingRequisitionCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
The invoice receipt must be recorded before clearing the invoice.,"Activity: [""Record Invoice Receipt"", ""Clear Invoice""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Clear Invoice""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Record Invoice Receipt""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e2, count(e1) AS precedingReceiptCount RETURN CASE WHEN any(e IN collect(precedingReceiptCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
A purchase order item must be created before it can be deleted.,"Activity: [""Create Purchase Order Item"", ""Delete Purchase Order Item""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Delete Purchase Order Item""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e2, count(e1) AS precedingCreateCount RETURN CASE WHEN any(e IN collect(precedingCreateCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
A service entry sheet must be recorded before removing any payment block.,"Activity: [""Record Service Entry Sheet"", ""Remove Payment Block""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Remove Payment Block""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Record Service Entry Sheet""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e2, count(e1) AS precedingServiceEntryCount RETURN CASE WHEN any(e IN collect(precedingServiceEntryCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
An order confirmation must be received before a change in quantity can be made.,"Activity: [""Receive Order Confirmation"", ""Change Quantity""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Change Quantity""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Receive Order Confirmation""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e2, count(e1) AS precedingConfirmationCount RETURN CASE WHEN any(e IN collect(precedingConfirmationCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
A purchase requisition item must be created before the vendor can create an invoice.,"Activity: [""Create Purchase Requisition Item"", ""Vendor creates invoice""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Vendor creates invoice""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Create Purchase Requisition Item""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e2, count(e1) AS precedingRequisitionItemCount RETURN CASE WHEN any(e IN collect(precedingRequisitionItemCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
Goods receipt must be recorded before the invoice can be cleared.,"Activity: [""Record Goods Receipt"", ""Clear Invoice""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Clear Invoice""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Record Goods Receipt""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e2, count(e1) AS precedingReceiptCount RETURN CASE WHEN any(e IN collect(precedingReceiptCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
A purchase requisition item must be created before a purchase order item can be created.,"Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Create Purchase Requisition Item""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e2, count(e1) AS precedingRequisitionCount RETURN CASE WHEN any(e IN collect(precedingRequisitionCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
A vendor invoice must be created before recording the service entry sheet.,"Activity: [""Vendor creates invoice"", ""Record Service Entry Sheet""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Record Service Entry Sheet""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Vendor creates invoice""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e2, count(e1) AS precedingInvoiceCount RETURN CASE WHEN any(e IN collect(precedingInvoiceCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"""Create Purchase Order Item"" must happen before ""Delete Purchase Order Item"" can take place.","Activity: [""Create Purchase Order Item"", ""Delete Purchase Order Item""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Delete Purchase Order Item""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e2, count(e1) AS precedingCreateCount RETURN CASE WHEN any(e IN collect(precedingCreateCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"""Receive Order Confirmation"" must occur before ""Change Quantity"" can be executed.","Activity: [""Receive Order Confirmation"", ""Change Quantity""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Change Quantity""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Receive Order Confirmation""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e2, count(e1) AS precedingConfirmationCount RETURN CASE WHEN any(e IN collect(precedingConfirmationCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After the creation of a purchase requisition item, a purchase order item must be created.","Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Purchase Requisition Item""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Whenever a vendor creates an invoice, a goods receipt must be recorded afterward.","Activity: [""Vendor creates invoice"", ""Record Goods Receipt""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Vendor creates invoice""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Record Goods Receipt""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If a purchase order item is deleted, an invoice should be cleared afterward.","Activity: [""Delete Purchase Order Item"", ""Clear Invoice""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Delete Purchase Order Item""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Clear Invoice""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
The record of an invoice receipt must happen if  goods receipt has been recorded before.,"Activity: [""Record Invoice Receipt"", ""Record Goods Receipt""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Record Goods Receipt""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Record Invoice Receipt""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If a service entry sheet is recorded, the payment block should be removed afterward.","Activity: [""Record Service Entry Sheet"", ""Remove Payment Block""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Record Service Entry Sheet""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Remove Payment Block""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After creating a purchase requisition item, the order confirmation must be received.","Activity: [""Create Purchase Requisition Item"", ""Receive Order Confirmation""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Purchase Requisition Item""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Receive Order Confirmation""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After a purchase order item is created, the purchase requisition item should be reviewed.","Activity: [""Create Purchase Order Item"", ""Create Purchase Requisition Item""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Create Purchase Requisition Item""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If ""Vendor creates invoice,"" the ""Record Goods Receipt"" must follow.","Activity: [""Vendor creates invoice"", ""Record Goods Receipt""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Vendor creates invoice""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Record Goods Receipt""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After ""Record Invoice Receipt,"" the ""Clear Invoice"" must occur.","Activity: [""Record Invoice Receipt"", ""Clear Invoice""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Record Invoice Receipt""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Clear Invoice""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"When a ""Delete Purchase Order Item"" occurs, it must be followed by a ""Record Service Entry Sheet.""","Activity: [""Delete Purchase Order Item"", ""Record Service Entry Sheet""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Delete Purchase Order Item""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Record Service Entry Sheet""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Once ""Record Goods Receipt"" is performed, the ""Record Invoice Receipt"" must follow.","Activity: [""Record Goods Receipt"", ""Record Invoice Receipt""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Record Goods Receipt""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Record Invoice Receipt""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After creating a purchase requisition item, a purchase order item must be created within 5 days.","Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Purchase Requisition Item""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e2.timestamp <= e1.timestamp + duration({days: 5}) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If an invoice is created by the vendor, the goods receipt must be recorded within 7 days.","Activity: [""Vendor creates invoice"", ""Record Goods Receipt""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Vendor creates invoice""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Record Goods Receipt""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e2.timestamp <= e1.timestamp + duration({days: 7}) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"When the purchase order item is created, the invoice receipt must be recorded within 10 days.","Activity: [""Create Purchase Order Item"", ""Record Invoice Receipt""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Record Invoice Receipt""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e2.timestamp <= e1.timestamp + duration({days: 10}) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If a service entry sheet is recorded, the payment block should be cleared within 30 days.","Activity: [""Record Service Entry Sheet"", ""Remove Payment Block""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Record Service Entry Sheet""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Remove Payment Block""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e2.timestamp <= e1.timestamp + duration({days: 30}) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Once the purchase order item is deleted, the invoice must be cleared within 14 days.","Activity: [""Delete Purchase Order Item"", ""Clear Invoice""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Delete Purchase Order Item""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Clear Invoice""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e2.timestamp <= e1.timestamp + duration({days: 14}) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After creating a purchase requisition item, an order confirmation must be received within 7 days.","Activity: [""Create Purchase Requisition Item"", ""Receive Order Confirmation""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Purchase Requisition Item""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Receive Order Confirmation""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e2.timestamp <= e1.timestamp + duration({days: 7}) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If the goods receipt is recorded, the invoice receipt must follow within 15 days.","Activity: [""Record Goods Receipt"", ""Record Invoice Receipt""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Record Goods Receipt""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Record Invoice Receipt""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e2.timestamp <= e1.timestamp + duration({days: 15}) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After a ""Vendor creates invoice"" event, a ""Record Goods Receipt"" event must be recorded within 14 days.","Activity: [""Vendor creates invoice"", ""Record Goods Receipt""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Vendor creates invoice""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Record Goods Receipt""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e2.timestamp <= e1.timestamp + duration({days: 14}) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If the ""Record Invoice Receipt"" event occurs, the ""Record Goods Receipt"" event must be recorded within 10 days.","Activity: [""Record Invoice Receipt"", ""Record Goods Receipt""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Record Invoice Receipt""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Record Goods Receipt""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e2.timestamp <= e1.timestamp + duration({days: 10}) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After a ""Delete Purchase Order Item"" event, the ""Clear Invoice"" event must occur within 5 days.","Activity: [""Delete Purchase Order Item"", ""Clear Invoice""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Delete Purchase Order Item""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Clear Invoice""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e2.timestamp <= e1.timestamp + duration({days: 5}) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If ""Create Purchase Requisition Item"" occurs, ""Create Purchase Order Item"" must be created within 5 days.","Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Purchase Requisition Item""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e2.timestamp <= e1.timestamp + duration({days: 5}) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If a purchase requisition item is created, it must lead to either the creation of a purchase order item or the deletion of the item.","Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item"", ""Delete Purchase Order Item""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Purchase Requisition Item""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Delete Purchase Order Item""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After a vendor submits an invoice, it must either be cleared or have a payment block removed.","Activity: [""Vendor creates invoice"", ""Clear Invoice"", ""Remove Payment Block""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Vendor creates invoice""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Clear Invoice""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Remove Payment Block""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If a requisition item is created, then it must be followed by either a purchase order item creation or an invoice submission.","Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item"", ""Vendor creates invoice""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Purchase Requisition Item""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Vendor creates invoice""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If an invoice is submitted by the vendor, then a payment block removal or invoice clearing must happen after.","Activity: [""Vendor creates invoice"", ""Remove Payment Block"", ""Clear Invoice""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Vendor creates invoice""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Remove Payment Block""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Clear Invoice""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Following the creation of a purchase order item, the vendor must create an invoice or goods receipt must be recorded.","Activity: [""Create Purchase Order Item"", ""Vendor creates invoice"", ""Record Goods Receipt""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Vendor creates invoice""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Record Goods Receipt""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"When a vendor creates an invoice, the invoice must be cleared or an invoice receipt must be recorded.","Activity: [""Vendor creates invoice"", ""Clear Invoice"", ""Record Invoice Receipt""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Vendor creates invoice""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Clear Invoice""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Record Invoice Receipt""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If an invoice receipt is recorded, then a service entry sheet must be created or the payment block must be removed.","Activity: [""Record Invoice Receipt"", ""Record Service Entry Sheet"", ""Remove Payment Block""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Record Invoice Receipt""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Record Service Entry Sheet""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Remove Payment Block""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If a purchase order item is created, then the quantity must be changed or the order confirmation must be received.","Activity: [""Create Purchase Order Item"", ""Change Quantity"", ""Receive Order Confirmation""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Change Quantity""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Receive Order Confirmation""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If a ""Create Purchase Requisition Item"" event occurs, then a ""Create Purchase Order Item"" or ""Delete Purchase Order Item"" must follow.","Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item"", ""Delete Purchase Order Item""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Purchase Requisition Item""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Delete Purchase Order Item""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After recording a ""Goods Receipt"", a ""Record Invoice Receipt"" or ""Clear Invoice"" must follow.","Activity: [""Record Goods Receipt"", ""Record Invoice Receipt"", ""Clear Invoice""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Record Goods Receipt""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Record Invoice Receipt""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Clear Invoice""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Once a ""Purchase Order Item"" is created, either a ""Change Quantity"" or ""Receive Order Confirmation"" must be made.","Activity: [""Create Purchase Order Item"", ""Change Quantity"", ""Receive Order Confirmation""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Change Quantity""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Receive Order Confirmation""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"A ""Create Purchase Order Item"" activity must always be preceded by a ""Create Purchase Requisition Item"" for the same entity.","Activity: [""Create Purchase Order Item"", ""Create Purchase Requisition Item""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Create Purchase Order Item""}) OPTIONAL MATCH (e1:Event {Activity: ""Create Purchase Requisition Item""})-[:DF]->(e2) WITH e2, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Every time a ""Record Invoice Receipt"" is processed, it must be immediately preceded by a ""Record Goods Receipt"" for the same object.","Activity: [""Record Invoice Receipt"", ""Record Goods Receipt""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Record Invoice Receipt""}) OPTIONAL MATCH (e1:Event {Activity: ""Record Goods Receipt""})-[:DF]->(e2) WITH e2, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Before a ""Clear Invoice"" event can happen, the ""Record Invoice Receipt"" event must have been completed immediately before.","Activity: [""Clear Invoice"", ""Record Invoice Receipt""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Clear Invoice""}) OPTIONAL MATCH (e1:Event {Activity: ""Record Invoice Receipt""})-[:DF]->(e2) WITH e2, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Whenever a ""Change Quantity"" event is logged, it must be immediately preceded by a ""Record Goods Receipt"" activity for the same object.","Activity: [""Change Quantity"", ""Record Goods Receipt""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Change Quantity""}) OPTIONAL MATCH (e1:Event {Activity: ""Record Goods Receipt""})-[:DF]->(e2) WITH e2, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"A ""Delete Purchase Order Item"" event must not occur unless a corresponding ""Create Purchase Order Item"" event has occurred directly before.","Activity: [""Delete Purchase Order Item"", ""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Delete Purchase Order Item""}) OPTIONAL MATCH (e1:Event {Activity: ""Create Purchase Order Item""})-[:DF]->(e2) WITH e2, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
A purchase requisition item must be created directly before the corresponding purchase order item can be created.,"Activity: [""Create Purchase Order Item"", ""Create Purchase Requisition Item""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Create Purchase Order Item""}) OPTIONAL MATCH (e1:Event {Activity: ""Create Purchase Requisition Item""})-[:DF]->(e2) WITH e2, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
The creation of a purchase order item must always occur directly before any related goods receipt activity.,"Activity: [""Record Goods Receipt"", ""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Record Goods Receipt""}) OPTIONAL MATCH (e1:Event {Activity: ""Create Purchase Order Item""})-[:DF]->(e2) WITH e2, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Before an item can be deleted from the purchase order, it must have been created immediately before.","Activity: [""Delete Purchase Order Item"", ""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Delete Purchase Order Item""}) OPTIONAL MATCH (e1:Event {Activity: ""Create Purchase Order Item""})-[:DF]->(e2) WITH e2, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
A purchase order item must always be created immediately before a vendor invoice can be generated.,"Activity: [""Vendor creates invoice"", ""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Vendor creates invoice""}) OPTIONAL MATCH (e1:Event {Activity: ""Create Purchase Order Item""})-[:DF]->(e2) WITH e2, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If a ""Create Purchase Requisition Item"" event occurs, a ""Create Purchase Order Item"" event must not have happened before it for the same object.","Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Create Purchase Requisition Item""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
An invoice receipt cannot be recorded before the goods receipt is recorded for the same object.,"Activity: [""Record Goods Receipt"", ""Record Invoice Receipt""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Record Goods Receipt""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Record Invoice Receipt""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"You cannot delete a ""Purchase Order Item"" before the item is actually created.","Activity: [""Delete Purchase Order Item"", ""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Delete Purchase Order Item""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"A ""Clear Invoice"" event cannot occur before the invoice receipt is recorded for the same entity.","Activity: [""Clear Invoice"", ""Record Invoice Receipt""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Record Invoice Receipt""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Clear Invoice""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"A ""Change Quantity"" event must not happen before the goods receipt is recorded.","Activity: [""Change Quantity"", ""Record Goods Receipt""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Record Goods Receipt""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Change Quantity""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"The ""Receive Order Confirmation"" event cannot happen before the purchase requisition item is created.","Activity: [""Receive Order Confirmation"", ""Create Purchase Requisition Item""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Create Purchase Requisition Item""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Receive Order Confirmation""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"A ""Vendor creates invoice"" event cannot occur before the ""Create Purchase Order Item"" event for the same entity.","Activity: [""Vendor creates invoice"", ""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Vendor creates invoice""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
An invoice cannot be cleared before the invoice receipt is recorded.,"Activity: [""Clear Invoice"", ""Record Invoice Receipt""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Record Invoice Receipt""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Clear Invoice""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
The quantity of a purchase order item cannot be changed before the goods receipt is recorded.,"Activity: [""Change Quantity"", ""Record Goods Receipt""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Record Goods Receipt""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Change Quantity""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
The order confirmation cannot be received before the purchase requisition item is created for the same entity.,"Activity: [""Receive Order Confirmation"", ""Create Purchase Requisition Item""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Create Purchase Requisition Item""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Receive Order Confirmation""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
A vendor’s invoice cannot be created within 48 hours before a purchase order item is deleted.,"Activity: [""Vendor creates invoice"", ""Delete Purchase Order Item""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Delete Purchase Order Item""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Vendor creates invoice""})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({hours: 48}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
Goods receipt cannot be recorded within 3 days before the vendor creates an invoice.,"Activity: [""Record Goods Receipt"", ""Vendor creates invoice""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Vendor creates invoice""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Record Goods Receipt""})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({days: 3}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
An invoice receipt cannot be recorded within 5 days before the goods receipt is recorded.,"Activity: [""Record Invoice Receipt"", ""Record Goods Receipt""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Record Goods Receipt""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Record Invoice Receipt""})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({days: 5}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
No service entry sheet can be recorded within 7 days after a purchase order item is deleted.,"Activity: [""Record Service Entry Sheet"", ""Delete Purchase Order Item""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Delete Purchase Order Item""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Record Service Entry Sheet""})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({days: 7}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
A payment block should not be removed within 48 hours before the invoice is cleared.,"Activity: [""Remove Payment Block"", ""Clear Invoice""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Clear Invoice""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Remove Payment Block""})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({hours: 48}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
The quantity change must not happen within 24 hours before a purchase requisition item is created.,"Activity: [""Change Quantity"", ""Create Purchase Requisition Item""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Create Purchase Requisition Item""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Change Quantity""})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({hours: 24}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
The service entry sheet should not be created within 2 days before a purchase order item is deleted.,"Activity: [""Record Service Entry Sheet"", ""Delete Purchase Order Item""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Delete Purchase Order Item""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Record Service Entry Sheet""})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({days: 2}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"""Create Purchase Requisition Item"" cannot occur within 24 hours before a ""Create Purchase Order Item"".","Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Create Purchase Requisition Item""})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({hours: 24}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"""Vendor creates invoice"" must not happen within 48 hours before a ""Delete Purchase Order Item"".","Activity: [""Vendor creates invoice"", ""Delete Purchase Order Item""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Delete Purchase Order Item""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Vendor creates invoice""})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({hours: 48}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"The ""Record Goods Receipt"" activity cannot take place within 3 days before the ""Vendor creates invoice"" activity.","Activity: [""Record Goods Receipt"", ""Vendor creates invoice""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Vendor creates invoice""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Record Goods Receipt""})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({days: 3}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"""Record Invoice Receipt"" should not occur within 5 days before the ""Record Goods Receipt"" activity.","Activity: [""Record Invoice Receipt"", ""Record Goods Receipt""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Record Goods Receipt""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Record Invoice Receipt""})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({days: 5}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"The time between the creation of a ""Purchase Requisition Item"" and ""Purchase Order Item"" must not exceed 5 days for the same entity.","Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Create Purchase Requisition Item"" AND e2.Activity = ""Create Purchase Order Item"" AND abs(duration.between(e1.timestamp, e2.timestamp).seconds) >(5*24*60*60) RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS rule_satisfied;"
"There must be at least 1 day between ""Record Goods Receipt"" and ""Record Invoice Receipt"" for every entity.","Activity: [""Record Goods Receipt"", ""Record Invoice Receipt""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Record Goods Receipt"" AND e2.Activity = ""Record Invoice Receipt"" AND abs(duration.between(e1.timestamp, e2.timestamp).seconds) < (24*60*60) RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS rule_satisfied;"
"The execution of ""Record Service Entry Sheet"" must be separated by at least 2 days from ""Remove Payment Block"".","Activity: [""Record Service Entry Sheet"", ""Remove Payment Block""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Record Service Entry Sheet"" AND e2.Activity = ""Remove Payment Block"" AND abs(duration.between(e1.timestamp, e2.timestamp).seconds) < (2*24*60*60) RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS rule_satisfied;"
"The time period between ""Record Goods Receipt"" and ""Receive Order Confirmation"" must be exactly 1 day.","Activity: [""Record Goods Receipt"", ""Receive Order Confirmation""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Record Goods Receipt"" AND e2.Activity = ""Receive Order Confirmation"" AND abs(duration.between(e1.timestamp, e2.timestamp).seconds) <> (24*60*60) RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS rule_satisfied;"
The gap between the creation of a purchase requisition item and the creation of a purchase order item must not exceed 5 days for any entity.,"Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Create Purchase Requisition Item"" AND e2.Activity = ""Create Purchase Order Item"" AND abs(duration.between(e1.timestamp, e2.timestamp).seconds) > (5*24*60*60) RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS rule_satisfied;"
"For every entity, the time between recording the receipt of goods and recording the invoice receipt must be less than 1 day.","Activity: [""Record Goods Receipt"", ""Record Invoice Receipt""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Record Goods Receipt"" AND e2.Activity = ""Record Invoice Receipt"" AND abs(duration.between(e1.timestamp, e2.timestamp).seconds) < (24*60*60) RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS rule_satisfied;"
The time between recording goods receipt and receiving an order confirmation must be exactly 1 day for every entity.,"Activity: [""Record Goods Receipt"", ""Receive Order Confirmation""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Record Goods Receipt"" AND e2.Activity = ""Receive Order Confirmation"" AND abs(duration.between(e1.timestamp, e2.timestamp).seconds) <> (24*60*60) RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS rule_satisfied;"
"The execution of the ""Clear Invoice"" activity and the ""Record Invoice Receipt"" must be at least 1 day apart for each entity.","Activity: [""Clear Invoice"", ""Record Invoice Receipt""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Clear Invoice"" AND e2.Activity = ""Record Invoice Receipt"" AND abs(duration.between(e1.timestamp, e2.timestamp).seconds) (24*60*60) RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS rule_satisfied;"
"Between creating a purchase requisition item and receiving an order confirmation, there must be at least 2 days.","Activity: [""Create Purchase Requisition Item"", ""Receive Order Confirmation""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Create Purchase Requisition Item"" AND e2.Activity = ""Receive Order Confirmation"" AND abs(duration.between(e1.timestamp, e2.timestamp).seconds) < (2*24*60*60) RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS rule_satisfied;"
"When a purchase requisition item is created, it must be done before March 15th, 2024.","Activity: [""Create Purchase Requisition Item""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Create Purchase Requisition Item""}) WHERE date(e.timestamp) >= date(""2024-03-15"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"Any invoice receipt must be recorded before July 1st, 2023, for proper processing.","Activity: [""Record Invoice Receipt""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Record Invoice Receipt""}) WHERE date(e.timestamp) >= date(""2023-07-01"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"If a purchase order item is deleted, it must be done before June 30th, 2024.","Activity: [""Delete Purchase Order Item""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Delete Purchase Order Item""}) WHERE date(e.timestamp) >= date(""2024-06-30"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"When a service entry sheet is recorded, it must be completed before March 1st, 2023.","Activity: [""Record Service Entry Sheet""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Record Service Entry Sheet""}) WHERE date(e.timestamp) >= date(""2023-03-01"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"Order confirmations must be received before June 1st, 2023.","Activity: [""Receive Order Confirmation""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Receive Order Confirmation""}) WHERE date(e.timestamp) >= date(""2023-06-01"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"Every Create Purchase Requisition Item activity must be completed before March 15th, 2024.","Activity: [""Create Purchase Requisition Item""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Create Purchase Requisition Item""}) WHERE date(e.timestamp) >= date(""2024-03-15"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"Vendor creates invoice activities must be completed before April 10th, 2023.","Activity: [""Vendor creates invoice""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Vendor creates invoice""}) WHERE date(e.timestamp) >= date(""2023-04-10"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"Each Record Goods Receipt activity must occur before February 28th, 2025.","Activity: [""Record Goods Receipt""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Record Goods Receipt""}) WHERE date(e.timestamp) >= date(""2025-02-28"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"Clear Invoice actions must be completed before December 31st, 2022.","Activity: [""Clear Invoice""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Clear Invoice""}) WHERE date(e.timestamp) >= date(""2022-12-31"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"If a Remove Payment Block action is performed, it must be done before October 15th, 2022.","Activity: [""Remove Payment Block""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Remove Payment Block""}) WHERE date(e.timestamp) >= date(""2022-10-15"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"Any Change Quantity event must be recorded before April 5th, 2024.","Activity: [""Change Quantity""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Change Quantity""}) WHERE date(e.timestamp) >= date(""2024-04-05"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"A ""Create Purchase Requisition Item"" event is directly followed by a ""Create Purchase Order Item"" event no more than 2 times.","Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Purchase Requisition Item""})-[:DF]->(e2:Event {Activity:""Create Purchase Order Item""}) RETURN COUNT(DISTINCT e1)<=2 AS ruleSatisfied"
"A ""Change Quantity"" event occurs immediately after a ""Receive Order Confirmation"" at most 2 times.","Activity: [""Change Quantity"", ""Receive Order Confirmation""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Change Quantity""})-[:DF]->(e2:Event {Activity:""Receive Order Confirmation""}) RETURN COUNT(DISTINCT e1)<=2 AS ruleSatisfied"
The action of a vendor creating an invoice is directly followed by recording an invoice receipt at least 5 times.,"Activity: [""Vendor creates invoice"", ""Record Invoice Receipt""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Vendor creates invoice""})-[:DF]->(e2:Event {Activity:""Record Invoice Receipt""}) RETURN COUNT(DISTINCT e1)>=5 AS ruleSatisfied"
"""Record Goods Receipt"" is immediately followed by ""Clear Invoice"" no more than once.","Activity: [""Record Goods Receipt"", ""Clear Invoice""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Record Goods Receipt""})-[:DF]->(e2:Event {Activity:""Clear Invoice""}) RETURN COUNT(DISTINCT e1)<=1 AS ruleSatisfied"
"There are at least 2 instances where ""Create Purchase Order Item"" is directly followed by ""Record Service Entry Sheet"".","Activity: [""Create Purchase Order Item"", ""Record Service Entry Sheet""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Purchase Order Item""})-[:DF]->(e2:Event {Activity:""Record Service Entry Sheet""}) RETURN COUNT(DISTINCT e1)>=2 AS ruleSatisfied"
"""Delete Purchase Order Item"" is directly followed by ""Record Goods Receipt"" at least 3 times.","Activity: [""Delete Purchase Order Item"", ""Record Goods Receipt""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Delete Purchase Order Item""})-[:DF]->(e2:Event {Activity:""Record Goods Receipt""}) RETURN COUNT(DISTINCT e1)>=3 AS ruleSatisfied"
"""Record Service Entry Sheet"" happens directly after ""Clear Invoice"" no more than 1 time.","Activity: [""Record Service Entry Sheet"", ""Clear Invoice""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Record Service Entry Sheet""})-[:DF]->(e2:Event {Activity:""Clear Invoice""}) RETURN COUNT(DISTINCT e1)<=1 AS ruleSatisfied"
The goods receipt event should be immediately followed by clearing the invoice no more than twice.,"Activity: [""Record Goods Receipt"", ""Clear Invoice""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Record Goods Receipt""})-[:DF]->(e2:Event {Activity:""Clear Invoice""}) RETURN COUNT(DISTINCT e1)<=2 AS ruleSatisfied"
There should be at least 2 instances where the creation of a purchase order item is directly followed by the recording of a service entry sheet.,"Activity: [""Create Purchase Order Item"", ""Record Service Entry Sheet""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Purchase Order Item""})-[:DF]->(e2:Event {Activity:""Record Service Entry Sheet""}) RETURN COUNT(DISTINCT e1)>=2 AS ruleSatisfied"
A vendor's invoice creation should be followed by a goods receipt no more than 2 times.,"Activity: [""Vendor creates invoice"", ""Record Goods Receipt""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Vendor creates invoice""})-[:CORR]->(entity)<-[:CORR]-(e2:Event {Activity: ""Record Goods Receipt""}) WHERE e2.timestamp > e1.timestamp RETURN CASE WHEN COUNT(e1) <= 2 THEN true ELSE false END AS ruleSatisfied"
There must be at least 2 instances where the creation of a purchase requisition item is followed by the creation of a purchase order item.,"Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Purchase Requisition Item""})-[:CORR]->(entity)<-[:CORR]-(e2:Event {Activity: ""Create Purchase Order Item""}) WHERE e2.timestamp > e1.timestamp RETURN CASE WHEN COUNT(e1) >= 2 THEN true ELSE false END AS ruleSatisfied"
A service entry sheet creation should be followed by a record of invoice receipt at least once.,"Activity: [""Record Service Entry Sheet"", ""Record Invoice Receipt""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Record Service Entry Sheet""})-[:CORR]->(entity)<-[:CORR]-(e2:Event {Activity: ""Record Invoice Receipt""}) WHERE e2.timestamp > e1.timestamp RETURN CASE WHEN COUNT(e1) >= 1 THEN true ELSE false END AS ruleSatisfied"
An order confirmation must follow a purchase requisition item creation event at least once.,"Activity: [""Create Purchase Requisition Item"", ""Receive Order Confirmation""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Purchase Requisition Item""})-[:CORR]->(entity)<-[:CORR]-(e2:Event {Activity: ""Receive Order Confirmation""}) WHERE e2.timestamp > e1.timestamp RETURN CASE WHEN COUNT(e1) >= 1 THEN true ELSE false END AS ruleSatisfied"
A vendor invoice must be followed by a goods receipt recording at least 2 times.,"Activity: [""Vendor creates invoice"", ""Record Goods Receipt""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Vendor creates invoice""})-[:CORR]->(entity)<-[:CORR]-(e2:Event {Activity: ""Record Goods Receipt""}) WHERE e2.timestamp > e1.timestamp RETURN CASE WHEN COUNT(e1) >= 2 THEN true ELSE false END AS ruleSatisfied"
"There must be at least 2 instances where a ""Create Purchase Requisition Item"" event is eventually followed by ""Create Purchase Order Item"".","Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Purchase Requisition Item""})-[:CORR]->(entity)<-[:CORR]-(e2:Event {Activity: ""Create Purchase Order Item""}) WHERE e2.timestamp > e1.timestamp RETURN CASE WHEN COUNT(e1) >= 2 THEN true ELSE false END AS ruleSatisfied"
"The activity ""Vendor creates invoice"" must eventually be followed by ""Record Goods Receipt"" no more than 3 times.","Activity: [""Vendor creates invoice"", ""Record Goods Receipt""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Vendor creates invoice""})-[:CORR]->(entity)<-[:CORR]-(e2:Event {Activity: ""Record Goods Receipt""}) WHERE e2.timestamp > e1.timestamp RETURN CASE WHEN COUNT(e1) <= 3 THEN true ELSE false END AS ruleSatisfied"
"""Record Invoice Receipt"" must be followed by ""Record Service Entry Sheet"" no more than 4 times.","Activity: [""Record Invoice Receipt"", ""Record Service Entry Sheet""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Record Invoice Receipt""})-[:CORR]->(entity)<-[:CORR]-(e2:Event {Activity: ""Record Service Entry Sheet""}) WHERE e2.timestamp > e1.timestamp RETURN CASE WHEN COUNT(e1) <= 4 THEN true ELSE false END AS ruleSatisfied"
"No more than 3 instances of ""Create Purchase Order Item"" should be followed by ""Record Invoice Receipt"".","Activity: [""Create Purchase Order Item"", ""Record Invoice Receipt""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(entity)<-[:CORR]-(e2:Event {Activity: ""Record Invoice Receipt""}) WHERE e2.timestamp > e1.timestamp RETURN CASE WHEN COUNT(e1) <= 3 THEN true ELSE false END AS ruleSatisfied"
"A ""Vendor creates invoice"" event should not be followed by ""Record Invoice Receipt"" more than 5 times.","Activity: [""Vendor creates invoice"", ""Record Invoice Receipt""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Vendor creates invoice""})-[:CORR]->(entity)<-[:CORR]-(e2:Event {Activity: ""Record Invoice Receipt""}) WHERE e2.timestamp > e1.timestamp RETURN CASE WHEN COUNT(e1) <= 5 THEN true ELSE false END AS ruleSatisfied"
"The sequence of ""Create Purchase Requisition Item"", ""Create Purchase Order Item"", and ""Vendor creates invoice"" must occur in that order for each ""POI"" entity.","Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item"", ""Vendor creates invoice""], EntityType: [""POI""], Actor: []","MATCH (ent:Entity {EntityType: ""POI""}) WHERE NOT EXISTS { MATCH (e1:Event {Activity: 'Create Purchase Requisition Item'})-[:DF]->(e2:Event{Activity: 'Create Purchase Order Item'})-[:DF]->(e3:Event {Activity: 'Vendor creates invoice'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"For every ""PO"" entity, ""Record Goods Receipt"", ""Record Invoice Receipt"", and ""Clear Invoice"" must happen sequentially.","Activity: [""Record Goods Receipt"", ""Record Invoice Receipt"", ""Clear Invoice""], EntityType: [""PO""], Actor: []","MATCH (ent:Entity {EntityType: ""PO""}) WHERE NOT EXISTS { MATCH (e1:Event {Activity: 'Record Goods Receipt'})-[:DF]->(e2:Event{Activity: 'Record Invoice Receipt'})-[:DF]->(e3:Event {Activity: 'Clear Invoice'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"The process of ""Delete Purchase Order Item"" followed by ""Clear Invoice"" must occur for each ""POI"" entity.","Activity: [""Delete Purchase Order Item"", ""Clear Invoice""], EntityType: [""POI""], Actor: []","MATCH (ent:Entity {EntityType: ""POI""}) WHERE NOT EXISTS { MATCH (e1:Event {Activity: 'Delete Purchase Order Item'})-[:DF]->(e2:Event{Activity: 'Clear Invoice'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"Each ""PO"" entity must have ""Receive Order Confirmation"" followed by ""Record Goods Receipt"" in sequence.","Activity: [""Receive Order Confirmation"", ""Record Goods Receipt""], EntityType: [""PO""], Actor: []","MATCH (ent:Entity {EntityType: ""PO""}) WHERE NOT EXISTS { MATCH (e1:Event {Activity: 'Receive Order Confirmation'})-[:DF]->(e2:Event{Activity: 'Record Goods Receipt'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"A ""PO"" entity must have ""Create Purchase Order Item"", ""Record Invoice Receipt"", and ""Clear Invoice"" in that exact order.","Activity: [""Create Purchase Order Item"", ""Record Invoice Receipt"", ""Clear Invoice""], EntityType: [""PO""], Actor: []","MATCH (ent:Entity {EntityType: ""PO""}) WHERE NOT EXISTS { MATCH (e1:Event {Activity: 'Create Purchase Order Item'})-[:DF]->(e2:Event{Activity: 'Record Invoice Receipt'})-[:DF]->(e3:Event {Activity: 'Clear Invoice'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"For each ""POI"" entity, ""Record Goods Receipt"" and ""Record Invoice Receipt"" must occur sequentially.","Activity: [""Record Goods Receipt"", ""Record Invoice Receipt""], EntityType: [""POI""], Actor: []","MATCH (ent:Entity {EntityType: ""POI""}) WHERE NOT EXISTS { MATCH (e1:Event {Activity: 'Record Goods Receipt'})-[:DF]->(e2:Event{Activity: 'Record Invoice Receipt'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"The ""Change Quantity"" and ""Vendor creates invoice"" activities must be carried out in sequence for each ""POI"" entity.","Activity: [""Change Quantity"", ""Vendor creates invoice""], EntityType: [""POI""], Actor: []","MATCH (ent:Entity {EntityType: ""POI""}) WHERE NOT EXISTS { MATCH (e1:Event {Activity: 'Change Quantity'})-[:DF]->(e2:Event{Activity: 'Vendor creates invoice'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"Each ""PO"" entity must first have a purchase order item created, directly followed by recording the receipt of goods, and then the invoice receipt must be recorded directly after.","Activity: [""Create Purchase Order Item"", ""Record Goods Receipt"", ""Record Invoice Receipt""], EntityType: [""PO""], Actor: []","MATCH (ent:Entity {EntityType: ""PO""}) WHERE NOT EXISTS { MATCH (e1:Event {Activity: 'Create Purchase Order Item'})-[:DF]->(e2:Event{Activity: 'Record Goods Receipt'})-[:DF]->(e3:Event {Activity: 'Record Invoice Receipt'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"The activities ""Create Purchase Order Item"", ""Vendor creates invoice"", and ""Record Goods Receipt"" should not be executed in sequence for any ""PO"".","Activity: [""Create Purchase Order Item"", ""Vendor creates invoice"", ""Record Goods Receipt""], EntityType: [""PO""], Actor: []","MATCH (ent:Entity {EntityType: ""PO""}) WHERE EXISTS { MATCH (e1:Event {Activity: 'Create Purchase Order Item'})-[:DF]->(e2:Event{Activity: 'Vendor creates invoice'})-[:DF]->(e3:Event {Activity: 'Record Goods Receipt'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"The sequence of ""Create Purchase Requisition Item"", ""Record Service Entry Sheet"", and ""Remove Payment Block"" must not be performed in that order for any ""POI"".","Activity: [""Create Purchase Requisition Item"", ""Record Service Entry Sheet"", ""Remove Payment Block""], EntityType: [""POI""], Actor: []","MATCH (ent:Entity {EntityType: ""POI""}) WHERE EXISTS { MATCH (e1:Event {Activity: 'Create Purchase Requisition Item'})-[:DF]->(e2:Event{Activity: 'Record Service Entry Sheet'})-[:DF]->(e3:Event {Activity: 'Remove Payment Block'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"It is not allowed for any ""PO"" to first ""Create Purchase Order Item"", then ""Delete Purchase Order Item"", and then ""Clear Invoice"" in sequence.","Activity: [""Create Purchase Order Item"", ""Delete Purchase Order Item"", ""Clear Invoice""], EntityType: [""PO""], Actor: []","MATCH (ent:Entity {EntityType: ""PO""}) WHERE EXISTS { MATCH (e1:Event {Activity: 'Create Purchase Order Item'})-[:DF]->(e2:Event{Activity: 'Delete Purchase Order Item'})-[:DF]->(e3:Event {Activity: 'Clear Invoice'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"For any ""POI"", the sequence of ""Create Purchase Requisition Item"", ""Record Invoice Receipt"", and ""Record Goods Receipt"" should not be followed in that specific order.","Activity: [""Create Purchase Requisition Item"", ""Record Invoice Receipt"", ""Record Goods Receipt""], EntityType: [""POI""], Actor: []","MATCH (ent:Entity {EntityType: ""POI""}) WHERE EXISTS { MATCH (e1:Event {Activity: 'Create Purchase Requisition Item'})-[:DF]->(e2:Event{Activity: 'Record Invoice Receipt'})-[:DF]->(e3:Event {Activity: 'Record Goods Receipt'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"The actions ""Create Purchase Order Item"" followed by ""Receive Order Confirmation"" should never occur in sequence for any ""PO"".","Activity: [""Create Purchase Order Item"", ""Receive Order Confirmation""], EntityType: [""PO""], Actor: []","MATCH (ent:Entity {EntityType: ""PO""}) WHERE EXISTS { MATCH (e1:Event {Activity: 'Create Purchase Order Item'})-[:DF]->(e2:Event{Activity: 'Receive Order Confirmation'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"A sequence of ""Change Quantity"", ""Record Goods Receipt"", and ""Vendor creates invoice"" should not be performed in order for any ""POI"".","Activity: [""Change Quantity"", ""Record Goods Receipt"", ""Vendor creates invoice""], EntityType: [""POI""], Actor: []","MATCH (ent:Entity {EntityType: ""POI""}) WHERE EXISTS { MATCH (e1:Event {Activity: 'Change Quantity'})-[:DF]->(e2:Event{Activity: 'Record Goods Receipt'})-[:DF]->(e3:Event {Activity: 'Vendor creates invoice'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"A purchase order item should never have the activities of creating a purchase order item, then receiving an order confirmation, and then deleting the purchase order item in sequence.","Activity: [""Create Purchase Order Item"", ""Receive Order Confirmation"", ""Delete Purchase Order Item""], EntityType: [""POI""], Actor: []","MATCH (ent:Entity {EntityType: ""POI""}) WHERE EXISTS { MATCH (e1:Event {Activity: 'Create Purchase Order Item'})-[:DF]->(e2:Event{Activity: 'Receive Order Confirmation'})-[:DF]->(e3:Event {Activity: 'Delete Purchase Order Item'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
It is not allowed for the creation of a purchase order item to be followed by the recording of an invoice receipt and then the clearing of the invoice for any purchase order.,"Activity: [""Create Purchase Order Item"", ""Record Invoice Receipt"", ""Clear Invoice""], EntityType: [""PO""], Actor: []","MATCH (ent:Entity {EntityType: ""PO""}) WHERE EXISTS { MATCH (e1:Event {Activity: 'Create Purchase Order Item'})-[:DF]->(e2:Event{Activity: 'Record Invoice Receipt'})-[:DF]->(e3:Event {Activity: 'Clear Invoice'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"For any purchase order, the activities of recording a goods receipt, then creating an invoice, followed by recording an invoice receipt, must not occur in sequence.","Activity: [""Record Goods Receipt"", ""Vendor creates invoice"", ""Record Invoice Receipt""], EntityType: [""PO""], Actor: []","MATCH (ent:Entity {EntityType: ""PO""}) WHERE EXISTS { MATCH (e1:Event {Activity: 'Record Goods Receipt'})-[:DF]->(e2:Event{Activity: 'Vendor creates invoice'})-[:DF]->(e3:Event {Activity: 'Record Invoice Receipt'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"For any purchase order, it is not permitted to first create a purchase order item, then record the service entry sheet, followed by removing the payment block.","Activity: [""Create Purchase Order Item"", ""Record Service Entry Sheet"", ""Remove Payment Block""], EntityType: [""PO""], Actor: []","MATCH (ent:Entity {EntityType: ""PO""}) WHERE EXISTS { MATCH (e1:Event {Activity: 'Create Purchase Order Item'})-[:DF]->(e2:Event{Activity: 'Record Service Entry Sheet'})-[:DF]->(e3:Event {Activity: 'Remove Payment Block'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"A ""Create Purchase Requisition Item"" must be created within 5 days before a ""Create Purchase Order Item"" is generated.","Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Create Purchase Requisition Item""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e1.timestamp >= e2.timestamp - duration({days: 5}) WITH e2, count(e1) AS precedingRequisitionCount RETURN CASE WHEN any(e IN collect(precedingRequisitionCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"A ""Vendor creates invoice"" must occur within 14 days of a ""Create Purchase Order Item"" being created.","Activity: [""Vendor creates invoice"", ""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Vendor creates invoice""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e1.timestamp >= e2.timestamp - duration({days: 14}) WITH e2, count(e1) AS precedingInvoiceCount RETURN CASE WHEN any(e IN collect(precedingInvoiceCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"A ""Create Purchase Order Item"" must be approved within 10 days before a ""Delete Purchase Order Item"" event can occur.","Activity: [""Create Purchase Order Item"", ""Delete Purchase Order Item""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Delete Purchase Order Item""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e1.timestamp >= e2.timestamp - duration({days: 10}) WITH e2, count(e1) AS precedingApprovalCount RETURN CASE WHEN any(e IN collect(precedingApprovalCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"A ""Create Purchase Requisition Item"" must be logged within 7 days before a ""Create Purchase Order Item"" can happen.","Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Create Purchase Requisition Item""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e1.timestamp >= e2.timestamp - duration({days: 7}) WITH e2, count(e1) AS precedingRequisitionCount RETURN CASE WHEN any(e IN collect(precedingRequisitionCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"A ""Record Invoice Receipt"" must happen within 7 days of a ""Vendor creates invoice"" event.","Activity: [""Record Invoice Receipt"", ""Vendor creates invoice""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Vendor creates invoice""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Record Invoice Receipt""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e1.timestamp >= e2.timestamp - duration({days: 7}) WITH e2, count(e1) AS precedingReceiptCount RETURN CASE WHEN any(e IN collect(precedingReceiptCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
The vendor must issue an invoice within 14 days of creating a purchase order item.,"Activity: [""Vendor creates invoice"", ""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Vendor creates invoice""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e1.timestamp >= e2.timestamp - duration({days: 14}) WITH e2, count(e1) AS precedingInvoiceCount RETURN CASE WHEN any(e IN collect(precedingInvoiceCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
A purchase order item must be approved within 10 days of its creation before it can be deleted.,"Activity: [""Create Purchase Order Item"", ""Delete Purchase Order Item""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Delete Purchase Order Item""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e1.timestamp >= e2.timestamp - duration({days: 10}) WITH e2, count(e1) AS precedingApprovalCount RETURN CASE WHEN any(e IN collect(precedingApprovalCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"A ""Create Purchase Requisition Item"" must occur within 5 days before a ""Create Purchase Order Item"" can be created.","Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Create Purchase Requisition Item""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e1.timestamp >= e2.timestamp - duration({days: 5}) WITH e2, count(e1) AS precedingRequisitionCount RETURN CASE WHEN any(e IN collect(precedingRequisitionCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
A purchase requisition item cannot be created until a vendor creates an invoice or a purchase order item is created.,"Activity: [""Create Purchase Requisition Item"", ""Vendor creates invoice"", ""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (e3:Event {Activity: ""Create Purchase Requisition Item""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Vendor creates invoice""})-[:CORR]->(entity) WHERE e2.timestamp < e3.timestamp OPTIONAL MATCH (e1:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e3, count(e1)+count(e2) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Before a purchase order item can be deleted, a goods receipt must be recorded or an invoice receipt must be received.","Activity: [""Delete Purchase Order Item"", ""Record Goods Receipt"", ""Record Invoice Receipt""], EntityType: [], Actor: []","MATCH (e3:Event {Activity: ""Delete Purchase Order Item""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Record Goods Receipt""})-[:CORR]->(entity) WHERE e2.timestamp < e3.timestamp OPTIONAL MATCH (e1:Event {Activity: ""Record Invoice Receipt""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e3, count(e1)+count(e2) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
A vendor invoice cannot be processed before a goods receipt or invoice receipt has been recorded.,"Activity: [""Vendor creates invoice"", ""Record Goods Receipt"", ""Record Invoice Receipt""], EntityType: [], Actor: []","MATCH (e3:Event {Activity: ""Vendor creates invoice""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Record Goods Receipt""})-[:CORR]->(entity) WHERE e2.timestamp < e3.timestamp OPTIONAL MATCH (e1:Event {Activity: ""Record Invoice Receipt""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e3, count(e1)+count(e2) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
The purchase order item cannot be deleted unless the goods receipt or invoice receipt has already been recorded.,"Activity: [""Delete Purchase Order Item"", ""Record Goods Receipt"", ""Record Invoice Receipt""], EntityType: [], Actor: []","MATCH (e3:Event {Activity: ""Delete Purchase Order Item""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Record Goods Receipt""})-[:CORR]->(entity) WHERE e2.timestamp < e3.timestamp OPTIONAL MATCH (e1:Event {Activity: ""Record Invoice Receipt""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e3, count(e1)+count(e2) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Before ""Delete Purchase Order Item"" can be executed, either a ""Record Goods Receipt"" or ""Receive Order Confirmation"" must be recorded.","Activity: [""Record Goods Receipt"", ""Receive Order Confirmation"", ""Delete Purchase Order Item""], EntityType: [], Actor: []","MATCH (e3:Event {Activity: ""Delete Purchase Order Item""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Receive Order Confirmation""})-[:CORR]->(entity) WHERE e2.timestamp < e3.timestamp OPTIONAL MATCH (e1:Event {Activity: ""Record Goods Receipt""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e3, count(e1)+count(e2) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"A ""Create Purchase Requisition Item"" cannot be created until a ""Vendor creates invoice"" or a ""Create Purchase Order Item"" event has been recorded.","Activity: [""Create Purchase Requisition Item"", ""Vendor creates invoice"", ""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (e3:Event {Activity: ""Create Purchase Requisition Item""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Vendor creates invoice""})-[:CORR]->(entity) WHERE e2.timestamp < e3.timestamp OPTIONAL MATCH (e1:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e3, count(e1)+count(e2) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"A ""Vendor creates invoice"" event cannot be processed before a ""Record Goods Receipt"" or ""Record Invoice Receipt"" event has been recorded.","Activity: [""Vendor creates invoice"", ""Record Goods Receipt"", ""Record Invoice Receipt""], EntityType: [], Actor: []","MATCH (e3:Event {Activity: ""Vendor creates invoice""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Record Goods Receipt""})-[:CORR]->(entity) WHERE e2.timestamp < e3.timestamp OPTIONAL MATCH (e1:Event {Activity: ""Record Invoice Receipt""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e3, count(e1)+count(e2) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Before a ""Delete Purchase Order Item"" event can occur, a ""Record Goods Receipt"" or ""Receive Order Confirmation"" must be completed.","Activity: [""Record Goods Receipt"", ""Receive Order Confirmation"", ""Delete Purchase Order Item""], EntityType: [], Actor: []","MATCH (e3:Event {Activity: ""Delete Purchase Order Item""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Receive Order Confirmation""})-[:CORR]->(entity) WHERE e2.timestamp < e3.timestamp OPTIONAL MATCH (e1:Event {Activity: ""Record Goods Receipt""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e3, count(e1)+count(e2) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Before a ""Record Invoice Receipt"" event can be executed, either a ""Record Goods Receipt"" or ""Receive Order Confirmation"" must have been logged.","Activity: [""Record Goods Receipt"", ""Receive Order Confirmation"", ""Record Invoice Receipt""], EntityType: [], Actor: []","MATCH (e3:Event {Activity: ""Record Invoice Receipt""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Record Goods Receipt""})-[:CORR]->(entity) WHERE e2.timestamp < e3.timestamp OPTIONAL MATCH (e1:Event {Activity: ""Receive Order Confirmation""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e3, count(e1)+count(e2) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Whenever a purchase requisition item is created, a purchase order item must be created immediately after.","Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Purchase Requisition Item""}) OPTIONAL MATCH (e2:Event {Activity: ""Create Purchase Order Item""})<-[:DF]-(e1) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After the invoice is recorded, the payment block must be removed immediately after.","Activity: [""Record Invoice Receipt"", ""Remove Payment Block""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Record Invoice Receipt""}) OPTIONAL MATCH (e2:Event {Activity: ""Remove Payment Block""})<-[:DF]-(e1) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
The creation of a service entry sheet must always be directly followed by the removal of the payment block.,"Activity: [""Record Service Entry Sheet"", ""Remove Payment Block""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Record Service Entry Sheet""}) OPTIONAL MATCH (e2:Event {Activity: ""Remove Payment Block""})<-[:DF]-(e1) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Directly after changing the quantity of an order item, an order confirmation must be received.","Activity: [""Change Quantity"", ""Receive Order Confirmation""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Change Quantity""}) OPTIONAL MATCH (e2:Event {Activity: ""Receive Order Confirmation""})<-[:DF]-(e1) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After the goods receipt is recorded, the invoice receipt must happen immediately after.","Activity: [""Record Goods Receipt"", ""Record Invoice Receipt""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Record Goods Receipt""}) OPTIONAL MATCH (e2:Event {Activity: ""Record Invoice Receipt""})<-[:DF]-(e1) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After a purchase requisition item is created, a purchase order item should follow immediately.","Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Purchase Requisition Item""}) OPTIONAL MATCH (e2:Event {Activity: ""Create Purchase Order Item""})<-[:DF]-(e1) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After a ""Create Purchase Requisition Item"" event, a ""Create Purchase Order Item"" event must occur immediately after.","Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Purchase Requisition Item""}) OPTIONAL MATCH (e2:Event {Activity: ""Create Purchase Order Item""})<-[:DF]-(e1) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"When a ""Vendor creates invoice"" event occurs, the ""Record Goods Receipt"" must follow immediately.","Activity: [""Vendor creates invoice"", ""Record Goods Receipt""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Vendor creates invoice""}) OPTIONAL MATCH (e2:Event {Activity: ""Record Goods Receipt""})<-[:DF]-(e1) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After the ""Record Invoice Receipt"" event, the ""Remove Payment Block"" event should take place immediately.","Activity: [""Record Invoice Receipt"", ""Remove Payment Block""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Record Invoice Receipt""}) OPTIONAL MATCH (e2:Event {Activity: ""Remove Payment Block""})<-[:DF]-(e1) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After a ""Record Service Entry Sheet"" event, the ""Remove Payment Block"" event should immediately follow.","Activity: [""Record Service Entry Sheet"", ""Remove Payment Block""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Record Service Entry Sheet""}) OPTIONAL MATCH (e2:Event {Activity: ""Remove Payment Block""})<-[:DF]-(e1) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Following a ""Change Quantity"" event, the ""Receive Order Confirmation"" event must occur immediately after.","Activity: [""Change Quantity"", ""Receive Order Confirmation""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Change Quantity""}) OPTIONAL MATCH (e2:Event {Activity: ""Receive Order Confirmation""})<-[:DF]-(e1) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After a ""Create Purchase Requisition Item"" is placed, no ""Create Purchase Order Item"" can occur afterward.","Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Purchase Requisition Item""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"Once a ""Vendor creates invoice"" is recorded, ""Record Invoice Receipt"" cannot happen afterward for the same entity.","Activity: [""Vendor creates invoice"", ""Record Invoice Receipt""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Vendor creates invoice""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Record Invoice Receipt""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"If a ""Delete Purchase Order Item"" occurs, no ""Create Purchase Order Item"" can follow for the same entity.","Activity: [""Delete Purchase Order Item"", ""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Delete Purchase Order Item""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"Once a ""Receive Order Confirmation"" has been performed, the ""Create Purchase Requisition Item"" cannot occur for the same entity afterward.","Activity: [""Receive Order Confirmation"", ""Create Purchase Requisition Item""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Receive Order Confirmation""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Create Purchase Requisition Item""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"If a ""Record Service Entry Sheet"" occurs, ""Record Goods Receipt"" should not be performed afterward for the same item.","Activity: [""Record Service Entry Sheet"", ""Record Goods Receipt""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Record Service Entry Sheet""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Record Goods Receipt""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"After a ""Vendor creates invoice,"" it is not allowed to ""Delete Purchase Order Item"" for the same object item afterward.","Activity: [""Vendor creates invoice"", ""Delete Purchase Order Item""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Vendor creates invoice""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Delete Purchase Order Item""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"After creating a purchase requisition item, a corresponding purchase order item cannot be created afterward for the same entity.","Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Purchase Requisition Item""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"Once an invoice has been created by a vendor, no further invoice receipt record can be made afterward.","Activity: [""Vendor creates invoice"", ""Record Invoice Receipt""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Vendor creates invoice""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Record Invoice Receipt""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"Once the invoice has been cleared, no further receipt of invoice should be recorded for the same entity.","Activity: [""Clear Invoice"", ""Record Invoice Receipt""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Clear Invoice""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Record Invoice Receipt""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"If the quantity of an order is changed, no payment block should be removed afterward.","Activity: [""Change Quantity"", ""Remove Payment Block""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Change Quantity""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Remove Payment Block""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"After receiving an order confirmation, no purchase requisition item can be created afterward for the same entity.","Activity: [""Receive Order Confirmation"", ""Create Purchase Requisition Item""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Receive Order Confirmation""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Create Purchase Requisition Item""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"After a ""Create Purchase Requisition Item"" event occurs, no ""Create Purchase Order Item"" event can happen within 48 hours for the same entity.","Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Purchase Requisition Item""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(entity) WHERE e2.timestamp <= e1.timestamp + duration({hours: 48}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"If a ""Vendor creates invoice"" event occurs, no ""Record Goods Receipt"" event can take place within 72 hours afterward.","Activity: [""Vendor creates invoice"", ""Record Goods Receipt""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Vendor creates invoice""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Record Goods Receipt""})-[:CORR]->(entity) WHERE e2.timestamp <= e1.timestamp + duration({hours: 72}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"If a ""Delete Purchase Order Item"" event is performed, no ""Clear Invoice"" event can occur for the same entity within 48 hours.","Activity: [""Delete Purchase Order Item"", ""Clear Invoice""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Delete Purchase Order Item""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Clear Invoice""})-[:CORR]->(entity) WHERE e2.timestamp <= e1.timestamp + duration({hours: 48}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"After a ""Record Service Entry Sheet"" event occurs, a ""Remove Payment Block"" event cannot be performed within 72 hours.","Activity: [""Record Service Entry Sheet"", ""Remove Payment Block""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Record Service Entry Sheet""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Remove Payment Block""})-[:CORR]->(entity) WHERE e2.timestamp <= e1.timestamp + duration({hours: 72}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"If a ""Change Quantity"" event happens, no ""Receive Order Confirmation"" event can take place within 24 hours afterward for the same entity.","Activity: [""Change Quantity"", ""Receive Order Confirmation""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Change Quantity""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Receive Order Confirmation""})-[:CORR]->(entity) WHERE e2.timestamp <= e1.timestamp + duration({hours: 24}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"If a ""Record Goods Receipt"" event happens, no ""Delete Purchase Order Item"" event can occur within 48 hours.","Activity: [""Record Goods Receipt"", ""Delete Purchase Order Item""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Record Goods Receipt""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Delete Purchase Order Item""})-[:CORR]->(entity) WHERE e2.timestamp <= e1.timestamp + duration({hours: 48}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"After a ""Record Invoice Receipt"" event, no ""Change Quantity"" event can be performed within 30 days.","Activity: [""Record Invoice Receipt"", ""Change Quantity""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Record Invoice Receipt""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Change Quantity""})-[:CORR]->(entity) WHERE e2.timestamp <= e1.timestamp + duration({days: 30}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"If a purchase requisition item is created, a corresponding purchase order item cannot be created for the same entity within 48 hours.","Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Purchase Requisition Item""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(entity) WHERE e2.timestamp <= e1.timestamp + duration({hours: 48}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"After an invoice is created by a vendor, no goods receipt can be recorded for the same entity within 72 hours.","Activity: [""Vendor creates invoice"", ""Record Goods Receipt""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Vendor creates invoice""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Record Goods Receipt""})-[:CORR]->(entity) WHERE e2.timestamp <= e1.timestamp + duration({hours: 72}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"Once an invoice receipt has been recorded, no goods receipt can happen within 24 hours for the same entity.","Activity: [""Record Invoice Receipt"", ""Record Goods Receipt""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Record Invoice Receipt""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Record Goods Receipt""})-[:CORR]->(entity) WHERE e2.timestamp <= e1.timestamp + duration({hours: 24}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"When the quantity of an item is changed, the order confirmation cannot be received for the same entity within 24 hours.","Activity: [""Change Quantity"", ""Receive Order Confirmation""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Change Quantity""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Receive Order Confirmation""})-[:CORR]->(entity) WHERE e2.timestamp <= e1.timestamp + duration({hours: 24}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"A ""Create Purchase Requisition Item"" event must not happen later than 7 days after January 1st, 2023.","Activity: [""Create Purchase Requisition Item""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Purchase Requisition Item""}) WHERE e1.timestamp > datetime(""2023-01-01T00:00:00"") + duration({days: 7}) RETURN CASE WHEN count(e1) > 0 THEN false ELSE true END AS result"
"A purchase order item creation must not take place more than 3 days before May 1st, 2022.","Activity: [""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Purchase Order Item""}) WHERE e1.timestamp < datetime(""2022-05-01T00:00:00"") - duration({days: 3}) RETURN CASE WHEN count(e1) > 0 THEN false ELSE true END AS result"
"The ""Vendor creates invoice"" activity cannot occur more than 15 days after March 10th, 2023.","Activity: [""Vendor creates invoice""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Vendor creates invoice""}) WHERE e1.timestamp > datetime(""2023-03-10T00:00:00"") + duration({days: 15}) RETURN CASE WHEN count(e1) > 0 THEN false ELSE true END AS result"
"A ""Record Goods Receipt"" event must not occur more than 5 days after March 1st, 2022.","Activity: [""Record Goods Receipt""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Record Goods Receipt""}) WHERE e1.timestamp > datetime(""2022-03-01T00:00:00"") + duration({days: 5}) RETURN CASE WHEN count(e1) > 0 THEN false ELSE true END AS result"
"A ""Record Invoice Receipt"" must take place no later than 10 days before June 15th, 2023.","Activity: [""Record Invoice Receipt""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Record Invoice Receipt""}) WHERE e1.timestamp < datetime(""2023-06-15T00:00:00"") - duration({days: 10}) RETURN CASE WHEN count(e1) > 0 THEN false ELSE true END AS result"
"A ""Delete Purchase Order Item"" action cannot occur more than 7 days after January 15th, 2023.","Activity: [""Delete Purchase Order Item""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Delete Purchase Order Item""}) WHERE e1.timestamp > datetime(""2023-01-15T00:00:00"") + duration({days: 7}) RETURN CASE WHEN count(e1) > 0 THEN false ELSE true END AS result"
"A ""Remove Payment Block"" event cannot happen more than 3 days after March 1st, 2022.","Activity: [""Remove Payment Block""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Remove Payment Block""}) WHERE e1.timestamp > datetime(""2022-03-01T00:00:00"") + duration({days: 3}) RETURN CASE WHEN count(e1) > 0 THEN false ELSE true END AS result"
"A ""Change Quantity"" action must not occur before 5 days from July 1st, 2022.","Activity: [""Change Quantity""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Change Quantity""}) WHERE e1.timestamp < datetime(""2022-07-01T00:00:00"") + duration({days: 5}) RETURN CASE WHEN count(e1) > 0 THEN false ELSE true END AS result"
"A ""Create Purchase Order Item"" event must not be executed later than 2 days after February 1st, 2022.","Activity: [""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Purchase Order Item""}) WHERE e1.timestamp > datetime(""2022-02-01T00:00:00"") + duration({days: 2}) RETURN CASE WHEN count(e1) > 0 THEN false ELSE true END AS result"
The creation of a Purchase Requisition Item is prohibited for any Purchase Order.,"Activity: [""Create Purchase Requisition Item""], EntityType: [""PO""]",MATCH (ent:Entity {EntityType: 'PO'}) MATCH (event:Event {Activity: 'Create Purchase Requisition Item'})-[:CORR]->(ent) RETURN CASE WHEN count(event) = 0 THEN true ELSE false END AS ruleSatisfied
A Purchase Order Item must never be deleted.,"Activity: [""Delete Purchase Order Item""], EntityType: [""POI""]",MATCH (ent:Entity {EntityType: 'POI'}) MATCH (event:Event {Activity: 'Delete Purchase Order Item'})-[:CORR]->(ent) RETURN CASE WHEN count(event) = 0 THEN true ELSE false END AS ruleSatisfied
Recording an invoice receipt should not be performed for any Purchase Order Item.,"Activity: [""Record Invoice Receipt""], EntityType: [""POI""]",MATCH (ent:Entity {EntityType: 'POI'}) MATCH (event:Event {Activity: 'Record Invoice Receipt'})-[:CORR]->(ent) RETURN CASE WHEN count(event) = 0 THEN true ELSE false END AS ruleSatisfied
Changing the quantity of a Purchase Order Item is prohibited for a Purchase Order.,"Activity: [""Change Quantity""], EntityType: [""PO""]",MATCH (ent:Entity {EntityType: 'PO'}) MATCH (event:Event {Activity: 'Change Quantity'})-[:CORR]->(ent) RETURN CASE WHEN count(event) = 0 THEN true ELSE false END AS ruleSatisfied
A Purchase Requisition Item should never be involved in clearing an invoice.,"Activity: [""Clear Invoice""], EntityType: [""POI""]",MATCH (ent:Entity {EntityType: 'POI'}) MATCH (event:Event {Activity: 'Clear Invoice'})-[:CORR]->(ent) RETURN CASE WHEN count(event) = 0 THEN true ELSE false END AS ruleSatisfied
Record Goods Receipt events must not be performed for a Purchase Order Item.,"Activity: [""Record Goods Receipt""], EntityType: [""POI""]",MATCH (ent:Entity {EntityType: 'POI'}) MATCH (event:Event {Activity: 'Record Goods Receipt'})-[:CORR]->(ent) RETURN CASE WHEN count(event) = 0 THEN true ELSE false END AS ruleSatisfied
A Purchase Order Item cannot be involved in removing a payment block.,"Activity: [""Remove Payment Block""], EntityType: [""POI""]",MATCH (ent:Entity {EntityType: 'POI'}) MATCH (event:Event {Activity: 'Remove Payment Block'})-[:CORR]->(ent) RETURN CASE WHEN count(event) = 0 THEN true ELSE false END AS ruleSatisfied
"No ""Receive Order Confirmation"" event is allowed for a Purchase Order.","Activity: [""Receive Order Confirmation""], EntityType: [""PO""]",MATCH (ent:Entity {EntityType: 'PO'}) MATCH (event:Event {Activity: 'Receive Order Confirmation'})-[:CORR]->(ent) RETURN CASE WHEN count(event) = 0 THEN true ELSE false END AS ruleSatisfied
Creating a purchase requisition item is prohibited.,"Activity: [""Create Purchase Requisition Item""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Create Purchase Requisition Item'}) RETURN COUNT(e) = 0 AS ruleSatisfied
Recording an invoice receipt should never occur.,"Activity: [""Record Invoice Receipt""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Record Invoice Receipt'}) RETURN COUNT(e) = 0 AS ruleSatisfied
A purchase order item must not be deleted.,"Activity: [""Delete Purchase Order Item""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Delete Purchase Order Item'}) RETURN COUNT(e) = 0 AS ruleSatisfied
The vendor must not create an invoice under any circumstances.,"Activity: [""Vendor creates invoice""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Vendor creates invoice'}) RETURN COUNT(e) = 0 AS ruleSatisfied
Removing a payment block is strictly prohibited.,"Activity: [""Remove Payment Block""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Remove Payment Block'}) RETURN COUNT(e) = 0 AS ruleSatisfied
Recording a service entry sheet must never happen.,"Activity: [""Record Service Entry Sheet""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Record Service Entry Sheet'}) RETURN COUNT(e) = 0 AS ruleSatisfied
Receiving an order confirmation is not allowed.,"Activity: [""Receive Order Confirmation""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Receive Order Confirmation'}) RETURN COUNT(e) = 0 AS ruleSatisfied
No goods receipt should be recorded under any condition.,"Activity: [""Record Goods Receipt""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Record Goods Receipt'}) RETURN COUNT(e) = 0 AS ruleSatisfied
At least one purchase requisition item must be created.,"Activity: [""Create Purchase Requisition Item""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Create Purchase Requisition Item'}) RETURN COUNT(e) > 0 AS ruleSatisfied
At least one vendor invoice creation must be logged.,"Activity: [""Vendor creates invoice""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Vendor creates invoice'}) RETURN COUNT(e) > 0 AS ruleSatisfied
A record for goods receipt must exist in the event log.,"Activity: [""Record Goods Receipt""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Record Goods Receipt'}) RETURN COUNT(e) > 0 AS ruleSatisfied
Invoice receipts must be recorded at least once in the system.,"Activity: [""Record Invoice Receipt""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Record Invoice Receipt'}) RETURN COUNT(e) > 0 AS ruleSatisfied
It is mandatory to delete at least one purchase order item.,"Activity: [""Delete Purchase Order Item""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Delete Purchase Order Item'}) RETURN COUNT(e) > 0 AS ruleSatisfied
"Batch_10 should not record ""Goods Receipt"" within 7 days after a ""Purchase Order Item"" creation occured for the same instance.","Activity: [""Record Goods Receipt"", ""Create Purchase Order Item""], Actor: [""batch_10""]","MATCH (e2:Event {Activity: 'Create Purchase Order Item'})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: 'Record Goods Receipt', Actor: 'batch_10'})-[:CORR]->(entity) WHERE e1.timestamp <= e2.timestamp + duration({days: 7}) RETURN CASE WHEN count(e2) > 0 THEN false ELSE true END AS result"
"User_407 is prohibited from deleting a ""Purchase Order Item"" within 3 days after an ""Invoice Receipt"" for the same entity took place.","Activity: [""Delete Purchase Order Item"", ""Record Invoice Receipt""], Actor: [""user_407""]","MATCH (e2:Event {Activity: 'Record Invoice Receipt'})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: 'Delete Purchase Order Item', Actor: 'user_407'})-[:CORR]->(entity) WHERE e1.timestamp <= e2.timestamp + duration({days: 3}) RETURN CASE WHEN count(e2) > 0 THEN false ELSE true END AS result"
"Batch_06 is not allowed to remove the payment block after the ""Approve Payment"" event for the same entity within 5 days.","Activity: [""Remove Payment Block"", ""Approve Payment""], Actor: [""batch_06""]","MATCH (e2:Event {Activity: 'Approve Payment'})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: 'Remove Payment Block', Actor: 'batch_06'})-[:CORR]->(entity) WHERE e1.timestamp <= e2.timestamp + duration({days: 5}) RETURN CASE WHEN count(e2) > 0 THEN false ELSE true END AS result"
"User_059 must not perform a ""Change Quantity"" event within 2 days of a ""Create Purchase Requisition Item"" event for the same object.","Activity: [""Change Quantity"", ""Create Purchase Requisition Item""], Actor: [""user_059""]","MATCH (e2:Event {Activity: 'Create Purchase Requisition Item'})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: 'Change Quantity', Actor: 'user_059'})-[:CORR]->(entity) WHERE e1.timestamp <= e2.timestamp + duration({days: 2}) RETURN CASE WHEN count(e2) > 0 THEN false ELSE true END AS result"
"User_031 must not receive an ""Order Confirmation"" within 7 days after purchase order item is deleted for the same entity.","Activity: [""Receive Order Confirmation"", ""Delete Purchase Order Item""], Actor: [""user_031""]","MATCH (e2:Event {Activity: 'Delete Purchase Order Item'})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: 'Receive Order Confirmation', Actor: 'user_031'})-[:CORR]->(entity) WHERE e1.timestamp <= e2.timestamp + duration({days: 7}) RETURN CASE WHEN count(e2) > 0 THEN false ELSE true END AS result"
"User_006 cannot perform a ""Create Purchase Order Item"" event within 3 days before ""Vendor creates invoice"" activity for the same instance.","Activity: [""Create Purchase Order Item"", ""Vendor creates invoice""], Actor: [""user_006""]","MATCH (e2:Event {Activity: 'Vendor creates invoice'})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: 'Create Purchase Order Item', Actor: 'user_006'})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({days: 3}) RETURN CASE WHEN count(e2) > 0 THEN false ELSE true END AS result"
"User_429 must not perform a ""Record Goods Receipt"" activity within 5 days after a Purchase Order Item Creation for the same entity.","Activity: [""Record Goods Receipt"", ""Create Purchase Order Item""], Actor: [""user_429""]","MATCH (e2:Event {Activity: 'Create Purchase Order Item'})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: 'Record Goods Receipt', Actor: 'user_429'})-[:CORR]->(entity) WHERE e1.timestamp <= e2.timestamp + duration({days: 5}) RETURN CASE WHEN count(e2) > 0 THEN false ELSE true END AS result"
"User_007 is prohibited from performing the ""Clear Invoice"" activity within 3 days before a ""Vendor creates invoice"" event for the same object.","Activity: [""Clear Invoice"", ""Vendor creates invoice""], Actor: [""user_007""]","MATCH (e2:Event {Activity: 'Vendor creates invoice'})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: 'Clear Invoice', Actor: 'user_007'})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({days: 3}) RETURN CASE WHEN count(e2) > 0 THEN false ELSE true END AS result"
"User_429 must not create a purchase requisition item after June 30th, 2019.","Activity: [""Create Purchase Requisition Item""], EntityType: [], Actor: [""user_429""]","MATCH (e:Event) WHERE e.Activity = ""Create Purchase Requisition Item"" AND e.Actor = ""user_429"" AND e.timestamp > datetime(""2019-06-30T23:59:59"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"The system should prevent batch_06 from recording a goods receipt before March 1st, 2019.","Activity: [""Record Goods Receipt""], EntityType: [], Actor: [""batch_06""]","MATCH (e:Event) WHERE e.Activity = ""Record Goods Receipt"" AND e.Actor = ""batch_06"" AND e.timestamp < datetime(""2019-03-01T00:00:00"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"No invoice should be created by user_258 after September 15th, 2019.","Activity: [""Vendor creates invoice""], EntityType: [], Actor: [""user_258""]","MATCH (e:Event) WHERE e.Activity = ""Vendor creates invoice"" AND e.Actor = ""user_258"" AND e.timestamp > datetime(""2019-09-15T23:59:59"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"User_002 must avoid deleting any purchase order item after July 10th, 2019.","Activity: [""Delete Purchase Order Item""], EntityType: [], Actor: [""user_002""]","MATCH (e:Event) WHERE e.Activity = ""Delete Purchase Order Item"" AND e.Actor = ""user_002"" AND e.timestamp > datetime(""2019-07-10T23:59:59"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"Batch_10 is prohibited from clearing invoices before November 5th, 2019.","Activity: [""Clear Invoice""], EntityType: [], Actor: [""batch_10""]","MATCH (e:Event) WHERE e.Activity = ""Clear Invoice"" AND e.Actor = ""batch_10"" AND e.timestamp < datetime(""2019-11-05T00:00:00"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"A certain user, identified as user_204, must not submit a service entry sheet after August 20th, 2019.","Activity: [""Record Service Entry Sheet""], EntityType: [], Actor: [""user_204""]","MATCH (e:Event) WHERE e.Activity = ""Record Service Entry Sheet"" AND e.Actor = ""user_204"" AND e.timestamp > datetime(""2019-08-20T23:59:59"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"User_013 should not be allowed to modify the quantity of an order before April 1st, 2019.","Activity: [""Change Quantity""], EntityType: [], Actor: [""user_013""]","MATCH (e:Event) WHERE e.Activity = ""Change Quantity"" AND e.Actor = ""user_013"" AND e.timestamp < datetime(""2019-04-01T00:00:00"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"Before October 10th, 2019, user_012 is not allowed to acknowledge an order confirmation.","Activity: [""Receive Order Confirmation""], EntityType: [], Actor: [""user_012""]","MATCH (e:Event) WHERE e.Activity = ""Receive Order Confirmation"" AND e.Actor = ""user_012"" AND e.timestamp < datetime(""2019-10-10T00:00:00"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"User_060 should never create a purchase order item after December 20th, 2019.","Activity: [""Create Purchase Order Item""], EntityType: [], Actor: [""user_060""]","MATCH (e:Event) WHERE e.Activity = ""Create Purchase Order Item"" AND e.Actor = ""user_060"" AND e.timestamp > datetime(""2019-12-20T23:59:59"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"A purchase requisition must be created by user_429 no earlier than February 1st, 2024.","Activity: [""Create Purchase Requisition Item""], EntityType: [], Actor: [""user_429""]","MATCH (e:Event) WHERE e.Activity = ""Create Purchase Requisition Item"" AND e.Actor = ""user_429"" AND e.timestamp >= datetime(""2024-02-01T00:00:00"") RETURN CASE WHEN count(e) > 0 THEN true ELSE false END AS rule_satisfied"
"Someone from batch_10 should finalize a goods receipt before September 30th, 2023.","Activity: [""Record Goods Receipt""], EntityType: [], Actor: [""batch_10""]","MATCH (e:Event) WHERE e.Activity = ""Record Goods Receipt"" AND e.Actor = ""batch_10"" AND e.timestamp < datetime(""2023-09-30T23:59:59"") RETURN CASE WHEN count(e) > 0 THEN true ELSE false END AS rule_satisfied"
"An invoice must be created by user_068 after April 15th, 2024.","Activity: [""Vendor creates invoice""], EntityType: [], Actor: [""user_068""]","MATCH (e:Event) WHERE e.Activity = ""Vendor creates invoice"" AND e.Actor = ""user_068"" AND e.timestamp > datetime(""2024-04-15T23:59:59"") RETURN CASE WHEN count(e) > 0 THEN true ELSE false END AS rule_satisfied"
"A payment block should be removed by user_002 no later than November 10th, 2023.","Activity: [""Remove Payment Block""], EntityType: [], Actor: [""user_002""]","MATCH (e:Event) WHERE e.Activity = ""Remove Payment Block"" AND e.Actor = ""user_002"" AND e.timestamp <= datetime(""2023-11-10T23:59:59"") RETURN CASE WHEN count(e) > 0 THEN true ELSE false END AS rule_satisfied"
"The individual handling order confirmation (user_087) must register one on or after August 5th, 2023.","Activity: [""Receive Order Confirmation""], EntityType: [], Actor: [""user_087""]","MATCH (e:Event) WHERE e.Activity = ""Receive Order Confirmation"" AND e.Actor = ""user_087"" AND e.timestamp >= datetime(""2023-08-05T00:00:00"") RETURN CASE WHEN count(e) > 0 THEN true ELSE false END AS rule_satisfied"
"Before March 1st, 2024, user_059 must generate a purchase order item.","Activity: [""Create Purchase Order Item""], EntityType: [], Actor: [""user_059""]","MATCH (e:Event) WHERE e.Activity = ""Create Purchase Order Item"" AND e.Actor = ""user_059"" AND e.timestamp < datetime(""2024-03-01T00:00:00"") RETURN CASE WHEN count(e) > 0 THEN true ELSE false END AS rule_satisfied"
"The deletion of a purchase order item is required from a batch process (batch_04) after July 20th, 2023.","Activity: [""Delete Purchase Order Item""], EntityType: [], Actor: [""batch_04""]","MATCH (e:Event) WHERE e.Activity = ""Delete Purchase Order Item"" AND e.Actor = ""batch_04"" AND e.timestamp > datetime(""2023-07-20T23:59:59"") RETURN CASE WHEN count(e) > 0 THEN true ELSE false END AS rule_satisfied"
"User_020 is responsible for clearing an invoice, and this must happen no later than May 15th, 2024.","Activity: [""Clear Invoice""], EntityType: [], Actor: [""user_020""]","MATCH (e:Event) WHERE e.Activity = ""Clear Invoice"" AND e.Actor = ""user_020"" AND e.timestamp <= datetime(""2024-05-15T23:59:59"") RETURN CASE WHEN count(e) > 0 THEN true ELSE false END AS rule_satisfied"
"A quantity modification needs to be recorded by user_105 before December 31st, 2023.","Activity: [""Change Quantity""], EntityType: [], Actor: [""user_105""]","MATCH (e:Event) WHERE e.Activity = ""Change Quantity"" AND e.Actor = ""user_105"" AND e.timestamp < datetime(""2023-12-31T23:59:59"") RETURN CASE WHEN count(e) > 0 THEN true ELSE false END AS rule_satisfied"
"The completion of a service entry sheet by user_013 is expected on or before June 30th, 2023.","Activity: [""Record Service Entry Sheet""], EntityType: [], Actor: [""user_013""]","MATCH (e:Event) WHERE e.Activity = ""Record Service Entry Sheet"" AND e.Actor = ""user_013"" AND e.timestamp <= datetime(""2023-06-30T23:59:59"") RETURN CASE WHEN count(e) > 0 THEN true ELSE false END AS rule_satisfied"
The same individual must not create a purchase requisition item and create the corresponding purchase order item.,"Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Create Purchase Requisition Item""})-[:CORR]->(ent:Entity), (e2:Event{Activity:""Create Purchase Order Item""})-[:CORR]->(ent) WHERE e1.Actor = e2.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied"
A user is not allowed to generate an invoice and register the corresponding goods receipt.,"Activity: [""Vendor creates invoice"", ""Record Goods Receipt""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Vendor creates invoice""})-[:CORR]->(ent:Entity), (e2:Event{Activity:""Record Goods Receipt""})-[:CORR]->(ent) WHERE e1.Actor = e2.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied"
No person should delete a purchase order item when also receiving the corresponding invoice.,"Activity: [""Delete Purchase Order Item"", ""Record Invoice Receipt""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Delete Purchase Order Item""})-[:CORR]->(ent:Entity), (e2:Event{Activity:""Record Invoice Receipt""})-[:CORR]->(ent) WHERE e1.Actor = e2.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied"
It is forbidden for the same user to record an invoice and later clear it.,"Activity: [""Record Invoice Receipt"", ""Clear Invoice""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Record Invoice Receipt""})-[:CORR]->(ent:Entity), (e2:Event{Activity:""Clear Invoice""})-[:CORR]->(ent) WHERE e1.Actor = e2.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied"
A person handling a service entry sheet should not be the one removing a payment block for the same entity.,"Activity: [""Record Service Entry Sheet"", ""Remove Payment Block""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Record Service Entry Sheet""})-[:CORR]->(ent:Entity), (e2:Event{Activity:""Remove Payment Block""})-[:CORR]->(ent) WHERE e1.Actor = e2.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied"
The individual responsible for recording an invoice receipt for a given object must not also handle its payment clearance.,"Activity: [""Record Invoice Receipt"", ""Clear Invoice""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Record Invoice Receipt""})-[:CORR]->(ent:Entity), (e2:Event{Activity:""Clear Invoice""})-[:CORR]->(ent) WHERE e1.Actor = e2.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied"
A person creating a purchase requisition item should not be allowed to create an invoice for the same instance.,"Activity: [""Create Purchase Requisition Item"", ""Vendor creates invoice""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Create Purchase Requisition Item""})-[:CORR]->(ent:Entity), (e2:Event{Activity:""Vendor creates invoice""})-[:CORR]->(ent) WHERE e1.Actor = e2.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied"
"A user must not perform both ""Create Purchase Requisition Item"" and ""Create Purchase Order Item"" for the same entity.","Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Create Purchase Requisition Item""})-[:CORR]->(ent:Entity), (e2:Event {Activity:""Create Purchase Order Item""})-[:CORR]->(ent) WHERE e1.Actor = e2.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied"
"The same person is not allowed to execute both ""Vendor creates invoice"" and ""Record Goods Receipt"" for the same object.","Activity: [""Vendor creates invoice"", ""Record Goods Receipt""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Vendor creates invoice""})-[:CORR]->(ent:Entity), (e2:Event {Activity:""Record Goods Receipt""})-[:CORR]->(ent) WHERE e1.Actor = e2.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied"
"The same actor must not perform both ""Record Service Entry Sheet"" and ""Remove Payment Block"" for the same entity.","Activity: [""Record Service Entry Sheet"", ""Remove Payment Block""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Record Service Entry Sheet""})-[:CORR]->(ent:Entity), (e2:Event {Activity:""Remove Payment Block""})-[:CORR]->(ent) WHERE e1.Actor = e2.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied"
"The user responsible for ""Record Invoice Receipt"" should not be the one who performs ""Clear Invoice"" for the same instance.","Activity: [""Record Invoice Receipt"", ""Clear Invoice""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Record Invoice Receipt""})-[:CORR]->(ent:Entity), (e2:Event {Activity:""Clear Invoice""})-[:CORR]->(ent) WHERE e1.Actor = e2.Actor RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS ruleSatisfied"
No person should be responsible for more than 5 distinct Purchase Order Items.,"Activity: [], EntityType: [""POI""], Actor: []","MATCH (e:Entity {EntityType: 'POI'})<-[:CORR]-(ev:Event) WITH ev.Actor AS actor, COLLECT(DISTINCT e) AS entityList RETURN CASE WHEN ANY(x IN COLLECT(SIZE(entityList)) WHERE x > 5) THEN false ELSE true END as ruleSatisfied"
An individual may not be linked to more than 3 Purchase Orders.,"Activity: [], EntityType: [""PO""], Actor: []","MATCH (e:Entity {EntityType: 'PO'})<-[:CORR]-(ev:Event) WITH ev.Actor AS actor, COLLECT(DISTINCT e) AS entityList RETURN CASE WHEN ANY(x IN COLLECT(SIZE(entityList)) WHERE x > 3) THEN false ELSE true END as ruleSatisfied"
A single employee should not be associated with more than 4 POIs.,"Activity: [], EntityType: [""POI""], Actor: []","MATCH (e:Entity {EntityType: 'POI'})<-[:CORR]-(ev:Event) WITH ev.Actor AS actor, COLLECT(DISTINCT e) AS entityList RETURN CASE WHEN ANY(x IN COLLECT(SIZE(entityList)) WHERE x > 4) THEN false ELSE true END as ruleSatisfied"
No one should be involved in handling more than 6 distinct purchase transactions.,"Activity: [], EntityType: [""PO""], Actor: []","MATCH (e:Entity {EntityType: 'PO'})<-[:CORR]-(ev:Event) WITH ev.Actor AS actor, COLLECT(DISTINCT e) AS entityList RETURN CASE WHEN ANY(x IN COLLECT(SIZE(entityList)) WHERE x > 6) THEN false ELSE true END as ruleSatisfied"
Ensure that no actor is linked to more than 7 Purchase Order Items.,"Activity: [], EntityType: [""POI""], Actor: []","MATCH (e:Entity {EntityType: 'POI'})<-[:CORR]-(ev:Event) WITH ev.Actor AS actor, COLLECT(DISTINCT e) AS entityList RETURN CASE WHEN ANY(x IN COLLECT(SIZE(entityList)) WHERE x > 7) THEN false ELSE true END as ruleSatisfied"
No single individual should be associated with more than 2 Purchase Orders.,"Activity: [], EntityType: [""PO""], Actor: []","MATCH (e:Entity {EntityType: 'PO'})<-[:CORR]-(ev:Event) WITH ev.Actor AS actor, COLLECT(DISTINCT e) AS entityList RETURN CASE WHEN ANY(x IN COLLECT(SIZE(entityList)) WHERE x > 2) THEN false ELSE true END as ruleSatisfied"
An employee should not manage more than 8 distinct Purchase Order Items.,"Activity: [], EntityType: [""POI""], Actor: []","MATCH (e:Entity {EntityType: 'POI'})<-[:CORR]-(ev:Event) WITH ev.Actor AS actor, COLLECT(DISTINCT e) AS entityList RETURN CASE WHEN ANY(x IN COLLECT(SIZE(entityList)) WHERE x > 8) THEN false ELSE true END as ruleSatisfied"
No one should process more than 4 purchasing documents.,"Activity: [], EntityType: [""PO""], Actor: []","MATCH (e:Entity {EntityType: 'PO'})<-[:CORR]-(ev:Event) WITH ev.Actor AS actor, COLLECT(DISTINCT e) AS entityList RETURN CASE WHEN ANY(x IN COLLECT(SIZE(entityList)) WHERE x > 4) THEN false ELSE true END as ruleSatisfied"
Each individual must not be linked to more than 3 Purchase Order Items at a time.,"Activity: [], EntityType: [""POI""], Actor: []","MATCH (e:Entity {EntityType: 'POI'})<-[:CORR]-(ev:Event) WITH ev.Actor AS actor, COLLECT(DISTINCT e) AS entityList RETURN CASE WHEN ANY(x IN COLLECT(SIZE(entityList)) WHERE x > 3) THEN false ELSE true END as ruleSatisfied"
"The sequence ""Create Purchase Requisition Item"", ""Create Purchase Order Item"", and ""Vendor creates invoice"" occurs no more than 5 times.","Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item"", ""Vendor creates invoice""], EntityType: [], Actor: []",MATCH (e1:Event {Activity: 'Create Purchase Requisition Item'})-[:DF]->(e2:Event {Activity: 'Create Purchase Order Item'})-[:DF]->(e3:Event {Activity: 'Vendor creates invoice'}) RETURN CASE WHEN COUNT(DISTINCT e1)>5 THEN false ELSE true END AS ruleSatisfied
"The process of initiating a purchase, confirming it, and the supplier issuing an invoice must happen at least twice.","Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item"", ""Vendor creates invoice""], EntityType: [], Actor: []",MATCH (e1:Event {Activity: 'Create Purchase Requisition Item'})-[:DF]->(e2:Event {Activity: 'Create Purchase Order Item'})-[:DF]->(e3:Event {Activity: 'Vendor creates invoice'}) RETURN CASE WHEN COUNT(DISTINCT e1)<2 THEN false ELSE true END AS ruleSatisfied
"There should be fewer than 4 occurrences of the chain ""Record Goods Receipt"" → ""Record Invoice Receipt"" → ""Clear Invoice"".","Activity: [""Record Goods Receipt"", ""Record Invoice Receipt"", ""Clear Invoice""], EntityType: [], Actor: []",MATCH (e1:Event {Activity: 'Record Goods Receipt'})-[:DF]->(e2:Event {Activity: 'Record Invoice Receipt'})-[:DF]->(e3:Event {Activity: 'Clear Invoice'}) RETURN CASE WHEN COUNT(DISTINCT e1)>=4 THEN false ELSE true END AS ruleSatisfied
"The process of receiving ordered goods, matching the invoice, and clearing the payment must take place exactly 6 times.","Activity: [""Record Goods Receipt"", ""Record Invoice Receipt"", ""Clear Invoice""], EntityType: [], Actor: []",MATCH (e1:Event {Activity: 'Record Goods Receipt'})-[:DF]->(e2:Event {Activity: 'Record Invoice Receipt'})-[:DF]->(e3:Event {Activity: 'Clear Invoice'}) RETURN CASE WHEN COUNT(DISTINCT e1)<>6 THEN false ELSE true END AS ruleSatisfied
"The sequence ""Delete Purchase Order Item"" and ""Clear Invoice"" should not appear more than 3 times.","Activity: [""Delete Purchase Order Item"", ""Clear Invoice""], EntityType: [], Actor: []",MATCH (e1:Event {Activity: 'Delete Purchase Order Item'})-[:DF]->(e2:Event {Activity: 'Clear Invoice'}) RETURN CASE WHEN COUNT(DISTINCT e1)>3 THEN false ELSE true END AS ruleSatisfied
"The chain ""Record Service Entry Sheet"" → ""Remove Payment Block"" must appear at least 4 times in the logs.","Activity: [""Record Service Entry Sheet"", ""Remove Payment Block""], EntityType: [], Actor: []",MATCH (e1:Event {Activity: 'Record Service Entry Sheet'})-[:DF]->(e2:Event {Activity: 'Remove Payment Block'}) RETURN CASE WHEN COUNT(DISTINCT e1)<4 THEN false ELSE true END AS ruleSatisfied
"The sequence ""Change Quantity"" → ""Receive Order Confirmation"" must happen exactly 5 times.","Activity: [""Change Quantity"", ""Receive Order Confirmation""], EntityType: [], Actor: []",MATCH (e1:Event {Activity: 'Change Quantity'})-[:DF]->(e2:Event {Activity: 'Receive Order Confirmation'}) RETURN CASE WHEN COUNT(DISTINCT e1)<>5 THEN false ELSE true END AS ruleSatisfied
"The sequence ""Create Purchase Requisition Item"", ""Create Purchase Order Item"", ""Record Goods Receipt"", and ""Clear Invoice"" must occur at least 3 times.","Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item"", ""Record Goods Receipt"", ""Clear Invoice""], EntityType: [], Actor: []",MATCH (e1:Event {Activity: 'Create Purchase Requisition Item'})-[:DF]->(e2:Event {Activity: 'Create Purchase Order Item'})-[:DF]->(e3:Event {Activity: 'Record Goods Receipt'})-[:DF]->(e4:Event {Activity: 'Clear Invoice'}) RETURN CASE WHEN COUNT(DISTINCT e1)<3 THEN false ELSE true END AS ruleSatisfied
"No more than 5 occurrences of creating a requisition, generating an order, recording goods received, and clearing the invoice in that order should exist.","Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item"", ""Record Goods Receipt"", ""Clear Invoice""], EntityType: [], Actor: []",MATCH (e1:Event {Activity: 'Create Purchase Requisition Item'})-[:DF]->(e2:Event {Activity: 'Create Purchase Order Item'})-[:DF]->(e3:Event {Activity: 'Record Goods Receipt'})-[:DF]->(e4:Event {Activity: 'Clear Invoice'}) RETURN CASE WHEN COUNT(DISTINCT e1)>5 THEN false ELSE true END AS ruleSatisfied
"The chain ""Vendor creates invoice"" → ""Record Invoice Receipt"" → ""Remove Payment Block"" should occur exactly 4 times.","Activity: [""Vendor creates invoice"", ""Record Invoice Receipt"", ""Remove Payment Block""], EntityType: [], Actor: []",MATCH (e1:Event {Activity: 'Vendor creates invoice'})-[:DF]->(e2:Event {Activity: 'Record Invoice Receipt'})-[:DF]->(e3:Event {Activity: 'Remove Payment Block'}) RETURN CASE WHEN COUNT(DISTINCT e1)<>4 THEN false ELSE true END AS ruleSatisfied
"The process of an invoice being issued, received, and then having payment restrictions removed must take place at least twice.","Activity: [""Vendor creates invoice"", ""Record Invoice Receipt"", ""Remove Payment Block""], EntityType: [], Actor: []",MATCH (e1:Event {Activity: 'Vendor creates invoice'})-[:DF]->(e2:Event {Activity: 'Record Invoice Receipt'})-[:DF]->(e3:Event {Activity: 'Remove Payment Block'}) RETURN CASE WHEN COUNT(DISTINCT e1)<2 THEN false ELSE true END AS ruleSatisfied
A Purchase Order cannot have fewer than 2 items.,"Activity: [], EntityType: [""PO"", ""POI""], Actor: []","MATCH (ent1:Entity {EntityType:""PO""})-[:REL]-(ent2:Entity {EntityType:""POI""}) WITH ent1, COLLECT(DISTINCT ent2) AS relatedItems RETURN MIN(size(relatedItems)) >= 2 AS ruleSatisfied"
No POI should be associated with more than 5 Purchase Orders.,"Activity: [], EntityType: [""POI"", ""PO""], Actor: []","MATCH (ent1:Entity {EntityType:""PO""})-[:REL]-(ent2:Entity {EntityType:""POI""}) WITH ent2, COLLECT(DISTINCT ent1) AS relatedItems RETURN MAX(size(relatedItems)) <= 5 AS ruleSatisfied"
A Purchase Order should contain at least one item.,"Activity: [], EntityType: [""PO"", ""POI""], Actor: []","MATCH (ent1:Entity {EntityType:""PO""})-[:REL]-(ent2:Entity {EntityType:""POI""}) WITH ent1, COLLECT(DISTINCT ent2) AS relatedItems RETURN MIN(size(relatedItems)) >= 1 AS ruleSatisfied"
No Purchase Order should have more than 10 items associated with it.,"Activity: [], EntityType: [""PO"", ""POI""], Actor: []","MATCH (ent1:Entity {EntityType:""PO""})-[:REL]-(ent2:Entity {EntityType:""POI""}) WITH ent1, COLLECT(DISTINCT ent2) AS relatedItems RETURN MAX(size(relatedItems)) <= 10 AS ruleSatisfied"
A POI cannot belong to more than 3 different Purchase Orders.,"Activity: [], EntityType: [""POI"", ""PO""], Actor: []","MATCH (ent1:Entity {EntityType:""PO""})-[:REL]-(ent2:Entity {EntityType:""POI""}) WITH ent2, COLLECT(DISTINCT ent1) AS relatedItems RETURN MAX(size(relatedItems)) <= 3 AS ruleSatisfied"
A Purchase Order should not have more than 5 associated items.,"Activity: [], EntityType: [""PO"", ""POI""], Actor: []","MATCH (ent1:Entity {EntityType:""PO""})-[:REL]-(ent2:Entity {EntityType:""POI""}) WITH ent1, COLLECT(DISTINCT ent2) AS relatedItems RETURN MAX(size(relatedItems)) <= 5 AS ruleSatisfied"
A Purchase Order Item must always be linked to at least one Purchase Order.,"Activity: [], EntityType: [""POI"", ""PO""], Actor: []","MATCH (ent1:Entity {EntityType:""PO""})-[:REL]-(ent2:Entity {EntityType:""POI""}) WITH ent2, COLLECT(DISTINCT ent1) AS relatedItems RETURN MIN(size(relatedItems)) >= 1 AS ruleSatisfied"
A Purchase Order cannot have more than 7 different POI objects.,"Activity: [], EntityType: [""PO"", ""POI""], Actor: []","MATCH (ent1:Entity {EntityType:""PO""})-[:REL]-(ent2:Entity {EntityType:""POI""}) WITH ent1, COLLECT(DISTINCT ent2) AS relatedItems RETURN MAX(size(relatedItems)) <= 7 AS ruleSatisfied"
A POI should not be part of more than 3 different Purchase Orders.,"Activity: [], EntityType: [""POI"", ""PO""], Actor: []","MATCH (ent1:Entity {EntityType:""PO""})-[:REL]-(ent2:Entity {EntityType:""POI""}) WITH ent2, COLLECT(DISTINCT ent1) AS relatedItems RETURN MAX(size(relatedItems)) <= 3 AS ruleSatisfied"
No Purchase Order should be associated with fewer than 1 POI.,"Activity: [], EntityType: [""PO"", ""POI""], Actor: []","MATCH (ent1:Entity {EntityType:""PO""})-[:REL]-(ent2:Entity {EntityType:""POI""}) WITH ent1, COLLECT(DISTINCT ent2) AS relatedItems RETURN MIN(size(relatedItems)) >= 1 AS ruleSatisfied"
"For every ""Record Goods Receipt"", at least 1 ""Purchase Order Item"" must be involved on average.","Activity: [""Record Goods Receipt""], EntityType: [""POI""], Actor: []","MATCH (ent:Entity {EntityType: ""POI""})<-[:CORR]-(e:Event {Activity: ""Record Goods Receipt""}) WITH e, COUNT(DISTINCT ent) AS relatedPOICount RETURN AVG(relatedPOICount) >= 1 AS ruleSatisfied"
"On average, no more than 3 ""Purchase Order Item"" should be linked to any ""Vendor creates invoice"".","Activity: [""Vendor creates invoice""], EntityType: [""POI""], Actor: []","MATCH (ent:Entity {EntityType: ""POI""})<-[:CORR]-(e:Event {Activity: ""Vendor creates invoice""}) WITH e, COUNT(DISTINCT ent) AS relatedPOICount RETURN AVG(relatedPOICount) <= 3 AS ruleSatisfied"
"On average, no more than 4 ""Purchase Order Items"" should be linked during ""Record Service Entry Sheet"".","Activity: [""Record Service Entry Sheet""], EntityType: [""POI""], Actor: []","MATCH (ent:Entity {EntityType: ""POI""})<-[:CORR]-(e:Event {Activity: ""Record Service Entry Sheet""}) WITH e, COUNT(DISTINCT ent) AS relatedPOICount RETURN AVG(relatedPOICount) <= 4 AS ruleSatisfied"
"For each ""Remove Payment Block"", at least 1 ""Purchase Order"" should be involved on average.","Activity: [""Remove Payment Block""], EntityType: [""PO""], Actor: []","MATCH (ent:Entity {EntityType: ""PO""})<-[:CORR]-(e:Event {Activity: ""Remove Payment Block""}) WITH e, COUNT(DISTINCT ent) AS relatedPOCount RETURN AVG(relatedPOCount) >= 1 AS ruleSatisfied"
"When a ""Change Quantity"" event occurs, on average, no more than 2 ""Purchase Order Items"" should be affected.","Activity: [""Change Quantity""], EntityType: [""POI""], Actor: []","MATCH (ent:Entity {EntityType: ""POI""})<-[:CORR]-(e:Event {Activity: ""Change Quantity""}) WITH e, COUNT(DISTINCT ent) AS relatedPOICount RETURN AVG(relatedPOICount) <= 2 AS ruleSatisfied"
"When a new purchase order item is added, on average, at least 2 purchase orders should be involved.","Activity: [""Create Purchase Order Item""], EntityType: [""PO""], Actor: []","MATCH (ent:Entity {EntityType: ""PO""})<-[:CORR]-(e:Event {Activity: ""Create Purchase Order Item""}) WITH e, COUNT(DISTINCT ent) AS relatedPOCount RETURN AVG(relatedPOCount) >= 2 AS ruleSatisfied"
The invoice creation action should not involve more than 3 items on average.,"Activity: [""Vendor creates invoice""], EntityType: [""POI""], Actor: []","MATCH (ent:Entity {EntityType: ""POI""})<-[:CORR]-(e:Event {Activity: ""Vendor creates invoice""}) WITH e, COUNT(DISTINCT ent) AS relatedPOICount RETURN AVG(relatedPOICount) <= 3 AS ruleSatisfied"
"When receiving an invoice, there should be an average of at least 2 purchase orders involved.","Activity: [""Record Invoice Receipt""], EntityType: [""PO""], Actor: []","MATCH (ent:Entity {EntityType: ""PO""})<-[:CORR]-(e:Event {Activity: ""Record Invoice Receipt""}) WITH e, COUNT(DISTINCT ent) AS relatedPOCount RETURN AVG(relatedPOCount) >= 2 AS ruleSatisfied"
"For each service entry sheet recording, no more than 4 purchase order items should be linked on average.","Activity: [""Record Service Entry Sheet""], EntityType: [""POI""], Actor: []","MATCH (ent:Entity {EntityType: ""POI""})<-[:CORR]-(e:Event {Activity: ""Record Service Entry Sheet""}) WITH e, COUNT(DISTINCT ent) AS relatedPOICount RETURN AVG(relatedPOICount) <= 4 AS ruleSatisfied"
Removing a payment block should always involve at least 1 purchase order on average.,"Activity: [""Remove Payment Block""], EntityType: [""PO""], Actor: []","MATCH (ent:Entity {EntityType: ""PO""})<-[:CORR]-(e:Event {Activity: ""Remove Payment Block""}) WITH e, COUNT(DISTINCT ent) AS relatedPOCount RETURN AVG(relatedPOCount) >= 1 AS ruleSatisfied"
"A ""Create Purchase Requisition Item"" event must involve at least 1 ""PO"" entity.","Activity: [""Create Purchase Requisition Item""], EntityType: [""PO""]","MATCH (ent:Entity {EntityType: ""PO""})<-[:CORR]-(e:Event {Activity: ""Create Purchase Requisition Item""}) WITH e, COLLECT(ent) AS pos RETURN CASE WHEN ANY (x in COLLECT(SIZE(pos)) where x < 1) THEN false ELSE true END as ruleSatisfied"
"Every ""Record Goods Receipt"" event should be linked to at least 2 ""POI"" entities.","Activity: [""Record Goods Receipt""], EntityType: [""POI""]","MATCH (ent:Entity {EntityType: ""POI""})<-[:CORR]-(e:Event {Activity: ""Record Goods Receipt""}) WITH e, COLLECT(ent) AS pois RETURN CASE WHEN ANY (x in COLLECT(SIZE(pois)) where x < 2) THEN false ELSE true END as ruleSatisfied"
"For each ""Vendor creates invoice"" event, there must be at least 1 ""PO"" involved.","Activity: [""Vendor creates invoice""], EntityType: [""PO""]","MATCH (ent:Entity {EntityType: ""PO""})<-[:CORR]-(e:Event {Activity: ""Vendor creates invoice""}) WITH e, COLLECT(ent) AS pos RETURN CASE WHEN ANY (x in COLLECT(SIZE(pos)) where x < 1) THEN false ELSE true END as ruleSatisfied"
"When a ""Record Invoice Receipt"" event occurs, at least 2 ""POI"" entities should be present.","Activity: [""Record Invoice Receipt""], EntityType: [""POI""]","MATCH (ent:Entity {EntityType: ""POI""})<-[:CORR]-(e:Event {Activity: ""Record Invoice Receipt""}) WITH e, COLLECT(ent) AS pois RETURN CASE WHEN ANY (x in COLLECT(SIZE(pois)) where x < 2) THEN false ELSE true END as ruleSatisfied"
"For each ""Delete Purchase Order Item"" task, there must be at least 1 ""PO"" entity involved.","Activity: [""Delete Purchase Order Item""], EntityType: [""PO""]","MATCH (ent:Entity {EntityType: ""PO""})<-[:CORR]-(e:Event {Activity: ""Delete Purchase Order Item""}) WITH e, COLLECT(ent) AS pos RETURN CASE WHEN ANY (x in COLLECT(SIZE(pos)) where x < 1) THEN false ELSE true END as ruleSatisfied"
"Every ""Record Service Entry Sheet"" event must be linked to at least 2 ""POI"" entities.","Activity: [""Record Service Entry Sheet""], EntityType: [""POI""]","MATCH (ent:Entity {EntityType: ""POI""})<-[:CORR]-(e:Event {Activity: ""Record Service Entry Sheet""}) WITH e, COLLECT(ent) AS pois RETURN CASE WHEN ANY (x in COLLECT(SIZE(pois)) where x < 2) THEN false ELSE true END as ruleSatisfied"
"Each time a purchase order item is created, there must be at least one purchase order associated.","Activity: [""Create Purchase Order Item""], EntityType: [""PO""]","MATCH (ent:Entity {EntityType: ""PO""})<-[:CORR]-(e:Event {Activity: ""Create Purchase Order Item""}) WITH e, COLLECT(ent) AS pos RETURN CASE WHEN ANY (x in COLLECT(SIZE(pos)) where x < 1) THEN false ELSE true END as ruleSatisfied"
"Whenever a goods receipt is recorded, at least two purchase order items must be involved in the process.","Activity: [""Record Goods Receipt""], EntityType: [""POI""]","MATCH (ent:Entity {EntityType: ""POI""})<-[:CORR]-(e:Event {Activity: ""Record Goods Receipt""}) WITH e, COLLECT(ent) AS pois RETURN CASE WHEN ANY (x in COLLECT(SIZE(pois)) where x < 2) THEN false ELSE true END as ruleSatisfied"
"When a vendor creates an invoice, it should be linked to at least one purchase order.","Activity: [""Vendor creates invoice""], EntityType: [""PO""]","MATCH (ent:Entity {EntityType: ""PO""})<-[:CORR]-(e:Event {Activity: ""Vendor creates invoice""}) WITH e, COLLECT(ent) AS pos RETURN CASE WHEN ANY (x in COLLECT(SIZE(pos)) where x < 1) THEN false ELSE true END as ruleSatisfied"
"Each time an invoice receipt is recorded, at least two purchase order items must be associated.","Activity: [""Record Invoice Receipt""], EntityType: [""POI""]","MATCH (ent:Entity {EntityType: ""POI""})<-[:CORR]-(e:Event {Activity: ""Record Invoice Receipt""}) WITH e, COLLECT(ent) AS pois RETURN CASE WHEN ANY (x in COLLECT(SIZE(pois)) where x < 2) THEN false ELSE true END as ruleSatisfied"
"If a purchase order item is deleted, at least one purchase order should be associated with the deletion.","Activity: [""Delete Purchase Order Item""], EntityType: [""PO""]","MATCH (ent:Entity {EntityType: ""PO""})<-[:CORR]-(e:Event {Activity: ""Delete Purchase Order Item""}) WITH e, COLLECT(ent) AS pos RETURN CASE WHEN ANY (x in COLLECT(SIZE(pos)) where x < 1) THEN false ELSE true END as ruleSatisfied"
The sojourn time for creating a purchase requisition item should be less than 2 hours.,"Activity: [""Create Purchase Requisition Item""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Create Purchase Requisition Item""}) WITH e, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(latestPredecessor, e.timestamp) AS sojournDuration RETURN MAX(sojournDuration.seconds) < (2 * 60 * 60) AS ruleSatisfied"
The maximum sojourn time for deleting a purchase order item should be no more than 6 hours.,"Activity: [""Delete Purchase Order Item""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Delete Purchase Order Item""}) WITH e, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(latestPredecessor, e.timestamp) AS sojournDuration RETURN MAX(sojournDuration.seconds) < (6 * 60 * 60) AS ruleSatisfied"
The sojourn time for clearing an invoice should be less than 3 hours.,"Activity: [""Clear Invoice""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Clear Invoice""}) WITH e, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(latestPredecessor, e.timestamp) AS sojournDuration RETURN MAX(sojournDuration.seconds) < (3 * 60 * 60) AS ruleSatisfied"
The average sojourn time for removing a payment block should be no more than 3 hours.,"Activity: [""Remove Payment Block""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Remove Payment Block""}) WITH e, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(latestPredecessor, e.timestamp) AS sojournDuration RETURN AVG(sojournDuration.seconds) < (3 * 60 * 60) AS ruleSatisfied"
The maximum sojourn time for creating a purchase order item should be 1 hour or less.,"Activity: [""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Create Purchase Order Item""}) WITH e, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(latestPredecessor, e.timestamp) AS sojournDuration RETURN MAX(sojournDuration.seconds) < (1 * 60 * 60) AS ruleSatisfied"
"The maximum sojourn time for a ""Create Purchase Requisition Item"" activity should be 4 hours.","Activity: [""Create Purchase Requisition Item""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Create Purchase Requisition Item""}) WITH e, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(latestPredecessor, e.timestamp) AS sojournDuration RETURN MAX(sojournDuration.seconds) < (4 * 60 * 60) AS ruleSatisfied"
"The average sojourn time for ""Vendor creates invoice"" should be less than 1 day.","Activity: [""Vendor creates invoice""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Vendor creates invoice""}) WITH e, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(latestPredecessor, e.timestamp) AS sojournDuration RETURN AVG(sojournDuration.seconds) < (24 * 60 * 60) AS ruleSatisfied"
"The sojourn time for ""Record Goods Receipt"" should not exceed 2 hours on average.","Activity: [""Record Goods Receipt""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Record Goods Receipt""}) WITH e, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(latestPredecessor, e.timestamp) AS sojournDuration RETURN AVG(sojournDuration.seconds) < (2 * 60 * 60) AS ruleSatisfied"
"The sojourn time for ""Clear Invoice"" should be less than 30 minutes.","Activity: [""Clear Invoice""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Clear Invoice""}) WITH e, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(latestPredecessor, e.timestamp) AS sojournDuration RETURN MAX(sojournDuration.seconds) < (30 * 60) AS ruleSatisfied"
"The sojourn time for ""Delete Purchase Order Item"" should be greater than 45 minutes on average.","Activity: [""Delete Purchase Order Item""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Delete Purchase Order Item""}) WITH e, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(latestPredecessor, e.timestamp) AS sojournDuration RETURN AVG(sojournDuration.seconds) > (45 * 60) AS ruleSatisfied"
The average synchronization time for recording goods receipt is less than 1 day.,"Activity: [""Record Goods Receipt""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Record Goods Receipt""}) WITH e, MAX(prec.timestamp) AS latestPredecessor, MIN(prec.timestamp) AS earliestPredecessor WITH duration.between(latestPredecessor, earliestPredecessor) AS synchronizationDuration RETURN AVG(synchronizationDuration.seconds) < (24 * 60 * 60) AS ruleSatisfied"
The average synchronization time for the invoice receipt should be smaller than 1 day.,"Activity: [""Record Invoice Receipt""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Record Invoice Receipt""}) WITH e, MAX(prec.timestamp) AS latestPredecessor, MIN(prec.timestamp) AS earliestPredecessor WITH duration.between(latestPredecessor, earliestPredecessor) AS synchronizationDuration RETURN AVG(synchronizationDuration.seconds) < (24 * 60 * 60) AS ruleSatisfied"
"The minimum synchronization time for the activity ""Create Purchase Requisition Item"" is greater than 15 minutes.","Activity: [""Create Purchase Requisition Item""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Create Purchase Requisition Item""}) WITH e, MAX(prec.timestamp) AS latestPredecessor, MIN(prec.timestamp) AS earliestPredecessor WITH duration.between(latestPredecessor, earliestPredecessor) AS synchronizationDuration RETURN MIN(synchronizationDuration.seconds) > (15 * 60) AS ruleSatisfied"
"The average synchronization time for activities related to ""Vendor creates invoice"" must be less than 12 hours.","Activity: [""Vendor creates invoice""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Vendor creates invoice""}) WITH e, MAX(prec.timestamp) AS latestPredecessor, MIN(prec.timestamp) AS earliestPredecessor WITH duration.between(latestPredecessor, earliestPredecessor) AS synchronizationDuration RETURN AVG(synchronizationDuration.seconds) < (12 * 60 * 60) AS ruleSatisfied"
"The maximum synchronization time for ""Record Goods Receipt"" is smaller than 2 hours.","Activity: [""Record Goods Receipt""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Record Goods Receipt""}) WITH e, MAX(prec.timestamp) AS latestPredecessor, MIN(prec.timestamp) AS earliestPredecessor WITH duration.between(latestPredecessor, earliestPredecessor) AS synchronizationDuration RETURN MAX(synchronizationDuration.seconds) < (2 * 60 * 60) AS ruleSatisfied"
The maximum synchronization time for the action of clearing an invoice should not exceed 5 hours.,"Activity: [""Clear Invoice""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Clear Invoice""}) WITH e, MAX(prec.timestamp) AS latestPredecessor, MIN(prec.timestamp) AS earliestPredecessor WITH duration.between(latestPredecessor, earliestPredecessor) AS synchronizationDuration RETURN MAX(synchronizationDuration.seconds) < (5 * 60 * 60) AS ruleSatisfied"
The synchronization time for creating a purchase order item should never exceed 45 minutes.,"Activity: [""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Create Purchase Order Item""}) WITH e, MAX(prec.timestamp) AS latestPredecessor, MIN(prec.timestamp) AS earliestPredecessor WITH duration.between(latestPredecessor, earliestPredecessor) AS synchronizationDuration RETURN MAX(synchronizationDuration.seconds) < (45 * 60) AS ruleSatisfied"
The synchronization time for clearing an invoice should not take more than 4 hours.,"Activity: [""Clear Invoice""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Clear Invoice""}) WITH e, MAX(prec.timestamp) AS latestPredecessor, MIN(prec.timestamp) AS earliestPredecessor WITH duration.between(latestPredecessor, earliestPredecessor) AS synchronizationDuration RETURN MAX(synchronizationDuration.seconds) < (4 * 60 * 60) AS ruleSatisfied"
The synchronization time for changing the quantity of an item should not exceed 20 minutes.,"Activity: [""Change Quantity""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Change Quantity""}) WITH e, MAX(prec.timestamp) AS latestPredecessor, MIN(prec.timestamp) AS earliestPredecessor WITH duration.between(latestPredecessor, earliestPredecessor) AS synchronizationDuration RETURN MAX(synchronizationDuration.seconds) < (20 * 60) AS ruleSatisfied"
The average flow time for creating a purchase requisition item must be less than 15 minutes.,"Activity: [""Create Purchase Requisition Item""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Create Purchase Requisition Item""}) WITH e, MIN(prec.timestamp) AS earliestPredecessor WITH e, duration.between(earliestPredecessor, e.timestamp) AS flowDuration RETURN AVG(flowDuration.seconds) < (15 * 60) AS ruleSatisfied"
The maximum flow time for clearing an invoice must not exceed 2 hours.,"Activity: [""Clear Invoice""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Clear Invoice""}) WITH e, MIN(prec.timestamp) AS earliestPredecessor WITH e, duration.between(earliestPredecessor, e.timestamp) AS flowDuration RETURN MAX(flowDuration.seconds) <= (2 * 60 * 60) AS ruleSatisfied"
The minimum flow time for recording invoice receipt should be at least 5 minutes.,"Activity: [""Record Invoice Receipt""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Record Invoice Receipt""}) WITH e, MIN(prec.timestamp) AS earliestPredecessor WITH e, duration.between(earliestPredecessor, e.timestamp) AS flowDuration RETURN MIN(flowDuration.seconds) >= (5 * 60) AS ruleSatisfied"
The flow time for deleting a purchase order item must be greater than 10 minutes.,"Activity: [""Delete Purchase Order Item""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Delete Purchase Order Item""}) WITH e, MIN(prec.timestamp) AS earliestPredecessor WITH e, duration.between(earliestPredecessor, e.timestamp) AS flowDuration RETURN AVG(flowDuration.seconds) > (10 * 60) AS ruleSatisfied"
The average flow time for receiving an order confirmation should not exceed 1 day.,"Activity: [""Receive Order Confirmation""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Receive Order Confirmation""}) WITH e, MIN(prec.timestamp) AS earliestPredecessor WITH e, duration.between(earliestPredecessor, e.timestamp) AS flowDuration RETURN AVG(flowDuration.seconds) <= (24 * 60 * 60) AS ruleSatisfied"
The minimum flow time for recording a service entry sheet must be smaller than 30 minutes.,"Activity: [""Record Service Entry Sheet""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Record Service Entry Sheet""}) WITH e, MIN(prec.timestamp) AS earliestPredecessor WITH e, duration.between(earliestPredecessor, e.timestamp) AS flowDuration RETURN MIN(flowDuration.seconds) < (30 * 60) AS ruleSatisfied"
The flow time for creating a purchase order item must always be greater than 2 hours.,"Activity: [""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Create Purchase Order Item""}) WITH e, MIN(prec.timestamp) AS earliestPredecessor WITH e, duration.between(earliestPredecessor, e.timestamp) AS flowDuration RETURN MIN(flowDuration.seconds) > (2 * 60 * 60) AS ruleSatisfied"
"The flow time for ""Create Purchase Requisition Item"" must be less than 10 minutes.","Activity: [""Create Purchase Requisition Item""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Create Purchase Requisition Item""}) WITH e, MIN(prec.timestamp) AS earliestPredecessor WITH e, duration.between(earliestPredecessor, e.timestamp) AS flowDuration RETURN AVG(flowDuration.seconds) < (10 * 60) AS ruleSatisfied"
"The maximum flow time for ""Clear Invoice"" should not exceed 1 hour.","Activity: [""Clear Invoice""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Clear Invoice""}) WITH e, MIN(prec.timestamp) AS earliestPredecessor WITH e, duration.between(earliestPredecessor, e.timestamp) AS flowDuration RETURN MAX(flowDuration.seconds) <= (1 * 60 * 60) AS ruleSatisfied"
"The minimum flow time for ""Record Goods Receipt"" must be greater than 15 minutes.","Activity: [""Record Goods Receipt""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Record Goods Receipt""}) WITH e, MIN(prec.timestamp) AS earliestPredecessor WITH e, duration.between(earliestPredecessor, e.timestamp) AS flowDuration RETURN MIN(flowDuration.seconds) > (15 * 60) AS ruleSatisfied"
"The flow time for ""Record Invoice Receipt"" must be less than 30 minutes on average.","Activity: [""Record Invoice Receipt""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Record Invoice Receipt""}) WITH e, MIN(prec.timestamp) AS earliestPredecessor WITH e, duration.between(earliestPredecessor, e.timestamp) AS flowDuration RETURN AVG(flowDuration.seconds) < (30 * 60) AS ruleSatisfied"
"The maximum pooling time for ""Create Purchase Order Item"" events concerning purchase orders should not exceed 3 days.","Activity: [""Create Purchase Order Item""], EntityType: [""PO""], Actor: []","MATCH (ent:Entity {EntityType: ""PO""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(ent) WITH e, MIN(prec.timestamp) AS earliestPredecessor, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(earliestPredecessor, latestPredecessor) AS poolDuration RETURN MAX(poolDuration.seconds) < (3 * 24 * 60 * 60) AS ruleSatisfied"
"On average, the pooling time for ""Vendor creates invoice"" with ""POI"" entities should be longer than 5 hours.","Activity: [""Vendor creates invoice""], EntityType: [""POI""], Actor: []","MATCH (ent:Entity {EntityType: ""POI""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Vendor creates invoice""})-[:CORR]->(ent) WITH e, MIN(prec.timestamp) AS earliestPredecessor, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(earliestPredecessor, latestPredecessor) AS poolDuration RETURN AVG(poolDuration.seconds) > (5 * 60 * 60) AS ruleSatisfied"
"The pooling time for ""Record Goods Receipt"" activities related to procurement items should not exceed 24 hours on average.","Activity: [""Record Goods Receipt""], EntityType: [""POI""], Actor: []","MATCH (ent:Entity {EntityType: ""POI""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Record Goods Receipt""})-[:CORR]->(ent) WITH e, MIN(prec.timestamp) AS earliestPredecessor, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(earliestPredecessor, latestPredecessor) AS poolDuration RETURN AVG(poolDuration.seconds) < (24 * 60 * 60) AS ruleSatisfied"
"The pooling time for ""Remove Payment Block"" concerning POIs should not be longer than 12 hours.","Activity: [""Remove Payment Block""], EntityType: [""POI""], Actor: []","MATCH (ent:Entity {EntityType: ""POI""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Remove Payment Block""})-[:CORR]->(ent) WITH e, MIN(prec.timestamp) AS earliestPredecessor, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(earliestPredecessor, latestPredecessor) AS poolDuration RETURN MAX(poolDuration.seconds) < (12 * 60 * 60) AS ruleSatisfied"
"The maximum pooling time for ""Receive Order Confirmation"" related to POIs should not exceed 36 hours.","Activity: [""Receive Order Confirmation""], EntityType: [""POI""], Actor: []","MATCH (ent:Entity {EntityType: ""POI""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Receive Order Confirmation""})-[:CORR]->(ent) WITH e, MIN(prec.timestamp) AS earliestPredecessor, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(earliestPredecessor, latestPredecessor) AS poolDuration RETURN MAX(poolDuration.seconds) < (36 * 60 * 60) AS ruleSatisfied"
"The pooling time of ""Record Service Entry Sheet"" events regarding purchase order items should average more than 8 hours.","Activity: [""Record Service Entry Sheet""], EntityType: [""POI""], Actor: []","MATCH (ent:Entity {EntityType: ""POI""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Record Service Entry Sheet""})-[:CORR]->(ent) WITH e, MIN(prec.timestamp) AS earliestPredecessor, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(earliestPredecessor, latestPredecessor) AS poolDuration RETURN AVG(poolDuration.seconds) > (8 * 60 * 60) AS ruleSatisfied"
"The average pooling time of ""Delete Purchase Order Item"" for procurement orders should not exceed 7 days.","Activity: [""Delete Purchase Order Item""], EntityType: [""PO""], Actor: []","MATCH (ent:Entity {EntityType: ""PO""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Delete Purchase Order Item""})-[:CORR]->(ent) WITH e, MIN(prec.timestamp) AS earliestPredecessor, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(earliestPredecessor, latestPredecessor) AS poolDuration RETURN AVG(poolDuration.seconds) < (7 * 24 * 60 * 60) AS ruleSatisfied"
"The maximum readiness time for ""Create Purchase Order Item"" in relation to Purchase Orders must not exceed 12 hours.","Activity: [""Create Purchase Order Item""], EntityType: [""PO""], Actor: []","MATCH (ent:Entity {EntityType: ""PO""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestPOPredecessor, MAX(prec2.timestamp) AS latestPredecessor WITH e, duration.between(latestPOPredecessor, latestPredecessor) AS readinessDuration RETURN MAX(readinessDuration.seconds) < (12 * 60 * 60) AS ruleSatisfied"
The minimum readiness time for clearing an invoice related to a purchase order must be at least 6 hours.,"Activity: [""Clear Invoice""], EntityType: [""PO""], Actor: []","MATCH (ent:Entity {EntityType: ""PO""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Clear Invoice""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestPOPredecessor, MAX(prec2.timestamp) AS latestPredecessor WITH e, duration.between(latestPOPredecessor, latestPredecessor) AS readinessDuration RETURN MIN(readinessDuration.seconds) > (6 * 60 * 60) AS ruleSatisfied"
The average readiness time for recording an invoice receipt regarding a purchase order item should be more than 2 hours.,"Activity: [""Record Invoice Receipt""], EntityType: [""POI""], Actor: []","MATCH (ent:Entity {EntityType: ""POI""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Record Invoice Receipt""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestPOIPredecessor, MAX(prec2.timestamp) AS latestPredecessor WITH e, duration.between(latestPOIPredecessor, latestPredecessor) AS readinessDuration RETURN AVG(readinessDuration.seconds) > (2 * 60 * 60) AS ruleSatisfied"
The maximum readiness time for invoice creation by a vendor related to a purchase order items must be no longer than 10 hours.,"Activity: [""Vendor creates invoice""], EntityType: [""POI""], Actor: []","MATCH (ent:Entity {EntityType: ""POI""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Vendor creates invoice""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestPOIPredecessor, MAX(prec2.timestamp) AS latestPredecessor WITH e, duration.between(latestPOIPredecessor, latestPredecessor) AS readinessDuration RETURN MAX(readinessDuration.seconds) < (10 * 60 * 60) AS ruleSatisfied"
"The readiness time for ""Create Purchase Order Item"" concerning purchase orders must not exceed 4 hours.","Activity: [""Create Purchase Order Item""], EntityType: [""PO""], Actor: []","MATCH (ent:Entity {EntityType: ""PO""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestPOPredecessor, MAX(prec2.timestamp) AS latestPredecessor WITH e, duration.between(latestPOPredecessor, latestPredecessor) AS readinessDuration RETURN MAX(readinessDuration.seconds) < (4 * 60 * 60) AS ruleSatisfied"
The average readiness time for receiving an order confirmation related to purchase orders should be more than 2 hours.,"Activity: [""Receive Order Confirmation""], EntityType: [""PO""], Actor: []","MATCH (ent:Entity {EntityType: ""PO""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Receive Order Confirmation""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestPOPredecessor, MAX(prec2.timestamp) AS latestPredecessor WITH e, duration.between(latestPOPredecessor, latestPredecessor) AS readinessDuration RETURN AVG(readinessDuration.seconds) > (2 * 60 * 60) AS ruleSatisfied"
The minimum readiness time of clearing an invoice w.r.t. to purchase order items must be at least 12 hours.,"Activity: [""Clear Invoice""], EntityType: [""POI""], Actor: []","MATCH (ent:Entity {EntityType: ""POI""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Clear Invoice""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestPOIPredecessor, MAX(prec2.timestamp) AS latestPredecessor WITH e, duration.between(latestPOIPredecessor, latestPredecessor) AS readinessDuration RETURN MIN(readinessDuration.seconds) > (12 * 60 * 60) AS ruleSatisfied"
The lagging time for receiving an order confirmation w.r.t  purchase orders must not exceed 2 days.,"Activity: [""Receive Order Confirmation""], EntityType: [""PO""], Actor: []","MATCH (ent:Entity {EntityType: ""PO""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Receive Order Confirmation""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestPOPredecessor, MIN(prec2.timestamp) AS earliestPredecessor WITH e, duration.between(latestPOPredecessor, earliestPredecessor) AS laggingDuration RETURN MAX(laggingDuration.seconds) < (2 * 24 * 60 * 60) AS ruleSatisfied"
The lagging time for clearing invoices related to purchase order items should exceed 6 hours on average.,"Activity: [""Clear Invoice""], EntityType: [""POI""], Actor: []","MATCH (ent:Entity {EntityType: ""POI""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Clear Invoice""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestPOIPredecessor, MIN(prec2.timestamp) AS earliestPredecessor WITH e, duration.between(latestPOIPredecessor, earliestPredecessor) AS laggingDuration RETURN AVG(laggingDuration.seconds) > (6 * 60 * 60) AS ruleSatisfied"
The average lagging time for modifying an order quantity concerning purchase order items should be less than 4 hours.,"Activity: [""Change Quantity""], EntityType: [""POI""], Actor: []","MATCH (ent:Entity {EntityType: ""POI""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Change Quantity""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestPOIPredecessor, MIN(prec2.timestamp) AS earliestPredecessor WITH e, duration.between(latestPOIPredecessor, earliestPredecessor) AS laggingDuration RETURN AVG(laggingDuration.seconds) < (4 * 60 * 60) AS ruleSatisfied"
The lagging time for recording an invoice receipt concerningn object type PO should be at least 1 day on average.,"Activity: [""Record Invoice Receipt""], EntityType: [""PO""], Actor: []","MATCH (ent:Entity {EntityType: ""PO""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Record Invoice Receipt""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestPOPredecessor, MIN(prec2.timestamp) AS earliestPredecessor WITH e, duration.between(latestPOPredecessor, earliestPredecessor) AS laggingDuration RETURN AVG(laggingDuration.seconds) > (1 * 24 * 60 * 60) AS ruleSatisfied"
The lagging time for handling a service entry sheet concerning purchase orders must be no more than 3 hours on average.,"Activity: [""Record Service Entry Sheet""], EntityType: [""PO""], Actor: []","MATCH (ent:Entity {EntityType: ""PO""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Record Service Entry Sheet""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestPOPredecessor, MIN(prec2.timestamp) AS earliestPredecessor WITH e, duration.between(latestPOPredecessor, earliestPredecessor) AS laggingDuration RETURN AVG(laggingDuration.seconds) < (3 * 60 * 60) AS ruleSatisfied"
"The lagging time for vendor invoice creation, in relation to purchase order items, should not exceed 10 hours.","Activity: [""Vendor creates invoice""], EntityType: [""POI""], Actor: []","MATCH (ent:Entity {EntityType: ""POI""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Vendor creates invoice""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestPOIPredecessor, MIN(prec2.timestamp) AS earliestPredecessor WITH e, duration.between(latestPOIPredecessor, earliestPredecessor) AS laggingDuration RETURN MAX(laggingDuration.seconds) < (10 * 60 * 60) AS ruleSatisfied"
The lagging time for unblocking a payment concerning purchase orders should be at least 2 days on average.,"Activity: [""Remove Payment Block""], EntityType: [""PO""], Actor: []","MATCH (ent:Entity {EntityType: ""PO""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Remove Payment Block""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestPOPredecessor, MIN(prec2.timestamp) AS earliestPredecessor WITH e, duration.between(latestPOPredecessor, earliestPredecessor) AS laggingDuration RETURN AVG(laggingDuration.seconds) > (2 * 24 * 60 * 60) AS ruleSatisfied"
"For each Purchase Order and its associated Purchase Order Items, the POI should be linked to the ""Create Purchase Order Item"" event of the PO.","Activity: [""Create Purchase Order Item""], EntityType: [""POI"", ""PO""]"," MATCH (po:Entity {EntityType: ""PO""})<-[:CORR]-(createPOEvent:Event {Activity: ""Create Purchase Order Item""}) MATCH (po)-[:REL]-(poi:Entity {EntityType: ""POI""}) WHERE NOT EXISTS { MATCH (poi)<-[:CORR]-(createPOEvent) } RETURN CASE WHEN COUNT(po)>0 THEN false ELSE true END AS ruleSatisfied "
Any Purchase Order and its Purchase Order Items should be connected to the event of the creation of a Purchase Order Item of the PO.,"Activity: [""Create Purchase Order Item""], EntityType: [""POI"", ""PO""]"," MATCH (createEvent:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(po:Entity {EntityType: ""PO""}) MATCH (po)-[:REL]-(poi:Entity {EntityType: ""POI""}) WHERE NOT EXISTS { MATCH (poi)<-[:CORR]-(createEvent) } RETURN CASE WHEN COUNT(po)>0 THEN false ELSE true END AS ruleSatisfied "
"For every Purchase Order and its related Purchase Order Items, the Purchase Order Items should be linked to the event when the vendor creates the invoice for the PO.","Activity: [""Vendor creates invoice""], EntityType: [""POI"", ""PO""]","MATCH (invoiceEvent:Event {Activity: ""Vendor creates invoice""})-[:CORR]->(po:Entity {EntityType: ""PO""}) MATCH (po)-[:REL]-(poi:Entity {EntityType: ""POI""}) WHERE NOT EXISTS { MATCH (poi)<-[:CORR]-(invoiceEvent) } RETURN CASE WHEN COUNT(po)>0 THEN false ELSE true END AS ruleSatisfied "
A Purchase Order and its related Purchase Order Items must be linked to the event of invoice receipt recording of the PO.,"Activity: [""Record Invoice Receipt""], EntityType: [""POI"", ""PO""]"," MATCH (invoiceEvent:Event {Activity: ""Record Invoice Receipt""})-[:CORR]->(po:Entity {EntityType: ""PO""}) MATCH (po)-[:REL]-(poi:Entity {EntityType: ""POI""}) WHERE NOT EXISTS { MATCH (poi)<-[:CORR]-(invoiceEvent) } RETURN CASE WHEN COUNT(po)>0 THEN false ELSE true END AS ruleSatisfied "
Any PO and all its Purchase Order Items must be associated with the event when the Purchase Order Item is deleted for the PO.,"Activity: [""Delete Purchase Order Item""], EntityType: [""POI"", ""PO""]","MATCH (deleteEvent:Event {Activity: ""Delete Purchase Order Item""})-[:CORR]->(po:Entity {EntityType: ""PO""}) MATCH (po)-[:REL]-(poi:Entity {EntityType: ""POI""}) WHERE NOT EXISTS { MATCH (poi)<-[:CORR]-(deleteEvent) } WITH COUNT(poi) AS poisWithoutDelete RETURN CASE WHEN poisWithoutDelete = 0 THEN true ELSE false END AS ruleSatisfied "
"For every Purchase Order and its related Purchase Order Items, the Purchase Order Items should be connected to the event of clearing the invoice for the PO.","Activity: [""Clear Invoice""], EntityType: [""POI"", ""PO""]"," MATCH (invoiceEvent:Event {Activity: ""Clear Invoice""})-[:CORR]->(po:Entity {EntityType: ""PO""}) MATCH (po)-[:REL]-(poi:Entity {EntityType: ""POI""}) WHERE NOT EXISTS { MATCH (poi)<-[:CORR]-(invoiceEvent) } RETURN CASE WHEN COUNT(po)>0 THEN false ELSE true END AS ruleSatisfied "
Any Purchase Order Item and its associated Purchase Order should be linked to the event when for the PO the service entry sheet is recorded.,"Activity: [""Record Service Entry Sheet""], EntityType: [""POI"", ""PO""]"," MATCH (entryEvent:Event {Activity: ""Record Service Entry Sheet""})-[:CORR]->(po:Entity {EntityType: ""PO""}) MATCH (po)-[:REL]-(poi:Entity {EntityType: ""POI""}) WHERE NOT EXISTS { MATCH (poi)<-[:CORR]-(entryEvent) } RETURN CASE WHEN COUNT(po)>0 THEN false ELSE true END AS ruleSatisfied "
"For each Purchase Order and its contained Purchase Order Items, the POI must be connected to the event when the payment block is removed for the PO.","Activity: [""Remove Payment Block""], EntityType: [""POI"", ""PO""]"," MATCH (blockEvent:Event {Activity: ""Remove Payment Block""})-[:CORR]->(po:Entity {EntityType: ""PO""}) MATCH (po)-[:REL]-(poi:Entity {EntityType: ""POI""}) WHERE NOT EXISTS { MATCH (poi)<-[:CORR]-(blockEvent) } RETURN CASE WHEN COUNT(po)>0 THEN false ELSE true END AS ruleSatisfied "
"If a Purchase Requisition Item is created for a PO, and then another requisition itme is created for the same PO, the corresponding Goods Receipts should follow the same order.","Activity: [""Create Purchase Requisition Item"", ""Record Goods Receipt""], EntityType: [""POI"", ""PO""]","MATCH (po:Entity {EntityType: ""PO""})<-[:CORR]-(createPOI1:Event {Activity: ""Create Purchase Requisition Item""})-[:CORR]->(poi1:Entity {EntityType: ""POI""}) MATCH (po)<-[:CORR]-(createPOI2:Event {Activity: ""Create Purchase Requisition Item""})-[:CORR]->(poi2:Entity {EntityType: ""POI""}) WHERE createPOI1.timestamp < createPOI2.timestamp OPTIONAL MATCH (poi1)<-[:CORR]-(receipt1:Event {Activity: ""Record Goods Receipt""}) OPTIONAL MATCH (poi2)<-[:CORR]-(receipt2:Event {Activity: ""Record Goods Receipt""}) WITH po, poi1, poi2, receipt1, receipt2 WHERE receipt1 IS NOT NULL AND receipt2 IS NOT NULL AND receipt1.timestamp > receipt2.timestamp WITH COUNT(*) AS violations RETURN CASE WHEN violations = 0 THEN true ELSE false END AS ruleSatisfied"
"If two POIs are created for the same PO, the corresponding Invoice Receipts should be processed in the same order.","Activity: [""Create Purchase Order Item"", ""Record Invoice Receipt""], EntityType: [""POI"", ""PO""]","MATCH (po:Entity {EntityType: ""PO""})<-[:CORR]-(createPOI1:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(poi1:Entity {EntityType: ""POI""}) MATCH (po)<-[:CORR]-(createPOI2:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(poi2:Entity {EntityType: ""POI""}) WHERE createPOI1.timestamp < createPOI2.timestamp OPTIONAL MATCH (poi1)<-[:CORR]-(invoice1:Event {Activity: ""Record Invoice Receipt""}) OPTIONAL MATCH (poi2)<-[:CORR]-(invoice2:Event {Activity: ""Record Invoice Receipt""}) WITH po, poi1, poi2, invoice1, invoice2 WHERE invoice1 IS NOT NULL AND invoice2 IS NOT NULL AND invoice1.timestamp > invoice2.timestamp WITH COUNT(*) AS violations RETURN CASE WHEN violations = 0 THEN true ELSE false END AS ruleSatisfied"
"When two POIs are deleted from a PO, the corresponding Invoice clearing actions should be done in the same order as the deletion.","Activity: [""Delete Purchase Order Item"", ""Clear Invoice""], EntityType: [""POI"", ""PO""]","MATCH (po:Entity {EntityType: ""PO""})<-[:CORR]-(deletePOI1:Event {Activity: ""Delete Purchase Order Item""})-[:CORR]->(poi1:Entity {EntityType: ""POI""}) MATCH (po)<-[:CORR]-(deletePOI2:Event {Activity: ""Delete Purchase Order Item""})-[:CORR]->(poi2:Entity {EntityType: ""POI""}) WHERE deletePOI1.timestamp < deletePOI2.timestamp OPTIONAL MATCH (poi1)<-[:CORR]-(clearInvoice1:Event {Activity: ""Clear Invoice""}) OPTIONAL MATCH (poi2)<-[:CORR]-(clearInvoice2:Event {Activity: ""Clear Invoice""}) WITH po, poi1, poi2, clearInvoice1, clearInvoice2 WHERE clearInvoice1 IS NOT NULL AND clearInvoice2 IS NOT NULL AND clearInvoice1.timestamp > clearInvoice2.timestamp WITH COUNT(*) AS violations RETURN CASE WHEN violations = 0 THEN true ELSE false END AS ruleSatisfied"
"If two Purchase Order Items (POIs) are created for a Purchase Order (PO), the Service Entry Sheet should be created for them in the same order.","Activity: [""Create Purchase Order Item"", ""Record Service Entry Sheet""], EntityType: [""POI"", ""PO""]","MATCH (po:Entity {EntityType: ""PO""})<-[:CORR]-(createPOI1:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(poi1:Entity {EntityType: ""POI""}) MATCH (po)<-[:CORR]-(createPOI2:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(poi2:Entity {EntityType: ""POI""}) WHERE createPOI1.timestamp < createPOI2.timestamp OPTIONAL MATCH (poi1)<-[:CORR]-(serviceEntry1:Event {Activity: ""Record Service Entry Sheet""}) OPTIONAL MATCH (poi2)<-[:CORR]-(serviceEntry2:Event {Activity: ""Record Service Entry Sheet""}) WITH po, poi1, poi2, serviceEntry1, serviceEntry2 WHERE serviceEntry1 IS NOT NULL AND serviceEntry2 IS NOT NULL AND serviceEntry1.timestamp > serviceEntry2.timestamp WITH COUNT(*) AS violations RETURN CASE WHEN violations = 0 THEN true ELSE false END AS ruleSatisfied"
"If two Purchase Order Items are created for a PO, the corresponding Vendor invoice creations should happen in the same sequence as the POI creation.","Activity: [""Create Purchase Order Item"", ""Vendor creates invoice""], EntityType: [""POI"", ""PO""]","MATCH (po:Entity {EntityType: ""PO""})<-[:CORR]-(createPOI1:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(poi1:Entity {EntityType: ""POI""}) MATCH (po)<-[:CORR]-(createPOI2:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(poi2:Entity {EntityType: ""POI""}) WHERE createPOI1.timestamp < createPOI2.timestamp OPTIONAL MATCH (poi1)<-[:CORR]-(invoice1:Event {Activity: ""Vendor creates invoice""}) OPTIONAL MATCH (poi2)<-[:CORR]-(invoice2:Event {Activity: ""Vendor creates invoice""}) WITH po, poi1, poi2, invoice1, invoice2 WHERE invoice1 IS NOT NULL AND invoice2 IS NOT NULL AND invoice1.timestamp > invoice2.timestamp WITH COUNT(*) AS violations RETURN CASE WHEN violations = 0 THEN true ELSE false END AS ruleSatisfied"
"If two Purchase Order Items (POIs) are created for a PO, the Invoice Receipt for the items should follow the order of creation.","Activity: [""Create Purchase Order Item"", ""Record Invoice Receipt""], EntityType: [""POI"", ""PO""]","MATCH (po:Entity {EntityType: ""PO""})<-[:CORR]-(createPOI1:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(poi1:Entity {EntityType: ""POI""}) MATCH (po)<-[:CORR]-(createPOI2:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(poi2:Entity {EntityType: ""POI""}) WHERE createPOI1.timestamp < createPOI2.timestamp OPTIONAL MATCH (poi1)<-[:CORR]-(invoice1:Event {Activity: ""Record Invoice Receipt""}) OPTIONAL MATCH (poi2)<-[:CORR]-(invoice2:Event {Activity: ""Record Invoice Receipt""}) WITH po, poi1, poi2, invoice1, invoice2 WHERE invoice1 IS NOT NULL AND invoice2 IS NOT NULL AND invoice1.timestamp > invoice2.timestamp WITH COUNT(*) AS violations RETURN CASE WHEN violations = 0 THEN true ELSE false END AS ruleSatisfied"
"If two Purchase Order Items (POIs) are created for the same PO, then the corresponding Goods Receipt should happen in the same sequence.","Activity: [""Create Purchase Order Item"", ""Record Goods Receipt""], EntityType: [""POI"", ""PO""]","MATCH (po:Entity {EntityType: ""PO""})<-[:CORR]-(createPOI1:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(poi1:Entity {EntityType: ""POI""}) MATCH (po)<-[:CORR]-(createPOI2:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(poi2:Entity {EntityType: ""POI""}) WHERE createPOI1.timestamp < createPOI2.timestamp OPTIONAL MATCH (poi1)<-[:CORR]-(receipt1:Event {Activity: ""Record Goods Receipt""}) OPTIONAL MATCH (poi2)<-[:CORR]-(receipt2:Event {Activity: ""Record Goods Receipt""}) WITH po, poi1, poi2, receipt1, receipt2 WHERE receipt1 IS NOT NULL AND receipt2 IS NOT NULL AND receipt1.timestamp > receipt2.timestamp WITH COUNT(*) AS violations RETURN CASE WHEN violations = 0 THEN true ELSE false END AS ruleSatisfied"
"If a ""Purchase Order Item"" is created but not followed by a ""Vendor creates invoice"" event within 7 days, a ""Record Invoice Receipt"" event must be triggered.","Activity: [""Create Purchase Order Item"", ""Vendor creates invoice"", ""Record Invoice Receipt""], EntityType: [""POI""]","MATCH (createEvent:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(poi:Entity {EntityType: ""POI""}) OPTIONAL MATCH (invoiceEvent:Event {Activity: ""Vendor creates invoice""})-[:CORR]->(poi) WHERE invoiceEvent.timestamp <= createEvent.timestamp + duration({days: 7}) WITH poi, createEvent, invoiceEvent WHERE invoiceEvent IS NULL OPTIONAL MATCH (receiptEvent:Event {Activity: ""Record Invoice Receipt""})-[:CORR]->(poi) WHERE receiptEvent.timestamp > createEvent.timestamp + duration({days: 7}) WITH poi, COUNT(receiptEvent) AS receipts RETURN CASE WHEN any(x in COLLECT(receipts) WHERE x=0) THEN false ELSE true END AS ruleSatisfied"
"If a ""Purchase Order"" has no ""Record Goods Receipt"" event within 30 days of being created, a ""Clear Invoice"" event should be issued.","Activity: [""Create Purchase Order Item"", ""Record Goods Receipt"", ""Clear Invoice""], EntityType: [""PO""]","MATCH (createEvent:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(po:Entity {EntityType: ""PO""}) OPTIONAL MATCH (goodsReceiptEvent:Event {Activity: ""Record Goods Receipt""})-[:CORR]->(po) WHERE goodsReceiptEvent.timestamp <= createEvent.timestamp + duration({days: 30}) WITH po, createEvent, goodsReceiptEvent WHERE goodsReceiptEvent IS NULL OPTIONAL MATCH (clearInvoiceEvent:Event {Activity: ""Clear Invoice""})-[:CORR]->(po) WHERE clearInvoiceEvent.timestamp > createEvent.timestamp + duration({days: 30}) WITH po, COUNT(clearInvoiceEvent) AS clearInvoices RETURN CASE WHEN any(x in COLLECT(clearInvoices) WHERE x=0) THEN false ELSE true END AS ruleSatisfied"
"If for a POI, a ""Vendor creates invoice"" event is not recorded within 15 days after a ""Create Purchase Requisition Item"" event, a ""Record Service Entry Sheet"" event must be created.","Activity: [""Create Purchase Requisition Item"", ""Vendor creates invoice"", ""Record Service Entry Sheet""], EntityType: [""POI""]","MATCH (requisitionEvent:Event {Activity: ""Create Purchase Requisition Item""})-[:CORR]->(poi:Entity {EntityType: ""POI""}) OPTIONAL MATCH (invoiceEvent:Event {Activity: ""Vendor creates invoice""})-[:CORR]->(poi) WHERE invoiceEvent.timestamp <= requisitionEvent.timestamp + duration({days: 15}) WITH poi, requisitionEvent, invoiceEvent WHERE invoiceEvent IS NULL OPTIONAL MATCH (serviceEntryEvent:Event {Activity: ""Record Service Entry Sheet""})-[:CORR]->(poi) WHERE serviceEntryEvent.timestamp > requisitionEvent.timestamp + duration({days: 15}) WITH poi, COUNT(serviceEntryEvent) AS serviceEntries RETURN CASE WHEN any(x in COLLECT(serviceEntries) WHERE x=0) THEN false ELSE true END AS ruleSatisfied"
"If for a PO, the ""Record Invoice Receipt"" event has not occurred within 7 days of ""Record Goods Receipt"", a ""Remove Payment Block"" event must be generated.","Activity: [""Record Goods Receipt"", ""Record Invoice Receipt"", ""Remove Payment Block""], EntityType: [""PO""]","MATCH (goodsReceiptEvent:Event {Activity: ""Record Goods Receipt""})-[:CORR]->(po:Entity {EntityType: ""PO""}) OPTIONAL MATCH (invoiceReceiptEvent:Event {Activity: ""Record Invoice Receipt""})-[:CORR]->(po) WHERE invoiceReceiptEvent.timestamp <= goodsReceiptEvent.timestamp + duration({days: 7}) WITH po, goodsReceiptEvent, invoiceReceiptEvent WHERE invoiceReceiptEvent IS NULL OPTIONAL MATCH (removeBlockEvent:Event {Activity: ""Remove Payment Block""})-[:CORR]->(po) WHERE removeBlockEvent.timestamp > goodsReceiptEvent.timestamp + duration({days: 7}) WITH po, removeBlockEvent, COUNT(removeBlockEvent) AS removeBlocks RETURN CASE WHEN any(x in COLLECT(removeBlocks) WHERE x=0) THEN false ELSE true END AS ruleSatisfied"
"If a ""Purchase Order Item"" is deleted but no ""Record Invoice Receipt"" occurs within 14 days, a ""Clear Invoice"" must be issued.","Activity: [""Delete Purchase Order Item"", ""Record Invoice Receipt"", ""Clear Invoice""], EntityType: [""POI""]","MATCH (deleteEvent:Event {Activity: ""Delete Purchase Order Item""})-[:CORR]->(poi:Entity {EntityType: ""POI""}) OPTIONAL MATCH (invoiceReceiptEvent:Event {Activity: ""Record Invoice Receipt""})-[:CORR]->(poi) WHERE invoiceReceiptEvent.timestamp <= deleteEvent.timestamp + duration({days: 14}) WITH poi, deleteEvent, invoiceReceiptEvent WHERE invoiceReceiptEvent IS NULL OPTIONAL MATCH (clearInvoiceEvent:Event {Activity: ""Clear Invoice""})-[:CORR]->(poi) WHERE clearInvoiceEvent.timestamp > deleteEvent.timestamp + duration({days: 14}) WITH poi, clearInvoiceEvent, COUNT(clearInvoiceEvent) AS clearInvoices RETURN CASE WHEN any(x in COLLECT(clearInvoices) WHERE x=0) THEN false ELSE true END AS ruleSatisfied"
"If a ""Purchase Order"" has not received an ""Order Confirmation"" within 48 hours after creation, a ""Remove Payment Block"" event must occur.","Activity: [""Create Purchase Order Item"", ""Receive Order Confirmation"", ""Remove Payment Block""], EntityType: [""PO""]","MATCH (createEvent:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(po:Entity {EntityType: ""PO""}) OPTIONAL MATCH (confirmationEvent:Event {Activity: ""Receive Order Confirmation""})-[:CORR]->(po) WHERE confirmationEvent.timestamp <= createEvent.timestamp + duration({hours: 48}) WITH po, createEvent, confirmationEvent WHERE confirmationEvent IS NULL OPTIONAL MATCH (removeBlockEvent:Event {Activity: ""Remove Payment Block""})-[:CORR]->(po) WHERE removeBlockEvent.timestamp > createEvent.timestamp + duration({hours: 48}) WITH po, removeBlockEvent, COUNT(removeBlockEvent) AS removeBlocks RETURN CASE WHEN any(x in COLLECT(removeBlocks) WHERE x=0) THEN false ELSE true END AS ruleSatisfied"
"If for a PO, an ""Invoice Receipt"" is not recorded within 14 days of a ""Create Purchase Order Item"" event, a ""Clear Invoice"" event should occur.","Activity: [""Create Purchase Order Item"", ""Record Invoice Receipt"", ""Clear Invoice""], EntityType: [""PO""]","MATCH (createEvent:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(po:Entity {EntityType: ""PO""}) OPTIONAL MATCH (invoiceReceiptEvent:Event {Activity: ""Record Invoice Receipt""})-[:CORR]->(po) WHERE invoiceReceiptEvent.timestamp <= createEvent.timestamp + duration({days: 14}) WITH po, createEvent, invoiceReceiptEvent WHERE invoiceReceiptEvent IS NULL OPTIONAL MATCH (clearInvoiceEvent:Event {Activity: ""Clear Invoice""})-[:CORR]->(po) WHERE clearInvoiceEvent.timestamp > createEvent.timestamp + duration({days: 14}) WITH po, clearInvoiceEvent, COUNT(clearInvoiceEvent) AS clearInvoices RETURN CASE WHEN any(x in COLLECT(clearInvoices) WHERE x=0) THEN false ELSE true END AS ruleSatisfied"
"If for a POI,  the ""Change Quantity"" event does not happen within 5 days after a ""Create Purchase Order Item"" event, a ""Record Invoice Receipt"" must be triggered.","Activity: [""Create Purchase Order Item"", ""Change Quantity"", ""Record Invoice Receipt""], EntityType: [""POI""]","MATCH (createEvent:Event {Activity: ""Create Purchase Order Item""})-[:CORR]->(poi:Entity {EntityType: ""POI""}) OPTIONAL MATCH (changeQuantityEvent:Event {Activity: ""Change Quantity""})-[:CORR]->(poi) WHERE changeQuantityEvent.timestamp <= createEvent.timestamp + duration({days: 5}) WITH poi, createEvent, changeQuantityEvent WHERE changeQuantityEvent IS NULL OPTIONAL MATCH (invoiceReceiptEvent:Event {Activity: ""Record Invoice Receipt""})-[:CORR]->(poi) WHERE invoiceReceiptEvent.timestamp > createEvent.timestamp + duration({days: 5}) WITH poi, invoiceReceiptEvent,COUNT(invoiceReceiptEvent) AS invoiceReceipts RETURN CASE WHEN any(x in COLLECT(invoiceReceipts) WHERE x=0) THEN false ELSE true END AS ruleSatisfied"
"For a given PO, a new purchase order item (POI) cannot be created if a goods receipt for a previously created POI has not been recorded within 10 days.","Activity: [""Create Purchase Order Item"", ""Record Goods Receipt""], EntityType: [""PO"", ""POI""]","MATCH (poi:Entity {EntityType: ""POI""})-[:REL]-(po:Entity {EntityType: ""PO""})<-[:CORR]-(requisitionEvent:Event {Activity: ""Create Purchase Order Item""}) WHERE NOT EXISTS { MATCH (poi)<-[:CORR]-(goodsReceiptEvent:Event {Activity: ""Record Goods Receipt""}) WHERE goodsReceiptEvent.timestamp < requisitionEvent.timestamp + duration({days: 10}) } OPTIONAL MATCH (po)-[:REL]-(newPoi:Entity {EntityType: ""POI""})<-[:CORR]-(newRequisitionEvent:Event {Activity: ""Create Purchase Order Item""}) WHERE newRequisitionEvent.timestamp > requisitionEvent.timestamp + duration({days: 10}) WITH po, newPoi, COUNT(newPoi) AS newPoItemsCreated RETURN CASE WHEN any(x in COLLECT(newPoi) WHERE x>0) THEN false ELSE true END AS ruleSatisfied"
"For a given PO, a new purchase order item (POI) cannot be created if a goods receipt for a previously created POI has not been recorded within 10 days.","Activity: [""Create Purchase Order Item"", ""Record Goods Receipt""], EntityType: [""PO"", ""POI""]","MATCH (poi:Entity {EntityType: ""POI""})-[:REL]-(po:Entity {EntityType: ""PO""})<-[:CORR]-(createEvent:Event {Activity: ""Create Purchase Order Item""}) WHERE NOT EXISTS { MATCH (poi)<-[:CORR]-(goodsReceiptEvent:Event {Activity: ""Record Goods Receipt""}) WHERE goodsReceiptEvent.timestamp < createEvent.timestamp + duration({days: 10}) } OPTIONAL MATCH (po)-[:REL]-(newPoi:Entity {EntityType: ""POI""})<-[:CORR]-(newCreateEvent:Event {Activity: ""Create Purchase Order Item""}) WHERE newCreateEvent.timestamp > createEvent.timestamp + duration({days: 10}) WITH po, newPoi, COUNT(newPoi) AS newPoItemsCreated RETURN CASE WHEN any(x in COLLECT(newPoi) WHERE x>0) THEN false ELSE true END AS ruleSatisfied"
"For a given PO, a new purchase order item (POI) cannot be created if a vendor invoice for a previously created POI has not been generated within 15 days.","Activity: [""Create Purchase Order Item"", ""Vendor creates invoice""], EntityType: [""PO"",""POI""]","MATCH (poi:Entity {EntityType: ""POI""})-[:REL]-(po:Entity {EntityType: ""PO""})<-[:CORR]-(createEvent:Event {Activity: ""Create Purchase Order Item""}) WHERE NOT EXISTS { MATCH (poi)<-[:CORR]-(invoiceEvent:Event {Activity: ""Vendor creates invoice""}) WHERE invoiceEvent.timestamp < createEvent.timestamp + duration({days: 15}) } OPTIONAL MATCH (po)-[:REL]-(newPoi:Entity {EntityType: ""POI""})<-[:CORR]-(newCreateEvent:Event {Activity: ""Create Purchase Order Item""}) WHERE newCreateEvent.timestamp > createEvent.timestamp + duration({days: 15}) WITH po, newPoi, COUNT(newPoi) AS newPoItemsCreated RETURN CASE WHEN any(x in COLLECT(newPoi) WHERE x>0) THEN false ELSE true END AS ruleSatisfied"
"For a given PO, a new purchase order item (POI) cannot be created if a service entry sheet for a previously created POI has not been recorded within 20 days.","Activity: [""Create Purchase Order Item"", ""Record Service Entry Sheet""], EntityType: [""PO"",""POI""]","MATCH (poi:Entity {EntityType: ""POI""})-[:REL]-(po:Entity {EntityType: ""PO""})<-[:CORR]-(createEvent:Event {Activity: ""Create Purchase Order Item""}) WHERE NOT EXISTS { MATCH (po)-[:REL]-(poi:Entity {EntityType: ""POI""})<-[:CORR]-(serviceEntryEvent:Event {Activity: ""Record Service Entry Sheet""}) WHERE serviceEntryEvent.timestamp < createEvent.timestamp + duration({days: 20}) } OPTIONAL MATCH (po)-[:REL]-(newPoi:Entity {EntityType: ""POI""})<-[:CORR]-(newServiceEntryEvent:Event {Activity: ""Record Service Entry Sheet""}) WHERE newServiceEntryEvent.timestamp > createEvent.timestamp + duration({days: 20}) WITH po, newPoi, COUNT(newPoi) AS poItemsWithServiceEntry RETURN CASE WHEN any(x in COLLECT(po) WHERE x>0) THEN false ELSE true END AS ruleSatisfied"
"For a given PO, a new purchase order item (POI) cannot be created if a payment block for a previously generated POI has not been removed within 7 days.","Activity: [""Create Purchase Order Item"", ""Remove Payment Block""], EntityType: [""PO"",""POI""]","MATCH (poi:Entity {EntityType: ""POI""})-[:REL]-(po:Entity {EntityType: ""PO""})<-[:CORR]-(createEvent:Event {Activity: ""Create Purchase Order Item""}) WHERE NOT EXISTS { MATCH (poi)<-[:CORR]-(paymentBlockEvent:Event {Activity: ""Remove Payment Block""}) WHERE paymentBlockEvent.timestamp < createEvent.timestamp + duration({days: 7}) } OPTIONAL MATCH (po)-[:REL]-(newPoi:Entity {EntityType: ""POI""})<-[:CORR]-(newCreateEvent:Event {Activity: ""Create Purchase Order Item""}) WHERE newCreateEvent.timestamp > createEvent.timestamp + duration({days: 7}) WITH po, newPoi, COUNT(newPoi) AS newPoItemsCreated RETURN CASE WHEN any(x in COLLECT(newPoi) WHERE x>0) THEN false ELSE true END AS ruleSatisfied"
"For a given PO, a purchase order item (POI) cannot be created if the quantity change has not been performed for a previously created POI within 3 days.","Activity: [""Create Purchase Order Item"", ""Change Quantity""], EntityType: [""PO"",""POI""]","MATCH (poi:Entity {EntityType: ""POI""})-[:REL]-(po:Entity {EntityType: ""PO""})<-[:CORR]-(createEvent:Event {Activity: ""Create Purchase Order Item""}) WHERE NOT EXISTS { MATCH (poi)<-[:CORR]-(changeQuantityEvent:Event {Activity: ""Change Quantity""}) WHERE changeQuantityEvent.timestamp < createEvent.timestamp + duration({days: 3}) } OPTIONAL MATCH (po)-[:REL]-(newPoi:Entity {EntityType: ""POI""})<-[:CORR]-(newCreateEvent:Event {Activity: ""Create Purchase Order Item""}) WHERE newCreateEvent.timestamp > createEvent.timestamp + duration({days: 3}) WITH po, newPoi, COUNT(newPoi) AS newPoItemsCreated RETURN CASE WHEN any(x in COLLECT(newPoi) WHERE x>0) THEN false ELSE true END AS ruleSatisfied"
"For a given PO, a new purchase order item (POI) cannot be created if an invoice receipt has not been recorded for a previously created POI within 5 days.","Activity: [""Create Purchase Order Item"", ""Record Invoice Receipt""], EntityType: [""PO"",""POI""]","MATCH (poi:Entity {EntityType: ""POI""})-[:REL]-(po:Entity {EntityType: ""PO""})<-[:CORR]-(createEvent:Event {Activity: ""Create Purchase Order Item""}) WHERE NOT EXISTS { MATCH (poi)<-[:CORR]-(invoiceReceiptEvent:Event {Activity: ""Record Invoice Receipt""}) WHERE invoiceReceiptEvent.timestamp < createEvent.timestamp + duration({days: 5}) } OPTIONAL MATCH (po)-[:REL]-(newPoi:Entity {EntityType: ""POI""})<-[:CORR]-(newCreateEvent:Event {Activity: ""Create Purchase Order Item""}) WHERE newCreateEvent.timestamp > createEvent.timestamp + duration({days: 5}) WITH po, newPoi, COUNT(newPoi) AS newPoItemsCreated RETURN CASE WHEN any(x in COLLECT(newPoi) WHERE x>0) THEN false ELSE true END AS ruleSatisfied"
"All Purchase Order Items associated with the same Purchase Order should have the ""Create Purchase Order Item"" event executed together.","Activity: [""Create Purchase Order Item""], EntityType: [""POI"", ""PO""], Actor: []","MATCH (po:Entity {EntityType: ""PO""})-[:REL]-(poi:Entity {EntityType: ""POI""}) MATCH (poi)<-[:CORR]-(createPOIEvent:Event {Activity: ""Create Purchase Order Item""}) WITH po, COUNT(DISTINCT createPOIEvent) AS createPOIEvents RETURN CASE WHEN any (x in COLLECT(createPOIEvents) WHERE x>1) THEN false ELSE true END AS ruleSatisfied"
"All Purchase Order Items linked to a Purchase Order must have the ""Record Goods Receipt"" activity happen simultaneously.","Activity: [""Record Goods Receipt""], EntityType: [""POI"", ""PO""], Actor: []","MATCH (po:Entity {EntityType: ""PO""})-[:REL]-(poi:Entity {EntityType: ""POI""}) MATCH (poi)<-[:CORR]-(goodsReceiptEvent:Event {Activity: ""Record Goods Receipt""}) WITH po, COUNT(DISTINCT goodsReceiptEvent) AS goodsReceiptEvents RETURN CASE WHEN any (x in COLLECT(goodsReceiptEvents) WHERE x>1) THEN false ELSE true END AS ruleSatisfied"
"Any Purchase Order that has Purchase Order Items should have ""Create Purchase Requisition Item"" performed at the same time for all related items.","Activity: [""Create Purchase Requisition Item""], EntityType: [""POI"", ""PO""], Actor: []","MATCH (po:Entity {EntityType: ""PO""})-[:REL]-(poi:Entity {EntityType: ""POI""}) MATCH (poi)<-[:CORR]-(createRequisitionEvent:Event {Activity: ""Create Purchase Requisition Item""}) WITH po, COUNT(DISTINCT createRequisitionEvent) AS createRequisitionEvents RETURN CASE WHEN any (x in COLLECT(createRequisitionEvents) WHERE x>1) THEN false ELSE true END AS ruleSatisfied"
"Purchase Order Items associated with the same Purchase Order must have the ""Delete Purchase Order Item"" event executed together.","Activity: [""Delete Purchase Order Item""], EntityType: [""POI"", ""PO""], Actor: []","MATCH (po:Entity {EntityType: ""PO""})-[:REL]-(poi:Entity {EntityType: ""POI""}) MATCH (poi)<-[:CORR]-(deletePOIEvent:Event {Activity: ""Delete Purchase Order Item""}) WITH po, COUNT(DISTINCT deletePOIEvent) AS deletePOIEvents RETURN CASE WHEN any (x in COLLECT(deletePOIEvents) WHERE x>1) THEN false ELSE true END AS ruleSatisfied"
"All Purchase Order Items related to the same Purchase Order should have the ""Vendor creates invoice"" event happen simultaneously.","Activity: [""Vendor creates invoice""], EntityType: [""POI"", ""PO""], Actor: []","MATCH (po:Entity {EntityType: ""PO""})-[:REL]-(poi:Entity {EntityType: ""POI""}) MATCH (poi)<-[:CORR]-(invoiceEvent:Event {Activity: ""Vendor creates invoice""}) WITH po, COUNT(DISTINCT invoiceEvent) AS invoiceEvents RETURN CASE WHEN any (x in COLLECT(invoiceEvents) WHERE x>1) THEN false ELSE true END AS ruleSatisfied"
"All Purchase Order Items linked to a Purchase Order must undergo the ""Record Invoice Receipt"" process together.","Activity: [""Record Invoice Receipt""], EntityType: [""POI"", ""PO""], Actor: []","MATCH (po:Entity {EntityType: ""PO""})-[:REL]-(poi:Entity {EntityType: ""POI""}) MATCH (poi)<-[:CORR]-(invoiceReceiptEvent:Event {Activity: ""Record Invoice Receipt""}) WITH po, COUNT(DISTINCT invoiceReceiptEvent) AS invoiceReceiptEvents RETURN CASE WHEN any (x in COLLECT(invoiceReceiptEvents) WHERE x>1) THEN false ELSE true END AS ruleSatisfied"
"Any Purchase Order Item must have the ""Clear Invoice"" event executed when the corresponding Purchase Order clears its invoice.","Activity: [""Clear Invoice""], EntityType: [""POI"", ""PO""], Actor: []","MATCH (po:Entity {EntityType: ""PO""})-[:REL]-(poi:Entity {EntityType: ""POI""}) MATCH (poi)<-[:CORR]-(clearInvoiceEvent:Event {Activity: ""Clear Invoice""}) WITH po, COUNT(DISTINCT clearInvoiceEvent) AS clearInvoiceEvents RETURN CASE WHEN any (x in COLLECT(clearInvoiceEvents) WHERE x>1) THEN false ELSE true END AS ruleSatisfied"
"All Purchase Order Items must be processed for ""Record Service Entry Sheet"" at the same time for each related Purchase Order.","Activity: [""Record Service Entry Sheet""], EntityType: [""POI"", ""PO""], Actor: []","MATCH (po:Entity {EntityType: ""PO""})-[:REL]-(poi:Entity {EntityType: ""POI""}) MATCH (poi)<-[:CORR]-(serviceEntryEvent:Event {Activity: ""Record Service Entry Sheet""}) WITH po, COUNT(DISTINCT serviceEntryEvent) AS serviceEntryEvents RETURN CASE WHEN any (x in COLLECT(serviceEntryEvents) WHERE x>1) THEN false ELSE true END AS ruleSatisfied"
All items associated with a purchase order must be created at the same time.,"Activity: [""Create Purchase Order Item""], EntityType: [""POI"", ""PO""], Actor: []","MATCH (po:Entity {EntityType: ""PO""})-[:REL]-(poi:Entity {EntityType: ""POI""}) MATCH (poi)<-[:CORR]-(createPOIEvent:Event {Activity: ""Create Purchase Order Item""}) WITH po, COUNT(DISTINCT createPOIEvent) AS createPOIEvents RETURN CASE WHEN any (x in COLLECT(createPOIEvents) WHERE x>1) THEN false ELSE true END AS ruleSatisfied"
Each item in a purchase order must have its goods receipt recorded at the same time.,"Activity: [""Record Goods Receipt""], EntityType: [""POI"", ""PO""], Actor: []","MATCH (po:Entity {EntityType: ""PO""})-[:REL]-(poi:Entity {EntityType: ""POI""}) MATCH (poi)<-[:CORR]-(goodsReceiptEvent:Event {Activity: ""Record Goods Receipt""}) WITH po, COUNT(DISTINCT goodsReceiptEvent) AS goodsReceiptEvents RETURN CASE WHEN any (x in COLLECT(goodsReceiptEvents) WHERE x>1) THEN false ELSE true END AS ruleSatisfied"
"When an invoice is created for a purchase order item, it should be created for all items within the same purchase order.","Activity: [""Vendor creates invoice""], EntityType: [""POI"", ""PO""], Actor: []","MATCH (po:Entity {EntityType: ""PO""})-[:REL]-(poi:Entity {EntityType: ""POI""}) MATCH (poi)<-[:CORR]-(invoiceEvent:Event {Activity: ""Vendor creates invoice""}) WITH po, COUNT(DISTINCT invoiceEvent) AS invoiceEvents RETURN CASE WHEN any (x in COLLECT(invoiceEvents) WHERE x>1) THEN false ELSE true END AS ruleSatisfied"
"For each Purchase Order (PO), if a ""Record Goods Receipt"" event occurs, then all corresponding PO Items (POI) should also have a ""Record Invoice Receipt"" event.","Activity: [""Record Goods Receipt"", ""Record Invoice Receipt""], EntityType: [""PO"", ""POI""], Actor: []","MATCH (po:Entity {EntityType: ""PO""})<-[:CORR]-(goodsReceiptEvent:Event {Activity: ""Record Goods Receipt""}) MATCH (po)-[:REL]-(poi:Entity {EntityType: ""POI""}) WHERE NOT EXISTS { MATCH (poi)<-[:CORR]-(invoiceReceiptEvent:Event {Activity: ""Record Invoice Receipt""}) } WITH COUNT(poi) AS itemsWithoutInvoiceReceipt RETURN CASE WHEN itemsWithoutInvoiceReceipt = 0 THEN true ELSE false END AS ruleSatisfied"
"If a ""Remove Payment Block"" event happens for a PO, then a ""Clear Invoice"" event must be recorded for all associated PO Items (POI).","Activity: [""Remove Payment Block"", ""Clear Invoice""], EntityType: [""PO"", ""POI""], Actor: []","MATCH (po:Entity {EntityType: ""PO""})<-[:CORR]-(removePaymentBlockEvent:Event {Activity: ""Remove Payment Block""}) MATCH (po)-[:REL]-(poi:Entity {EntityType: ""POI""}) WHERE NOT EXISTS { MATCH (poi)<-[:CORR]-(clearInvoiceEvent:Event {Activity: ""Clear Invoice""}) } WITH COUNT(poi) AS itemsWithoutClearInvoice RETURN CASE WHEN itemsWithoutClearInvoice = 0 THEN true ELSE false END AS ruleSatisfied"
"When a ""Create Purchase Order Item"" event is recorded for a PO, a corresponding ""Record Goods Receipt"" event should occur for all related POIs.","Activity: [""Create Purchase Order Item"", ""Record Goods Receipt""], EntityType: [""PO"", ""POI""], Actor: []","MATCH (po:Entity {EntityType: ""PO""})<-[:CORR]-(createOrderItemEvent:Event {Activity: ""Create Purchase Order Item""}) MATCH (po)-[:REL]-(poi:Entity {EntityType: ""POI""}) WHERE NOT EXISTS { MATCH (poi)<-[:CORR]-(goodsReceiptEvent:Event {Activity: ""Record Goods Receipt""}) } WITH COUNT(poi) AS itemsWithoutGoodsReceipt RETURN CASE WHEN itemsWithoutGoodsReceipt = 0 THEN true ELSE false END AS ruleSatisfied"
"If a ""Vendor creates invoice"" event occurs for a PO, then a ""Record Invoice Receipt"" event must also be executed for all PO Items.","Activity: [""Vendor creates invoice"", ""Record Invoice Receipt""], EntityType: [""PO"", ""POI""], Actor: []","MATCH (po:Entity {EntityType: ""PO""})<-[:CORR]-(vendorInvoiceEvent:Event {Activity: ""Vendor creates invoice""}) MATCH (po)-[:REL]-(poi:Entity {EntityType: ""POI""}) WHERE NOT EXISTS { MATCH (poi)<-[:CORR]-(invoiceReceiptEvent:Event {Activity: ""Record Invoice Receipt""}) } WITH COUNT(poi) AS itemsWithoutInvoiceReceipt RETURN CASE WHEN itemsWithoutInvoiceReceipt = 0 THEN true ELSE false END AS ruleSatisfied"
"When a ""Create Purchase Order Item"" event occurs for a given PO, all associated PO Items should reflect the ""Record Service Entry Sheet"" event.","Activity: [""Create Purchase Order Item"", ""Record Service Entry Sheet""], EntityType: [""PO"", ""POI""], Actor: []","MATCH (po:Entity {EntityType: ""PO""})<-[:CORR]-(createOrderItemEvent:Event {Activity: ""Create Purchase Order Item""}) MATCH (po)-[:REL]-(poi:Entity {EntityType: ""POI""}) WHERE NOT EXISTS { MATCH (poi)<-[:CORR]-(serviceEntrySheetEvent:Event {Activity: ""Record Service Entry Sheet""}) } WITH COUNT(poi) AS itemsWithoutServiceEntry RETURN CASE WHEN itemsWithoutServiceEntry = 0 THEN true ELSE false END AS ruleSatisfied"
"If  a ""Create Purchase Requisition Item"" event occurs for a PO, a corresponding ""Create Purchase Order Item"" event must be executed for every related PO Item (POI).","Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item""], EntityType: [""POI"", ""PO""], Actor: []","MATCH (poi:Entity {EntityType: ""POI""})<-[:CORR]-(createRequisitionItemEvent:Event {Activity: ""Create Purchase Requisition Item""}) MATCH (poi)-[:REL]-(po:Entity {EntityType: ""PO""}) WHERE NOT EXISTS { MATCH (po)<-[:CORR]-(createOrderItemEvent:Event {Activity: ""Create Purchase Order Item""}) } WITH COUNT(po) AS ordersWithoutOrderItem RETURN CASE WHEN ordersWithoutOrderItem = 0 THEN true ELSE false END AS ruleSatisfied"
"For each Purchase Order (PO), if a ""Record Goods Receipt"" event occurs, then all corresponding PO Items (POI) should also have a ""Record Invoice Receipt"" event within 7 days.","Activity: [""Record Goods Receipt"", ""Record Invoice Receipt""], EntityType: [""PO"", ""POI""]","MATCH (po:Entity {EntityType: ""PO""})<-[:CORR]-(goodsReceiptEvent:Event {Activity: ""Record Goods Receipt""}) MATCH (po)-[:REL]-(poi:Entity {EntityType: ""POI""}) WHERE NOT EXISTS { MATCH (poi)<-[:CORR]-(invoiceReceiptEvent:Event {Activity: ""Record Invoice Receipt""}) WHERE invoiceReceiptEvent.timestamp <= goodsReceiptEvent.timestamp + duration({days: 7}) } RETURN CASE WHEN COUNT(poi) = 0 THEN true ELSE false END AS ruleSatisfied"
"If a ""Remove Payment Block"" event happens for a PO, then a ""Clear Invoice"" event must be recorded for all associated PO Items (POI) within 5 days.","Activity: [""Remove Payment Block"", ""Clear Invoice""], EntityType: [""PO"", ""POI""]","MATCH (po:Entity {EntityType: ""PO""})<-[:CORR]-(removePaymentBlockEvent:Event {Activity: ""Remove Payment Block""}) MATCH (po)-[:REL]-(poi:Entity {EntityType: ""POI""}) WHERE NOT EXISTS { MATCH (poi)<-[:CORR]-(clearInvoiceEvent:Event {Activity: ""Clear Invoice""}) WHERE clearInvoiceEvent.timestamp <= removePaymentBlockEvent.timestamp + duration({days: 5}) } RETURN CASE WHEN COUNT(poi) = 0 THEN true ELSE false END AS ruleSatisfied"
"When a ""Create Purchase Order Item"" event is recorded for a PO, a corresponding ""Record Goods Receipt"" event should occur for all related POIs within 10 days.","Activity: [""Create Purchase Order Item"", ""Record Goods Receipt""], EntityType: [""PO"", ""POI""]","MATCH (po:Entity {EntityType: ""PO""})<-[:CORR]-(createPOIEvent:Event {Activity: ""Create Purchase Order Item""}) MATCH (po)-[:REL]-(poi:Entity {EntityType: ""POI""}) WHERE NOT EXISTS { MATCH (poi)<-[:CORR]-(goodsReceiptEvent:Event {Activity: ""Record Goods Receipt""}) WHERE goodsReceiptEvent.timestamp <= createPOIEvent.timestamp + duration({days: 10}) } RETURN CASE WHEN COUNT(poi) = 0 THEN true ELSE false END AS ruleSatisfied"
"If a ""Vendor creates invoice"" event occurs for a PO, then a ""Record Invoice Receipt"" event must also be executed for all PO Items within 14 days.","Activity: [""Vendor creates invoice"", ""Record Invoice Receipt""], EntityType: [""PO"", ""POI""]","MATCH (po:Entity {EntityType: ""PO""})<-[:CORR]-(vendorInvoiceEvent:Event {Activity: ""Vendor creates invoice""}) MATCH (po)-[:REL]-(poi:Entity {EntityType: ""POI""}) WHERE NOT EXISTS { MATCH (poi)<-[:CORR]-(invoiceReceiptEvent:Event {Activity: ""Record Invoice Receipt""}) WHERE invoiceReceiptEvent.timestamp <= vendorInvoiceEvent.timestamp + duration({days: 14}) } RETURN CASE WHEN COUNT(poi) = 0 THEN true ELSE false END AS ruleSatisfied"
"When a ""Create Purchase Order Item"" event occurs for a given PO, all associated PO Items should reflect the ""Record Service Entry Sheet"" event within 5 days.","Activity: [""Create Purchase Order Item"", ""Record Service Entry Sheet""], EntityType: [""PO"", ""POI""]","MATCH (po:Entity {EntityType: ""PO""})<-[:CORR]-(createPOIEvent:Event {Activity: ""Create Purchase Order Item""}) MATCH (po)-[:REL]-(poi:Entity {EntityType: ""POI""}) WHERE NOT EXISTS { MATCH (poi)<-[:CORR]-(serviceEntrySheetEvent:Event {Activity: ""Record Service Entry Sheet""}) WHERE serviceEntrySheetEvent.timestamp <= createPOIEvent.timestamp + duration({days: 5}) } RETURN CASE WHEN COUNT(poi) = 0 THEN true ELSE false END AS ruleSatisfied"
"If a ""Create Purchase Requisition Item"" event occurs for a PO, a corresponding ""Create Purchase Order Item"" event must be executed for every related PO Item (POI) within 3 days.","Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item""], EntityType: [""PO"", ""POI""]","MATCH (po:Entity {EntityType: ""PO""})<-[:CORR]-(createRequisitionEvent:Event {Activity: ""Create Purchase Requisition Item""}) MATCH (po)-[:REL]-(poi:Entity {EntityType: ""POI""}) WHERE NOT EXISTS { MATCH (poi)<-[:CORR]-(createPOIEvent:Event {Activity: ""Create Purchase Order Item""}) WHERE createPOIEvent.timestamp <= createRequisitionEvent.timestamp + duration({days: 3}) } RETURN CASE WHEN COUNT(poi) = 0 THEN true ELSE false END AS ruleSatisfied"
"Whenever a Purchase Order item is created for a PO and the next step is to delete a Purchase Order Item for that PO, the system should ensure that an invoice receipt is recorded before clearing the invoice.","Activity: [""Create Purchase Order Item"", ""Delete Purchase Order Item"", ""Record Invoice Receipt"", ""Clear Invoice""], EntityType: [""PO""], Actor: []","MATCH (po:Entity {EntityType: ""PO""})<-[:CORR]-(createPOItemEvent:Event {Activity: ""Create Purchase Order Item""}) MATCH (po)<-[:CORR]-(deletePOItemEvent:Event {Activity: ""Delete Purchase Order Item""})<-[:DF]-(createPOItemEvent) WHERE NOT EXISTS { MATCH (po)<-[:CORR]-(invoiceReceiptEvent:Event {Activity: ""Record Invoice Receipt""}) MATCH (po)<-[:CORR]-(clearInvoiceEvent:Event {Activity: ""Clear Invoice""}) WHERE invoiceReceiptEvent.timestamp < clearInvoiceEvent.timestamp } RETURN CASE WHEN COUNT(po)>0 THEN false ELSE true END AS ruleSatisfied"
"If a Purchase Order Item is created and the next event is the vendor creating an invoice, then goods receipt must occur before the invoice is cleared.","Activity: [""Create Purchase Order Item"", ""Vendor creates invoice"", ""Record Goods Receipt"", ""Clear Invoice""], EntityType: [""POI""], Actor: []","MATCH (poi:Entity {EntityType: ""POI""})<-[:CORR]-(createPOItemEvent:Event {Activity: ""Create Purchase Order Item""}) MATCH (poi)<-[:CORR]-(vendorInvoiceEvent:Event {Activity: ""Vendor creates invoice""})<-[:DF]-(createPOItemEvent) WHERE NOT EXISTS { MATCH (poi)<-[:CORR]-(goodsReceiptEvent:Event {Activity: ""Record Goods Receipt""}) MATCH (poi)<-[:CORR]-(clearInvoiceEvent:Event {Activity: ""Clear Invoice""}) WHERE goodsReceiptEvent.timestamp < clearInvoiceEvent.timestamp } RETURN CASE WHEN COUNT(poi)>0 THEN false ELSE true END AS ruleSatisfied"
"If a Purchase Order is created and the next action is to record a service entry sheet, the system must ensure the payment block is removed before clearing the invoice.","Activity: [""Create Purchase Order Item"", ""Record Service Entry Sheet"", ""Remove Payment Block"", ""Clear Invoice""], EntityType: [""PO""], Actor: []","MATCH (po:Entity {EntityType: ""PO""})<-[:CORR]-(createPOItemEvent:Event {Activity: ""Create Purchase Order Item""}) MATCH (po)<-[:CORR]-(serviceEntrySheetEvent:Event {Activity: ""Record Service Entry Sheet""})<-[:DF]-(createPOItemEvent) WHERE NOT EXISTS { MATCH (po)<-[:CORR]-(removePaymentBlockEvent:Event {Activity: ""Remove Payment Block""}) MATCH (po)<-[:CORR]-(clearInvoiceEvent:Event {Activity: ""Clear Invoice""}) WHERE removePaymentBlockEvent.timestamp < clearInvoiceEvent.timestamp } RETURN CASE WHEN COUNT(po)>0 THEN false ELSE true END AS ruleSatisfied"
"Whenever a Purchase Order Item undergoes a ""Record Invoice Receipt"" event and the next action is ""Delete Purchase Order Item"", the system should check that the service entry sheet is recorded before the payment block is removed.","Activity: [""Record Invoice Receipt"", ""Delete Purchase Order Item"", ""Record Service Entry Sheet"", ""Remove Payment Block""], EntityType: [""POI""], Actor: []","MATCH (poi:Entity {EntityType: ""POI""})<-[:CORR]-(invoiceReceiptEvent:Event {Activity: ""Record Invoice Receipt""}) MATCH (poi)<-[:CORR]-(deletePOItemEvent:Event {Activity: ""Delete Purchase Order Item""})<-[:DF]-(invoiceReceiptEvent) WHERE NOT EXISTS { MATCH (poi)<-[:CORR]-(serviceEntrySheetEvent:Event {Activity: ""Record Service Entry Sheet""}) MATCH (poi)<-[:CORR]-(removePaymentBlockEvent:Event {Activity: ""Remove Payment Block""}) WHERE serviceEntrySheetEvent.timestamp < removePaymentBlockEvent.timestamp } RETURN CASE WHEN COUNT(poi)>0 THEN false ELSE true END AS ruleSatisfied"
"If a Purchase Order Item is created and the next action is receiving the order confirmation, then the system must ensure that the purchase requisition item is created before the order is packed.","Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item"", ""Receive Order Confirmation"", ""Record Goods Receipt""], EntityType: [""POI""], Actor: []","MATCH (poi:Entity {EntityType: ""POI""})<-[:CORR]-(createRequisitionEvent:Event {Activity: ""Create Purchase Requisition Item""}) MATCH (poi)<-[:CORR]-(createPOItemEvent:Event {Activity: ""Create Purchase Order Item""})<-[:DF]-(createRequisitionEvent) WHERE NOT EXISTS { MATCH (poi)<-[:CORR]-(receiveOrderConfirmationEvent:Event {Activity: ""Receive Order Confirmation""}) MATCH (poi)<-[:CORR]-(goodsReceiptEvent:Event {Activity: ""Record Goods Receipt""}) WHERE receiveOrderConfirmationEvent.timestamp < goodsReceiptEvent.timestamp } RETURN CASE WHEN COUNT(poi)>0 THEN false ELSE true END AS ruleSatisfied"
"For every Purchase Order, if an invoice receipt is recorded and the next action is to remove a payment block, then a service entry sheet must be recorded before clearing the invoice.","Activity: [""Record Invoice Receipt"", ""Remove Payment Block"", ""Record Service Entry Sheet"", ""Clear Invoice""], EntityType: [""PO""], Actor: []","MATCH (po:Entity {EntityType: ""PO""})<-[:CORR]-(invoiceReceiptEvent:Event {Activity: ""Record Invoice Receipt""}) MATCH (po)<-[:CORR]-(removePaymentBlockEvent:Event {Activity: ""Remove Payment Block""})<-[:DF]-(invoiceReceiptEvent) WHERE NOT EXISTS { MATCH (po)<-[:CORR]-(serviceEntrySheetEvent:Event {Activity: ""Record Service Entry Sheet""}) MATCH (po)<-[:CORR]-(clearInvoiceEvent:Event {Activity: ""Clear Invoice""}) WHERE serviceEntrySheetEvent.timestamp < clearInvoiceEvent.timestamp } RETURN CASE WHEN COUNT(po)>0 THEN false ELSE true END AS ruleSatisfied"
"If a Purchase Order Item is created and the next event is creating a Purchase Order Item for that PO, then the system must ensure that goods receipt is recorded before the invoice receipt is cleared.","Activity: [""Create Purchase Order Item"",  ""Record Goods Receipt"", ""Clear Invoice""], EntityType: [""POI""], Actor: []","MATCH (poi:Entity {EntityType: ""POI""})<-[:CORR]-(createPOItemEvent:Event {Activity: ""Create Purchase Order Item""}) MATCH (poi)<-[:CORR]-(createPOItemEvent2:Event {Activity: ""Create Purchase Order Item""})<-[:DF]-(createPOItemEvent) WHERE NOT EXISTS { MATCH (poi)<-[:CORR]-(goodsReceiptEvent:Event {Activity: ""Record Goods Receipt""}) MATCH (poi)<-[:CORR]-(clearInvoiceEvent:Event {Activity: ""Clear Invoice""}) WHERE goodsReceiptEvent.timestamp < clearInvoiceEvent.timestamp } RETURN CASE WHEN COUNT(poi)>0 THEN false ELSE true END AS ruleSatisfied"
"If a Purchase Order undergoes a ""Vendor creates invoice"" event and the next event is to delete a Purchase Order Item, then a service entry sheet must be recorded before the invoice is cleared.","Activity: [""Vendor creates invoice"", ""Delete Purchase Order Item"", ""Record Service Entry Sheet"", ""Clear Invoice""], EntityType: [""PO""], Actor: []","MATCH (po:Entity {EntityType: ""PO""})<-[:CORR]-(vendorInvoiceEvent:Event {Activity: ""Vendor creates invoice""}) MATCH (po)<-[:CORR]-(deletePOItemEvent:Event {Activity: ""Delete Purchase Order Item""})<-[:DF]-(vendorInvoiceEvent) WHERE NOT EXISTS { MATCH (po)<-[:CORR]-(serviceEntrySheetEvent:Event {Activity: ""Record Service Entry Sheet""}) MATCH (po)<-[:CORR]-(clearInvoiceEvent:Event {Activity: ""Clear Invoice""}) WHERE serviceEntrySheetEvent.timestamp < clearInvoiceEvent.timestamp } RETURN CASE WHEN COUNT(po)>0 THEN false ELSE true END AS ruleSatisfied"
"If a Vendor creates an invoice for a Purchase Order, the Invoice Receipt must occur within 10 days, and the Goods Receipt should follow.","Activity: [""Vendor creates invoice"", ""Record Invoice Receipt"", ""Record Goods Receipt""], EntityType: [""PO""], Actor: []","MATCH (po:Entity {EntityType: ""PO""})<-[:CORR]-(invoiceEvent:Event {Activity: ""Vendor creates invoice""}) WHERE NOT EXISTS{ MATCH (po)<-[:CORR]-(receiptInvoiceEvent:Event {Activity: ""Record Invoice Receipt""}) WHERE receiptInvoiceEvent.timestamp <= invoiceEvent.timestamp + duration({days: 10}) MATCH (po)<-[:CORR]-(goodsReceiptEvent:Event {Activity: ""Record Goods Receipt""}) WHERE goodsReceiptEvent.timestamp > receiptInvoiceEvent.timestamp } RETURN CASE WHEN COUNT(po)>0 THEN false ELSE true END AS ruleSatisfied"
"After a Purchase Order is confirmed, the related goods receipt must be recorded within 5 days, and the invoice receipt must follow.","Activity: [""Receive Order Confirmation"", ""Record Goods Receipt"", ""Record Invoice Receipt""], EntityType: [""PO""], Actor: []","MATCH (po:Entity {EntityType: ""PO""})<-[:CORR]-(confirmationEvent:Event {Activity: ""Receive Order Confirmation""}) WHERE NOT EXISTS{ MATCH (po)<-[:CORR]-(goodsReceiptEvent:Event {Activity: ""Record Goods Receipt""}) WHERE goodsReceiptEvent.timestamp <= confirmationEvent.timestamp + duration({days: 5}) MATCH (po)<-[:CORR]-(invoiceReceiptEvent:Event {Activity: ""Record Invoice Receipt""}) WHERE invoiceReceiptEvent.timestamp > goodsReceiptEvent.timestamp } RETURN CASE WHEN COUNT(po)>0 THEN false ELSE true END AS ruleSatisfied"
"For every Purchase Order Item, when a goods receipt is recorded, the invoice receipt must be made within 10 days, followed by clearing the invoice.","Activity: [""Record Goods Receipt"", ""Record Invoice Receipt"", ""Clear Invoice""], EntityType: [""POI""], Actor: []","MATCH (poi:Entity {EntityType: ""POI""})<-[:CORR]-(goodsReceiptEvent:Event {Activity: ""Record Goods Receipt""}) WHERE NOT EXISTS{ MATCH (poi)<-[:CORR]-(invoiceReceiptEvent:Event {Activity: ""Record Invoice Receipt""}) WHERE invoiceReceiptEvent.timestamp <= goodsReceiptEvent.timestamp + duration({days: 10}) MATCH (poi)<-[:CORR]-(clearInvoiceEvent:Event {Activity: ""Clear Invoice""}) WHERE clearInvoiceEvent.timestamp > invoiceReceiptEvent.timestamp } RETURN CASE WHEN COUNT(poi)>0 THEN false ELSE true END AS ruleSatisfied"
"If a Purchase Order undergoes a ""Receive Order Confirmation"" event, then the quantity must be changed within 3 days, and the invoice must be cleared after that.","Activity: [""Receive Order Confirmation"", ""Change Quantity"", ""Clear Invoice""], EntityType: [""PO""], Actor: []","MATCH (po:Entity {EntityType: ""PO""})<-[:CORR]-(confirmationEvent:Event {Activity: ""Receive Order Confirmation""}) WHERE NOT EXISTS{ MATCH (po)<-[:CORR]-(quantityChangeEvent:Event {Activity: ""Change Quantity""}) WHERE quantityChangeEvent.timestamp <= confirmationEvent.timestamp + duration({days: 3}) MATCH (po)<-[:CORR]-(clearInvoiceEvent:Event {Activity: ""Clear Invoice""}) WHERE clearInvoiceEvent.timestamp > quantityChangeEvent.timestamp } RETURN CASE WHEN COUNT(po)>0 THEN false ELSE true END AS ruleSatisfied"
"After a Purchase Order is confirmed, the Record Goods Receipt must be done within 5 days, and the Record Invoice Receipt should follow.","Activity: [""Receive Order Confirmation"", ""Record Goods Receipt"", ""Record Invoice Receipt""], EntityType: [""PO""], Actor: []","MATCH (po:Entity {EntityType: ""PO""})<-[:CORR]-(confirmationEvent:Event {Activity: ""Receive Order Confirmation""}) WHERE NOT EXISTS{ MATCH (po)<-[:CORR]-(goodsReceiptEvent:Event {Activity: ""Record Goods Receipt""}) WHERE goodsReceiptEvent.timestamp <= confirmationEvent.timestamp + duration({days: 5}) MATCH (po)<-[:CORR]-(invoiceReceiptEvent:Event {Activity: ""Record Invoice Receipt""}) WHERE invoiceReceiptEvent.timestamp > goodsReceiptEvent.timestamp } RETURN CASE WHEN COUNT(po)>0 THEN false ELSE true END AS ruleSatisfied"
"For every Purchase Order Item, when the Record Goods Receipt event is recorded, the Record Invoice Receipt must happen within 10 days, followed by Clear Invoice.","Activity: [""Record Goods Receipt"", ""Record Invoice Receipt"", ""Clear Invoice""], EntityType: [""POI""], Actor: []","MATCH (poi:Entity {EntityType: ""POI""})<-[:CORR]-(goodsReceiptEvent:Event {Activity: ""Record Goods Receipt""}) WHERE NOT EXISTS{ MATCH (poi)<-[:CORR]-(invoiceReceiptEvent:Event {Activity: ""Record Invoice Receipt""}) WHERE invoiceReceiptEvent.timestamp <= goodsReceiptEvent.timestamp + duration({days: 10}) MATCH (poi)<-[:CORR]-(clearInvoiceEvent:Event {Activity: ""Clear Invoice""}) WHERE clearInvoiceEvent.timestamp > invoiceReceiptEvent.timestamp } RETURN CASE WHEN COUNT(poi)>0 THEN false ELSE true END AS ruleSatisfied"
"If a Purchase Order undergoes a Receive Order Confirmation event, then the Change Quantity must be recorded within 3 days, and the Clear Invoice must occur afterward.","Activity: [""Receive Order Confirmation"", ""Change Quantity"", ""Clear Invoice""], EntityType: [""PO""], Actor: []","MATCH (po:Entity {EntityType: ""PO""})<-[:CORR]-(confirmationEvent:Event {Activity: ""Receive Order Confirmation""}) WHERE NOT EXISTS{ MATCH (po)<-[:CORR]-(quantityChangeEvent:Event {Activity: ""Change Quantity""}) WHERE quantityChangeEvent.timestamp <= confirmationEvent.timestamp + duration({days: 3}) MATCH (po)<-[:CORR]-(clearInvoiceEvent:Event {Activity: ""Clear Invoice""}) WHERE clearInvoiceEvent.timestamp > quantityChangeEvent.timestamp } RETURN CASE WHEN COUNT(po)>0 THEN false ELSE true END AS ruleSatisfied"
"When a Purchase Order Item is created, a Record Goods Receipt must occur within 7 days, and a Record Invoice Receipt must follow.","Activity: [""Create Purchase Order Item"", ""Record Goods Receipt"", ""Record Invoice Receipt""], EntityType: [""POI""], Actor: []","MATCH (poi:Entity {EntityType: ""POI""})<-[:CORR]-(createEvent:Event {Activity: ""Create Purchase Order Item""}) WHERE NOT EXISTS{ MATCH (poi)<-[:CORR]-(goodsReceiptEvent:Event {Activity: ""Record Goods Receipt""}) WHERE goodsReceiptEvent.timestamp <= createEvent.timestamp + duration({days: 7}) MATCH (poi)<-[:CORR]-(invoiceReceiptEvent:Event {Activity: ""Record Invoice Receipt""}) WHERE invoiceReceiptEvent.timestamp > goodsReceiptEvent.timestamp } RETURN CASE WHEN COUNT(poi)>0 THEN false ELSE true END AS ruleSatisfied"
A Purchase Order Item may not have the quantity changed more than twice a day.,"Activity: [""Change Quantity""], EntityType: [""POI""], Actor: []","MATCH (poi:Entity {EntityType: ""POI""})<-[:CORR]-(changeEvent:Event {Activity: ""Change Quantity""}) WITH poi, changeEvent WITH poi, COLLECT(changeEvent.timestamp) AS timestamps WITH poi, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 1})]) <= 2) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS poiRules RETURN ALL(rule IN poiRules WHERE rule = true) AS ruleHoldsForAllPOIs"
No more than five purchase order items can be created per week.,"Activity: [""Create Purchase Order Item""], EntityType: [""POI""], Actor: []","MATCH (poi:Entity {EntityType: ""POI""})<-[:CORR]-(createEvent:Event {Activity: ""Create Purchase Order Item""}) WITH poi, createEvent WITH poi, COLLECT(createEvent.timestamp) AS timestamps WITH poi, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 7})]) <= 5) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS poiRules RETURN ALL(rule IN poiRules WHERE rule = true) AS ruleHoldsForAllPOIs"
A Purchase Order must not have more than 3 invoice receipts recorded in a single month.,"Activity: [""Record Invoice Receipt""], EntityType: [""PO""], Actor: []","MATCH (po:Entity {EntityType: ""PO""})<-[:CORR]-(invoiceEvent:Event {Activity: ""Record Invoice Receipt""}) WITH po, invoiceEvent WITH po, COLLECT(invoiceEvent.timestamp) AS timestamps WITH po, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({months: 1})]) <= 3) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS poRules RETURN ALL(rule IN poRules WHERE rule = true) AS ruleHoldsForAllPOs"
"For a given PO, the vendor should not create more than 10 invoices in a day.","Activity: [""Vendor creates invoice""], EntityType: [""PO""], Actor: []","MATCH (po:Entity {EntityType: ""PO""})<-[:CORR]-(invoiceEvent:Event {Activity: ""Vendor creates invoice""}) WITH po, invoiceEvent WITH po, COLLECT(invoiceEvent.timestamp) AS timestamps WITH po, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 1})]) <= 10) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS poRules RETURN ALL(rule IN poRules WHERE rule = true) AS ruleHoldsForAllPOs"
A Purchase Order should not have more than two goods receipts on the same day.,"Activity: [""Record Goods Receipt""], EntityType: [""PO""], Actor: []","MATCH (po:Entity {EntityType: ""PO""})<-[:CORR]-(goodsEvent:Event {Activity: ""Record Goods Receipt""}) WITH po, goodsEvent WITH po, COLLECT(goodsEvent.timestamp) AS timestamps WITH po, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 1})]) <= 2) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS poRules RETURN ALL(rule IN poRules WHERE rule = true) AS ruleHoldsForAllPOs"
"No more than five ""Delete Purchase Order Item"" actions can be performed on a single POI in a week.","Activity: [""Delete Purchase Order Item""], EntityType: [""POI""], Actor: []","MATCH (poi:Entity {EntityType: ""POI""})<-[:CORR]-(deleteEvent:Event {Activity: ""Delete Purchase Order Item""}) WITH poi, deleteEvent WITH poi, COLLECT(deleteEvent.timestamp) AS timestamps WITH poi, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 7})]) <= 5) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS poiRules RETURN ALL(rule IN poiRules WHERE rule = true) AS ruleHoldsForAllPOIs"
A PO should not have more than one order confirmation received per day.,"Activity: [""Receive Order Confirmation""], EntityType: [""PO""], Actor: []","MATCH (po:Entity {EntityType: ""PO""})<-[:CORR]-(confirmationEvent:Event {Activity: ""Receive Order Confirmation""}) WITH po, confirmationEvent WITH po, COLLECT(confirmationEvent.timestamp) AS timestamps WITH po, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 1})]) <= 1) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS poRules RETURN ALL(rule IN poRules WHERE rule = true) AS ruleHoldsForAllPOs"
A Purchase Order Item must not have more than five service entry sheets recorded in a month.,"Activity: [""Record Service Entry Sheet""], EntityType: [""POI""], Actor: []","MATCH (poi:Entity {EntityType: ""POI""})<-[:CORR]-(serviceEvent:Event {Activity: ""Record Service Entry Sheet""}) WITH poi, serviceEvent WITH poi, COLLECT(serviceEvent.timestamp) AS timestamps WITH poi, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({months: 1})]) <= 5) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS poiRules RETURN ALL(rule IN poiRules WHERE rule = true) AS ruleHoldsForAllPOIs"
"No ""Clear Invoice"" action should occur more than once per week for any PO.","Activity: [""Clear Invoice""], EntityType: [""PO""], Actor: []","MATCH (po:Entity {EntityType: ""PO""})<-[:CORR]-(clearEvent:Event {Activity: ""Clear Invoice""}) WITH po, clearEvent WITH po, COLLECT(clearEvent.timestamp) AS timestamps WITH po, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 7})]) <= 1) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS poRules RETURN ALL(rule IN poRules WHERE rule = true) AS ruleHoldsForAllPOs"
A POI should not have its quantity changed more than three times a day.,"Activity: [""Change Quantity""], EntityType: [""POI""], Actor: []","MATCH (poi:Entity {EntityType: ""POI""})<-[:CORR]-(changeEvent:Event {Activity: ""Change Quantity""}) WITH poi, changeEvent WITH poi, COLLECT(changeEvent.timestamp) AS timestamps WITH poi, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 1})]) <= 3) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS poiRules RETURN ALL(rule IN poiRules WHERE rule = true) AS ruleHoldsForAllPOIs"
No purchase requisition items should be created between 8 PM and 6 AM.,"Activity: [""Create Purchase Requisition Item""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Create Purchase Requisition Item""}) WHERE time(e.timestamp).hour >= 20 OR time(e.timestamp).hour < 6 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Order items cannot be created between 10 PM and 4 AM.,"Activity: [""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Create Purchase Order Item""}) WHERE time(e.timestamp).hour >= 22 OR time(e.timestamp).hour < 4 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Vendors are not allowed to submit invoices between 7 PM and 7 AM.,"Activity: [""Vendor creates invoice""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Vendor creates invoice""}) WHERE time(e.timestamp).hour >= 19 OR time(e.timestamp).hour < 7 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Goods receipts must not be recorded from 9 AM to 5 PM.,"Activity: [""Record Goods Receipt""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Record Goods Receipt""}) WHERE time(e.timestamp).hour >= 9 AND time(e.timestamp).hour < 17 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Invoice receipts should not be logged between 11 PM and 7 AM.,"Activity: [""Record Invoice Receipt""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Record Invoice Receipt""}) WHERE time(e.timestamp).hour >= 23 OR time(e.timestamp).hour < 7 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Purchase order items must not be deleted between 6 AM and 12 PM.,"Activity: [""Delete Purchase Order Item""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Delete Purchase Order Item""}) WHERE time(e.timestamp).hour >= 6 AND time(e.timestamp).hour < 12 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
No invoices should be cleared during business hours (9 AM - 6 PM).,"Activity: [""Clear Invoice""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Clear Invoice""}) WHERE time(e.timestamp).hour >= 9 AND time(e.timestamp).hour < 18 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Service entry sheets must not be recorded from midnight to 8 AM.,"Activity: [""Record Service Entry Sheet""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Record Service Entry Sheet""}) WHERE time(e.timestamp).hour >= 0 AND time(e.timestamp).hour < 8 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Payment blocks should not be removed after 9 PM.,"Activity: [""Remove Payment Block""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Remove Payment Block""}) WHERE time(e.timestamp).hour >= 21 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Changing the quantity of an order is restricted between 3 PM and 10 PM.,"Activity: [""Change Quantity""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Change Quantity""}) WHERE time(e.timestamp).hour >= 15 AND time(e.timestamp).hour < 22 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Purchase requisition items must not be created on Mondays.,"Activity: [""Create Purchase Requisition Item""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Create Purchase Requisition Item""}) WHERE date(e.timestamp).dayOfWeek = 1 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
No purchase order item should be deleted on Sundays.,"Activity: [""Delete Purchase Order Item""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Delete Purchase Order Item""}) WHERE date(e.timestamp).dayOfWeek = 7 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Vendors are not allowed to generate invoices on Fridays.,"Activity: [""Vendor creates invoice""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Vendor creates invoice""}) WHERE date(e.timestamp).dayOfWeek = 5 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Goods receipts cannot be recorded on the weekend.,"Activity: [""Record Goods Receipt""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Record Goods Receipt""}) WHERE date(e.timestamp).dayOfWeek IN [6, 7] RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
It is forbidden to register an invoice receipt on Tuesdays.,"Activity: [""Record Invoice Receipt""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Record Invoice Receipt""}) WHERE date(e.timestamp).dayOfWeek = 2 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Payments should never be cleared on Wednesdays.,"Activity: [""Clear Invoice""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Clear Invoice""}) WHERE date(e.timestamp).dayOfWeek = 3 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Recording a service entry sheet is not allowed on Sundays.,"Activity: [""Record Service Entry Sheet""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Record Service Entry Sheet""}) WHERE date(e.timestamp).dayOfWeek = 7 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
The quantity of an order must not be modified on Thursdays.,"Activity: [""Change Quantity""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Change Quantity""}) WHERE date(e.timestamp).dayOfWeek = 4 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Receiving an order confirmation is prohibited on Saturdays.,"Activity: [""Receive Order Confirmation""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Receive Order Confirmation""}) WHERE date(e.timestamp).dayOfWeek = 6 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Removing a payment block is strictly restricted on Mondays.,"Activity: [""Remove Payment Block""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Remove Payment Block""}) WHERE date(e.timestamp).dayOfWeek = 1 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
"The average count of ""Create Purchase Requisition Item"" events on Mondays must stay below 3.","Activity: [""Create Purchase Requisition Item""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Create Purchase Requisition Item""}) WHERE date(e.timestamp).dayOfWeek = 1 WITH date(e.timestamp) AS eventDate, COUNT(e) AS eventsPerDay WITH AVG(eventsPerDay) AS avgEvents RETURN avgEvents <= 3 AS ruleSatisfied"
"On Tuesdays, the number of ""Vendor creates invoice"" events should not exceed 2 on average.","Activity: [""Vendor creates invoice""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Vendor creates invoice""}) WHERE date(e.timestamp).dayOfWeek = 2 WITH date(e.timestamp) AS eventDate, COUNT(e) AS eventsPerDay WITH AVG(eventsPerDay) AS avgEvents RETURN avgEvents <= 2 AS ruleSatisfied"
"The average number of ""Record Goods Receipt"" events on Wednesdays must not surpass 5.","Activity: [""Record Goods Receipt""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Record Goods Receipt""}) WHERE date(e.timestamp).dayOfWeek = 3 WITH date(e.timestamp) AS eventDate, COUNT(e) AS eventsPerDay WITH AVG(eventsPerDay) AS avgEvents RETURN avgEvents <= 5 AS ruleSatisfied"
"Thursdays should see no more than 4 ""Delete Purchase Order Item"" events on average.","Activity: [""Delete Purchase Order Item""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Delete Purchase Order Item""}) WHERE date(e.timestamp).dayOfWeek = 4 WITH date(e.timestamp) AS eventDate, COUNT(e) AS eventsPerDay WITH AVG(eventsPerDay) AS avgEvents RETURN avgEvents <= 4 AS ruleSatisfied"
"The number of ""Clear Invoice"" events on Fridays should stay under 3 on average.","Activity: [""Clear Invoice""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Clear Invoice""}) WHERE date(e.timestamp).dayOfWeek = 5 WITH date(e.timestamp) AS eventDate, COUNT(e) AS eventsPerDay WITH AVG(eventsPerDay) AS avgEvents RETURN avgEvents <= 3 AS ruleSatisfied"
"On Saturdays, the average number of ""Record Invoice Receipt"" events must not exceed 1.","Activity: [""Record Invoice Receipt""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Record Invoice Receipt""}) WHERE date(e.timestamp).dayOfWeek = 6 WITH date(e.timestamp) AS eventDate, COUNT(e) AS eventsPerDay WITH AVG(eventsPerDay) AS avgEvents RETURN avgEvents <= 1 AS ruleSatisfied"
"The average number of ""Record Service Entry Sheet"" events on Sundays should be under 2.","Activity: [""Record Service Entry Sheet""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Record Service Entry Sheet""}) WHERE date(e.timestamp).dayOfWeek = 7 WITH date(e.timestamp) AS eventDate, COUNT(e) AS eventsPerDay WITH AVG(eventsPerDay) AS avgEvents RETURN avgEvents <= 2 AS ruleSatisfied"
"On Mondays, no more than 6 ""Change Quantity"" events should be recorded on average.","Activity: [""Change Quantity""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Change Quantity""}) WHERE date(e.timestamp).dayOfWeek = 1 WITH date(e.timestamp) AS eventDate, COUNT(e) AS eventsPerDay WITH AVG(eventsPerDay) AS avgEvents RETURN avgEvents <= 6 AS ruleSatisfied"
"The average number of ""Receive Order Confirmation"" events on Tuesdays must remain below 3.","Activity: [""Receive Order Confirmation""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Receive Order Confirmation""}) WHERE date(e.timestamp).dayOfWeek = 2 WITH date(e.timestamp) AS eventDate, COUNT(e) AS eventsPerDay WITH AVG(eventsPerDay) AS avgEvents RETURN avgEvents <= 3 AS ruleSatisfied"
"On Wednesdays, the average count of ""Create Purchase Order Item"" events must stay below 4.","Activity: [""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Create Purchase Order Item""}) WHERE date(e.timestamp).dayOfWeek = 3 WITH date(e.timestamp) AS eventDate, COUNT(e) AS eventsPerDay WITH AVG(eventsPerDay) AS avgEvents RETURN avgEvents <= 4 AS ruleSatisfied"
"No more than 5 ""Create Purchase Requisition Item"" events are allowed in any week.","Activity: [""Create Purchase Requisition Item""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Create Purchase Requisition Item""}) WHERE date(e.timestamp).dayOfWeek >= 1 AND date(e.timestamp).dayOfWeek <= 7 WITH date(e.timestamp).year AS year, date(e.timestamp).week AS week, COUNT(e) AS eventsPerWeek RETURN CASE WHEN MAX(eventsPerWeek) > 5 THEN false ELSE true END AS ruleSatisfied"
"Ensure that between Monday and Friday, no more than 3 ""Vendor creates invoice"" events happen in any week.","Activity: [""Vendor creates invoice""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Vendor creates invoice""}) WHERE date(e.timestamp).dayOfWeek >= 1 AND date(e.timestamp).dayOfWeek <= 5 WITH date(e.timestamp).year AS year, date(e.timestamp).week AS week, COUNT(e) AS eventsPerWeek RETURN CASE WHEN MAX(eventsPerWeek) > 3 THEN false ELSE true END AS ruleSatisfied"
"The number of ""Record Goods Receipt"" events from Wednesday to Saturday must not exceed 4 per week.","Activity: [""Record Goods Receipt""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Record Goods Receipt""}) WHERE date(e.timestamp).dayOfWeek >= 3 AND date(e.timestamp).dayOfWeek <= 6 WITH date(e.timestamp).year AS year, date(e.timestamp).week AS week, COUNT(e) AS eventsPerWeek RETURN CASE WHEN MAX(eventsPerWeek) > 4 THEN false ELSE true END AS ruleSatisfied"
"In any given week, no more than 6 events of ""Record Invoice Receipt"" should occur between Monday and Wednesday.","Activity: [""Record Invoice Receipt""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Record Invoice Receipt""}) WHERE date(e.timestamp).dayOfWeek >= 1 AND date(e.timestamp).dayOfWeek <= 3 WITH date(e.timestamp).year AS year, date(e.timestamp).week AS week, COUNT(e) AS eventsPerWeek RETURN CASE WHEN MAX(eventsPerWeek) > 6 THEN false ELSE true END AS ruleSatisfied"
"Limit the occurrence of ""Delete Purchase Order Item"" events to a maximum of 2 from Thursday to Sunday for every week.","Activity: [""Delete Purchase Order Item""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Delete Purchase Order Item""}) WHERE date(e.timestamp).dayOfWeek >= 4 AND date(e.timestamp).dayOfWeek <= 7 WITH date(e.timestamp).year AS year, date(e.timestamp).week AS week, COUNT(e) AS eventsPerWeek RETURN CASE WHEN MAX(eventsPerWeek) > 2 THEN false ELSE true END AS ruleSatisfied"
"There must be no more than 5 ""Clear Invoice"" events between Monday and Thursday in any given week.","Activity: [""Clear Invoice""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Clear Invoice""}) WHERE date(e.timestamp).dayOfWeek >= 1 AND date(e.timestamp).dayOfWeek <= 4 WITH date(e.timestamp).year AS year, date(e.timestamp).week AS week, COUNT(e) AS eventsPerWeek RETURN CASE WHEN MAX(eventsPerWeek) > 5 THEN false ELSE true END AS ruleSatisfied"
"The total number of ""Record Service Entry Sheet"" events should not exceed 3 from Friday to Sunday in a week.","Activity: [""Record Service Entry Sheet""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Record Service Entry Sheet""}) WHERE date(e.timestamp).dayOfWeek >= 5 AND date(e.timestamp).dayOfWeek <= 7 WITH date(e.timestamp).year AS year, date(e.timestamp).week AS week, COUNT(e) AS eventsPerWeek RETURN CASE WHEN MAX(eventsPerWeek) > 3 THEN false ELSE true END AS ruleSatisfied"
"In each week, no more than 1 ""Remove Payment Block"" event should occur during the weekend (Saturday and Sunday).","Activity: [""Remove Payment Block""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Remove Payment Block""}) WHERE date(e.timestamp).dayOfWeek >= 6 AND date(e.timestamp).dayOfWeek <= 7 WITH date(e.timestamp).year AS year, date(e.timestamp).week AS week, COUNT(e) AS eventsPerWeek RETURN CASE WHEN MAX(eventsPerWeek) > 1 THEN false ELSE true END AS ruleSatisfied"
"The number of ""Change Quantity"" events should not exceed 10 in any week.","Activity: [""Change Quantity""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Change Quantity""}) WHERE date(e.timestamp).dayOfWeek >= 1 AND date(e.timestamp).dayOfWeek <= 7 WITH date(e.timestamp).year AS year, date(e.timestamp).week AS week, COUNT(e) AS eventsPerWeek RETURN CASE WHEN MAX(eventsPerWeek) > 10 THEN false ELSE true END AS ruleSatisfied"
"Ensure that no more than 7 ""Receive Order Confirmation"" events happen in a single week.","Activity: [""Receive Order Confirmation""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Receive Order Confirmation""}) WHERE date(e.timestamp).dayOfWeek >= 1 AND date(e.timestamp).dayOfWeek <= 7 WITH date(e.timestamp).year AS year, date(e.timestamp).week AS week, COUNT(e) AS eventsPerWeek RETURN CASE WHEN MAX(eventsPerWeek) > 7 THEN false ELSE true END AS ruleSatisfied"
No single person should handle more than 5 events involving creating or deleting purchase requisitions or orders.,"Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item"", ""Delete Purchase Order Item""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN [""Create Purchase Order Item"", ""Create Purchase Requisition Item"", ""Delete Purchase Order Item""] WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 5 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
A single individual must not perform more than 5 actions related to creating or deleting purchase requisitions or orders.,"Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item"", ""Delete Purchase Order Item""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN [""Create Purchase Order Item"", ""Create Purchase Requisition Item"", ""Delete Purchase Order Item""] WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 5 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
It is prohibited for one person to execute more than 5 events involving the creation or deletion of purchase requisitions or orders.,"Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item"", ""Delete Purchase Order Item""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN [""Create Purchase Order Item"", ""Create Purchase Requisition Item"", ""Delete Purchase Order Item""] WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 5 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
No individual is allowed to carry out more than 5 events related to creating or deleting purchase requisitions or orders.,"Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item"", ""Delete Purchase Order Item""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN [""Create Purchase Order Item"", ""Create Purchase Requisition Item"", ""Delete Purchase Order Item""] WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 5 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
One person must not perform more than 5 events involving the creation or deletion of purchase requisitions or orders.,"Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item"", ""Delete Purchase Order Item""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN [""Create Purchase Order Item"", ""Create Purchase Requisition Item"", ""Delete Purchase Order Item""] WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 5 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
No single person should execute more than 5 events related to creating or deleting purchase requisitions or orders.,"Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item"", ""Delete Purchase Order Item""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN [""Create Purchase Order Item"", ""Create Purchase Requisition Item"", ""Delete Purchase Order Item""] WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 5 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
It is not permitted for one person to handle more than 5 events involving the creation or deletion of purchase requisitions or orders.,"Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item"", ""Delete Purchase Order Item""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN [""Create Purchase Order Item"", ""Create Purchase Requisition Item"", ""Delete Purchase Order Item""] WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 5 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
No single individual is allowed to perform more than 5 events related to creating or deleting purchase requisitions or orders.,"Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item"", ""Delete Purchase Order Item""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN [""Create Purchase Order Item"", ""Create Purchase Requisition Item"", ""Delete Purchase Order Item""] WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 5 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
One person must not carry out more than 5 events involving the creation or deletion of purchase requisitions or orders.,"Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item"", ""Delete Purchase Order Item""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN [""Create Purchase Order Item"", ""Create Purchase Requisition Item"", ""Delete Purchase Order Item""] WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 5 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
No single person should perform more than 5 events related to creating or deleting purchase requisitions or orders.,"Activity: [""Create Purchase Requisition Item"", ""Create Purchase Order Item"", ""Delete Purchase Order Item""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN [""Create Purchase Order Item"", ""Create Purchase Requisition Item"", ""Delete Purchase Order Item""] WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 5 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
The average time from the creation of a purchase order item (POI) for a PO until the quantity change for the related POI is less than 5 days.,"Activity: [""Create Purchase Order Item"", ""Change Quantity""], EntityType: [""PO"", ""POI""], Actor: []","MATCH (e1:Event {Activity:""Create Purchase Order Item""})-[:CORR]->(ent1:Entity {EntityType: ""PO""})-[:REL]-(ent2:Entity {EntityType:""POI""})<-[:CORR]-(e2:Event {Activity:""Change Quantity""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp,e2.timestamp).seconds)) < (5*24*60*60) as ruleSatisfied"
The average time between the creation of a purchase order item (POI) for a PO until the deletion of that POI is greater than 2 days.,"Activity: [""Create Purchase Order Item"", ""Delete Purchase Order Item""], EntityType: [""PO"", ""POI""], Actor: []","MATCH (e1:Event {Activity:""Create Purchase Order Item""})-[:CORR]->(ent1:Entity {EntityType: ""PO""})-[:REL]-(ent2:Entity {EntityType:""POI""})<-[:CORR]-(e2:Event {Activity:""Delete Purchase Order Item""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp,e2.timestamp).seconds)) > (2*24*60*60) as ruleSatisfied"
"From recording a goods receipt for a PO to the invoice receipt for the related POI, less than 4 days should pass on average.","Activity: [""Record Goods Receipt"", ""Record Invoice Receipt""], EntityType: [""PO"", ""POI""], Actor: []","MATCH (e1:Event {Activity:""Record Goods Receipt""})-[:CORR]->(ent1:Entity {EntityType: ""PO""})-[:REL]-(ent2:Entity {EntityType:""POI""})<-[:CORR]-(e2:Event {Activity:""Record Invoice Receipt""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp,e2.timestamp).seconds)) < (4*24*60*60) as ruleSatisfied"
The average time from receiving an order confirmation for a PO to creating a purchase order item for the related POI is less than 5 days.,"Activity: [""Receive Order Confirmation"", ""Create Purchase Order Item""], EntityType: [""PO"", ""POI""], Actor: []","MATCH (e1:Event {Activity:""Receive Order Confirmation""})-[:CORR]->(ent1:Entity {EntityType: ""PO""})-[:REL]-(ent2:Entity {EntityType:""POI""})<-[:CORR]-(e2:Event {Activity:""Create Purchase Order Item""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp,e2.timestamp).seconds)) < (5*24*60*60) as ruleSatisfied"
The average time between creating a purchase order item for a PO until the vendor creating an invoice for that POI should be greater than 3 days.,"Activity: [""Create Purchase Order Item"", ""Vendor creates invoice""], EntityType: [""PO"", ""POI""], Actor: []","MATCH (e1:Event {Activity:""Create Purchase Order Item""})-[:CORR]->(ent1:Entity {EntityType: ""PO""})-[:REL]-(ent2:Entity {EntityType:""POI""})<-[:CORR]-(e2:Event {Activity:""Vendor creates invoice""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp,e2.timestamp).seconds)) > (3*24*60*60) as ruleSatisfied"
No single person should execute more than 6 events related to deleting purchase order items or clearing invoices.,"Activity: [""Delete Purchase Order Item"", ""Clear Invoice""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN [""Delete Purchase Order Item"", ""Clear Invoice""] WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 6 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
No single person should execute more than 15 events that involve either creating or deleting purchase order items.,"Activity: [""Create Purchase Order Item"", ""Delete Purchase Order Item""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN [""Create Purchase Order Item"", ""Delete Purchase Order Item""] WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 15 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
More than 12 recorded events related to goods receipts or invoice receipts by the same person are prohibited.,"Activity: [""Record Goods Receipt"", ""Record Invoice Receipt""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN [""Record Goods Receipt"", ""Record Invoice Receipt""] WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 12 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
An individual cannot perform more than 7 actions involving the creation of purchase order items or modifying order quantities.,"Activity: [""Create Purchase Order Item"", ""Change Quantity""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN [""Create Purchase Order Item"", ""Change Quantity""] WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 7 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
A person must not perform more than 5 actions related to recording service entry sheets or removing payment blocks.,"Activity: [""Record Service Entry Sheet"", ""Remove Payment Block""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN [""Record Service Entry Sheet"", ""Remove Payment Block""] WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 5 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
Executing more than 7 tasks related to recording goods receipts or receiving order confirmations is not permitted for a single individual.,"Activity: [""Record Goods Receipt"", ""Receive Order Confirmation""], EntityType: [], Actor: []","MATCH (e:Event) WHERE e.Activity IN [""Record Goods Receipt"", ""Receive Order Confirmation""] WITH e.Actor AS actor, COUNT(e) AS occurrences WHERE occurrences > 7 RETURN CASE WHEN COUNT(actor) > 0 THEN false ELSE true END AS ruleSatisfied"
"The average time between ""Remove Payment Block"" directly followed by ""Clear Invoice"" must be less than 2 hours.","Activity: [""Remove Payment Block"", ""Clear Invoice""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Remove Payment Block""})-[:DF]->(e2:Event {Activity:""Clear Invoice""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp, e2.timestamp).seconds)) < (2*60*60) as ruleSatisfied"
"On average, the delay between releasing a purchase requisition and creating a purchase order item directly after should not exceed 1 day.","Activity: [""Release Purchase Requisition"", ""Create Purchase Order Item""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Release Purchase Requisition""})-[:DF]->(e2:Event {Activity:""Create Purchase Order Item""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp, e2.timestamp).seconds)) < (24*60*60) as ruleSatisfied"
"The average time from ""Vendor creates invoice"" directly followed by ""Record Invoice Receipt"" should be under 3 hours.","Activity: [""Vendor creates invoice"", ""Record Invoice Receipt""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Vendor creates invoice""})-[:DF]->(e2:Event {Activity:""Record Invoice Receipt""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp, e2.timestamp).seconds)) < (3*60*60) as ruleSatisfied"
The time it takes between recording a goods receipt and receiving the order confirmation immediately after must be less than 6 hours.,"Activity: [""Record Goods Receipt"", ""Receive Order Confirmation""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Record Goods Receipt""})-[:DF]->(e2:Event {Activity:""Receive Order Confirmation""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp, e2.timestamp).seconds)) < (6*60*60) as ruleSatisfied"
"On average, there should be at least 1 hour between ""Create Purchase Order Item"" directly followed by ""Reactivate Purchase Order Item"".","Activity: [""Create Purchase Order Item"", ""Reactivate Purchase Order Item""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Create Purchase Order Item""})-[:DF]->(e2:Event {Activity:""Reactivate Purchase Order Item""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp, e2.timestamp).seconds)) > (1*60*60) as ruleSatisfied"
The average delay from initiating a service entry sheet to recording it immediately after must not exceed 30 minutes.,"Activity: [""Record Service Entry Sheet"", ""SRM: Complete""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Record Service Entry Sheet""})-[:DF]->(e2:Event {Activity:""SRM: Complete""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp, e2.timestamp).seconds)) < (30*60) as ruleSatisfied"
"After blocking a purchase order item, the cancellation of a subsequent invoice directly after must happen within 2 hours on average.","Activity: [""Block Purchase Order Item"", ""Cancel Subsequent Invoice""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Block Purchase Order Item""})-[:DF]->(e2:Event {Activity:""Cancel Subsequent Invoice""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp, e2.timestamp).seconds)) < (2*60*60) as ruleSatisfied"
The time it takes to go from deleting a purchase order item to reactivating it immediately after should not exceed 8 hours.,"Activity: [""Delete Purchase Order Item"", ""Reactivate Purchase Order Item""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Delete Purchase Order Item""})-[:DF]->(e2:Event {Activity:""Reactivate Purchase Order Item""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp, e2.timestamp).seconds)) < (8*60*60) as ruleSatisfied"
No POI should be associated with fewer than 5 events.,"Activity: [], EntityType: [""POI""],  Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""POI""}) WITH ent, COUNT(e) AS events WHERE events < 5 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
A Purchase Order may not be related to more than 20 events.,"Activity: [], EntityType: [""PO""],  Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""PO""}) WITH ent, COUNT(e) AS events WHERE events > 20 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
Each POI is expected to have at least 3 associated events.,"Activity: [], EntityType: [""POI""],  Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""POI""}) WITH ent, COUNT(e) AS events WHERE events >= 3 RETURN CASE WHEN COUNT(ent) > 0 THEN true ELSE false END AS ruleSatisfied"
A PO must never have fewer than 10 events linked to it.,"Activity: [], EntityType: [""PO""],  Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""PO""}) WITH ent, COUNT(e) AS events WHERE events < 10 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
No purchase order item is allowed to exceed 30 correlated events.,"Activity: [], EntityType: [""POI""],  Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""POI""}) WITH ent, COUNT(e) AS events WHERE events > 30 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
There must not be any POI with more than 15 related events.,"Activity: [], EntityType: [""POI""],  Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""POI""}) WITH ent, COUNT(e) AS events WHERE events > 15 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
A purchase order is invalid if it has fewer than 5 correlated events.,"Activity: [], EntityType: [""PO""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""PO""}) WITH ent, COUNT(e) AS events WHERE events < 5 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
No PO may be linked to fewer than 4 different activities.,"Activity: [], EntityType: [""PO""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""PO""}) WITH ent, COUNT(DISTINCT e.Activity) AS activities WHERE activities < 4 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
A Purchase Order Item must not be associated with more than 6 unique activities.,"Activity: [], EntityType: [""POI""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""POI""}) WITH ent, COUNT(DISTINCT e.Activity) AS activities WHERE activities > 6 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
No POI should be involved in fewer than 3 different activities.,"Activity: [], EntityType: [""POI""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""POI""}) WITH ent, COUNT(DISTINCT e.Activity) AS activities WHERE activities < 3 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
Each purchase order must have at least 5 distinct types of activities linked.,"Activity: [], EntityType: [""PO""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""PO""}) WITH ent, COUNT(DISTINCT e.Activity) AS activities WHERE activities < 5 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
No individual POI may be connected to more than 7 different activities.,"Activity: [], EntityType: [""POI""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""POI""}) WITH ent, COUNT(DISTINCT e.Activity) AS activities WHERE activities > 7 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
A purchase order item must be involved in at least 2 unique activities.,"Activity: [], EntityType: [""POI""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""POI""}) WITH ent, COUNT(DISTINCT e.Activity) AS activities WHERE activities < 2 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
No PO should be associated with more than 8 activities.,"Activity: [], EntityType: [""PO""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""PO""}) WITH ent, COUNT(DISTINCT e.Activity) AS activities WHERE activities > 8 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
Each purchase order should be linked to at least 3 different activities.,"Activity: [], EntityType: [""PO""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""PO""}) WITH ent, COUNT(DISTINCT e.Activity) AS activities WHERE activities < 3 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
