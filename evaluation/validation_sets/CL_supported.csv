NL input,Key Values,Cypher Query
Every Customer Order must be registered at least once.,"Activity: [""Register Customer Order""], EntityType: [""Customer Order""], Actor: []",MATCH (ent:Entity {EntityType: 'Customer Order'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'Register Customer Order'})-[:CORR]->(ent) } RETURN CASE WHEN count(ent) = 0 THEN true ELSE false END AS ruleSatisfied
At least one transport document must be created for every Customer Order.,"Activity: [""Create Transport Document""], EntityType: [""Customer Order""], Actor: []",MATCH (ent:Entity {EntityType: 'Customer Order'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'Create Transport Document'})-[:CORR]->(ent) } RETURN CASE WHEN count(ent) = 0 THEN true ELSE false END AS ruleSatisfied
Every Customer Order must be linked to a vehicle booking.,"Activity: [""Book Vehicles""], EntityType: [""Customer Order""], Actor: []",MATCH (ent:Entity {EntityType: 'Customer Order'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'Book Vehicles'})-[:CORR]->(ent) } RETURN CASE WHEN count(ent) = 0 THEN true ELSE false END AS ruleSatisfied
"Every Container must have at least one ""Pick Up Empty Container"" event.","Activity: [""Pick Up Empty Container""], EntityType: [""Container""], Actor: []",MATCH (ent:Entity {EntityType: 'Container'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'Pick Up Empty Container'})-[:CORR]->(ent) } RETURN CASE WHEN count(ent) = 0 THEN true ELSE false END AS ruleSatisfied
"Every Truck must be associated with at least one ""Load Truck"" event.","Activity: [""Load Truck""], EntityType: [""Truck""], Actor: []",MATCH (ent:Entity {EntityType: 'Truck'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'Load Truck'})-[:CORR]->(ent) } RETURN CASE WHEN count(ent) = 0 THEN true ELSE false END AS ruleSatisfied
"At least one ""Weigh"" event must occur for each Container.","Activity: [""Weigh""], EntityType: [""Container""], Actor: []",MATCH (ent:Entity {EntityType: 'Container'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'Weigh'})-[:CORR]->(ent) } RETURN CASE WHEN count(ent) = 0 THEN true ELSE false END AS ruleSatisfied
"A ""Handling Unit"" should have at least one ""Place in Stock"" event associated with it.","Activity: [""Place in Stock""], EntityType: [""Handling Unit""], Actor: []",MATCH (ent:Entity {EntityType: 'Handling Unit'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'Place in Stock'})-[:CORR]->(ent) } RETURN CASE WHEN count(ent) = 0 THEN true ELSE false END AS ruleSatisfied
"Each ""Transport Document"" must have at least one ""Drive to Terminal"" event.","Activity: [""Drive to Terminal""], EntityType: [""Transport Document""], Actor: []",MATCH (ent:Entity {EntityType: 'Transport Document'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'Drive to Terminal'})-[:CORR]->(ent) } RETURN CASE WHEN count(ent) = 0 THEN true ELSE false END AS ruleSatisfied
"A ""Forklift"" must have at least one ""Load to Vehicle"" event performed at least once.","Activity: [""Load to Vehicle""], EntityType: [""Forklift""], Actor: []",MATCH (ent:Entity {EntityType: 'Forklift'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'Load to Vehicle'})-[:CORR]->(ent) } RETURN CASE WHEN count(ent) = 0 THEN true ELSE false END AS ruleSatisfied
"A ""Transport Document"" must have at least one associated ""Reschedule Container"" event.","Activity: [""Reschedule Container""], EntityType: [""Transport Document""], Actor: []",MATCH (ent:Entity {EntityType: 'Transport Document'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'Reschedule Container'})-[:CORR]->(ent) } RETURN CASE WHEN count(ent) = 0 THEN true ELSE false END AS ruleSatisfied
"A ""Register Customer Order"" event must occur between 3 and 7 times.","Activity: [""Register Customer Order""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Register Customer Order'}) RETURN COUNT(e) >= 3 AND COUNT(e) <= 7 AS ruleSatisfied
"The number of times a ""Book Vehicles"" event takes place must be no fewer than 2 but no more than 4.","Activity: [""Book Vehicles""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Book Vehicles'}) RETURN COUNT(e) >= 2 AND COUNT(e) <= 4 AS ruleSatisfied
"At least one instance of ""Weigh"" must occur, but no more than 3 are allowed.","Activity: [""Weigh""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Weigh'}) RETURN COUNT(e) >= 1 AND COUNT(e) <= 3 AS ruleSatisfied
"An event of type ""Reschedule Container"" must happen between 1 and 5 times.","Activity: [""Reschedule Container""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Reschedule Container'}) RETURN COUNT(e) >= 1 AND COUNT(e) <= 5 AS ruleSatisfied
"The action of ""Load Truck"" must take place at least 2 times but no more than 6 times.","Activity: [""Load Truck""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Load Truck'}) RETURN COUNT(e) >= 2 AND COUNT(e) <= 6 AS ruleSatisfied
"The event ""Order Empty Containers"" must occur between 2 and 5 times inclusively.","Activity: [""Order Empty Containers""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Order Empty Containers'}) RETURN COUNT(e) >= 2 AND COUNT(e) <= 5 AS ruleSatisfied
Creating a new transport document should occur a minimum of 2 times and a maximum of 4 times.,"Activity: [""Create Transport Document""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Create Transport Document'}) RETURN COUNT(e) >= 2 AND COUNT(e) <= 4 AS ruleSatisfied
"At least 1 event for picking up an empty container must happen, but no more than 3 are allowed.","Activity: [""Pick Up Empty Container""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Pick Up Empty Container'}) RETURN COUNT(e) >= 1 AND COUNT(e) <= 3 AS ruleSatisfied
Goods collection must be recorded between 3 and 7 times.,"Activity: [""Collect Goods""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Collect Goods'}) RETURN COUNT(e) >= 3 AND COUNT(e) <= 7 AS ruleSatisfied
The rescheduling of containers should not occur more than 4 times.,"Activity: [""Reschedule Container""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Reschedule Container'}) RETURN COUNT(e) <= 4 AS ruleSatisfied
"A Customer Order must have at least 1 and at most 3 ""Register Customer Order"" events.","Activity: [""Register Customer Order""], EntityType: [""Customer Order""], Actor: []","MATCH (ent:Entity {EntityType: 'Customer Order'}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event {Activity: 'Register Customer Order'}) WITH ent, COUNT(event) AS orderCount WHERE orderCount < 1 OR orderCount > 3 WITH COUNT(ent) AS violatingEntities RETURN CASE WHEN violatingEntities > 0 THEN FALSE ELSE TRUE END AS ruleSatisfied"
"For every Transport Document, there must be at least 2 and no more than 5 ""Create Transport Document"" events logged.","Activity: [""Create Transport Document""], EntityType: [""Transport Document""], Actor: []","MATCH (ent:Entity {EntityType: 'Transport Document'}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event {Activity: 'Create Transport Document'}) WITH ent, COUNT(event) AS transportCount WHERE transportCount < 2 OR transportCount > 5 WITH COUNT(ent) AS violatingEntities RETURN CASE WHEN violatingEntities > 0 THEN FALSE ELSE TRUE END AS ruleSatisfied"
"A Container must always have between 1 and 4 ""Order Empty Containers"" events.","Activity: [""Order Empty Containers""], EntityType: [""Container""], Actor: []","MATCH (ent:Entity {EntityType: 'Container'}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event {Activity: 'Order Empty Containers'}) WITH ent, COUNT(event) AS orderEmptyCount WHERE orderEmptyCount < 1 OR orderEmptyCount > 4 WITH COUNT(ent) AS violatingEntities RETURN CASE WHEN violatingEntities > 0 THEN FALSE ELSE TRUE END AS ruleSatisfied"
"No Truck should have more than 2 ""Pick Up Empty Container"" events logged.","Activity: [""Pick Up Empty Container""], EntityType: [""Truck""], Actor: []","MATCH (ent:Entity {EntityType: 'Truck'}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event {Activity: 'Pick Up Empty Container'}) WITH ent, COUNT(event) AS pickupCount WHERE pickupCount > 2 WITH COUNT(ent) AS violatingEntities RETURN CASE WHEN violatingEntities > 0 THEN FALSE ELSE TRUE END AS ruleSatisfied"
"Every Handling Unit must have exactly 1 ""Collect Goods"" event logged.","Activity: [""Collect Goods""], EntityType: [""Handling Unit""], Actor: []","MATCH (ent:Entity {EntityType: 'Handling Unit'}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event {Activity: 'Collect Goods'}) WITH ent, COUNT(event) AS collectCount WHERE collectCount <> 1 WITH COUNT(ent) AS violatingEntities RETURN CASE WHEN violatingEntities > 0 THEN FALSE ELSE TRUE END AS ruleSatisfied"
"At least 2 ""Load Truck"" events must be logged for each Vehicle.","Activity: [""Load Truck""], EntityType: [""Vehicle""], Actor: []","MATCH (ent:Entity {EntityType: 'Vehicle'}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event {Activity: 'Load Truck'}) WITH ent, COUNT(event) AS loadCount WHERE loadCount < 2 WITH COUNT(ent) AS violatingEntities RETURN CASE WHEN violatingEntities > 0 THEN FALSE ELSE TRUE END AS ruleSatisfied"
"A Forklift must have no more than 1 ""Place in Stock"" event logged.","Activity: [""Place in Stock""], EntityType: [""Forklift""], Actor: []","MATCH (ent:Entity {EntityType: 'Forklift'}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event {Activity: 'Place in Stock'}) WITH ent, COUNT(event) AS stockCount WHERE stockCount > 1 WITH COUNT(ent) AS violatingEntities RETURN CASE WHEN violatingEntities > 0 THEN FALSE ELSE TRUE END AS ruleSatisfied"
Every Transport Document must have at least 1 event confirming that a transport document has been created.,"Activity: [""Create Transport Document""], EntityType: [""Transport Document""], Actor: []","MATCH (ent:Entity {EntityType: 'Transport Document'}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event {Activity: 'Create Transport Document'}) WITH ent, COUNT(event) AS transportCount WHERE transportCount < 1 WITH COUNT(ent) AS violatingEntities RETURN CASE WHEN violatingEntities > 0 THEN FALSE ELSE TRUE END AS ruleSatisfied"
"For every Truck, there should be at least 2 instances where a truck departs.","Activity: [""Depart""], EntityType: [""Truck""], Actor: []","MATCH (ent:Entity {EntityType: 'Truck'}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event {Activity: 'Depart'}) WITH ent, COUNT(event) AS departCount WHERE departCount < 2 WITH COUNT(ent) AS violatingEntities RETURN CASE WHEN violatingEntities > 0 THEN FALSE ELSE TRUE END AS ruleSatisfied"
"A ""Register Customer Order"" event and a ""Create Transport Document"" event cannot occur together for the same object.","Activity: [""Register Customer Order"", ""Create Transport Document""], EntityType: [], Actor: []",MATCH (e:Entity)<-[:CORR]-(event1:Event {Activity: 'Register Customer Order'}) MATCH (e)<-[:CORR]-(event2:Event {Activity: 'Create Transport Document'}) RETURN CASE WHEN COUNT(e) = 0 THEN true ELSE false END AS ruleSatisfied
A vehicle cannot be booked and an empty container ordered for the same entity.,"Activity: [""Book Vehicles"", ""Order Empty Containers""], EntityType: [], Actor: []",MATCH (e:Entity)<-[:CORR]-(event1:Event {Activity: 'Book Vehicles'}) MATCH (e)<-[:CORR]-(event2:Event {Activity: 'Order Empty Containers'}) RETURN CASE WHEN COUNT(e) = 0 THEN true ELSE false END AS ruleSatisfied
Picking up an empty container and loading a truck should not happen for the same entity.,"Activity: [""Pick Up Empty Container"", ""Load Truck""], EntityType: [], Actor: []",MATCH (e:Entity)<-[:CORR]-(event1:Event {Activity: 'Pick Up Empty Container'}) MATCH (e)<-[:CORR]-(event2:Event {Activity: 'Load Truck'}) RETURN CASE WHEN COUNT(e) = 0 THEN true ELSE false END AS ruleSatisfied
"A ""Drive to Terminal"" event and a ""Weigh"" event cannot occur for the same object.","Activity: [""Drive to Terminal"", ""Weigh""], EntityType: [], Actor: []",MATCH (e:Entity)<-[:CORR]-(event1:Event {Activity: 'Drive to Terminal'}) MATCH (e)<-[:CORR]-(event2:Event {Activity: 'Weigh'}) RETURN CASE WHEN COUNT(e) = 0 THEN true ELSE false END AS ruleSatisfied
"For the same entity, placing in stock and bringing to the loading bay cannot be recorded both.","Activity: [""Place in Stock"", ""Bring to Loading Bay""], EntityType: [], Actor: []",MATCH (e:Entity)<-[:CORR]-(event1:Event {Activity: 'Place in Stock'}) MATCH (e)<-[:CORR]-(event2:Event {Activity: 'Bring to Loading Bay'}) RETURN CASE WHEN COUNT(e) = 0 THEN true ELSE false END AS ruleSatisfied
"Activities ""Register Customer Order"" and ""Pick Up Empty Container"" are mutually exclusive for any entity.","Activity: [""Register Customer Order"", ""Pick Up Empty Container""], EntityType: [], Actor: []",MATCH (e:Entity)<-[:CORR]-(event1:Event {Activity: 'Register Customer Order'}) MATCH (e)<-[:CORR]-(event2:Event {Activity: 'Pick Up Empty Container'}) RETURN CASE WHEN COUNT(e) = 0 THEN true ELSE false END AS ruleSatisfied
"""Place in Stock"" and ""Bring to Loading Bay"" may not both occur for the same entity.","Activity: [""Place in Stock"", ""Bring to Loading Bay""], EntityType: [], Actor: []",MATCH (e:Entity)<-[:CORR]-(event1:Event {Activity: 'Place in Stock'}) MATCH (e)<-[:CORR]-(event2:Event {Activity: 'Bring to Loading Bay'}) RETURN CASE WHEN COUNT(e) = 0 THEN true ELSE false END AS ruleSatisfied
It is prohibited for an entity to record both a transport document creation and a departure.,"Activity: [""Create Transport Document"", ""Depart""], EntityType: [], Actor: []",MATCH (e:Entity)<-[:CORR]-(event1:Event {Activity: 'Create Transport Document'}) MATCH (e)<-[:CORR]-(event2:Event {Activity: 'Depart'}) RETURN CASE WHEN COUNT(e) = 0 THEN true ELSE false END AS ruleSatisfied
"An entity cannot have both ""Book Vehicles"" and ""Reschedule Container"" events.","Activity: [""Book Vehicles"", ""Reschedule Container""], EntityType: [], Actor: []",MATCH (e:Entity)<-[:CORR]-(event1:Event {Activity: 'Book Vehicles'}) MATCH (e)<-[:CORR]-(event2:Event {Activity: 'Reschedule Container'}) RETURN CASE WHEN COUNT(e) = 0 THEN true ELSE false END AS ruleSatisfied
Weighing and recording the transport document for the same object is not allowed.,"Activity: [""Weigh"", ""Create Transport Document""], EntityType: [], Actor: []",MATCH (e:Entity)<-[:CORR]-(event1:Event {Activity: 'Weigh'}) MATCH (e)<-[:CORR]-(event2:Event {Activity: 'Create Transport Document'}) RETURN CASE WHEN COUNT(e) = 0 THEN true ELSE false END AS ruleSatisfied
"If a customer order is registered, a transport document must also be created.","Activity: [""Register Customer Order"", ""Create Transport Document""], EntityType: [""Customer Order""], Actor: []",MATCH (e1:Event {Activity: 'Register Customer Order'})-[:CORR]->(ent:Entity {EntityType: 'Customer Order'}) WHERE NOT EXISTS { MATCH (e2:Event {Activity: 'Create Transport Document'})-[:CORR]->(ent) } RETURN COUNT(e1) = 0 AS ruleSatisfied
"If a transport document is created, then vehicles must also be booked for it.","Activity: [""Create Transport Document"", ""Book Vehicles""], EntityType: [""Transport Document""], Actor: []",MATCH (e1:Event {Activity: 'Create Transport Document'})-[:CORR]->(ent:Entity {EntityType: 'Transport Document'}) WHERE NOT EXISTS { MATCH (e2:Event {Activity: 'Book Vehicles'})-[:CORR]->(ent) } RETURN COUNT(e1) = 0 AS ruleSatisfied
"When empty containers are ordered for a transport document, they must also be picked up.","Activity: [""Order Empty Containers"", ""Pick Up Empty Container""], EntityType: [""Transport Document""], Actor: []",MATCH (e1:Event {Activity: 'Order Empty Containers'})-[:CORR]->(ent:Entity {EntityType: 'Transport Document'}) WHERE NOT EXISTS { MATCH (e2:Event {Activity: 'Pick Up Empty Container'})-[:CORR]->(ent) } RETURN COUNT(e1) = 0 AS ruleSatisfied
"If a truck is loaded, it must also be driven to the terminal.","Activity: [""Load Truck"", ""Drive to Terminal""], EntityType: [""Truck""], Actor: []",MATCH (e1:Event {Activity: 'Load Truck'})-[:CORR]->(ent:Entity {EntityType: 'Truck'}) WHERE NOT EXISTS { MATCH (e2:Event {Activity: 'Drive to Terminal'})-[:CORR]->(ent) } RETURN COUNT(e1) = 0 AS ruleSatisfied
"If a customer order is registered, a transport document must also be created.","Activity: [""Register Customer Order"", ""Create Transport Document""], EntityType: [""Customer Order""], Actor: []",MATCH (e1:Event {Activity: 'Register Customer Order'})-[:CORR]->(ent:Entity {EntityType: 'Customer Order'}) WHERE NOT EXISTS { MATCH (e2:Event {Activity: 'Create Transport Document'})-[:CORR]->(ent) } RETURN COUNT(e1) = 0 AS ruleSatisfied
"If a ""Book Vehicles"" is created for a ""Vehicle"", then a ""Weigh"" must be recorded.","Activity: [""Book Vehicles"", ""Weigh""], EntityType: [""Vehicle""], Actor: []",MATCH (e1:Event {Activity: 'Book Vehicles'})-[:CORR]->(ent:Entity {EntityType: 'Vehicle'}) WHERE NOT EXISTS { MATCH (e2:Event {Activity: 'Weigh'})-[:CORR]->(ent) } RETURN COUNT(e1) = 0 AS ruleSatisfied
"Every time a ""Pick Up Empty Container"" occurs for a ""Container"", a ""Place in Stock"" must also be recorded.","Activity: [""Pick Up Empty Container"", ""Place in Stock""], EntityType: [""Container""], Actor: []",MATCH (e1:Event {Activity: 'Pick Up Empty Container'})-[:CORR]->(ent:Entity {EntityType: 'Container'}) WHERE NOT EXISTS { MATCH (e2:Event {Activity: 'Place in Stock'})-[:CORR]->(ent) } RETURN COUNT(e1) = 0 AS ruleSatisfied
"If a ""Bring to Loading Bay"" is performed for a ""Forklift"", a ""Load to Vehicle"" event must also occur.","Activity: [""Bring to Loading Bay"", ""Load to Vehicle""], EntityType: [""Forklift""], Actor: []",MATCH (e1:Event {Activity: 'Bring to Loading Bay'})-[:CORR]->(ent:Entity {EntityType: 'Forklift'}) WHERE NOT EXISTS { MATCH (e2:Event {Activity: 'Load to Vehicle'})-[:CORR]->(ent) } RETURN COUNT(e1) = 0 AS ruleSatisfied
"For every ""Vehicle"", if the ""Depart"" event occurs, a corresponding ""Reschedule Container"" must be recorded.","Activity: [""Depart"", ""Reschedule Container""], EntityType: [""Vehicle""], Actor: []",MATCH (e1:Event {Activity: 'Depart'})-[:CORR]->(ent:Entity {EntityType: 'Vehicle'}) WHERE NOT EXISTS { MATCH (e2:Event {Activity: 'Reschedule Container'})-[:CORR]->(ent) } RETURN COUNT(e1) = 0 AS ruleSatisfied
"At least 3 activities from the set {Register Customer Order, Create Transport Document, Book Vehicles, Order Empty Containers} must be performed for each Transport Document.","Activity: [""Register Customer Order"", ""Create Transport Document"", ""Book Vehicles"", ""Order Empty Containers""], EntityType: [""Transport Document""], Actor: []","MATCH (ent:Entity {EntityType: ""Transport Document""}) OPTIONAL MATCH (ent)<-[:CORR]-(ev:Event) WITH ent, COLLECT(DISTINCT ev.Activity) AS activities, ['Register Customer Order', 'Create Transport Document', 'Book Vehicles', 'Order Empty Containers'] AS requiredActivities WITH activities, requiredActivities, SIZE([activity IN requiredActivities WHERE activity IN activities]) AS countRequired WITH COLLECT(countRequired) AS counts RETURN CASE WHEN ANY(count IN counts WHERE count < 3) THEN false ELSE true END AS ruleSatisfied"
"Every Customer Order must have at least 2 activities from the set {Pick Up Empty Container, Collect Goods}.","Activity: [""Pick Up Empty Container"", ""Collect Goods""], EntityType: [""Customer Order""], Actor: []","MATCH (ent:Entity {EntityType: ""Customer Order""}) OPTIONAL MATCH (ent)<-[:CORR]-(ev:Event) WITH ent, COLLECT(DISTINCT ev.Activity) AS activities, ['Pick Up Empty Container', 'Collect Goods'] AS requiredActivities WITH activities, requiredActivities, SIZE([activity IN requiredActivities WHERE activity IN activities]) AS countRequired WITH COLLECT(countRequired) AS counts RETURN CASE WHEN ANY(count IN counts WHERE count < 2) THEN false ELSE true END AS ruleSatisfied"
"For each Customer Order, at least one activity from the set {Load Truck, Drive to Terminal} must be performed.","Activity: [""Load Truck"", ""Drive to Terminal""], EntityType: [""Customer Order""], Actor: []","MATCH (ent:Entity {EntityType: ""Customer Order""}) OPTIONAL MATCH (ent)<-[:CORR]-(ev:Event) WITH ent, COLLECT(DISTINCT ev.Activity) AS activities, ['Load Truck', 'Drive to Terminal'] AS requiredActivities WITH activities, requiredActivities, SIZE([activity IN requiredActivities WHERE activity IN activities]) AS countRequired WITH COLLECT(countRequired) AS counts RETURN CASE WHEN ANY(count IN counts WHERE count < 1) THEN false ELSE true END AS ruleSatisfied"
"A Transport Document must have performed at least 2 actions from {Weigh, Place in Stock}.","Activity: [""Weigh"", ""Place in Stock""], EntityType: [""Transport Document""], Actor: []","MATCH (ent:Entity {EntityType: ""Transport Document""}) OPTIONAL MATCH (ent)<-[:CORR]-(ev:Event) WITH ent, COLLECT(DISTINCT ev.Activity) AS activities, ['Weigh', 'Place in Stock'] AS requiredActivities WITH activities, requiredActivities, SIZE([activity IN requiredActivities WHERE activity IN activities]) AS countRequired WITH COLLECT(countRequired) AS counts RETURN CASE WHEN ANY(count IN counts WHERE count < 2) THEN false ELSE true END AS ruleSatisfied"
"Every Transport Document must have been linked to at least 1 of ""Create Transport Document"" or ""Load Truck"".","Activity: [""Create Transport Document"", ""Load Truck""], EntityType: [""Transport Document""], Actor: []","MATCH (ent:Entity {EntityType: ""Transport Document""}) OPTIONAL MATCH (ent)<-[:CORR]-(ev:Event) WITH ent, COLLECT(DISTINCT ev.Activity) AS activities, ['Create Transport Document', 'Load Truck'] AS requiredActivities WITH activities, requiredActivities, SIZE([activity IN requiredActivities WHERE activity IN activities]) AS countRequired WITH COLLECT(countRequired) AS counts RETURN CASE WHEN ANY(count IN counts WHERE count < 1) THEN false ELSE true END AS ruleSatisfied"
"For each Transport Document, at least 2 activities from the set {Bring to Loading Bay, Load to Vehicle} must be performed.","Activity: [""Bring to Loading Bay"", ""Load to Vehicle""], EntityType: [""Transport Document""], Actor: []","MATCH (ent:Entity {EntityType: ""Transport Document""}) OPTIONAL MATCH (ent)<-[:CORR]-(ev:Event) WITH ent, COLLECT(DISTINCT ev.Activity) AS activities, ['Bring to Loading Bay', 'Load to Vehicle'] AS requiredActivities WITH activities, requiredActivities, SIZE([activity IN requiredActivities WHERE activity IN activities]) AS countRequired WITH COLLECT(countRequired) AS counts RETURN CASE WHEN ANY(count IN counts WHERE count < 2) THEN false ELSE true END AS ruleSatisfied"
"For each Customer Order, at least one action from the set {Load Truck, Reschedule Container} must be completed.","Activity: [""Load Truck"", ""Reschedule Container""], EntityType: [""Customer Order""], Actor: []","MATCH (ent:Entity {EntityType: ""Customer Order""}) OPTIONAL MATCH (ent)<-[:CORR]-(ev:Event) WITH ent, COLLECT(DISTINCT ev.Activity) AS activities, ['Load Truck', 'Reschedule Container'] AS requiredActivities WITH activities, requiredActivities, SIZE([activity IN requiredActivities WHERE activity IN activities]) AS countRequired WITH COLLECT(countRequired) AS counts RETURN CASE WHEN ANY(count IN counts WHERE count < 1) THEN false ELSE true END AS ruleSatisfied"
"For every Customer Order, at least 4 actions from Register Customer Order, Load Truck, Depart, Pick Up Empty Container must be performed.","Activity: [""Register Customer Order"", ""Load Truck"", ""Depart"", ""Pick Up Empty Container""], EntityType: [""Customer Order""], Actor: []","MATCH (ent:Entity {EntityType: ""Customer Order""}) OPTIONAL MATCH (ent)<-[:CORR]-(ev:Event) WITH ent, COLLECT(DISTINCT ev.Activity) AS activities, ['Register Customer Order', 'Load Truck', 'Depart', 'Pick Up Empty Container'] AS requiredActivities WITH activities, requiredActivities, SIZE([activity IN requiredActivities WHERE activity IN activities]) AS countRequired WITH COLLECT(countRequired) AS counts RETURN CASE WHEN ANY(count IN counts WHERE count < 4) THEN false ELSE true END AS ruleSatisfied"
The maximum processing time for a Customer Order is less than 48 hours.,"Activity: [], EntityType: [""Customer Order""], Actor: []","MATCH (ent:Entity {EntityType: ""Customer Order""})<-[:CORR]-(e:Event) WITH ent, MIN(e.timestamp) as earliestEvent, MAX(e.timestamp) as latestEvent WITH duration.between(earliestEvent, latestEvent) AS processingTime RETURN MAX(processingTime.seconds) < (48 * 60 * 60) AS ruleSatisfied"
The average duration between the first and last event for Transport Documents is more than 3 days.,"Activity: [], EntityType: [""Transport Document""], Actor: []","MATCH (ent:Entity {EntityType: ""Transport Document""})<-[:CORR]-(e:Event) WITH ent, MIN(e.timestamp) as earliestEvent, MAX(e.timestamp) as latestEvent WITH duration.between(earliestEvent, latestEvent) AS eventDuration RETURN AVG(eventDuration.seconds) > (3 * 24 * 60 * 60) AS ruleSatisfied"
A Container entity is processed for at least 12 hours on average.,"Activity: [], EntityType: [""Container""], Actor: []","MATCH (ent:Entity {EntityType: ""Container""})<-[:CORR]-(e:Event) WITH ent, MIN(e.timestamp) as earliestEvent, MAX(e.timestamp) as latestEvent WITH duration.between(earliestEvent, latestEvent) AS processingTime RETURN AVG(processingTime.seconds) >= (12 * 60 * 60) AS ruleSatisfied"
The processing time for Trucks should never exceed 2 hours.,"Activity: [], EntityType: [""Truck""], Actor: []","MATCH (ent:Entity {EntityType: ""Truck""})<-[:CORR]-(e:Event) WITH ent, MIN(e.timestamp) as earliestEvent, MAX(e.timestamp) as latestEvent WITH duration.between(earliestEvent, latestEvent) AS processingTime RETURN MAX(processingTime.seconds) < (2 * 60 * 60) AS ruleSatisfied"
The average processing duration for a Handling Unit is greater than 24 hours.,"Activity: [], EntityType: [""Handling Unit""], Actor: []","MATCH (ent:Entity {EntityType: ""Handling Unit""})<-[:CORR]-(e:Event) WITH ent, MIN(e.timestamp) as earliestEvent, MAX(e.timestamp) as latestEvent WITH duration.between(earliestEvent, latestEvent) AS processingTime RETURN AVG(processingTime.seconds) > (24 * 60 * 60) AS ruleSatisfied"
A Forklift should be processed within a maximum of 72 hours.,"Activity: [], EntityType: [""Forklift""], Actor: []","MATCH (ent:Entity {EntityType: ""Forklift""})<-[:CORR]-(e:Event) WITH ent, MIN(e.timestamp) as earliestEvent, MAX(e.timestamp) as latestEvent WITH duration.between(earliestEvent, latestEvent) AS processingTime RETURN MAX(processingTime.seconds) <= (72 * 60 * 60) AS ruleSatisfied"
A Vehicle should be handled for no more than 2 days.,"Activity: [], EntityType: [""Vehicle""], Actor: []","MATCH (ent:Entity {EntityType: ""Vehicle""})<-[:CORR]-(e:Event) WITH ent, MIN(e.timestamp) as earliestEvent, MAX(e.timestamp) as latestEvent WITH duration.between(earliestEvent, latestEvent) AS processingTime RETURN MAX(processingTime.seconds) <= (2 * 24 * 60 * 60) AS ruleSatisfied"
The time it takes to process Containers is less than 3 days on average.,"Activity: [], EntityType: [""Container""], Actor: []","MATCH (ent:Entity {EntityType: ""Container""})<-[:CORR]-(e:Event) WITH ent, MIN(e.timestamp) as earliestEvent, MAX(e.timestamp) as latestEvent WITH duration.between(earliestEvent, latestEvent) AS processingTime RETURN AVG(processingTime.seconds) < (3 * 24 * 60 * 60) AS ruleSatisfied"
Trucks must not exist for more than 5 days.,"Activity: [], EntityType: [""Truck""], Actor: []","MATCH (ent:Entity {EntityType: ""Truck""})<-[:CORR]-(e:Event) WITH ent, MIN(e.timestamp) as earliestEvent, MAX(e.timestamp) as latestEvent WITH duration.between(earliestEvent, latestEvent) AS processingTime RETURN MAX(processingTime.seconds) <= (5 * 24 * 60 * 60) AS ruleSatisfied"
A Handling Unit can never exist for more than 7 days.,"Activity: [], EntityType: [""Handling Unit""], Actor: []","MATCH (ent:Entity {EntityType: ""Handling Unit""})<-[:CORR]-(e:Event) WITH ent, MIN(e.timestamp) as earliestEvent, MAX(e.timestamp) as latestEvent WITH duration.between(earliestEvent, latestEvent) AS processingTime RETURN MAX(processingTime.seconds) <= (7 * 24 * 60 * 60) AS ruleSatisfied"
A customer order must be registered first; only then can a transport document be created.,"Activity: [""Register Customer Order"", ""Create Transport Document""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Create Transport Document""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Register Customer Order""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e2, count(e1) AS precedingOrderCount RETURN CASE WHEN any(e IN collect(precedingOrderCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Before vehicles can be booked, a transport document must already exist.","Activity: [""Create Transport Document"", ""Book Vehicles""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Book Vehicles""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Create Transport Document""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e2, count(e1) AS precedingDocumentCount RETURN CASE WHEN any(e IN collect(precedingDocumentCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
Vehicles cannot be booked unless an empty container has been ordered beforehand.,"Activity: [""Book Vehicles"", ""Order Empty Containers""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Order Empty Containers""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Book Vehicles""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e2, count(e1) AS precedingBookingCount RETURN CASE WHEN any(e IN collect(precedingBookingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
An empty container must be ordered first; ony then picking is possible.,"Activity: [""Order Empty Containers"", ""Pick Up Empty Container""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Pick Up Empty Container""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Order Empty Containers""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e2, count(e1) AS precedingOrderCount RETURN CASE WHEN any(e IN collect(precedingOrderCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
Goods need to be collected before they can be loaded onto a truck.,"Activity: [""Collect Goods"", ""Load Truck""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Load Truck""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Collect Goods""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e2, count(e1) AS precedingCollectionCount RETURN CASE WHEN any(e IN collect(precedingCollectionCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
Loading a truck is required before it can proceed to the terminal.,"Activity: [""Load Truck"", ""Drive to Terminal""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Drive to Terminal""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Load Truck""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e2, count(e1) AS precedingLoadCount RETURN CASE WHEN any(e IN collect(precedingLoadCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
A truck can only be weighed after it arrives at the terminal.,"Activity: [""Drive to Terminal"", ""Weigh""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Weigh""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Drive to Terminal""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e2, count(e1) AS precedingDriveCount RETURN CASE WHEN any(e IN collect(precedingDriveCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Before goods can be placed in stock, they must first be weighed.","Activity: [""Weigh"", ""Place in Stock""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Place in Stock""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Weigh""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e2, count(e1) AS precedingWeighCount RETURN CASE WHEN any(e IN collect(precedingWeighCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Once goods are placed in stock, they can then be moved to the loading bay.","Activity: [""Place in Stock"", ""Bring to Loading Bay""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Bring to Loading Bay""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Place in Stock""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e2, count(e1) AS precedingStockCount RETURN CASE WHEN any(e IN collect(precedingStockCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
Goods must first reach the loading bay before they can be loaded onto a vehicle.,"Activity: [""Bring to Loading Bay"", ""Load to Vehicle""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Load to Vehicle""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Bring to Loading Bay""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e2, count(e1) AS precedingLoadingBayCount RETURN CASE WHEN any(e IN collect(precedingLoadingBayCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
Goods cannot be transported until they are loaded onto a vehicle.,"Activity: [""Load to Vehicle"", ""Depart""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Depart""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Load to Vehicle""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e2, count(e1) AS precedingLoadCount RETURN CASE WHEN any(e IN collect(precedingLoadCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
A container can only be rescheduled after departure has taken place.,"Activity: [""Depart"", ""Reschedule Container""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Reschedule Container""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Depart""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e2, count(e1) AS precedingDepartCount RETURN CASE WHEN any(e IN collect(precedingDepartCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After registering a customer order, a transport document must be created.","Activity: [""Register Customer Order"", ""Create Transport Document""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Register Customer Order""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Create Transport Document""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Whenever empty containers are ordered, they must be picked up afterward.","Activity: [""Order Empty Containers"", ""Pick Up Empty Container""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Order Empty Containers""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Pick Up Empty Container""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If a transport document is created, vehicles should be booked afterward.","Activity: [""Create Transport Document"", ""Book Vehicles""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Transport Document""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Book Vehicles""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
The collection of goods must happen if an empty container has been picked up before.,"Activity: [""Collect Goods"", ""Pick Up Empty Container""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Pick Up Empty Container""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Collect Goods""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If a truck is loaded, it should be driven to the terminal afterward.","Activity: [""Load Truck"", ""Drive to Terminal""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Load Truck""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Drive to Terminal""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After registering a customer order, the vehicle must be weighed.","Activity: [""Register Customer Order"", ""Weigh""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Register Customer Order""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Weigh""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After a transport document is created, the customer order should be reviewed.","Activity: [""Create Transport Document"", ""Register Customer Order""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Transport Document""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Register Customer Order""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If ""Order Empty Containers"" occurs, the ""Pick Up Empty Container"" must follow.","Activity: [""Order Empty Containers"", ""Pick Up Empty Container""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Order Empty Containers""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Pick Up Empty Container""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After ""Weigh,"" the ""Place in Stock"" must occur.","Activity: [""Weigh"", ""Place in Stock""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Weigh""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Place in Stock""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"When a ""Load Truck"" occurs, it must be followed by a ""Depart.""","Activity: [""Load Truck"", ""Depart""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Load Truck""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Depart""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Once ""Collect Goods"" is performed, the ""Bring to Loading Bay"" must follow.","Activity: [""Collect Goods"", ""Bring to Loading Bay""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Collect Goods""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Bring to Loading Bay""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After registering a customer order, a transport document must be created within 5 days.","Activity: [""Register Customer Order"", ""Create Transport Document""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Register Customer Order""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Create Transport Document""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e2.timestamp <= e1.timestamp + duration({days: 5}) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If an empty container is ordered, it must be picked up within 7 days.","Activity: [""Order Empty Containers"", ""Pick Up Empty Container""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Order Empty Containers""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Pick Up Empty Container""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e2.timestamp <= e1.timestamp + duration({days: 7}) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"When a transport document is created, vehicles must be booked within 10 days.","Activity: [""Create Transport Document"", ""Book Vehicles""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Transport Document""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Book Vehicles""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e2.timestamp <= e1.timestamp + duration({days: 10}) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If goods are collected, they must be loaded onto the truck within 30 days.","Activity: [""Collect Goods"", ""Load Truck""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Collect Goods""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Load Truck""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e2.timestamp <= e1.timestamp + duration({days: 30}) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Once a transport document is deleted, the vehicle booking must be canceled within 14 days.","Activity: [""Create Transport Document"", ""Book Vehicles""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Transport Document""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Book Vehicles""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e2.timestamp <= e1.timestamp + duration({days: 14}) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After registering a customer order, an order confirmation must be received within 7 days.","Activity: [""Register Customer Order"", ""Book Vehicles""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Register Customer Order""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Book Vehicles""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e2.timestamp <= e1.timestamp + duration({days: 7}) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If the truck is weighed, it must be placed in stock within 15 days.","Activity: [""Weigh"", ""Place in Stock""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Weigh""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Place in Stock""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e2.timestamp <= e1.timestamp + duration({days: 15}) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After a ""Book Vehicles"" event, a ""Load Truck"" event must be recorded within 14 days.","Activity: [""Book Vehicles"", ""Load Truck""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Book Vehicles""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Load Truck""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e2.timestamp <= e1.timestamp + duration({days: 14}) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If the ""Load Truck"" event occurs, the ""Depart"" event must be recorded within 10 days.","Activity: [""Load Truck"", ""Depart""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Load Truck""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Depart""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e2.timestamp <= e1.timestamp + duration({days: 10}) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After a ""Reschedule Container"" event, the ""Depart"" event must occur within 5 days.","Activity: [""Reschedule Container"", ""Depart""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Reschedule Container""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Depart""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e2.timestamp <= e1.timestamp + duration({days: 5}) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If ""Register Customer Order"" occurs, ""Create Transport Document"" must be created within 5 days.","Activity: [""Register Customer Order"", ""Create Transport Document""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Register Customer Order""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Create Transport Document""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e2.timestamp <= e1.timestamp + duration({days: 5}) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If a customer order is registered, it must lead to either the creation of a transport document or the rescheduling of the container.","Activity: [""Register Customer Order"", ""Create Transport Document"", ""Reschedule Container""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Register Customer Order""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Create Transport Document""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Reschedule Container""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After a transport document is created, it must either be followed by booking vehicles or ordering empty containers.","Activity: [""Create Transport Document"", ""Book Vehicles"", ""Order Empty Containers""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Transport Document""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Book Vehicles""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Order Empty Containers""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If a transport document is created, then it must be followed by either picking up an empty container or collecting goods.","Activity: [""Create Transport Document"", ""Pick Up Empty Container"", ""Collect Goods""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Transport Document""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Pick Up Empty Container""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Collect Goods""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If goods are collected, then they must either be loaded onto a truck or placed in stock.","Activity: [""Collect Goods"", ""Load Truck"", ""Place in Stock""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Collect Goods""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Load Truck""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Place in Stock""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Following the loading of a truck, it must either be driven to a terminal or weighed.","Activity: [""Load Truck"", ""Drive to Terminal"", ""Weigh""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Load Truck""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Drive to Terminal""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Weigh""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"When a truck is driven to a terminal, it must be weighed or placed in stock.","Activity: [""Drive to Terminal"", ""Weigh"", ""Place in Stock""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Drive to Terminal""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Weigh""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Place in Stock""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If goods are placed in stock, then they must be brought to the loading bay or loaded onto a vehicle.","Activity: [""Place in Stock"", ""Bring to Loading Bay"", ""Load to Vehicle""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Place in Stock""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Bring to Loading Bay""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Load to Vehicle""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If a transport document is created, then either a vehicle must be booked or an empty container must be ordered.","Activity: [""Create Transport Document"", ""Book Vehicles"", ""Order Empty Containers""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Transport Document""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Book Vehicles""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Order Empty Containers""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After loading a vehicle, either it must depart or a rescheduling of the container must occur.","Activity: [""Load to Vehicle"", ""Depart"", ""Reschedule Container""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Load to Vehicle""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Depart""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Reschedule Container""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"A ""Create Transport Document"" activity must always be preceded by a ""Register Customer Order"" for the same entity.","Activity: [""Create Transport Document"", ""Register Customer Order""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Create Transport Document""}) OPTIONAL MATCH (e1:Event {Activity: ""Register Customer Order""})-[:DF]->(e2) WITH e2, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Every time a ""Weigh"" is processed, it must be immediately preceded by a ""Drive to Terminal"" for the same object.","Activity: [""Weigh"", ""Drive to Terminal""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Weigh""}) OPTIONAL MATCH (e1:Event {Activity: ""Drive to Terminal""})-[:DF]->(e2) WITH e2, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Before a ""Depart"" event can happen, the ""Load to Vehicle"" event must have been completed immediately before.","Activity: [""Depart"", ""Load to Vehicle""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Depart""}) OPTIONAL MATCH (e1:Event {Activity: ""Load to Vehicle""})-[:DF]->(e2) WITH e2, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Whenever a ""Reschedule Container"" event is logged, it must be immediately preceded by a ""Bring to Loading Bay"" activity for the same object.","Activity: [""Reschedule Container"", ""Bring to Loading Bay""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Reschedule Container""}) OPTIONAL MATCH (e1:Event {Activity: ""Bring to Loading Bay""})-[:DF]->(e2) WITH e2, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"A ""Pick Up Empty Container"" event must not occur unless a corresponding ""Order Empty Containers"" event has occurred directly before.","Activity: [""Pick Up Empty Container"", ""Order Empty Containers""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Pick Up Empty Container""}) OPTIONAL MATCH (e1:Event {Activity: ""Order Empty Containers""})-[:DF]->(e2) WITH e2, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
A customer order must be registered directly before the corresponding transport document can be created.,"Activity: [""Create Transport Document"", ""Register Customer Order""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Create Transport Document""}) OPTIONAL MATCH (e1:Event {Activity: ""Register Customer Order""})-[:DF]->(e2) WITH e2, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
The creation of a transport document must always occur directly before any related vehicle booking activity.,"Activity: [""Book Vehicles"", ""Create Transport Document""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Book Vehicles""}) OPTIONAL MATCH (e1:Event {Activity: ""Create Transport Document""})-[:DF]->(e2) WITH e2, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Before an empty container can be picked up, it must have been ordered immediately before.","Activity: [""Pick Up Empty Container"", ""Order Empty Containers""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Pick Up Empty Container""}) OPTIONAL MATCH (e1:Event {Activity: ""Order Empty Containers""})-[:DF]->(e2) WITH e2, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
A customer order must always be registered immediately before a transport document can be created.,"Activity: [""Create Transport Document"", ""Register Customer Order""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Create Transport Document""}) OPTIONAL MATCH (e1:Event {Activity: ""Register Customer Order""})-[:DF]->(e2) WITH e2, count(e1) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If a ""Register Customer Order"" event occurs, a ""Create Transport Document"" event must not have happened before it for the same object.","Activity: [""Register Customer Order"", ""Create Transport Document""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Register Customer Order""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Create Transport Document""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"An ""Order Empty Containers"" event cannot be recorded before the ""Create Transport Document"" event for the same object.","Activity: [""Order Empty Containers"", ""Create Transport Document""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Create Transport Document""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Order Empty Containers""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"A ""Load Truck"" event cannot occur before the ""Place in Stock"" event for the same entity.","Activity: [""Load Truck"", ""Place in Stock""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Place in Stock""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Load Truck""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"A ""Drive to Terminal"" event must not happen before the ""Load Truck"" event is recorded.","Activity: [""Drive to Terminal"", ""Load Truck""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Load Truck""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Drive to Terminal""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"The ""Weigh"" event cannot happen before the ""Collect Goods"" event.","Activity: [""Weigh"", ""Collect Goods""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Collect Goods""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Weigh""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"A ""Place in Stock"" event cannot occur before the ""Pick Up Empty Container"" event for the same entity.","Activity: [""Place in Stock"", ""Pick Up Empty Container""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Pick Up Empty Container""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Place in Stock""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"A ""Reschedule Container"" event cannot occur before the ""Order Empty Containers"" event.","Activity: [""Reschedule Container"", ""Order Empty Containers""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Order Empty Containers""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Reschedule Container""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"A ""Load to Vehicle"" event cannot happen before the ""Load Truck"" event is recorded.","Activity: [""Load to Vehicle"", ""Load Truck""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Load Truck""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Load to Vehicle""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"The ""Bring to Loading Bay"" event cannot occur before the ""Place in Stock"" event for the same entity.","Activity: [""Bring to Loading Bay"", ""Place in Stock""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Place in Stock""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Bring to Loading Bay""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"The ""Collect Goods"" event must not happen before the ""Book Vehicles"" event for the same entity.","Activity: [""Collect Goods"", ""Book Vehicles""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Book Vehicles""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Collect Goods""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
A transport document cannot be created within 48 hours before a customer order is registered.,"Activity: [""Create Transport Document"", ""Register Customer Order""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Register Customer Order""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Create Transport Document""})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({hours: 48}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
A truck cannot be booked within 3 days before a transport document is created.,"Activity: [""Book Vehicles"", ""Create Transport Document""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Create Transport Document""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Book Vehicles""})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({days: 3}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
A vehicle cannot be booked within 5 days before the truck departs.,"Activity: [""Book Vehicles"", ""Depart""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Depart""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Book Vehicles""})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({days: 5}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
No container order can be placed within 7 days after the transport document is created.,"Activity: [""Order Empty Containers"", ""Create Transport Document""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Create Transport Document""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Order Empty Containers""})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({days: 7}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
A payment block should not be removed within 48 hours before the vehicle departs.,"Activity: [""Remove Payment Block"", ""Depart""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Depart""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Remove Payment Block""})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({hours: 48}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
The quantity of containers must not change within 24 hours before the vehicle is loaded.,"Activity: [""Change Quantity"", ""Load to Vehicle""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Load to Vehicle""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Change Quantity""})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({hours: 24}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
The empty container cannot be picked up within 2 days before the transport document is created.,"Activity: [""Pick Up Empty Container"", ""Create Transport Document""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Create Transport Document""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Pick Up Empty Container""})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({days: 2}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"""Pick Up Empty Container"" cannot occur within 24 hours before ""Order Empty Containers"" is created.","Activity: [""Pick Up Empty Container"", ""Order Empty Containers""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Order Empty Containers""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Pick Up Empty Container""})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({hours: 24}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"""Place in Stock"" must not happen within 48 hours before a ""Load Truck"" activity.","Activity: [""Place in Stock"", ""Load Truck""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Load Truck""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Place in Stock""})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({hours: 48}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"""Bring to Loading Bay"" should not occur within 3 days before ""Weigh"" is done.","Activity: [""Bring to Loading Bay"", ""Weigh""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Weigh""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Bring to Loading Bay""})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({days: 3}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"""Collect Goods"" should not happen within 5 days before ""Weigh"" activity.","Activity: [""Collect Goods"", ""Weigh""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Weigh""})-[:CORR]->(entity:Entity) MATCH (e1:Event {Activity: ""Collect Goods""})-[:CORR]->(entity) WHERE e1.timestamp >= e2.timestamp - duration({days: 5}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"The time between the creation of a ""Register Customer Order"" and ""Create Transport Document"" must not exceed 5 days for the same entity.","Activity: [""Register Customer Order"", ""Create Transport Document""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Register Customer Order"" AND e2.Activity = ""Create Transport Document"" AND abs(duration.between(e1.timestamp, e2.timestamp).seconds) > (5*24*60*60) RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS rule_satisfied;"
"There must be at least 1 day between ""Pick Up Empty Container"" and ""Collect Goods"" for every entity.","Activity: [""Pick Up Empty Container"", ""Collect Goods""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Pick Up Empty Container"" AND e2.Activity = ""Collect Goods"" AND abs(duration.between(e1.timestamp, e2.timestamp).seconds) < (24*60*60) RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS rule_satisfied;"
"The execution of ""Load Truck"" must be separated by at least 2 days from ""Drive to Terminal"".","Activity: [""Load Truck"", ""Drive to Terminal""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Load Truck"" AND e2.Activity = ""Drive to Terminal"" AND abs(duration.between(e1.timestamp, e2.timestamp).seconds) < (2*24*60*60) RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS rule_satisfied;"
"The time period between ""Weigh"" and ""Place in Stock"" must be exactly 1 day.","Activity: [""Weigh"", ""Place in Stock""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Weigh"" AND e2.Activity = ""Place in Stock"" AND abs(duration.between(e1.timestamp, e2.timestamp).seconds) <> (246060) RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS rule_satisfied;"
"The gap between the creation of a ""Register Customer Order"" and the creation of a ""Create Transport Document"" must not exceed 5 days for any entity.","Activity: [""Register Customer Order"", ""Create Transport Document""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Register Customer Order"" AND e2.Activity = ""Create Transport Document"" AND abs(duration.between(e1.timestamp, e2.timestamp).seconds) > (5*24*60*60) RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS rule_satisfied;"
"For every entity, the time between ""Collect Goods"" and ""Load Truck"" must be less than 1 day.","Activity: [""Collect Goods"", ""Load Truck""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Collect Goods"" AND e2.Activity = ""Load Truck"" AND abs(duration.between(e1.timestamp, e2.timestamp).seconds) < (24*60*60) RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS rule_satisfied;"
"The time between ""Collect Goods"" and ""Weigh"" must be exactly 1 day for every entity.","Activity: [""Collect Goods"", ""Weigh""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Collect Goods"" AND e2.Activity = ""Weigh"" AND abs(duration.between(e1.timestamp, e2.timestamp).seconds) <> (24*60*60) RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS rule_satisfied;"
"The execution of the ""Place in Stock"" activity and the ""Weigh"" must be at least 1 day apart for each entity.","Activity: [""Place in Stock"", ""Weigh""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Place in Stock"" AND e2.Activity = ""Weigh"" AND abs(duration.between(e1.timestamp, e2.timestamp).seconds) > (24*60*60) RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS rule_satisfied;"
"Between ""Register Customer Order"" and ""Load Truck"", there must be at least 2 days.","Activity: [""Register Customer Order"", ""Load Truck""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Register Customer Order"" AND e2.Activity = ""Load Truck"" AND abs(duration.between(e1.timestamp, e2.timestamp).seconds) < (2*24*60*60) RETURN CASE WHEN COUNT(e1) > 0 THEN false ELSE true END AS rule_satisfied;"
"When a customer order is registered, it must be done before March 15th, 2024.","Activity: [""Register Customer Order""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Register Customer Order""}) WHERE date(e.timestamp) >= date(""2024-03-15"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"Any transport document must be created before July 1st, 2023, for proper processing.","Activity: [""Create Transport Document""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Create Transport Document""}) WHERE date(e.timestamp) >= date(""2023-07-01"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"If a vehicle is booked, it must be done before June 30th, 2024.","Activity: [""Book Vehicles""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Book Vehicles""}) WHERE date(e.timestamp) >= date(""2024-06-30"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"When an empty container is ordered, it must be done before March 1st, 2023.","Activity: [""Order Empty Containers""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Order Empty Containers""}) WHERE date(e.timestamp) >= date(""2023-03-01"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"Any pickup of an empty container must be completed before June 1st, 2023.","Activity: [""Pick Up Empty Container""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Pick Up Empty Container""}) WHERE date(e.timestamp) >= date(""2023-06-01"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"Every goods collection activity must be completed before March 15th, 2024.","Activity: [""Collect Goods""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Collect Goods""}) WHERE date(e.timestamp) >= date(""2024-03-15"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"Every load truck activity must occur before April 10th, 2023.","Activity: [""Load Truck""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Load Truck""}) WHERE date(e.timestamp) >= date(""2023-04-10"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"Each drive to terminal activity must be completed before February 28th, 2025.","Activity: [""Drive to Terminal""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Drive to Terminal""}) WHERE date(e.timestamp) >= date(""2025-02-28"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"Weigh activities must be completed before December 31st, 2022.","Activity: [""Weigh""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Weigh""}) WHERE date(e.timestamp) >= date(""2022-12-31"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"If a container is placed in stock, it must be done before October 15th, 2022.","Activity: [""Place in Stock""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Place in Stock""}) WHERE date(e.timestamp) >= date(""2022-10-15"") RETURN CASE WHEN count(e) > 0 THEN false ELSE true END AS rule_satisfied"
"A ""Register Customer Order"" event is directly followed by a ""Create Transport Document"" event no more than 2 times.","Activity: [""Register Customer Order"", ""Create Transport Document""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Register Customer Order""})-[:DF]->(e2:Event {Activity:""Create Transport Document""}) RETURN COUNT(DISTINCT e1)<=2 AS ruleSatisfied"
"A ""Book Vehicles"" event occurs immediately after an ""Order Empty Containers"" at most 2 times.","Activity: [""Book Vehicles"", ""Order Empty Containers""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Book Vehicles""})-[:DF]->(e2:Event {Activity:""Order Empty Containers""}) RETURN COUNT(DISTINCT e1)<=2 AS ruleSatisfied"
"The action of a ""Pick Up Empty Container"" event is directly followed by ""Collect Goods"" at least 5 times.","Activity: [""Pick Up Empty Container"", ""Collect Goods""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Pick Up Empty Container""})-[:DF]->(e2:Event {Activity:""Collect Goods""}) RETURN COUNT(DISTINCT e1)>=5 AS ruleSatisfied"
"""Load Truck"" is immediately followed by ""Drive to Terminal"" no more than once.","Activity: [""Load Truck"", ""Drive to Terminal""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Load Truck""})-[:DF]->(e2:Event {Activity:""Drive to Terminal""}) RETURN COUNT(DISTINCT e1)<=1 AS ruleSatisfied"
"There are at least 2 instances where ""Weigh"" is directly followed by ""Place in Stock"".","Activity: [""Weigh"", ""Place in Stock""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Weigh""})-[:DF]->(e2:Event {Activity:""Place in Stock""}) RETURN COUNT(DISTINCT e1)>=2 AS ruleSatisfied"
"""Bring to Loading Bay"" is directly followed by ""Load to Vehicle"" at least 3 times.","Activity: [""Bring to Loading Bay"", ""Load to Vehicle""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Bring to Loading Bay""})-[:DF]->(e2:Event {Activity:""Load to Vehicle""}) RETURN COUNT(DISTINCT e1)>=3 AS ruleSatisfied"
"""Depart"" is directly followed by ""Reschedule Container"" no more than 1 time.","Activity: [""Depart"", ""Reschedule Container""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Depart""})-[:DF]->(e2:Event {Activity:""Reschedule Container""}) RETURN COUNT(DISTINCT e1)<=1 AS ruleSatisfied"
"The action of a ""Load Truck"" event should be immediately followed by ""Drive to Terminal"" no more than twice.","Activity: [""Load Truck"", ""Drive to Terminal""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Load Truck""})-[:DF]->(e2:Event {Activity:""Drive to Terminal""}) RETURN COUNT(DISTINCT e1)<=2 AS ruleSatisfied"
"There should be at least 2 instances where ""Weigh"" is directly followed by ""Place in Stock"".","Activity: [""Weigh"", ""Place in Stock""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Weigh""})-[:DF]->(e2:Event {Activity:""Place in Stock""}) RETURN COUNT(DISTINCT e1)>=2 AS ruleSatisfied"
A customer order registration should be followed by the creation of a transport document no more than 2 times.,"Activity: [""Register Customer Order"", ""Create Transport Document""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Register Customer Order""})-[:CORR]->(entity)<-[:CORR]-(e2:Event {Activity: ""Create Transport Document""}) WHERE e2.timestamp > e1.timestamp RETURN CASE WHEN COUNT(e1) <= 2 THEN true ELSE false END AS ruleSatisfied"
There must be at least 2 instances where the registration of a customer order is followed by the booking of vehicles.,"Activity: [""Register Customer Order"", ""Book Vehicles""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Register Customer Order""})-[:CORR]->(entity)<-[:CORR]-(e2:Event {Activity: ""Book Vehicles""}) WHERE e2.timestamp > e1.timestamp RETURN CASE WHEN COUNT(e1) >= 2 THEN true ELSE false END AS ruleSatisfied"
A transport document creation should be followed by the collection of goods at least once.,"Activity: [""Create Transport Document"", ""Collect Goods""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Transport Document""})-[:CORR]->(entity)<-[:CORR]-(e2:Event {Activity: ""Collect Goods""}) WHERE e2.timestamp > e1.timestamp RETURN CASE WHEN COUNT(e1) >= 1 THEN true ELSE false END AS ruleSatisfied"
An order for empty containers must follow the registration of a customer order at least once.,"Activity: [""Register Customer Order"", ""Order Empty Containers""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Register Customer Order""})-[:CORR]->(entity)<-[:CORR]-(e2:Event {Activity: ""Order Empty Containers""}) WHERE e2.timestamp > e1.timestamp RETURN CASE WHEN COUNT(e1) >= 1 THEN true ELSE false END AS ruleSatisfied"
A customer order registration must be followed by a container pickup at least 2 times.,"Activity: [""Register Customer Order"", ""Pick Up Empty Container""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Register Customer Order""})-[:CORR]->(entity)<-[:CORR]-(e2:Event {Activity: ""Pick Up Empty Container""}) WHERE e2.timestamp > e1.timestamp RETURN CASE WHEN COUNT(e1) >= 2 THEN true ELSE false END AS ruleSatisfied"
There must be at least 2 instances where a customer order registration is eventually followed by the collection of goods.,"Activity: [""Register Customer Order"", ""Collect Goods""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Register Customer Order""})-[:CORR]->(entity)<-[:CORR]-(e2:Event {Activity: ""Collect Goods""}) WHERE e2.timestamp > e1.timestamp RETURN CASE WHEN COUNT(e1) >= 2 THEN true ELSE false END AS ruleSatisfied"
"The activity ""Register Customer Order"" must eventually be followed by ""Place in Stock"" no more than 3 times.","Activity: [""Register Customer Order"", ""Place in Stock""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Register Customer Order""})-[:CORR]->(entity)<-[:CORR]-(e2:Event {Activity: ""Place in Stock""}) WHERE e2.timestamp > e1.timestamp RETURN CASE WHEN COUNT(e1) <= 3 THEN true ELSE false END AS ruleSatisfied"
"""Collect Goods"" must be followed by ""Load Truck"" no more than 4 times.","Activity: [""Collect Goods"", ""Load Truck""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Collect Goods""})-[:CORR]->(entity)<-[:CORR]-(e2:Event {Activity: ""Load Truck""}) WHERE e2.timestamp > e1.timestamp RETURN CASE WHEN COUNT(e1) <= 4 THEN true ELSE false END AS ruleSatisfied"
"No more than 3 instances of ""Load Truck"" should be followed by ""Weigh"".","Activity: [""Load Truck"", ""Weigh""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Load Truck""})-[:CORR]->(entity)<-[:CORR]-(e2:Event {Activity: ""Weigh""}) WHERE e2.timestamp > e1.timestamp RETURN CASE WHEN COUNT(e1) <= 3 THEN true ELSE false END AS ruleSatisfied"
"A ""Register Customer Order"" event should not be followed by ""Place in Stock"" more than 5 times.","Activity: [""Register Customer Order"", ""Place in Stock""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Register Customer Order""})-[:CORR]->(entity)<-[:CORR]-(e2:Event {Activity: ""Place in Stock""}) WHERE e2.timestamp > e1.timestamp RETURN CASE WHEN COUNT(e1) <= 5 THEN true ELSE false END AS ruleSatisfied"
"The sequence of ""Register Customer Order"", ""Create Transport Document"", and ""Book Vehicles"" must occur in that order for each ""Customer Order"" entity.","Activity: [""Register Customer Order"", ""Create Transport Document"", ""Book Vehicles""], EntityType: [""Customer Order""], Actor: []","MATCH (ent:Entity {EntityType: ""Customer Order""}) WHERE NOT EXISTS { MATCH (e1:Event {Activity: 'Register Customer Order'})-[:DF]->(e2:Event{Activity: 'Create Transport Document'})-[:DF]->(e3:Event {Activity: 'Book Vehicles'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"For every ""Transport Document"" entity, ""Order Empty Containers"", ""Pick Up Empty Container"", and ""Collect Goods"" must happen sequentially.","Activity: [""Order Empty Containers"", ""Pick Up Empty Container"", ""Collect Goods""], EntityType: [""Transport Document""], Actor: []","MATCH (ent:Entity {EntityType: ""Transport Document""}) WHERE NOT EXISTS { MATCH (e1:Event {Activity: 'Order Empty Containers'})-[:DF]->(e2:Event{Activity: 'Pick Up Empty Container'})-[:DF]->(e3:Event {Activity: 'Collect Goods'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"The process of ""Load Truck"" followed by ""Drive to Terminal"" must occur for each ""Truck"" entity.","Activity: [""Load Truck"", ""Drive to Terminal""], EntityType: [""Truck""], Actor: []","MATCH (ent:Entity {EntityType: ""Truck""}) WHERE NOT EXISTS { MATCH (e1:Event {Activity: 'Load Truck'})-[:DF]->(e2:Event{Activity: 'Drive to Terminal'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"Each ""Transport Document"" entity must have ""Weigh"" followed by ""Place in Stock"" in sequence.","Activity: [""Weigh"", ""Place in Stock""], EntityType: [""Transport Document""], Actor: []","MATCH (ent:Entity {EntityType: ""Transport Document""}) WHERE NOT EXISTS { MATCH (e1:Event {Activity: 'Weigh'})-[:DF]->(e2:Event{Activity: 'Place in Stock'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"A ""Truck"" entity must have ""Load Truck"", ""Weigh"", and ""Place in Stock"" in that exact order.","Activity: [""Load Truck"", ""Weigh"", ""Place in Stock""], EntityType: [""Truck""], Actor: []","MATCH (ent:Entity {EntityType: ""Truck""}) WHERE NOT EXISTS { MATCH (e1:Event {Activity: 'Load Truck'})-[:DF]->(e2:Event{Activity: 'Weigh'})-[:DF]->(e3:Event {Activity: 'Place in Stock'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"For each ""Container"" entity, ""Place in Stock"" and ""Bring to Loading Bay"" must occur sequentially.","Activity: [""Place in Stock"", ""Bring to Loading Bay""], EntityType: [""Container""], Actor: []","MATCH (ent:Entity {EntityType: ""Container""}) WHERE NOT EXISTS { MATCH (e1:Event {Activity: 'Place in Stock'})-[:DF]->(e2:Event{Activity: 'Bring to Loading Bay'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"The ""Order Empty Containers"" and ""Pick Up Empty Container"" activities must be carried out in sequence for each ""Container"" entity.","Activity: [""Order Empty Containers"", ""Pick Up Empty Container""], EntityType: [""Container""], Actor: []","MATCH (ent:Entity {EntityType: ""Container""}) WHERE NOT EXISTS { MATCH (e1:Event {Activity: 'Order Empty Containers'})-[:DF]->(e2:Event{Activity: 'Pick Up Empty Container'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"Each ""Truck"" entity must first have ""Load Truck"", directly followed by ""Drive to Terminal"", and then ""Weigh"" must be recorded directly after.","Activity: [""Load Truck"", ""Drive to Terminal"", ""Weigh""], EntityType: [""Truck""], Actor: []","MATCH (ent:Entity {EntityType: ""Truck""}) WHERE NOT EXISTS { MATCH (e1:Event {Activity: 'Load Truck'})-[:DF]->(e2:Event{Activity: 'Drive to Terminal'})-[:DF]->(e3:Event {Activity: 'Weigh'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"The activities ""Register Customer Order"", ""Create Transport Document"", and ""Book Vehicles"" should not be executed in sequence for any ""Customer Order"".","Activity: [""Register Customer Order"", ""Create Transport Document"", ""Book Vehicles""], EntityType: [""Customer Order""], Actor: []","MATCH (ent:Entity {EntityType: ""Customer Order""}) WHERE EXISTS { MATCH (e1:Event {Activity: 'Register Customer Order'})-[:DF]->(e2:Event{Activity: 'Create Transport Document'})-[:DF]->(e3:Event {Activity: 'Book Vehicles'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"The sequence of ""Order Empty Containers"", ""Pick Up Empty Container"", and ""Collect Goods"" must not be performed in that order for any ""Container"".","Activity: [""Order Empty Containers"", ""Pick Up Empty Container"", ""Collect Goods""], EntityType: [""Container""], Actor: []","MATCH (ent:Entity {EntityType: ""Container""}) WHERE EXISTS { MATCH (e1:Event {Activity: 'Order Empty Containers'})-[:DF]->(e2:Event{Activity: 'Pick Up Empty Container'})-[:DF]->(e3:Event {Activity: 'Collect Goods'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"It is not allowed for any ""Truck"" to first ""Weigh"", then ""Place in Stock"", and then ""Bring to Loading Bay"" in sequence.","Activity: [""Weigh"", ""Place in Stock"", ""Bring to Loading Bay""], EntityType: [""Truck""], Actor: []","MATCH (ent:Entity {EntityType: ""Truck""}) WHERE EXISTS { MATCH (e1:Event {Activity: 'Weigh'})-[:DF]->(e2:Event{Activity: 'Place in Stock'})-[:DF]->(e3:Event {Activity: 'Bring to Loading Bay'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"For any ""Container"", the sequence of ""Order Empty Containers"", ""Pick Up Empty Container"", and ""Load Truck"" should not be followed in that specific order.","Activity: [""Order Empty Containers"", ""Pick Up Empty Container"", ""Load Truck""], EntityType: [""Container""], Actor: []","MATCH (ent:Entity {EntityType: ""Container""}) WHERE EXISTS { MATCH (e1:Event {Activity: 'Order Empty Containers'})-[:DF]->(e2:Event{Activity: 'Pick Up Empty Container'})-[:DF]->(e3:Event {Activity: 'Load Truck'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"The actions ""Create Transport Document"" followed by ""Load to Vehicle"" should never occur in sequence for any ""Transport Document"".","Activity: [""Create Transport Document"", ""Load to Vehicle""], EntityType: [""Transport Document""], Actor: []","MATCH (ent:Entity {EntityType: ""Transport Document""}) WHERE EXISTS { MATCH (e1:Event {Activity: 'Create Transport Document'})-[:DF]->(e2:Event{Activity: 'Load to Vehicle'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"A sequence of ""Pick Up Empty Container"", ""Collect Goods"", and ""Drive to Terminal"" should not be performed in order for any ""Truck"".","Activity: [""Pick Up Empty Container"", ""Collect Goods"", ""Drive to Terminal""], EntityType: [""Truck""], Actor: []","MATCH (ent:Entity {EntityType: ""Truck""}) WHERE EXISTS { MATCH (e1:Event {Activity: 'Pick Up Empty Container'})-[:DF]->(e2:Event{Activity: 'Collect Goods'})-[:DF]->(e3:Event {Activity: 'Drive to Terminal'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"A transport document should never have the activities of creating a transport document, then loading to vehicle, and then rescheduling container in sequence.","Activity: [""Create Transport Document"", ""Load to Vehicle"", ""Reschedule Container""], EntityType: [""Transport Document""], Actor: []","MATCH (ent:Entity {EntityType: ""Transport Document""}) WHERE EXISTS { MATCH (e1:Event {Activity: 'Create Transport Document'})-[:DF]->(e2:Event{Activity: 'Load to Vehicle'})-[:DF]->(e3:Event {Activity: 'Reschedule Container'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
It is not allowed for the creation of a transport document to be followed by the collecting of goods and then the loading to vehicle for any transport document.,"Activity: [""Create Transport Document"", ""Collect Goods"", ""Load to Vehicle""], EntityType: [""Transport Document""], Actor: []","MATCH (ent:Entity {EntityType: ""Transport Document""}) WHERE EXISTS { MATCH (e1:Event {Activity: 'Create Transport Document'})-[:DF]->(e2:Event{Activity: 'Collect Goods'})-[:DF]->(e3:Event {Activity: 'Load to Vehicle'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"For any ""Customer Order"", the activities of collecting goods, then loading to vehicle, followed by departing, must not occur in sequence.","Activity: [""Collect Goods"", ""Load to Vehicle"", ""Depart""], EntityType: [""Customer Order""], Actor: []","MATCH (ent:Entity {EntityType: ""Customer Order""}) WHERE EXISTS { MATCH (e1:Event {Activity: 'Collect Goods'})-[:DF]->(e2:Event{Activity: 'Load to Vehicle'})-[:DF]->(e3:Event {Activity: 'Depart'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"For any ""Truck"", it is not permitted to first ""Weigh"", then ""Place in Stock"", followed by ""Load Truck"".","Activity: [""Weigh"", ""Place in Stock"", ""Load Truck""], EntityType: [""Truck""], Actor: []","MATCH (ent:Entity {EntityType: ""Truck""}) WHERE EXISTS { MATCH (e1:Event {Activity: 'Weigh'})-[:DF]->(e2:Event{Activity: 'Place in Stock'})-[:DF]->(e3:Event {Activity: 'Load Truck'}) MATCH (e1)-[:CORR]->(ent) MATCH (e2)-[:CORR]->(ent) MATCH (e3)-[:CORR]->(ent) RETURN ent } RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"A ""Register Customer Order"" must be created within 5 days before a ""Create Transport Document"" is generated.","Activity: [""Register Customer Order"", ""Create Transport Document""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Create Transport Document""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Register Customer Order""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e1.timestamp >= e2.timestamp - duration({days: 5}) WITH e2, count(e1) AS precedingOrderCount RETURN CASE WHEN any(e IN collect(precedingOrderCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"A ""Book Vehicles"" must occur within 7 days of a ""Register Customer Order"" being created.","Activity: [""Book Vehicles"", ""Register Customer Order""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Register Customer Order""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Book Vehicles""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e1.timestamp >= e2.timestamp - duration({days: 7}) WITH e2, count(e1) AS precedingBookingCount RETURN CASE WHEN any(e IN collect(precedingBookingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"A ""Create Transport Document"" must be approved within 10 days before a ""Pick Up Empty Container"" event can occur.","Activity: [""Create Transport Document"", ""Pick Up Empty Container""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Pick Up Empty Container""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Create Transport Document""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e1.timestamp >= e2.timestamp - duration({days: 10}) WITH e2, count(e1) AS precedingApprovalCount RETURN CASE WHEN any(e IN collect(precedingApprovalCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"A ""Register Customer Order"" must be logged within 7 days before a ""Book Vehicles"" event can happen.","Activity: [""Register Customer Order"", ""Book Vehicles""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Book Vehicles""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Register Customer Order""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e1.timestamp >= e2.timestamp - duration({days: 7}) WITH e2, count(e1) AS precedingOrderCount RETURN CASE WHEN any(e IN collect(precedingOrderCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"A ""Collect Goods"" must happen within 7 days of a ""Pick Up Empty Container"" event.","Activity: [""Collect Goods"", ""Pick Up Empty Container""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Pick Up Empty Container""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Collect Goods""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e1.timestamp >= e2.timestamp - duration({days: 7}) WITH e2, count(e1) AS precedingGoodsCount RETURN CASE WHEN any(e IN collect(precedingGoodsCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"A ""Load Truck"" must occur within 14 days of a ""Create Transport Document"" being created.","Activity: [""Load Truck"", ""Create Transport Document""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Create Transport Document""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Load Truck""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e1.timestamp >= e2.timestamp - duration({days: 14}) WITH e2, count(e1) AS precedingTruckLoadCount RETURN CASE WHEN any(e IN collect(precedingTruckLoadCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"A ""Register Customer Order"" must occur within 5 days before a ""Create Transport Document"" can be created.","Activity: [""Register Customer Order"", ""Create Transport Document""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Create Transport Document""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Register Customer Order""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e1.timestamp >= e2.timestamp - duration({days: 5}) WITH e2, count(e1) AS precedingOrderCount RETURN CASE WHEN any(e IN collect(precedingOrderCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"A ""Transport Document"" needs to be approved within 10 days before a ""Container Pickup"" action can take place.","Activity: [""Create Transport Document"", ""Pick Up Empty Container""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Pick Up Empty Container""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Create Transport Document""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e1.timestamp >= e2.timestamp - duration({days: 10}) WITH e2, count(e1) AS precedingApprovalCount RETURN CASE WHEN any(e IN collect(precedingApprovalCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"A ""Customer Order Registration"" event must be recorded within 7 days of the ""Vehicle Booking"" event taking place.","Activity: [""Register Customer Order"", ""Book Vehicles""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Book Vehicles""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e1:Event {Activity: ""Register Customer Order""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp AND e1.timestamp >= e2.timestamp - duration({days: 7}) WITH e2, count(e1) AS precedingOrderCount RETURN CASE WHEN any(e IN collect(precedingOrderCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"A ""Register Customer Order"" cannot be created until a ""Create Transport Document"" or a ""Book Vehicles"" event has been recorded.","Activity: [""Register Customer Order"", ""Create Transport Document"", ""Book Vehicles""], EntityType: [], Actor: []","MATCH (e3:Event {Activity: ""Register Customer Order""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Create Transport Document""})-[:CORR]->(entity) WHERE e2.timestamp < e3.timestamp OPTIONAL MATCH (e1:Event {Activity: ""Book Vehicles""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e3, count(e1)+count(e2) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Before an ""Order Empty Containers"" event can be executed, a ""Pick Up Empty Container"" or ""Collect Goods"" event must have been recorded.","Activity: [""Order Empty Containers"", ""Pick Up Empty Container"", ""Collect Goods""], EntityType: [], Actor: []","MATCH (e3:Event {Activity: ""Order Empty Containers""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Pick Up Empty Container""})-[:CORR]->(entity) WHERE e2.timestamp < e3.timestamp OPTIONAL MATCH (e1:Event {Activity: ""Collect Goods""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e3, count(e1)+count(e2) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"A ""Load Truck"" event cannot be processed before a ""Weigh"" or ""Place in Stock"" event has been recorded.","Activity: [""Load Truck"", ""Weigh"", ""Place in Stock""], EntityType: [], Actor: []","MATCH (e3:Event {Activity: ""Load Truck""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Weigh""})-[:CORR]->(entity) WHERE e2.timestamp < e3.timestamp OPTIONAL MATCH (e1:Event {Activity: ""Place in Stock""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e3, count(e1)+count(e2) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"The ""Pick Up Empty Container"" event cannot occur unless the ""Collect Goods"" or ""Load Truck"" events have been recorded.","Activity: [""Pick Up Empty Container"", ""Collect Goods"", ""Load Truck""], EntityType: [], Actor: []","MATCH (e3:Event {Activity: ""Pick Up Empty Container""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Collect Goods""})-[:CORR]->(entity) WHERE e2.timestamp < e3.timestamp OPTIONAL MATCH (e1:Event {Activity: ""Load Truck""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e3, count(e1)+count(e2) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Before the ""Drive to Terminal"" event can be executed, either a ""Weigh"" or ""Place in Stock"" must have already been logged.","Activity: [""Drive to Terminal"", ""Weigh"", ""Place in Stock""], EntityType: [], Actor: []","MATCH (e3:Event {Activity: ""Drive to Terminal""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Weigh""})-[:CORR]->(entity) WHERE e2.timestamp < e3.timestamp OPTIONAL MATCH (e1:Event {Activity: ""Place in Stock""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e3, count(e1)+count(e2) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"A ""Weigh"" event cannot be recorded before the ""Place in Stock"" or ""Bring to Loading Bay"" has been completed.","Activity: [""Weigh"", ""Place in Stock"", ""Bring to Loading Bay""], EntityType: [], Actor: []","MATCH (e3:Event {Activity: ""Weigh""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Place in Stock""})-[:CORR]->(entity) WHERE e2.timestamp < e3.timestamp OPTIONAL MATCH (e1:Event {Activity: ""Bring to Loading Bay""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e3, count(e1)+count(e2) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Before an empty container can be ordered, either a container pick-up or goods collection must occur first.","Activity: [""Order Empty Containers"", ""Pick Up Empty Container"", ""Collect Goods""], EntityType: [], Actor: []","MATCH (e3:Event {Activity: ""Order Empty Containers""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Pick Up Empty Container""})-[:CORR]->(entity) WHERE e2.timestamp < e3.timestamp OPTIONAL MATCH (e1:Event {Activity: ""Collect Goods""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e3, count(e1)+count(e2) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
A truck can only be loaded after the goods have been weighed or placed in stock.,"Activity: [""Load Truck"", ""Weigh"", ""Place in Stock""], EntityType: [], Actor: []","MATCH (e3:Event {Activity: ""Load Truck""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Weigh""})-[:CORR]->(entity) WHERE e2.timestamp < e3.timestamp OPTIONAL MATCH (e1:Event {Activity: ""Place in Stock""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e3, count(e1)+count(e2) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
An empty container cannot be picked up unless goods have been collected or a truck has been loaded.,"Activity: [""Pick Up Empty Container"", ""Collect Goods"", ""Load Truck""], EntityType: [], Actor: []","MATCH (e3:Event {Activity: ""Pick Up Empty Container""})-[:CORR]->(entity:Entity) OPTIONAL MATCH (e2:Event {Activity: ""Collect Goods""})-[:CORR]->(entity) WHERE e2.timestamp < e3.timestamp OPTIONAL MATCH (e1:Event {Activity: ""Load Truck""})-[:CORR]->(entity) WHERE e1.timestamp < e3.timestamp WITH e3, count(e1)+count(e2) AS precedingCount RETURN CASE WHEN any(e IN collect(precedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After a customer order is registered, a transport document must be created immediately.","Activity: [""Register Customer Order"", ""Create Transport Document""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Register Customer Order""}) OPTIONAL MATCH (e2:Event {Activity: ""Create Transport Document""})<-[:DF]-(e1) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Once a transport document is created, vehicles should be booked immediately after.","Activity: [""Create Transport Document"", ""Book Vehicles""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Transport Document""}) OPTIONAL MATCH (e2:Event {Activity: ""Book Vehicles""})<-[:DF]-(e1) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Following the booking of vehicles, empty containers must be ordered without delay.","Activity: [""Book Vehicles"", ""Order Empty Containers""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Book Vehicles""}) OPTIONAL MATCH (e2:Event {Activity: ""Order Empty Containers""})<-[:DF]-(e1) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After empty containers are ordered, they need to be picked up promptly.","Activity: [""Order Empty Containers"", ""Pick Up Empty Container""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Order Empty Containers""}) OPTIONAL MATCH (e2:Event {Activity: ""Pick Up Empty Container""})<-[:DF]-(e1) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"When empty containers are picked up, goods must be collected immediately after.","Activity: [""Pick Up Empty Container"", ""Collect Goods""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Pick Up Empty Container""}) OPTIONAL MATCH (e2:Event {Activity: ""Collect Goods""})<-[:DF]-(e1) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Once goods are collected, they must be loaded onto a truck right away.","Activity: [""Collect Goods"", ""Load Truck""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Collect Goods""}) OPTIONAL MATCH (e2:Event {Activity: ""Load Truck""})<-[:DF]-(e1) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After loading the truck, it must drive to the terminal without any delay.","Activity: [""Load Truck"", ""Drive to Terminal""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Load Truck""}) OPTIONAL MATCH (e2:Event {Activity: ""Drive to Terminal""})<-[:DF]-(e1) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"A ""Weigh"" event should be followed immediately by a ""Place in Stock"" event.","Activity: [""Weigh"", ""Place in Stock""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Weigh""}) OPTIONAL MATCH (e2:Event {Activity: ""Place in Stock""})<-[:DF]-(e1) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Following the ""Place in Stock"" event, a ""Bring to Loading Bay"" event must occur right after.","Activity: [""Place in Stock"", ""Bring to Loading Bay""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Place in Stock""}) OPTIONAL MATCH (e2:Event {Activity: ""Bring to Loading Bay""})<-[:DF]-(e1) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Once an item is brought to the loading bay, it must be loaded onto a vehicle without any delay.","Activity: [""Bring to Loading Bay"", ""Load to Vehicle""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Bring to Loading Bay""}) OPTIONAL MATCH (e2:Event {Activity: ""Load to Vehicle""})<-[:DF]-(e1) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After the item is loaded onto the vehicle, the ""Depart"" event must immediately follow.","Activity: [""Load to Vehicle"", ""Depart""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Load to Vehicle""}) OPTIONAL MATCH (e2:Event {Activity: ""Depart""})<-[:DF]-(e1) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After a ""Reschedule Container"" event, the system must ensure that a ""Depart"" event follows immediately.","Activity: [""Reschedule Container"", ""Depart""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Reschedule Container""}) OPTIONAL MATCH (e2:Event {Activity: ""Depart""})<-[:DF]-(e1) WITH e1, count(e2) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After a ""Register Customer Order"" is placed, no ""Create Transport Document"" can occur afterward.","Activity: [""Register Customer Order"", ""Create Transport Document""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Register Customer Order""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Create Transport Document""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"Once a ""Book Vehicles"" is recorded, ""Order Empty Containers"" cannot happen afterward for the same entity.","Activity: [""Book Vehicles"", ""Order Empty Containers""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Book Vehicles""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Order Empty Containers""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"If a ""Pick Up Empty Container"" occurs, no ""Collect Goods"" can follow for the same entity.","Activity: [""Pick Up Empty Container"", ""Collect Goods""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Pick Up Empty Container""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Collect Goods""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"Once a ""Load Truck"" has been performed, the ""Drive to Terminal"" cannot occur for the same entity afterward.","Activity: [""Load Truck"", ""Drive to Terminal""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Load Truck""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Drive to Terminal""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"If a ""Weigh"" occurs, ""Place in Stock"" should not be performed afterward for the same item.","Activity: [""Weigh"", ""Place in Stock""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Weigh""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Place in Stock""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"After a ""Bring to Loading Bay,"" it is not allowed to ""Load to Vehicle"" for the same object item afterward.","Activity: [""Bring to Loading Bay"", ""Load to Vehicle""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Bring to Loading Bay""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Load to Vehicle""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"After creating a customer order, a corresponding transport document cannot be created afterward for the same entity.","Activity: [""Register Customer Order"", ""Create Transport Document""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Register Customer Order""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Create Transport Document""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"Once an invoice has been created by a vendor, no further receipt of goods can be recorded afterward.","Activity: [""Create Transport Document"", ""Collect Goods""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Transport Document""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Collect Goods""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"Once the goods are cleared, no further weighing should be recorded for the same entity.","Activity: [""Clear Goods"", ""Weigh""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Clear Goods""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Weigh""})-[:CORR]->(entity) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"After a ""Register Customer Order"" event occurs, no ""Create Transport Document"" event can happen within 48 hours for the same entity.","Activity: [""Register Customer Order"", ""Create Transport Document""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Register Customer Order""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Create Transport Document""})-[:CORR]->(entity) WHERE e2.timestamp <= e1.timestamp + duration({hours: 48}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"If a ""Book Vehicles"" event occurs, no ""Order Empty Containers"" event can take place within 72 hours afterward.","Activity: [""Book Vehicles"", ""Order Empty Containers""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Book Vehicles""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Order Empty Containers""})-[:CORR]->(entity) WHERE e2.timestamp <= e1.timestamp + duration({hours: 72}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"If a ""Pick Up Empty Container"" event is performed, no ""Collect Goods"" event can occur for the same entity within 48 hours.","Activity: [""Pick Up Empty Container"", ""Collect Goods""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Pick Up Empty Container""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Collect Goods""})-[:CORR]->(entity) WHERE e2.timestamp <= e1.timestamp + duration({hours: 48}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"After a ""Load Truck"" event occurs, a ""Drive to Terminal"" event cannot be performed within 72 hours.","Activity: [""Load Truck"", ""Drive to Terminal""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Load Truck""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Drive to Terminal""})-[:CORR]->(entity) WHERE e2.timestamp <= e1.timestamp + duration({hours: 72}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"If a ""Register Customer Order"" event is created, a corresponding ""Create Transport Document"" cannot be created for the same entity within 48 hours.","Activity: [""Register Customer Order"", ""Create Transport Document""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Register Customer Order""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Create Transport Document""})-[:CORR]->(entity) WHERE e2.timestamp <= e1.timestamp + duration({hours: 48}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"After a ""Book Vehicles"" event, no ""Order Empty Containers"" can be recorded for the same entity within 72 hours.","Activity: [""Book Vehicles"", ""Order Empty Containers""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Book Vehicles""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Order Empty Containers""})-[:CORR]->(entity) WHERE e2.timestamp <= e1.timestamp + duration({hours: 72}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"Once a ""Pick Up Empty Container"" event has been recorded, no ""Collect Goods"" event can happen within 24 hours for the same entity.","Activity: [""Pick Up Empty Container"", ""Collect Goods""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Pick Up Empty Container""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Collect Goods""})-[:CORR]->(entity) WHERE e2.timestamp <= e1.timestamp + duration({hours: 24}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"Once a vehicle departs, the container cannot be rescheduled within 72 hours for the same entity.","Activity: [""Depart"", ""Reschedule Container""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Depart""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Reschedule Container""})-[:CORR]->(entity) WHERE e2.timestamp <= e1.timestamp + duration({hours: 72}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"If a customer order is placed, a transport document cannot be created for the same entity within 48 hours.","Activity: [""Register Customer Order"", ""Create Transport Document""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Register Customer Order""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Create Transport Document""})-[:CORR]->(entity) WHERE e2.timestamp <= e1.timestamp + duration({hours: 48}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"After vehicles are booked, empty containers cannot be ordered within 72 hours for the same entity.","Activity: [""Book Vehicles"", ""Order Empty Containers""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Book Vehicles""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Order Empty Containers""})-[:CORR]->(entity) WHERE e2.timestamp <= e1.timestamp + duration({hours: 72}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"After an empty container is picked up, goods cannot be collected within 24 hours for the same entity.","Activity: [""Pick Up Empty Container"", ""Collect Goods""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Pick Up Empty Container""})-[:CORR]->(entity:Entity) MATCH (e2:Event {Activity: ""Collect Goods""})-[:CORR]->(entity) WHERE e2.timestamp <= e1.timestamp + duration({hours: 24}) RETURN CASE WHEN COUNT(entity)>0 THEN false ELSE true END AS ruleSatisfied"
"A ""Register Customer Order"" event must not happen later than 7 days after January 1st, 2023.","Activity: [""Register Customer Order""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Register Customer Order""}) WHERE e1.timestamp > datetime(""2023-01-01T00:00:00"") + duration({days: 7}) RETURN CASE WHEN count(e1) > 0 THEN false ELSE true END AS result"
"A ""Create Transport Document"" must not take place more than 3 days before May 1st, 2022.","Activity: [""Create Transport Document""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Transport Document""}) WHERE e1.timestamp < datetime(""2022-05-01T00:00:00"") - duration({days: 3}) RETURN CASE WHEN count(e1) > 0 THEN false ELSE true END AS result"
"The ""Book Vehicles"" activity cannot occur more than 15 days after March 10th, 2023.","Activity: [""Book Vehicles""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Book Vehicles""}) WHERE e1.timestamp > datetime(""2023-03-10T00:00:00"") + duration({days: 15}) RETURN CASE WHEN count(e1) > 0 THEN false ELSE true END AS result"
"A ""Order Empty Containers"" event must not occur more than 5 days after March 1st, 2022.","Activity: [""Order Empty Containers""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Order Empty Containers""}) WHERE e1.timestamp > datetime(""2022-03-01T00:00:00"") + duration({days: 5}) RETURN CASE WHEN count(e1) > 0 THEN false ELSE true END AS result"
"A ""Pick Up Empty Container"" must take place no later than 10 days before June 15th, 2023.","Activity: [""Pick Up Empty Container""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Pick Up Empty Container""}) WHERE e1.timestamp < datetime(""2023-06-15T00:00:00"") - duration({days: 10}) RETURN CASE WHEN count(e1) > 0 THEN false ELSE true END AS result"
"The truck must be placed in stock no later than 10 days before August 1st, 2022.","Activity: [""Place in Stock""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Place in Stock""}) WHERE e1.timestamp < datetime(""2022-08-01T00:00:00"") - duration({days: 10}) RETURN CASE WHEN count(e1) > 0 THEN false ELSE true END AS result"
"A vehicle must be brought to the loading bay no later than 3 days after March 1st, 2022.","Activity: [""Bring to Loading Bay""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Bring to Loading Bay""}) WHERE e1.timestamp > datetime(""2022-03-01T00:00:00"") + duration({days: 3}) RETURN CASE WHEN count(e1) > 0 THEN false ELSE true END AS result"
"A vehicle must be loaded no later than 7 days after January 1st, 2023.","Activity: [""Load to Vehicle""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Load to Vehicle""}) WHERE e1.timestamp > datetime(""2023-01-01T00:00:00"") + duration({days: 7}) RETURN CASE WHEN count(e1) > 0 THEN false ELSE true END AS result"
"The vehicle must depart no later than 5 days after March 10th, 2023.","Activity: [""Depart""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Depart""}) WHERE e1.timestamp > datetime(""2023-03-10T00:00:00"") + duration({days: 5}) RETURN CASE WHEN count(e1) > 0 THEN false ELSE true END AS result"
"The container rescheduling must occur no more than 3 days before October 1st, 2022.","Activity: [""Reschedule Container""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Reschedule Container""}) WHERE e1.timestamp < datetime(""2022-10-01T00:00:00"") - duration({days: 3}) RETURN CASE WHEN count(e1) > 0 THEN false ELSE true END AS result"
The creation of a Transport Document is prohibited for any Customer Order.,"Activity: [""Create Transport Document""], EntityType: [""Customer Order""], Actor: []",MATCH (ent:Entity {EntityType: 'Customer Order'}) MATCH (event:Event {Activity: 'Create Transport Document'})-[:CORR]->(ent) RETURN CASE WHEN count(event) = 0 THEN true ELSE false END AS ruleSatisfied
"For trucks, booking vehicles is not allowed.","Activity: [""Book Vehicles""], EntityType: [""Truck""], Actor: []",MATCH (ent:Entity {EntityType: 'Truck'}) MATCH (event:Event {Activity: 'Book Vehicles'})-[:CORR]->(ent) RETURN CASE WHEN count(event) = 0 THEN true ELSE false END AS ruleSatisfied
Changing the stock placement of a Handling Unit is prohibited for a Forklift.,"Activity: [""Place in Stock""], EntityType: [""Forklift""], Actor: []",MATCH (ent:Entity {EntityType: 'Forklift'}) MATCH (event:Event {Activity: 'Place in Stock'})-[:CORR]->(ent) RETURN CASE WHEN count(event) = 0 THEN true ELSE false END AS ruleSatisfied
A Container should never be involved in rescheduling.,"Activity: [""Reschedule Container""], EntityType: [""Container""], Actor: []",MATCH (ent:Entity {EntityType: 'Container'}) MATCH (event:Event {Activity: 'Reschedule Container'})-[:CORR]->(ent) RETURN CASE WHEN count(event) = 0 THEN true ELSE false END AS ruleSatisfied
Recording the loading of a truck must not be performed for a Vehicle.,"Activity: [""Load Truck""], EntityType: [""Vehicle""], Actor: []",MATCH (ent:Entity {EntityType: 'Vehicle'}) MATCH (event:Event {Activity: 'Load Truck'})-[:CORR]->(ent) RETURN CASE WHEN count(event) = 0 THEN true ELSE false END AS ruleSatisfied
A Handling Unit cannot be involved in driving to the terminal.,"Activity: [""Drive to Terminal""], EntityType: [""Handling Unit""], Actor: []",MATCH (ent:Entity {EntityType: 'Handling Unit'}) MATCH (event:Event {Activity: 'Drive to Terminal'})-[:CORR]->(ent) RETURN CASE WHEN count(event) = 0 THEN true ELSE false END AS ruleSatisfied
"No ""Load to Vehicle"" event is allowed for a Customer Order.","Activity: [""Load to Vehicle""], EntityType: [""Customer Order""], Actor: []",MATCH (ent:Entity {EntityType: 'Customer Order'}) MATCH (event:Event {Activity: 'Load to Vehicle'})-[:CORR]->(ent) RETURN CASE WHEN count(event) = 0 THEN true ELSE false END AS ruleSatisfied
A Customer Order should never be involved in collecting goods.,"Activity: [""Collect Goods""], EntityType: [""Customer Order""], Actor: []",MATCH (ent:Entity {EntityType: 'Customer Order'}) MATCH (event:Event {Activity: 'Collect Goods'})-[:CORR]->(ent) RETURN CASE WHEN count(event) = 0 THEN true ELSE false END AS ruleSatisfied
Recording a weighing event must not be performed for a Container.,"Activity: [""Weigh""], EntityType: [""Container""], Actor: []",MATCH (ent:Entity {EntityType: 'Container'}) MATCH (event:Event {Activity: 'Weigh'})-[:CORR]->(ent) RETURN CASE WHEN count(event) = 0 THEN true ELSE false END AS ruleSatisfied
A Vehicle cannot be involved in bringing goods to the loading bay.,"Activity: [""Bring to Loading Bay""], EntityType: [""Vehicle""], Actor: []",MATCH (ent:Entity {EntityType: 'Vehicle'}) MATCH (event:Event {Activity: 'Bring to Loading Bay'})-[:CORR]->(ent) RETURN CASE WHEN count(event) = 0 THEN true ELSE false END AS ruleSatisfied
"No ""Depart"" event is allowed for a Forklift.","Activity: [""Depart""], EntityType: [""Forklift""], Actor: []",MATCH (ent:Entity {EntityType: 'Forklift'}) MATCH (event:Event {Activity: 'Depart'})-[:CORR]->(ent) RETURN CASE WHEN count(event) = 0 THEN true ELSE false END AS ruleSatisfied
Registering a customer order is prohibited.,"Activity: [""Register Customer Order""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Register Customer Order'}) RETURN COUNT(e) = 0 AS ruleSatisfied
Creating a transport document should never occur.,"Activity: [""Create Transport Document""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Create Transport Document'}) RETURN COUNT(e) = 0 AS ruleSatisfied
A vehicle must not be booked.,"Activity: [""Book Vehicles""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Book Vehicles'}) RETURN COUNT(e) = 0 AS ruleSatisfied
Ordering empty containers must not happen under any circumstances.,"Activity: [""Order Empty Containers""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Order Empty Containers'}) RETURN COUNT(e) = 0 AS ruleSatisfied
Picking up an empty container is strictly prohibited.,"Activity: [""Pick Up Empty Container""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Pick Up Empty Container'}) RETURN COUNT(e) = 0 AS ruleSatisfied
Collecting goods must never happen.,"Activity: [""Collect Goods""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Collect Goods'}) RETURN COUNT(e) = 0 AS ruleSatisfied
Loading a truck is not allowed.,"Activity: [""Load Truck""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Load Truck'}) RETURN COUNT(e) = 0 AS ruleSatisfied
No truck departure should be recorded under any condition.,"Activity: [""Depart""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Depart'}) RETURN COUNT(e) = 0 AS ruleSatisfied
At least one customer order must be registered.,"Activity: [""Register Customer Order""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Register Customer Order'}) RETURN COUNT(e) > 0 AS ruleSatisfied
At least one transport document creation must be logged.,"Activity: [""Create Transport Document""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Create Transport Document'}) RETURN COUNT(e) > 0 AS ruleSatisfied
A record for vehicle booking must exist in the event log.,"Activity: [""Book Vehicles""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Book Vehicles'}) RETURN COUNT(e) > 0 AS ruleSatisfied
Empty container orders must be recorded at least once in the system.,"Activity: [""Order Empty Containers""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Order Empty Containers'}) RETURN COUNT(e) > 0 AS ruleSatisfied
It is mandatory to pick up at least one empty container.,"Activity: [""Pick Up Empty Container""], EntityType: [], Actor: []",MATCH (e:Event {Activity: 'Pick Up Empty Container'}) RETURN COUNT(e) > 0 AS ruleSatisfied
"The sequence ""Register Customer Order"", ""Create Transport Document"", and ""Book Vehicles"" occurs no more than 5 times.","Activity: [""Register Customer Order"", ""Create Transport Document"", ""Book Vehicles""], EntityType: [], Actor: []",MATCH (e1:Event {Activity: 'Register Customer Order'})-[:DF]->(e2:Event {Activity: 'Create Transport Document'})-[:DF]->(e3:Event {Activity: 'Book Vehicles'}) RETURN CASE WHEN COUNT(DISTINCT e1)>5 THEN false ELSE true END AS ruleSatisfied
"The process of initiating a customer order, creating transport documents, and booking vehicles must happen at least twice.","Activity: [""Register Customer Order"", ""Create Transport Document"", ""Book Vehicles""], EntityType: [], Actor: []",MATCH (e1:Event {Activity: 'Register Customer Order'})-[:DF]->(e2:Event {Activity: 'Create Transport Document'})-[:DF]->(e3:Event {Activity: 'Book Vehicles'}) RETURN CASE WHEN COUNT(DISTINCT e1)<2 THEN false ELSE true END AS ruleSatisfied
"There should be fewer than 4 occurrences of the chain ""Pick Up Empty Container"" → ""Collect Goods"" → ""Load Truck"".","Activity: [""Pick Up Empty Container"", ""Collect Goods"", ""Load Truck""], EntityType: [], Actor: []",MATCH (e1:Event {Activity: 'Pick Up Empty Container'})-[:DF]->(e2:Event {Activity: 'Collect Goods'})-[:DF]->(e3:Event {Activity: 'Load Truck'}) RETURN CASE WHEN COUNT(DISTINCT e1)>=4 THEN false ELSE true END AS ruleSatisfied
"The process of picking up empty containers, collecting goods, and loading trucks must take place exactly 6 times.","Activity: [""Pick Up Empty Container"", ""Collect Goods"", ""Load Truck""], EntityType: [], Actor: []",MATCH (e1:Event {Activity: 'Pick Up Empty Container'})-[:DF]->(e2:Event {Activity: 'Collect Goods'})-[:DF]->(e3:Event {Activity: 'Load Truck'}) RETURN CASE WHEN COUNT(DISTINCT e1)<>6 THEN false ELSE true END AS ruleSatisfied
"The sequence ""Reschedule Container"" and ""Depart"" should not appear more than 3 times.","Activity: [""Reschedule Container"", ""Depart""], EntityType: [], Actor: []",MATCH (e1:Event {Activity: 'Reschedule Container'})-[:DF]->(e2:Event {Activity: 'Depart'}) RETURN CASE WHEN COUNT(DISTINCT e1)>3 THEN false ELSE true END AS ruleSatisfied
"The chain ""Weigh"" → ""Place in Stock"" must appear at least 4 times in the logs.","Activity: [""Weigh"", ""Place in Stock""], EntityType: [], Actor: []",MATCH (e1:Event {Activity: 'Weigh'})-[:DF]->(e2:Event {Activity: 'Place in Stock'}) RETURN CASE WHEN COUNT(DISTINCT e1)<4 THEN false ELSE true END AS ruleSatisfied
"The sequence ""Order Empty Containers"" → ""Pick Up Empty Container"" must happen exactly 5 times.","Activity: [""Order Empty Containers"", ""Pick Up Empty Container""], EntityType: [], Actor: []",MATCH (e1:Event {Activity: 'Order Empty Containers'})-[:DF]->(e2:Event {Activity: 'Pick Up Empty Container'}) RETURN CASE WHEN COUNT(DISTINCT e1)<>5 THEN false ELSE true END AS ruleSatisfied
"The sequence ""Register Customer Order"", ""Create Transport Document"", ""Pick Up Empty Container"", and ""Load Truck"" must occur at least 3 times.","Activity: [""Register Customer Order"", ""Create Transport Document"", ""Pick Up Empty Container"", ""Load Truck""], EntityType: [], Actor: []",MATCH (e1:Event {Activity: 'Register Customer Order'})-[:DF]->(e2:Event {Activity: 'Create Transport Document'})-[:DF]->(e3:Event {Activity: 'Pick Up Empty Container'})-[:DF]->(e4:Event {Activity: 'Load Truck'}) RETURN CASE WHEN COUNT(DISTINCT e1)<3 THEN false ELSE true END AS ruleSatisfied
"No more than 5 occurrences of registering a customer order, creating a transport document, picking up an empty container, and loading the truck in that order should exist.","Activity: [""Register Customer Order"", ""Create Transport Document"", ""Pick Up Empty Container"", ""Load Truck""], EntityType: [], Actor: []",MATCH (e1:Event {Activity: 'Register Customer Order'})-[:DF]->(e2:Event {Activity: 'Create Transport Document'})-[:DF]->(e3:Event {Activity: 'Pick Up Empty Container'})-[:DF]->(e4:Event {Activity: 'Load Truck'}) RETURN CASE WHEN COUNT(DISTINCT e1)>5 THEN false ELSE true END AS ruleSatisfied
"The chain ""Book Vehicles"" → ""Load Truck"" → ""Bring to Loading Bay"" should occur exactly 4 times.","Activity: [""Book Vehicles"", ""Load Truck"", ""Bring to Loading Bay""], EntityType: [], Actor: []",MATCH (e1:Event {Activity: 'Book Vehicles'})-[:DF]->(e2:Event {Activity: 'Load Truck'})-[:DF]->(e3:Event {Activity: 'Bring to Loading Bay'}) RETURN CASE WHEN COUNT(DISTINCT e1)<>4 THEN false ELSE true END AS ruleSatisfied
"The process of booking vehicles, loading the truck, and bringing goods to the loading bay must take place at least twice.","Activity: [""Book Vehicles"", ""Load Truck"", ""Bring to Loading Bay""], EntityType: [], Actor: []",MATCH (e1:Event {Activity: 'Book Vehicles'})-[:DF]->(e2:Event {Activity: 'Load Truck'})-[:DF]->(e3:Event {Activity: 'Bring to Loading Bay'}) RETURN CASE WHEN COUNT(DISTINCT e1)<2 THEN false ELSE true END AS ruleSatisfied
A Customer Order cannot have fewer than 2 Handling Units.,"Activity: [], EntityType: [""Customer Order"", ""Handling Unit""], Actor: []","MATCH (ent1:Entity {EntityType:""Customer Order""})-[:REL]-(ent2:Entity {EntityType:""Handling Unit""}) WITH ent1, COLLECT(DISTINCT ent2) AS relatedItems RETURN MIN(size(relatedItems)) >= 2 AS ruleSatisfied"
No Handling Unit should be associated with more than 5 Customer Orders.,"Activity: [], EntityType: [""Handling Unit"", ""Customer Order""], Actor: []","MATCH (ent1:Entity {EntityType:""Customer Order""})-[:REL]-(ent2:Entity {EntityType:""Handling Unit""}) WITH ent2, COLLECT(DISTINCT ent1) AS relatedItems RETURN MAX(size(relatedItems)) <= 5 AS ruleSatisfied"
A Customer Order should contain at least one Handling Unit.,"Activity: [], EntityType: [""Customer Order"", ""Handling Unit""], Actor: []","MATCH (ent1:Entity {EntityType:""Customer Order""})-[:REL]-(ent2:Entity {EntityType:""Handling Unit""}) WITH ent1, COLLECT(DISTINCT ent2) AS relatedItems RETURN MIN(size(relatedItems)) >= 1 AS ruleSatisfied"
No Customer Order should have more than 10 Handling Units associated with it.,"Activity: [], EntityType: [""Customer Order"", ""Handling Unit""], Actor: []","MATCH (ent1:Entity {EntityType:""Customer Order""})-[:REL]-(ent2:Entity {EntityType:""Handling Unit""}) WITH ent1, COLLECT(DISTINCT ent2) AS relatedItems RETURN MAX(size(relatedItems)) <= 10 AS ruleSatisfied"
A Handling Unit cannot belong to more than 3 different Customer Orders.,"Activity: [], EntityType: [""Handling Unit"", ""Customer Order""], Actor: []","MATCH (ent1:Entity {EntityType:""Customer Order""})-[:REL]-(ent2:Entity {EntityType:""Handling Unit""}) WITH ent2, COLLECT(DISTINCT ent1) AS relatedItems RETURN MAX(size(relatedItems)) <= 3 AS ruleSatisfied"
A Customer Order should not have more than 5 associated Handling Units.,"Activity: [], EntityType: [""Customer Order"", ""Handling Unit""], Actor: []","MATCH (ent1:Entity {EntityType:""Customer Order""})-[:REL]-(ent2:Entity {EntityType:""Handling Unit""}) WITH ent1, COLLECT(DISTINCT ent2) AS relatedItems RETURN MAX(size(relatedItems)) <= 5 AS ruleSatisfied"
A Handling Unit must always be linked to at least one Customer Order.,"Activity: [], EntityType: [""Handling Unit"", ""Customer Order""], Actor: []","MATCH (ent1:Entity {EntityType:""Customer Order""})-[:REL]-(ent2:Entity {EntityType:""Handling Unit""}) WITH ent2, COLLECT(DISTINCT ent1) AS relatedItems RETURN MIN(size(relatedItems)) >= 1 AS ruleSatisfied"
A Customer Order cannot have more than 7 different Handling Units.,"Activity: [], EntityType: [""Customer Order"", ""Handling Unit""], Actor: []","MATCH (ent1:Entity {EntityType:""Customer Order""})-[:REL]-(ent2:Entity {EntityType:""Handling Unit""}) WITH ent1, COLLECT(DISTINCT ent2) AS relatedItems RETURN MAX(size(relatedItems)) <= 7 AS ruleSatisfied"
A Handling Unit should not be part of more than 3 different Customer Orders.,"Activity: [], EntityType: [""Handling Unit"", ""Customer Order""], Actor: []","MATCH (ent1:Entity {EntityType:""Customer Order""})-[:REL]-(ent2:Entity {EntityType:""Handling Unit""}) WITH ent2, COLLECT(DISTINCT ent1) AS relatedItems RETURN MAX(size(relatedItems)) <= 3 AS ruleSatisfied"
No Customer Order should be associated with fewer than 1 Handling Unit.,"Activity: [], EntityType: [""Customer Order"", ""Handling Unit""], Actor: []","MATCH (ent1:Entity {EntityType:""Customer Order""})-[:REL]-(ent2:Entity {EntityType:""Handling Unit""}) WITH ent1, COLLECT(DISTINCT ent2) AS relatedItems RETURN MIN(size(relatedItems)) >= 1 AS ruleSatisfied"
A Customer Order cannot have fewer than 2 Transport Documents.,"Activity: [], EntityType: [""Customer Order"", ""Transport Document""], Actor: []","MATCH (ent1:Entity {EntityType:""Customer Order""})-[:REL]-(ent2:Entity {EntityType:""Transport Document""}) WITH ent1, COLLECT(DISTINCT ent2) AS relatedItems RETURN MIN(size(relatedItems)) >= 2 AS ruleSatisfied"
No Transport Document should be associated with more than 5 Customer Orders.,"Activity: [], EntityType: [""Transport Document"", ""Customer Order""], Actor: []","MATCH (ent1:Entity {EntityType:""Customer Order""})-[:REL]-(ent2:Entity {EntityType:""Transport Document""}) WITH ent2, COLLECT(DISTINCT ent1) AS relatedItems RETURN MAX(size(relatedItems)) <= 5 AS ruleSatisfied"
A Container should contain at least one Transport Document.,"Activity: [], EntityType: [""Container"", ""Transport Document""], Actor: []","MATCH (ent1:Entity {EntityType:""Container""})-[:REL]-(ent2:Entity {EntityType:""Transport Document""}) WITH ent1, COLLECT(DISTINCT ent2) AS relatedItems RETURN MIN(size(relatedItems)) >= 1 AS ruleSatisfied"
No Truck should have more than 10 Containers associated with it.,"Activity: [], EntityType: [""Truck"", ""Container""], Actor: []","MATCH (ent1:Entity {EntityType:""Truck""})-[:REL]-(ent2:Entity {EntityType:""Container""}) WITH ent1, COLLECT(DISTINCT ent2) AS relatedItems RETURN MAX(size(relatedItems)) <= 10 AS ruleSatisfied"
A Container cannot belong to more than 3 different Trucks.,"Activity: [], EntityType: [""Container"", ""Truck""], Actor: []","MATCH (ent1:Entity {EntityType:""Truck""})-[:REL]-(ent2:Entity {EntityType:""Container""}) WITH ent2, COLLECT(DISTINCT ent1) AS relatedItems RETURN MAX(size(relatedItems)) <= 3 AS ruleSatisfied"
A Container should not have more than 5 associated Handling Units.,"Activity: [], EntityType: [""Container"", ""Handling Unit""], Actor: []","MATCH (ent1:Entity {EntityType:""Container""})-[:REL]-(ent2:Entity {EntityType:""Handling Unit""}) WITH ent1, COLLECT(DISTINCT ent2) AS relatedItems RETURN MAX(size(relatedItems)) <= 5 AS ruleSatisfied"
A Handling Unit must always be linked to at least one Container.,"Activity: [], EntityType: [""Handling Unit"", ""Container""], Actor: []","MATCH (ent1:Entity {EntityType:""Container""})-[:REL]-(ent2:Entity {EntityType:""Handling Unit""}) WITH ent2, COLLECT(DISTINCT ent1) AS relatedItems RETURN MIN(size(relatedItems)) >= 1 AS ruleSatisfied"
A Transport Document cannot have more than 7 different Vehicles.,"Activity: [], EntityType: [""Transport Document"", ""Vehicle""], Actor: []","MATCH (ent1:Entity {EntityType:""Transport Document""})-[:REL]-(ent2:Entity {EntityType:""Vehicle""}) WITH ent1, COLLECT(DISTINCT ent2) AS relatedItems RETURN MAX(size(relatedItems)) <= 7 AS ruleSatisfied"
A Vehicle should not be part of more than 3 different Transport Documents.,"Activity: [], EntityType: [""Vehicle"", ""Transport Document""], Actor: []","MATCH (ent1:Entity {EntityType:""Transport Document""})-[:REL]-(ent2:Entity {EntityType:""Vehicle""}) WITH ent2, COLLECT(DISTINCT ent1) AS relatedItems RETURN MAX(size(relatedItems)) <= 3 AS ruleSatisfied"
No Customer Order should be associated with fewer than 1 Transport Document.,"Activity: [], EntityType: [""Customer Order"", ""Transport Document""], Actor: []","MATCH (ent1:Entity {EntityType:""Customer Order""})-[:REL]-(ent2:Entity {EntityType:""Transport Document""}) WITH ent1, COLLECT(DISTINCT ent2) AS relatedItems RETURN MIN(size(relatedItems)) >= 1 AS ruleSatisfied"
"For every ""Pick Up Empty Container"", at least 1 ""Container"" must be involved on average.","Activity: [""Pick Up Empty Container""], EntityType: [""Container""], Actor: []","MATCH (ent:Entity {EntityType: ""Container""})<-[:CORR]-(e:Event {Activity: ""Pick Up Empty Container""}) WITH e, COUNT(DISTINCT ent) AS relatedContainerCount RETURN AVG(relatedContainerCount) >= 1 AS ruleSatisfied"
"On average, no more than 3 ""Container"" should be linked to any ""Create Transport Document"".","Activity: [""Create Transport Document""], EntityType: [""Container""], Actor: []","MATCH (ent:Entity {EntityType: ""Container""})<-[:CORR]-(e:Event {Activity: ""Create Transport Document""}) WITH e, COUNT(DISTINCT ent) AS relatedContainerCount RETURN AVG(relatedContainerCount) <= 3 AS ruleSatisfied"
"On average, no more than 4 ""Truck"" should be linked during ""Book Vehicles"".","Activity: [""Book Vehicles""], EntityType: [""Truck""], Actor: []","MATCH (ent:Entity {EntityType: ""Truck""})<-[:CORR]-(e:Event {Activity: ""Book Vehicles""}) WITH e, COUNT(DISTINCT ent) AS relatedTruckCount RETURN AVG(relatedTruckCount) <= 4 AS ruleSatisfied"
"For each ""Depart"", at least 1 ""Transport Document"" should be involved on average.","Activity: [""Depart""], EntityType: [""Transport Document""], Actor: []","MATCH (ent:Entity {EntityType: ""Transport Document""})<-[:CORR]-(e:Event {Activity: ""Depart""}) WITH e, COUNT(DISTINCT ent) AS relatedTransportDocCount RETURN AVG(relatedTransportDocCount) >= 1 AS ruleSatisfied"
"When a ""Reschedule Container"" event occurs, on average, no more than 2 ""Container"" should be affected.","Activity: [""Reschedule Container""], EntityType: [""Container""], Actor: []","MATCH (ent:Entity {EntityType: ""Container""})<-[:CORR]-(e:Event {Activity: ""Reschedule Container""}) WITH e, COUNT(DISTINCT ent) AS relatedContainerCount RETURN AVG(relatedContainerCount) <= 2 AS ruleSatisfied"
"When a new handling unit is added, on average, at least 2 trucks should be involved.","Activity: [""Place in Stock""], EntityType: [""Truck""], Actor: []","MATCH (ent:Entity {EntityType: ""Truck""})<-[:CORR]-(e:Event {Activity: ""Place in Stock""}) WITH e, COUNT(DISTINCT ent) AS relatedTruckCount RETURN AVG(relatedTruckCount) >= 2 AS ruleSatisfied"
The loading action should not involve more than 3 handling units on average.,"Activity: [""Load to Vehicle""], EntityType: [""Handling Unit""], Actor: []","MATCH (ent:Entity {EntityType: ""Handling Unit""})<-[:CORR]-(e:Event {Activity: ""Load to Vehicle""}) WITH e, COUNT(DISTINCT ent) AS relatedHandlingUnitCount RETURN AVG(relatedHandlingUnitCount) <= 3 AS ruleSatisfied"
"When receiving a truck, there should be an average of at least 2 transport documents involved.","Activity: [""Drive to Terminal""], EntityType: [""Transport Document""], Actor: []","MATCH (ent:Entity {EntityType: ""Transport Document""})<-[:CORR]-(e:Event {Activity: ""Drive to Terminal""}) WITH e, COUNT(DISTINCT ent) AS relatedTransportDocCount RETURN AVG(relatedTransportDocCount) >= 2 AS ruleSatisfied"
"For each loading bay operation, no more than 4 forklifts should be linked on average.","Activity: [""Bring to Loading Bay""], EntityType: [""Forklift""], Actor: []","MATCH (ent:Entity {EntityType: ""Forklift""})<-[:CORR]-(e:Event {Activity: ""Bring to Loading Bay""}) WITH e, COUNT(DISTINCT ent) AS relatedForkliftCount RETURN AVG(relatedForkliftCount) <= 4 AS ruleSatisfied"
Removing a transport document should always involve at least 1 customer order on average.,"Activity: [""Order Empty Containers""], EntityType: [""Customer Order""], Actor: []","MATCH (ent:Entity {EntityType: ""Customer Order""})<-[:CORR]-(e:Event {Activity: ""Order Empty Containers""}) WITH e, COUNT(DISTINCT ent) AS relatedCustomerOrderCount RETURN AVG(relatedCustomerOrderCount) >= 1 AS ruleSatisfied"
"A ""Register Customer Order"" event must involve at least 1 ""Customer Order"" entity.","Activity: [""Register Customer Order""], EntityType: [""Customer Order""], Actor: []","MATCH (ent:Entity {EntityType: ""Customer Order""})<-[:CORR]-(e:Event {Activity: ""Register Customer Order""}) WITH e, COLLECT(ent) AS orders RETURN CASE WHEN ANY (x in COLLECT(SIZE(orders)) where x < 1) THEN false ELSE true END as ruleSatisfied"
"Every ""Create Transport Document"" event should be linked to at least 2 ""Truck"" entities.","Activity: [""Create Transport Document""], EntityType: [""Truck""], Actor: []","MATCH (ent:Entity {EntityType: ""Truck""})<-[:CORR]-(e:Event {Activity: ""Create Transport Document""}) WITH e, COLLECT(ent) AS trucks RETURN CASE WHEN ANY (x in COLLECT(SIZE(trucks)) where x < 2) THEN false ELSE true END as ruleSatisfied"
"For each ""Book Vehicles"" event, there must be at least 1 ""Vehicle"" involved.","Activity: [""Book Vehicles""], EntityType: [""Vehicle""], Actor: []","MATCH (ent:Entity {EntityType: ""Vehicle""})<-[:CORR]-(e:Event {Activity: ""Book Vehicles""}) WITH e, COLLECT(ent) AS vehicles RETURN CASE WHEN ANY (x in COLLECT(SIZE(vehicles)) where x < 1) THEN false ELSE true END as ruleSatisfied"
"When an ""Order Empty Containers"" event occurs, at least 2 ""Container"" entities should be present.","Activity: [""Order Empty Containers""], EntityType: [""Container""], Actor: []","MATCH (ent:Entity {EntityType: ""Container""})<-[:CORR]-(e:Event {Activity: ""Order Empty Containers""}) WITH e, COLLECT(ent) AS containers RETURN CASE WHEN ANY (x in COLLECT(SIZE(containers)) where x < 2) THEN false ELSE true END as ruleSatisfied"
"For each ""Pick Up Empty Container"" task, there must be at least 1 ""Truck"" entity involved.","Activity: [""Pick Up Empty Container""], EntityType: [""Truck""], Actor: []","MATCH (ent:Entity {EntityType: ""Truck""})<-[:CORR]-(e:Event {Activity: ""Pick Up Empty Container""}) WITH e, COLLECT(ent) AS trucks RETURN CASE WHEN ANY (x in COLLECT(SIZE(trucks)) where x < 1) THEN false ELSE true END as ruleSatisfied"
"Every ""Collect Goods"" event must be linked to at least 2 ""Handling Unit"" entities.","Activity: [""Collect Goods""], EntityType: [""Handling Unit""], Actor: []","MATCH (ent:Entity {EntityType: ""Handling Unit""})<-[:CORR]-(e:Event {Activity: ""Collect Goods""}) WITH e, COLLECT(ent) AS units RETURN CASE WHEN ANY (x in COLLECT(SIZE(units)) where x < 2) THEN false ELSE true END as ruleSatisfied"
"Each time a truck is loaded, there must be at least one handling unit associated.","Activity: [""Load Truck""], EntityType: [""Handling Unit""], Actor: []","MATCH (ent:Entity {EntityType: ""Handling Unit""})<-[:CORR]-(e:Event {Activity: ""Load Truck""}) WITH e, COLLECT(ent) AS units RETURN CASE WHEN ANY (x in COLLECT(SIZE(units)) where x < 1) THEN false ELSE true END as ruleSatisfied"
"Whenever a truck arrives at the terminal, at least two containers must be involved in the process.","Activity: [""Drive to Terminal""], EntityType: [""Container""], Actor: []","MATCH (ent:Entity {EntityType: ""Container""})<-[:CORR]-(e:Event {Activity: ""Drive to Terminal""}) WITH e, COLLECT(ent) AS containers RETURN CASE WHEN ANY (x in COLLECT(SIZE(containers)) where x < 2) THEN false ELSE true END as ruleSatisfied"
"When a forklift places goods in stock, it should be linked to at least one handling unit.","Activity: [""Place in Stock""], EntityType: [""Handling Unit""], Actor: []","MATCH (ent:Entity {EntityType: ""Handling Unit""})<-[:CORR]-(e:Event {Activity: ""Place in Stock""}) WITH e, COLLECT(ent) AS units RETURN CASE WHEN ANY (x in COLLECT(SIZE(units)) where x < 1) THEN false ELSE true END as ruleSatisfied"
"Each time goods are brought to the loading bay, at least two handling units must be associated.","Activity: [""Bring to Loading Bay""], EntityType: [""Handling Unit""], Actor: []","MATCH (ent:Entity {EntityType: ""Handling Unit""})<-[:CORR]-(e:Event {Activity: ""Bring to Loading Bay""}) WITH e, COLLECT(ent) AS units RETURN CASE WHEN ANY (x in COLLECT(SIZE(units)) where x < 2) THEN false ELSE true END as ruleSatisfied"
"If a container rescheduling occurs, at least one transport document should be associated.","Activity: [""Reschedule Container""], EntityType: [""Transport Document""], Actor: []","MATCH (ent:Entity {EntityType: ""Transport Document""})<-[:CORR]-(e:Event {Activity: ""Reschedule Container""}) WITH e, COLLECT(ent) AS docs RETURN CASE WHEN ANY (x in COLLECT(SIZE(docs)) where x < 1) THEN false ELSE true END as ruleSatisfied"
The sojourn time for registering a customer order should be less than 2 hours.,"Activity: [""Register Customer Order""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Register Customer Order""}) WITH e, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(latestPredecessor, e.timestamp) AS sojournDuration RETURN MAX(sojournDuration.seconds) < (2 * 60 * 60) AS ruleSatisfied"
The maximum sojourn time for booking vehicles should be no more than 6 hours.,"Activity: [""Book Vehicles""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Book Vehicles""}) WITH e, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(latestPredecessor, e.timestamp) AS sojournDuration RETURN MAX(sojournDuration.seconds) < (6 * 60 * 60) AS ruleSatisfied"
The sojourn time for creating a transport document should be less than 3 hours.,"Activity: [""Create Transport Document""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Create Transport Document""}) WITH e, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(latestPredecessor, e.timestamp) AS sojournDuration RETURN MAX(sojournDuration.seconds) < (3 * 60 * 60) AS ruleSatisfied"
The average sojourn time for ordering empty containers should be no more than 3 hours.,"Activity: [""Order Empty Containers""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Order Empty Containers""}) WITH e, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(latestPredecessor, e.timestamp) AS sojournDuration RETURN AVG(sojournDuration.seconds) < (3 * 60 * 60) AS ruleSatisfied"
The maximum sojourn time for picking up an empty container should be 1 hour or less.,"Activity: [""Pick Up Empty Container""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Pick Up Empty Container""}) WITH e, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(latestPredecessor, e.timestamp) AS sojournDuration RETURN MAX(sojournDuration.seconds) < (1 * 60 * 60) AS ruleSatisfied"
The maximum sojourn time for registering a customer order should be 4 hours.,"Activity: [""Register Customer Order""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Register Customer Order""}) WITH e, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(latestPredecessor, e.timestamp) AS sojournDuration RETURN MAX(sojournDuration.seconds) < (4 * 60 * 60) AS ruleSatisfied"
The average sojourn time for collecting goods should be less than 1 day.,"Activity: [""Collect Goods""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Collect Goods""}) WITH e, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(latestPredecessor, e.timestamp) AS sojournDuration RETURN AVG(sojournDuration.seconds) < (24 * 60 * 60) AS ruleSatisfied"
The sojourn time for loading a truck should not exceed 2 hours on average.,"Activity: [""Load Truck""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Load Truck""}) WITH e, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(latestPredecessor, e.timestamp) AS sojournDuration RETURN AVG(sojournDuration.seconds) < (2 * 60 * 60) AS ruleSatisfied"
The sojourn time for weighing should be less than 30 minutes.,"Activity: [""Weigh""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Weigh""}) WITH e, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(latestPredecessor, e.timestamp) AS sojournDuration RETURN MAX(sojournDuration.seconds) < (30 * 60) AS ruleSatisfied"
The sojourn time for rescheduling a container should be greater than 45 minutes on average.,"Activity: [""Reschedule Container""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Reschedule Container""}) WITH e, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(latestPredecessor, e.timestamp) AS sojournDuration RETURN AVG(sojournDuration.seconds) > (45 * 60) AS ruleSatisfied"
The average synchronization time for registering a customer order is less than 1 day.,"Activity: [""Register Customer Order""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Register Customer Order""}) WITH e, MAX(prec.timestamp) AS latestPredecessor, MIN(prec.timestamp) AS earliestPredecessor WITH duration.between(latestPredecessor, earliestPredecessor) AS synchronizationDuration RETURN AVG(synchronizationDuration.seconds) < (24 * 60 * 60) AS ruleSatisfied"
The average synchronization time for creating a transport document should be smaller than 1 day.,"Activity: [""Create Transport Document""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Create Transport Document""}) WITH e, MAX(prec.timestamp) AS latestPredecessor, MIN(prec.timestamp) AS earliestPredecessor WITH duration.between(latestPredecessor, earliestPredecessor) AS synchronizationDuration RETURN AVG(synchronizationDuration.seconds) < (24 * 60 * 60) AS ruleSatisfied"
"The minimum synchronization time for the activity ""Book Vehicles"" is greater than 15 minutes.","Activity: [""Book Vehicles""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Book Vehicles""}) WITH e, MAX(prec.timestamp) AS latestPredecessor, MIN(prec.timestamp) AS earliestPredecessor WITH duration.between(latestPredecessor, earliestPredecessor) AS synchronizationDuration RETURN MIN(synchronizationDuration.seconds) > (15 * 60) AS ruleSatisfied"
"The average synchronization time for activities related to ""Order Empty Containers"" must be less than 12 hours.","Activity: [""Order Empty Containers""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Order Empty Containers""}) WITH e, MAX(prec.timestamp) AS latestPredecessor, MIN(prec.timestamp) AS earliestPredecessor WITH duration.between(latestPredecessor, earliestPredecessor) AS synchronizationDuration RETURN AVG(synchronizationDuration.seconds) < (12 * 60 * 60) AS ruleSatisfied"
"The maximum synchronization time for ""Pick Up Empty Container"" is smaller than 2 hours.","Activity: [""Pick Up Empty Container""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Pick Up Empty Container""}) WITH e, MAX(prec.timestamp) AS latestPredecessor, MIN(prec.timestamp) AS earliestPredecessor WITH duration.between(latestPredecessor, earliestPredecessor) AS synchronizationDuration RETURN MAX(synchronizationDuration.seconds) < (2 * 60 * 60) AS ruleSatisfied"
The maximum synchronization time for the action of collecting goods should not exceed 5 hours.,"Activity: [""Collect Goods""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Collect Goods""}) WITH e, MAX(prec.timestamp) AS latestPredecessor, MIN(prec.timestamp) AS earliestPredecessor WITH duration.between(latestPredecessor, earliestPredecessor) AS synchronizationDuration RETURN MAX(synchronizationDuration.seconds) < (5 * 60 * 60) AS ruleSatisfied"
The synchronization time for loading a truck should never exceed 45 minutes.,"Activity: [""Load Truck""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Load Truck""}) WITH e, MAX(prec.timestamp) AS latestPredecessor, MIN(prec.timestamp) AS earliestPredecessor WITH duration.between(latestPredecessor, earliestPredecessor) AS synchronizationDuration RETURN MAX(synchronizationDuration.seconds) < (45 * 60) AS ruleSatisfied"
The synchronization time for driving to the terminal should not take more than 4 hours.,"Activity: [""Drive to Terminal""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Drive to Terminal""}) WITH e, MAX(prec.timestamp) AS latestPredecessor, MIN(prec.timestamp) AS earliestPredecessor WITH duration.between(latestPredecessor, earliestPredecessor) AS synchronizationDuration RETURN MAX(synchronizationDuration.seconds) < (4 * 60 * 60) AS ruleSatisfied"
The synchronization time for weighing should not exceed 20 minutes.,"Activity: [""Weigh""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Weigh""}) WITH e, MAX(prec.timestamp) AS latestPredecessor, MIN(prec.timestamp) AS earliestPredecessor WITH duration.between(latestPredecessor, earliestPredecessor) AS synchronizationDuration RETURN MAX(synchronizationDuration.seconds) < (20 * 60) AS ruleSatisfied"
The average flow time for registering a customer order must be less than 15 minutes.,"Activity: [""Register Customer Order""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Register Customer Order""}) WITH e, MIN(prec.timestamp) AS earliestPredecessor WITH e, duration.between(earliestPredecessor, e.timestamp) AS flowDuration RETURN AVG(flowDuration.seconds) < (15 * 60) AS ruleSatisfied"
The maximum flow time for creating a transport document must not exceed 2 hours.,"Activity: [""Create Transport Document""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Create Transport Document""}) WITH e, MIN(prec.timestamp) AS earliestPredecessor WITH e, duration.between(earliestPredecessor, e.timestamp) AS flowDuration RETURN MAX(flowDuration.seconds) <= (2 * 60 * 60) AS ruleSatisfied"
The minimum flow time for booking vehicles should be at least 5 minutes.,"Activity: [""Book Vehicles""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Book Vehicles""}) WITH e, MIN(prec.timestamp) AS earliestPredecessor WITH e, duration.between(earliestPredecessor, e.timestamp) AS flowDuration RETURN MIN(flowDuration.seconds) >= (5 * 60) AS ruleSatisfied"
The flow time for ordering empty containers must be greater than 10 minutes.,"Activity: [""Order Empty Containers""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Order Empty Containers""}) WITH e, MIN(prec.timestamp) AS earliestPredecessor WITH e, duration.between(earliestPredecessor, e.timestamp) AS flowDuration RETURN AVG(flowDuration.seconds) > (10 * 60) AS ruleSatisfied"
The average flow time for picking up empty containers should not exceed 1 day.,"Activity: [""Pick Up Empty Container""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Pick Up Empty Container""}) WITH e, MIN(prec.timestamp) AS earliestPredecessor WITH e, duration.between(earliestPredecessor, e.timestamp) AS flowDuration RETURN AVG(flowDuration.seconds) <= (24 * 60 * 60) AS ruleSatisfied"
The minimum flow time for collecting goods must be smaller than 30 minutes.,"Activity: [""Collect Goods""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Collect Goods""}) WITH e, MIN(prec.timestamp) AS earliestPredecessor WITH e, duration.between(earliestPredecessor, e.timestamp) AS flowDuration RETURN MIN(flowDuration.seconds) < (30 * 60) AS ruleSatisfied"
The flow time for loading a truck must always be greater than 2 hours.,"Activity: [""Load Truck""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Load Truck""}) WITH e, MIN(prec.timestamp) AS earliestPredecessor WITH e, duration.between(earliestPredecessor, e.timestamp) AS flowDuration RETURN MIN(flowDuration.seconds) > (2 * 60 * 60) AS ruleSatisfied"
"The flow time for ""Drive to Terminal"" must be less than 10 minutes.","Activity: [""Drive to Terminal""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Drive to Terminal""}) WITH e, MIN(prec.timestamp) AS earliestPredecessor WITH e, duration.between(earliestPredecessor, e.timestamp) AS flowDuration RETURN AVG(flowDuration.seconds) < (10 * 60) AS ruleSatisfied"
"The maximum flow time for ""Weigh"" should not exceed 1 hour.","Activity: [""Weigh""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Weigh""}) WITH e, MIN(prec.timestamp) AS earliestPredecessor WITH e, duration.between(earliestPredecessor, e.timestamp) AS flowDuration RETURN MAX(flowDuration.seconds) <= (1 * 60 * 60) AS ruleSatisfied"
"The minimum flow time for ""Place in Stock"" must be greater than 15 minutes.","Activity: [""Place in Stock""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Place in Stock""}) WITH e, MIN(prec.timestamp) AS earliestPredecessor WITH e, duration.between(earliestPredecessor, e.timestamp) AS flowDuration RETURN MIN(flowDuration.seconds) > (15 * 60) AS ruleSatisfied"
"The flow time for ""Load to Vehicle"" must not exceed 30 minutes.","Activity: [""Load to Vehicle""], EntityType: [], Actor: []","MATCH (prec:Event)-[:DF]->(e:Event {Activity: ""Load to Vehicle""}) WITH e, MIN(prec.timestamp) AS earliestPredecessor WITH e, duration.between(earliestPredecessor, e.timestamp) AS flowDuration RETURN MAX(flowDuration.seconds) <= (30 * 60) AS ruleSatisfied"
"The maximum pooling time for ""Register Customer Order"" events concerning customer orders should not exceed 3 days.","Activity: [""Register Customer Order""], EntityType: [""Customer Order""], Actor: []","MATCH (ent:Entity {EntityType: ""Customer Order""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Register Customer Order""})-[:CORR]->(ent) WITH e, MIN(prec.timestamp) AS earliestPredecessor, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(earliestPredecessor, latestPredecessor) AS poolDuration RETURN MAX(poolDuration.seconds) < (3 * 24 * 60 * 60) AS ruleSatisfied"
"On average, the pooling time for ""Create Transport Document"" with ""Transport Document"" entities should be longer than 5 hours.","Activity: [""Create Transport Document""], EntityType: [""Transport Document""], Actor: []","MATCH (ent:Entity {EntityType: ""Transport Document""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Create Transport Document""})-[:CORR]->(ent) WITH e, MIN(prec.timestamp) AS earliestPredecessor, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(earliestPredecessor, latestPredecessor) AS poolDuration RETURN AVG(poolDuration.seconds) > (5 * 60 * 60) AS ruleSatisfied"
"The pooling time for ""Book Vehicles"" activities related to trucks should not exceed 24 hours on average.","Activity: [""Book Vehicles""], EntityType: [""Truck""], Actor: []","MATCH (ent:Entity {EntityType: ""Truck""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Book Vehicles""})-[:CORR]->(ent) WITH e, MIN(prec.timestamp) AS earliestPredecessor, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(earliestPredecessor, latestPredecessor) AS poolDuration RETURN AVG(poolDuration.seconds) < (24 * 60 * 60) AS ruleSatisfied"
"The pooling time for ""Order Empty Containers"" concerning containers should not be longer than 12 hours.","Activity: [""Order Empty Containers""], EntityType: [""Container""], Actor: []","MATCH (ent:Entity {EntityType: ""Container""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Order Empty Containers""})-[:CORR]->(ent) WITH e, MIN(prec.timestamp) AS earliestPredecessor, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(earliestPredecessor, latestPredecessor) AS poolDuration RETURN MAX(poolDuration.seconds) < (12 * 60 * 60) AS ruleSatisfied"
"The maximum pooling time for ""Pick Up Empty Container"" related to containers should not exceed 36 hours.","Activity: [""Pick Up Empty Container""], EntityType: [""Container""], Actor: []","MATCH (ent:Entity {EntityType: ""Container""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Pick Up Empty Container""})-[:CORR]->(ent) WITH e, MIN(prec.timestamp) AS earliestPredecessor, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(earliestPredecessor, latestPredecessor) AS poolDuration RETURN MAX(poolDuration.seconds) < (36 * 60 * 60) AS ruleSatisfied"
"The pooling time of ""Collect Goods"" events regarding handling units should average more than 8 hours.","Activity: [""Collect Goods""], EntityType: [""Handling Unit""], Actor: []","MATCH (ent:Entity {EntityType: ""Handling Unit""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Collect Goods""})-[:CORR]->(ent) WITH e, MIN(prec.timestamp) AS earliestPredecessor, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(earliestPredecessor, latestPredecessor) AS poolDuration RETURN AVG(poolDuration.seconds) > (8 * 60 * 60) AS ruleSatisfied"
"The average pooling time of ""Load Truck"" for trucks should not exceed 7 days.","Activity: [""Load Truck""], EntityType: [""Truck""], Actor: []","MATCH (ent:Entity {EntityType: ""Truck""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Load Truck""})-[:CORR]->(ent) WITH e, MIN(prec.timestamp) AS earliestPredecessor, MAX(prec.timestamp) AS latestPredecessor WITH e, duration.between(earliestPredecessor, latestPredecessor) AS poolDuration RETURN AVG(poolDuration.seconds) < (7 * 24 * 60 * 60) AS ruleSatisfied"
"The maximum readiness time for ""Register Customer Order"" in relation to Customer Orders must not exceed 12 hours.","Activity: [""Register Customer Order""], EntityType: [""Customer Order""], Actor: []","MATCH (ent:Entity {EntityType: ""Customer Order""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Register Customer Order""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestCustomerOrderPredecessor, MAX(prec2.timestamp) AS latestPredecessor WITH e, duration.between(latestCustomerOrderPredecessor, latestPredecessor) AS readinessDuration RETURN MAX(readinessDuration.seconds) < (12 * 60 * 60) AS ruleSatisfied"
The minimum readiness time for clearing a transport document related to a customer order must be at least 6 hours.,"Activity: [""Create Transport Document""], EntityType: [""Customer Order""], Actor: []","MATCH (ent:Entity {EntityType: ""Customer Order""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Create Transport Document""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestCustomerOrderPredecessor, MAX(prec2.timestamp) AS latestPredecessor WITH e, duration.between(latestCustomerOrderPredecessor, latestPredecessor) AS readinessDuration RETURN MIN(readinessDuration.seconds) > (6 * 60 * 60) AS ruleSatisfied"
The average readiness time for booking vehicles for a customer order should be more than 2 hours.,"Activity: [""Book Vehicles""], EntityType: [""Customer Order""], Actor: []","MATCH (ent:Entity {EntityType: ""Customer Order""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Book Vehicles""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestCustomerOrderPredecessor, MAX(prec2.timestamp) AS latestPredecessor WITH e, duration.between(latestCustomerOrderPredecessor, latestPredecessor) AS readinessDuration RETURN AVG(readinessDuration.seconds) > (2 * 60 * 60) AS ruleSatisfied"
The maximum readiness time for ordering empty containers related to customer orders must be no longer than 10 hours.,"Activity: [""Order Empty Containers""], EntityType: [""Customer Order""], Actor: []","MATCH (ent:Entity {EntityType: ""Customer Order""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Order Empty Containers""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestCustomerOrderPredecessor, MAX(prec2.timestamp) AS latestPredecessor WITH e, duration.between(latestCustomerOrderPredecessor, latestPredecessor) AS readinessDuration RETURN MAX(readinessDuration.seconds) < (10 * 60 * 60) AS ruleSatisfied"
"The readiness time for ""Pick Up Empty Container"" concerning customer orders must not exceed 4 hours.","Activity: [""Pick Up Empty Container""], EntityType: [""Customer Order""], Actor: []","MATCH (ent:Entity {EntityType: ""Customer Order""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Pick Up Empty Container""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestCustomerOrderPredecessor, MAX(prec2.timestamp) AS latestPredecessor WITH e, duration.between(latestCustomerOrderPredecessor, latestPredecessor) AS readinessDuration RETURN MAX(readinessDuration.seconds) < (4 * 60 * 60) AS ruleSatisfied"
The average readiness time for collecting goods related to customer orders should be more than 2 hours.,"Activity: [""Collect Goods""], EntityType: [""Customer Order""], Actor: []","MATCH (ent:Entity {EntityType: ""Customer Order""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Collect Goods""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestCustomerOrderPredecessor, MAX(prec2.timestamp) AS latestPredecessor WITH e, duration.between(latestCustomerOrderPredecessor, latestPredecessor) AS readinessDuration RETURN AVG(readinessDuration.seconds) > (2 * 60 * 60) AS ruleSatisfied"
The minimum readiness time of loading truck w.r.t. customer orders must be at least 12 hours.,"Activity: [""Load Truck""], EntityType: [""Customer Order""], Actor: []","MATCH (ent:Entity {EntityType: ""Customer Order""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Load Truck""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestCustomerOrderPredecessor, MAX(prec2.timestamp) AS latestPredecessor WITH e, duration.between(latestCustomerOrderPredecessor, latestPredecessor) AS readinessDuration RETURN MIN(readinessDuration.seconds) > (12 * 60 * 60) AS ruleSatisfied"
The lagging time for receiving an order confirmation w.r.t customer orders must not exceed 2 days.,"Activity: [""Register Customer Order""], EntityType: [""Customer Order""], Actor: []","MATCH (ent:Entity {EntityType: ""Customer Order""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Register Customer Order""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestCOPredecessor, MIN(prec2.timestamp) AS earliestPredecessor WITH e, duration.between(latestCOPredecessor, earliestPredecessor) AS laggingDuration RETURN MAX(laggingDuration.seconds) < (2 * 24 * 60 * 60) AS ruleSatisfied"
The lagging time for clearing invoices related to transport documents should exceed 6 hours on average.,"Activity: [""Create Transport Document""], EntityType: [""Transport Document""], Actor: []","MATCH (ent:Entity {EntityType: ""Transport Document""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Create Transport Document""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestTDPPredecessor, MIN(prec2.timestamp) AS earliestPredecessor WITH e, duration.between(latestTDPPredecessor, earliestPredecessor) AS laggingDuration RETURN AVG(laggingDuration.seconds) > (6 * 60 * 60) AS ruleSatisfied"
The average lagging time for booking vehicles concerning transport documents should be less than 4 hours.,"Activity: [""Book Vehicles""], EntityType: [""Transport Document""], Actor: []","MATCH (ent:Entity {EntityType: ""Transport Document""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Book Vehicles""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestTDPPredecessor, MIN(prec2.timestamp) AS earliestPredecessor WITH e, duration.between(latestTDPPredecessor, earliestPredecessor) AS laggingDuration RETURN AVG(laggingDuration.seconds) < (4 * 60 * 60) AS ruleSatisfied"
The lagging time for recording an invoice receipt concerning transport documents should be at least 1 day on average.,"Activity: [""Weigh""], EntityType: [""Transport Document""], Actor: []","MATCH (ent:Entity {EntityType: ""Transport Document""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Weigh""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestTDPPredecessor, MIN(prec2.timestamp) AS earliestPredecessor WITH e, duration.between(latestTDPPredecessor, earliestPredecessor) AS laggingDuration RETURN AVG(laggingDuration.seconds) > (1 * 24 * 60 * 60) AS ruleSatisfied"
The lagging time for handling a container should be no more than 3 hours on average.,"Activity: [""Order Empty Containers""], EntityType: [""Container""], Actor: []","MATCH (ent:Entity {EntityType: ""Container""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Order Empty Containers""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestContainerPredecessor, MIN(prec2.timestamp) AS earliestPredecessor WITH e, duration.between(latestContainerPredecessor, earliestPredecessor) AS laggingDuration RETURN AVG(laggingDuration.seconds) < (3 * 60 * 60) AS ruleSatisfied"
"The lagging time for vendor invoice creation, in relation to containers, should not exceed 10 hours.","Activity: [""Pick Up Empty Container""], EntityType: [""Container""], Actor: []","MATCH (ent:Entity {EntityType: ""Container""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Pick Up Empty Container""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestContainerPredecessor, MIN(prec2.timestamp) AS earliestPredecessor WITH e, duration.between(latestContainerPredecessor, earliestPredecessor) AS laggingDuration RETURN MAX(laggingDuration.seconds) < (10 * 60 * 60) AS ruleSatisfied"
The lagging time for unblocking a payment concerning trucks should be at least 2 days on average.,"Activity: [""Drive to Terminal""], EntityType: [""Truck""], Actor: []","MATCH (ent:Entity {EntityType: ""Truck""})<-[:CORR]-(prec:Event)-[:DF]->(e:Event {Activity: ""Drive to Terminal""})-[:CORR]->(ent) MATCH (prec2:Event)-[:DF]->(e) WITH e, MAX(prec.timestamp) AS latestTruckPredecessor, MIN(prec2.timestamp) AS earliestPredecessor WITH e, duration.between(latestTruckPredecessor, earliestPredecessor) AS laggingDuration RETURN AVG(laggingDuration.seconds) > (2 * 24 * 60 * 60) AS ruleSatisfied"
Each Customer Order and its related Transport Documents should be linked to the event when a Transport Document is created.,"Activity: [""Create Transport Document""], EntityType: [""Customer Order"", ""Transport Document""], Actor: []","MATCH (co:Entity {EntityType: ""Customer Order""})<-[:CORR]-(createTDEvent:Event {Activity: ""Create Transport Document""}) MATCH (co)-[:REL]-(td:Entity {EntityType: ""Transport Document""}) WHERE NOT EXISTS { MATCH (td)<-[:CORR]-(createTDEvent) } RETURN CASE WHEN COUNT(co)>0 THEN false ELSE true END AS ruleSatisfied"
Every Transport Document and its associated Containers must be connected to the event when empty containers are ordered.,"Activity: [""Order Empty Containers""], EntityType: [""Transport Document"", ""Container""], Actor: []","MATCH (orderContainersEvent:Event {Activity: ""Order Empty Containers""})-[:CORR]->(td:Entity {EntityType: ""Transport Document""}) MATCH (td)-[:REL]-(c:Entity {EntityType: ""Container""}) WHERE NOT EXISTS { MATCH (c)<-[:CORR]-(orderContainersEvent) } RETURN CASE WHEN COUNT(td)>0 THEN false ELSE true END AS ruleSatisfied"
Each Container and its assigned Truck should be linked to the event when the empty container is picked up.,"Activity: [""Pick Up Empty Container""], EntityType: [""Container"", ""Truck""], Actor: []","MATCH (pickupEvent:Event {Activity: ""Pick Up Empty Container""})-[:CORR]->(c:Entity {EntityType: ""Container""}) MATCH (c)-[:REL]-(t:Entity {EntityType: ""Truck""}) WHERE NOT EXISTS { MATCH (t)<-[:CORR]-(pickupEvent) } RETURN CASE WHEN COUNT(c)>0 THEN false ELSE true END AS ruleSatisfied"
A Truck and its Handling Units must be linked to the event when goods are collected.,"Activity: [""Collect Goods""], EntityType: [""Truck"", ""Handling Unit""], Actor: []","MATCH (collectGoodsEvent:Event {Activity: ""Collect Goods""})-[:CORR]->(t:Entity {EntityType: ""Truck""}) MATCH (t)-[:REL]-(hu:Entity {EntityType: ""Handling Unit""}) WHERE NOT EXISTS { MATCH (hu)<-[:CORR]-(collectGoodsEvent) } RETURN CASE WHEN COUNT(t)>0 THEN false ELSE true END AS ruleSatisfied"
Each Truck and its Handling Units must be connected to the event when the truck is loaded.,"Activity: [""Load Truck""], EntityType: [""Truck"", ""Handling Unit""], Actor: []","MATCH (loadTruckEvent:Event {Activity: ""Load Truck""})-[:CORR]->(t:Entity {EntityType: ""Truck""}) MATCH (t)-[:REL]-(hu:Entity {EntityType: ""Handling Unit""}) WHERE NOT EXISTS { MATCH (hu)<-[:CORR]-(loadTruckEvent) } RETURN CASE WHEN COUNT(t)>0 THEN false ELSE true END AS ruleSatisfied"
Any Transport Document and its assigned Vehicles must be linked to the event when the vehicle departs.,"Activity: [""Depart""], EntityType: [""Transport Document"", ""Vehicle""], Actor: []","MATCH (departEvent:Event {Activity: ""Depart""})-[:CORR]->(td:Entity {EntityType: ""Transport Document""}) MATCH (td)-[:REL]-(v:Entity {EntityType: ""Vehicle""}) WHERE NOT EXISTS { MATCH (v)<-[:CORR]-(departEvent) } RETURN CASE WHEN COUNT(td)>0 THEN false ELSE true END AS ruleSatisfied"
Each Vehicle and its Handling Units must be linked to the event when the vehicle is weighed.,"Activity: [""Weigh""], EntityType: [""Vehicle"", ""Handling Unit""], Actor: []","MATCH (weighEvent:Event {Activity: ""Weigh""})-[:CORR]->(v:Entity {EntityType: ""Vehicle""}) MATCH (v)-[:REL]-(hu:Entity {EntityType: ""Handling Unit""}) WHERE NOT EXISTS { MATCH (hu)<-[:CORR]-(weighEvent) } RETURN CASE WHEN COUNT(v)>0 THEN false ELSE true END AS ruleSatisfied"
Any Forklift and its Handling Units should be connected to the event when they are placed in stock.,"Activity: [""Place in Stock""], EntityType: [""Forklift"", ""Handling Unit""], Actor: []","MATCH (stockEvent:Event {Activity: ""Place in Stock""})-[:CORR]->(f:Entity {EntityType: ""Forklift""}) MATCH (f)-[:REL]-(hu:Entity {EntityType: ""Handling Unit""}) WHERE NOT EXISTS { MATCH (hu)<-[:CORR]-(stockEvent) } RETURN CASE WHEN COUNT(f)>0 THEN false ELSE true END AS ruleSatisfied"
A Forklift and its Handling Units must be linked to the event when they are brought to the loading bay.,"Activity: [""Bring to Loading Bay""], EntityType: [""Forklift"", ""Handling Unit""], Actor: []","MATCH (loadingBayEvent:Event {Activity: ""Bring to Loading Bay""})-[:CORR]->(f:Entity {EntityType: ""Forklift""}) MATCH (f)-[:REL]-(hu:Entity {EntityType: ""Handling Unit""}) WHERE NOT EXISTS { MATCH (hu)<-[:CORR]-(loadingBayEvent) } RETURN CASE WHEN COUNT(f)>0 THEN false ELSE true END AS ruleSatisfied"
"If a Transport Document is created for a Customer Order, and then another Transport Document is created for the same Customer Order, the corresponding Vehicle Bookings should follow the same order.","Activity: [""Register Customer Order"", ""Book Vehicles""], EntityType: [""Customer Order"", ""Transport Document""], Actor: []","MATCH (co:Entity {EntityType: ""Customer Order""})<-[:CORR]-(registerDoc1:Event {Activity: ""Register Customer Order""})-[:CORR]->(doc1:Entity {EntityType: ""Transport Document""}) MATCH (co)<-[:CORR]-(registerDoc2:Event {Activity: ""Register Customer Order""})-[:CORR]->(doc2:Entity {EntityType: ""Transport Document""}) WHERE registerDoc1.timestamp < registerDoc2.timestamp OPTIONAL MATCH (doc1)<-[:CORR]-(booking1:Event {Activity: ""Book Vehicles""}) OPTIONAL MATCH (doc2)<-[:CORR]-(booking2:Event {Activity: ""Book Vehicles""}) WITH co, doc1, doc2, booking1, booking2 WHERE booking1 IS NOT NULL AND booking2 IS NOT NULL AND booking1.timestamp > booking2.timestamp WITH COUNT(*) AS violations RETURN CASE WHEN violations = 0 THEN true ELSE false END AS ruleSatisfied"
"If two Containers are ordered for the same Transport Document, the corresponding Empty Container Pickup should be processed in the same order.","Activity: [""Order Empty Containers"", ""Pick Up Empty Container""], EntityType: [""Container"", ""Transport Document""], Actor: []","MATCH (td:Entity {EntityType: ""Transport Document""})<-[:CORR]-(orderContainer1:Event {Activity: ""Order Empty Containers""})-[:CORR]->(container1:Entity {EntityType: ""Container""}) MATCH (td)<-[:CORR]-(orderContainer2:Event {Activity: ""Order Empty Containers""})-[:CORR]->(container2:Entity {EntityType: ""Container""}) WHERE orderContainer1.timestamp < orderContainer2.timestamp OPTIONAL MATCH (container1)<-[:CORR]-(pickup1:Event {Activity: ""Pick Up Empty Container""}) OPTIONAL MATCH (container2)<-[:CORR]-(pickup2:Event {Activity: ""Pick Up Empty Container""}) WITH td, container1, container2, pickup1, pickup2 WHERE pickup1 IS NOT NULL AND pickup2 IS NOT NULL AND pickup1.timestamp > pickup2.timestamp WITH COUNT(*) AS violations RETURN CASE WHEN violations = 0 THEN true ELSE false END AS ruleSatisfied"
"When two Containers are removed from a Transport Document, the corresponding Reschedule Container actions should be done in the same order as the removal.","Activity: [""Delete Purchase Order Item"", ""Reschedule Container""], EntityType: [""Container"", ""Transport Document""], Actor: []","MATCH (td:Entity {EntityType: ""Transport Document""})<-[:CORR]-(deleteContainer1:Event {Activity: ""Delete Purchase Order Item""})-[:CORR]->(container1:Entity {EntityType: ""Container""}) MATCH (td)<-[:CORR]-(deleteContainer2:Event {Activity: ""Delete Purchase Order Item""})-[:CORR]->(container2:Entity {EntityType: ""Container""}) WHERE deleteContainer1.timestamp < deleteContainer2.timestamp OPTIONAL MATCH (container1)<-[:CORR]-(reschedule1:Event {Activity: ""Reschedule Container""}) OPTIONAL MATCH (container2)<-[:CORR]-(reschedule2:Event {Activity: ""Reschedule Container""}) WITH td, container1, container2, reschedule1, reschedule2 WHERE reschedule1 IS NOT NULL AND reschedule2 IS NOT NULL AND reschedule1.timestamp > reschedule2.timestamp WITH COUNT(*) AS violations RETURN CASE WHEN violations = 0 THEN true ELSE false END AS ruleSatisfied"
"If two Transport Documents are created for a Customer Order, the Load to Vehicle process should be executed in the same order.","Activity: [""Register Customer Order"", ""Load to Vehicle""], EntityType: [""Customer Order"", ""Transport Document""], Actor: []","MATCH (co:Entity {EntityType: ""Customer Order""})<-[:CORR]-(registerDoc1:Event {Activity: ""Register Customer Order""})-[:CORR]->(doc1:Entity {EntityType: ""Transport Document""}) MATCH (co)<-[:CORR]-(registerDoc2:Event {Activity: ""Register Customer Order""})-[:CORR]->(doc2:Entity {EntityType: ""Transport Document""}) WHERE registerDoc1.timestamp < registerDoc2.timestamp OPTIONAL MATCH (doc1)<-[:CORR]-(load1:Event {Activity: ""Load to Vehicle""}) OPTIONAL MATCH (doc2)<-[:CORR]-(load2:Event {Activity: ""Load to Vehicle""}) WITH co, doc1, doc2, load1, load2 WHERE load1 IS NOT NULL AND load2 IS NOT NULL AND load1.timestamp > load2.timestamp WITH COUNT(*) AS violations RETURN CASE WHEN violations = 0 THEN true ELSE false END AS ruleSatisfied"
"If two Transport Documents are created for a Customer Order, the corresponding Vehicle Departures should happen in the same sequence as the Transport Document creation.","Activity: [""Register Customer Order"", ""Depart""], EntityType: [""Customer Order"", ""Transport Document""], Actor: []","MATCH (co:Entity {EntityType: ""Customer Order""})<-[:CORR]-(registerDoc1:Event {Activity: ""Register Customer Order""})-[:CORR]->(doc1:Entity {EntityType: ""Transport Document""}) MATCH (co)<-[:CORR]-(registerDoc2:Event {Activity: ""Register Customer Order""})-[:CORR]->(doc2:Entity {EntityType: ""Transport Document""}) WHERE registerDoc1.timestamp < registerDoc2.timestamp OPTIONAL MATCH (doc1)<-[:CORR]-(depart1:Event {Activity: ""Depart""}) OPTIONAL MATCH (doc2)<-[:CORR]-(depart2:Event {Activity: ""Depart""}) WITH co, doc1, doc2, depart1, depart2 WHERE depart1 IS NOT NULL AND depart2 IS NOT NULL AND depart1.timestamp > depart2.timestamp WITH COUNT(*) AS violations RETURN CASE WHEN violations = 0 THEN true ELSE false END AS ruleSatisfied"
"If two Transport Documents are created for a Customer Order, the Goods Collection for the items should follow the order of creation.","Activity: [""Register Customer Order"", ""Collect Goods""], EntityType: [""Customer Order"", ""Transport Document""], Actor: []","MATCH (co:Entity {EntityType: ""Customer Order""})<-[:CORR]-(registerDoc1:Event {Activity: ""Register Customer Order""})-[:CORR]->(doc1:Entity {EntityType: ""Transport Document""}) MATCH (co)<-[:CORR]-(registerDoc2:Event {Activity: ""Register Customer Order""})-[:CORR]->(doc2:Entity {EntityType: ""Transport Document""}) WHERE registerDoc1.timestamp < registerDoc2.timestamp OPTIONAL MATCH (doc1)<-[:CORR]-(collect1:Event {Activity: ""Collect Goods""}) OPTIONAL MATCH (doc2)<-[:CORR]-(collect2:Event {Activity: ""Collect Goods""}) WITH co, doc1, doc2, collect1, collect2 WHERE collect1 IS NOT NULL AND collect2 IS NOT NULL AND collect1.timestamp > collect2.timestamp WITH COUNT(*) AS violations RETURN CASE WHEN violations = 0 THEN true ELSE false END AS ruleSatisfied"
"If two Transport Documents are created for the same Customer Order, then the corresponding Weighing process should happen in the same sequence.","Activity: [""Register Customer Order"", ""Weigh""], EntityType: [""Customer Order"", ""Transport Document""], Actor: []","MATCH (co:Entity {EntityType: ""Customer Order""})<-[:CORR]-(registerDoc1:Event {Activity: ""Register Customer Order""})-[:CORR]->(doc1:Entity {EntityType: ""Transport Document""}) MATCH (co)<-[:CORR]-(registerDoc2:Event {Activity: ""Register Customer Order""})-[:CORR]->(doc2:Entity {EntityType: ""Transport Document""}) WHERE registerDoc1.timestamp < registerDoc2.timestamp OPTIONAL MATCH (doc1)<-[:CORR]-(weigh1:Event {Activity: ""Weigh""}) OPTIONAL MATCH (doc2)<-[:CORR]-(weigh2:Event {Activity: ""Weigh""}) WITH co, doc1, doc2, weigh1, weigh2 WHERE weigh1 IS NOT NULL AND weigh2 IS NOT NULL AND weigh1.timestamp > weigh2.timestamp WITH COUNT(*) AS violations RETURN CASE WHEN violations = 0 THEN true ELSE false END AS ruleSatisfied"
"If two Handling Units are placed in stock for the same Customer Order, they should be weighed in the same sequence.","Activity: [""Place in Stock"", ""Weigh""], EntityType: [""Customer Order"", ""Handling Unit""], Actor: []","MATCH (co:Entity {EntityType: ""Customer Order""})<-[:CORR]-(stockHU1:Event {Activity: ""Place in Stock""})-[:CORR]->(hu1:Entity {EntityType: ""Handling Unit""}) MATCH (co)<-[:CORR]-(stockHU2:Event {Activity: ""Place in Stock""})-[:CORR]->(hu2:Entity {EntityType: ""Handling Unit""}) WHERE stockHU1.timestamp < stockHU2.timestamp OPTIONAL MATCH (hu1)<-[:CORR]-(weigh1:Event {Activity: ""Weigh""}) OPTIONAL MATCH (hu2)<-[:CORR]-(weigh2:Event {Activity: ""Weigh""}) WITH co, hu1, hu2, weigh1, weigh2 WHERE weigh1 IS NOT NULL AND weigh2 IS NOT NULL AND weigh1.timestamp > weigh2.timestamp WITH COUNT(*) AS violations RETURN CASE WHEN violations = 0 THEN true ELSE false END AS ruleSatisfied"
"If two Forklifts are assigned to pick up empty containers, the corresponding loading actions should happen in the same order.","Activity: [""Pick Up Empty Container"", ""Load Truck""], EntityType: [""Forklift"", ""Container""], Actor: []","MATCH (container:Entity {EntityType: ""Container""})<-[:CORR]-(pickup1:Event {Activity: ""Pick Up Empty Container""})-[:CORR]->(forklift1:Entity {EntityType: ""Forklift""}) MATCH (container)<-[:CORR]-(pickup2:Event {Activity: ""Pick Up Empty Container""})-[:CORR]->(forklift2:Entity {EntityType: ""Forklift""}) WHERE pickup1.timestamp < pickup2.timestamp OPTIONAL MATCH (forklift1)<-[:CORR]-(load1:Event {Activity: ""Load Truck""}) OPTIONAL MATCH (forklift2)<-[:CORR]-(load2:Event {Activity: ""Load Truck""}) WITH container, forklift1, forklift2, load1, load2 WHERE load1 IS NOT NULL AND load2 IS NOT NULL AND load1.timestamp > load2.timestamp WITH COUNT(*) AS violations RETURN CASE WHEN violations = 0 THEN true ELSE false END AS ruleSatisfied"
"If two Transport Documents are created for a Customer Order, the Drive to Terminal action should follow the same sequence.","Activity: [""Register Customer Order"", ""Drive to Terminal""], EntityType: [""Customer Order"", ""Transport Document""], Actor: []","MATCH (co:Entity {EntityType: ""Customer Order""})<-[:CORR]-(registerDoc1:Event {Activity: ""Register Customer Order""})-[:CORR]->(doc1:Entity {EntityType: ""Transport Document""}) MATCH (co)<-[:CORR]-(registerDoc2:Event {Activity: ""Register Customer Order""})-[:CORR]->(doc2:Entity {EntityType: ""Transport Document""}) WHERE registerDoc1.timestamp < registerDoc2.timestamp OPTIONAL MATCH (doc1)<-[:CORR]-(drive1:Event {Activity: ""Drive to Terminal""}) OPTIONAL MATCH (doc2)<-[:CORR]-(drive2:Event {Activity: ""Drive to Terminal""}) WITH co, doc1, doc2, drive1, drive2 WHERE drive1 IS NOT NULL AND drive2 IS NOT NULL AND drive1.timestamp > drive2.timestamp WITH COUNT(*) AS violations RETURN CASE WHEN violations = 0 THEN true ELSE false END AS ruleSatisfied"
"If a ""Customer Order"" is registered but not followed by a ""Create Transport Document"" event within 7 days, a ""Book Vehicles"" event must be triggered.","Activity: [""Register Customer Order"", ""Create Transport Document"", ""Book Vehicles""], EntityType: [""Customer Order""], Actor: []","MATCH (registerEvent:Event {Activity: ""Register Customer Order""})-[:CORR]->(order:Entity {EntityType: ""Customer Order""}) OPTIONAL MATCH (transportEvent:Event {Activity: ""Create Transport Document""})-[:CORR]->(order) WHERE transportEvent.timestamp <= registerEvent.timestamp + duration({days: 7}) WITH order, registerEvent, transportEvent WHERE transportEvent IS NULL OPTIONAL MATCH (bookVehicleEvent:Event {Activity: ""Book Vehicles""})-[:CORR]->(order) WHERE bookVehicleEvent.timestamp > registerEvent.timestamp + duration({days: 7}) WITH order, COUNT(bookVehicleEvent) AS bookings RETURN CASE WHEN any(x in COLLECT(bookings) WHERE x=0) THEN false ELSE true END AS ruleSatisfied"
"If a ""Transport Document"" has no ""Load Truck"" event within 30 days of being created, an ""Order Empty Containers"" event should be issued.","Activity: [""Create Transport Document"", ""Load Truck"", ""Order Empty Containers""], EntityType: [""Transport Document""], Actor: []","MATCH (createEvent:Event {Activity: ""Create Transport Document""})-[:CORR]->(doc:Entity {EntityType: ""Transport Document""}) OPTIONAL MATCH (loadTruckEvent:Event {Activity: ""Load Truck""})-[:CORR]->(doc) WHERE loadTruckEvent.timestamp <= createEvent.timestamp + duration({days: 30}) WITH doc, createEvent, loadTruckEvent WHERE loadTruckEvent IS NULL OPTIONAL MATCH (orderContainersEvent:Event {Activity: ""Order Empty Containers""})-[:CORR]->(doc) WHERE orderContainersEvent.timestamp > createEvent.timestamp + duration({days: 30}) WITH doc, COUNT(orderContainersEvent) AS orders RETURN CASE WHEN any(x in COLLECT(orders) WHERE x=0) THEN false ELSE true END AS ruleSatisfied"
"If for a Container, a ""Create Transport Document"" event is not recorded within 15 days after a ""Order Empty Containers"" event, a ""Pick Up Empty Container"" event must be created.","Activity: [""Order Empty Containers"", ""Create Transport Document"", ""Pick Up Empty Container""], EntityType: [""Container""], Actor: []","MATCH (orderEvent:Event {Activity: ""Order Empty Containers""})-[:CORR]->(container:Entity {EntityType: ""Container""}) OPTIONAL MATCH (transportEvent:Event {Activity: ""Create Transport Document""})-[:CORR]->(container) WHERE transportEvent.timestamp <= orderEvent.timestamp + duration({days: 15}) WITH container, orderEvent, transportEvent WHERE transportEvent IS NULL OPTIONAL MATCH (pickUpEvent:Event {Activity: ""Pick Up Empty Container""})-[:CORR]->(container) WHERE pickUpEvent.timestamp > orderEvent.timestamp + duration({days: 15}) WITH container, COUNT(pickUpEvent) AS pickups RETURN CASE WHEN any(x in COLLECT(pickups) WHERE x=0) THEN false ELSE true END AS ruleSatisfied"
"If for a Truck, the ""Book Vehicles"" event has not occurred within 7 days of ""Load Truck"", a ""Drive to Terminal"" event must be generated.","Activity: [""Load Truck"", ""Book Vehicles"", ""Drive to Terminal""], EntityType: [""Truck""], Actor: []","MATCH (loadEvent:Event {Activity: ""Load Truck""})-[:CORR]->(truck:Entity {EntityType: ""Truck""}) OPTIONAL MATCH (bookEvent:Event {Activity: ""Book Vehicles""})-[:CORR]->(truck) WHERE bookEvent.timestamp <= loadEvent.timestamp + duration({days: 7}) WITH truck, loadEvent, bookEvent WHERE bookEvent IS NULL OPTIONAL MATCH (driveEvent:Event {Activity: ""Drive to Terminal""})-[:CORR]->(truck) WHERE driveEvent.timestamp > loadEvent.timestamp + duration({days: 7}) WITH truck, COUNT(driveEvent) AS drives RETURN CASE WHEN any(x in COLLECT(drives) WHERE x=0) THEN false ELSE true END AS ruleSatisfied"
"If a ""Transport Document"" is deleted but no ""Load Truck"" occurs within 14 days, a ""Weigh"" event must be issued.","Activity: [""Delete Transport Document"", ""Load Truck"", ""Weigh""], EntityType: [""Transport Document""], Actor: []","MATCH (deleteEvent:Event {Activity: ""Delete Transport Document""})-[:CORR]->(doc:Entity {EntityType: ""Transport Document""}) OPTIONAL MATCH (loadEvent:Event {Activity: ""Load Truck""})-[:CORR]->(doc) WHERE loadEvent.timestamp <= deleteEvent.timestamp + duration({days: 14}) WITH doc, deleteEvent, loadEvent WHERE loadEvent IS NULL OPTIONAL MATCH (weighEvent:Event {Activity: ""Weigh""})-[:CORR]->(doc) WHERE weighEvent.timestamp > deleteEvent.timestamp + duration({days: 14}) WITH doc, COUNT(weighEvent) AS weighings RETURN CASE WHEN any(x in COLLECT(weighings) WHERE x=0) THEN false ELSE true END AS ruleSatisfied"
"If a ""Customer Order"" has not received a ""Pick Up Empty Container"" event within 48 hours after registration, a ""Depart"" event must occur.","Activity: [""Register Customer Order"", ""Pick Up Empty Container"", ""Depart""], EntityType: [""Customer Order""], Actor: []","MATCH (registerEvent:Event {Activity: ""Register Customer Order""})-[:CORR]->(order:Entity {EntityType: ""Customer Order""}) OPTIONAL MATCH (pickUpEvent:Event {Activity: ""Pick Up Empty Container""})-[:CORR]->(order) WHERE pickUpEvent.timestamp <= registerEvent.timestamp + duration({hours: 48}) WITH order, registerEvent, pickUpEvent WHERE pickUpEvent IS NULL OPTIONAL MATCH (departEvent:Event {Activity: ""Depart""})-[:CORR]->(order) WHERE departEvent.timestamp > registerEvent.timestamp + duration({hours: 48}) WITH order, COUNT(departEvent) AS departures RETURN CASE WHEN any(x in COLLECT(departures) WHERE x=0) THEN false ELSE true END AS ruleSatisfied"
"If for a Handling Unit, a ""Weigh"" event is not recorded within 14 days of a ""Load Truck"" event, a ""Bring to Loading Bay"" event should occur.","Activity: [""Load Truck"", ""Weigh"", ""Bring to Loading Bay""], EntityType: [""Handling Unit""], Actor: []","MATCH (loadEvent:Event {Activity: ""Load Truck""})-[:CORR]->(unit:Entity {EntityType: ""Handling Unit""}) OPTIONAL MATCH (weighEvent:Event {Activity: ""Weigh""})-[:CORR]->(unit) WHERE weighEvent.timestamp <= loadEvent.timestamp + duration({days: 14}) WITH unit, loadEvent, weighEvent WHERE weighEvent IS NULL OPTIONAL MATCH (bringEvent:Event {Activity: ""Bring to Loading Bay""})-[:CORR]->(unit) WHERE bringEvent.timestamp > loadEvent.timestamp + duration({days: 14}) WITH unit, COUNT(bringEvent) AS brings RETURN CASE WHEN any(x in COLLECT(brings) WHERE x=0) THEN false ELSE true END AS ruleSatisfied"
"If for a Forklift, the ""Reschedule Container"" event does not happen within 5 days after a ""Load to Vehicle"" event, a ""Place in Stock"" must be triggered.","Activity: [""Load to Vehicle"", ""Reschedule Container"", ""Place in Stock""], EntityType: [""Forklift""], Actor: []","MATCH (loadEvent:Event {Activity: ""Load to Vehicle""})-[:CORR]->(forklift:Entity {EntityType: ""Forklift""}) OPTIONAL MATCH (rescheduleEvent:Event {Activity: ""Reschedule Container""})-[:CORR]->(forklift) WHERE rescheduleEvent.timestamp <= loadEvent.timestamp + duration({days: 5}) WITH forklift, loadEvent, rescheduleEvent WHERE rescheduleEvent IS NULL OPTIONAL MATCH (stockEvent:Event {Activity: ""Place in Stock""})-[:CORR]->(forklift) WHERE stockEvent.timestamp > loadEvent.timestamp + duration({days: 5}) WITH forklift, COUNT(stockEvent) AS stocks RETURN CASE WHEN any(x in COLLECT(stocks) WHERE x=0) THEN false ELSE true END AS ruleSatisfied"
"For a given Customer Order, a new Transport Document cannot be created if a Vehicle has not been booked for a previously created Transport Document within 10 days.","Activity: [""Create Transport Document"", ""Book Vehicles""], EntityType: [""Customer Order"", ""Transport Document""], Actor: []","MATCH (td:Entity {EntityType: ""Transport Document""})-[:REL]-(co:Entity {EntityType: ""Customer Order""})<-[:CORR]-(createEvent:Event {Activity: ""Create Transport Document""}) WHERE NOT EXISTS { MATCH (td)<-[:CORR]-(vehicleBookingEvent:Event {Activity: ""Book Vehicles""}) WHERE vehicleBookingEvent.timestamp < createEvent.timestamp + duration({days: 10}) } OPTIONAL MATCH (co)-[:REL]-(newTd:Entity {EntityType: ""Transport Document""})<-[:CORR]-(newCreateEvent:Event {Activity: ""Create Transport Document""}) WHERE newCreateEvent.timestamp > createEvent.timestamp + duration({days: 10}) WITH co, newTd, COUNT(newTd) AS newTransportDocumentsCreated RETURN CASE WHEN any(x in COLLECT(newTd) WHERE x>0) THEN false ELSE true END AS ruleSatisfied"
"For a given Customer Order, a new Transport Document cannot be created if an Empty Container has not been ordered for a previously created Transport Document within 15 days.","Activity: [""Create Transport Document"", ""Order Empty Containers""], EntityType: [""Customer Order"", ""Transport Document""], Actor: []","MATCH (td:Entity {EntityType: ""Transport Document""})-[:REL]-(co:Entity {EntityType: ""Customer Order""})<-[:CORR]-(createEvent:Event {Activity: ""Create Transport Document""}) WHERE NOT EXISTS { MATCH (td)<-[:CORR]-(emptyContainerOrderEvent:Event {Activity: ""Order Empty Containers""}) WHERE emptyContainerOrderEvent.timestamp < createEvent.timestamp + duration({days: 15}) } OPTIONAL MATCH (co)-[:REL]-(newTd:Entity {EntityType: ""Transport Document""})<-[:CORR]-(newCreateEvent:Event {Activity: ""Create Transport Document""}) WHERE newCreateEvent.timestamp > createEvent.timestamp + duration({days: 15}) WITH co, newTd, COUNT(newTd) AS newTransportDocumentsCreated RETURN CASE WHEN any(x in COLLECT(newTd) WHERE x>0) THEN false ELSE true END AS ruleSatisfied"
"For a given Customer Order, a new Transport Document cannot be created if a Pickup of Empty Container has not been performed for a previously created Transport Document within 20 days.","Activity: [""Create Transport Document"", ""Pick Up Empty Container""], EntityType: [""Customer Order"", ""Transport Document""], Actor: []","MATCH (td:Entity {EntityType: ""Transport Document""})-[:REL]-(co:Entity {EntityType: ""Customer Order""})<-[:CORR]-(createEvent:Event {Activity: ""Create Transport Document""}) WHERE NOT EXISTS { MATCH (td)<-[:CORR]-(pickUpEvent:Event {Activity: ""Pick Up Empty Container""}) WHERE pickUpEvent.timestamp < createEvent.timestamp + duration({days: 20}) } OPTIONAL MATCH (co)-[:REL]-(newTd:Entity {EntityType: ""Transport Document""})<-[:CORR]-(newPickUpEvent:Event {Activity: ""Pick Up Empty Container""}) WHERE newPickUpEvent.timestamp > createEvent.timestamp + duration({days: 20}) WITH co, newTd, COUNT(newTd) AS transportDocumentsWithPickUp RETURN CASE WHEN any(x in COLLECT(newTd) WHERE x>0) THEN false ELSE true END AS ruleSatisfied"
"For a given Customer Order, a new Transport Document cannot be created if a Goods Collection has not been recorded for a previously created Transport Document within 7 days.","Activity: [""Create Transport Document"", ""Collect Goods""], EntityType: [""Customer Order"", ""Transport Document""], Actor: []","MATCH (td:Entity {EntityType: ""Transport Document""})-[:REL]-(co:Entity {EntityType: ""Customer Order""})<-[:CORR]-(createEvent:Event {Activity: ""Create Transport Document""}) WHERE NOT EXISTS { MATCH (td)<-[:CORR]-(goodsCollectionEvent:Event {Activity: ""Collect Goods""}) WHERE goodsCollectionEvent.timestamp < createEvent.timestamp + duration({days: 7}) } OPTIONAL MATCH (co)-[:REL]-(newTd:Entity {EntityType: ""Transport Document""})<-[:CORR]-(newCollectEvent:Event {Activity: ""Collect Goods""}) WHERE newCollectEvent.timestamp > createEvent.timestamp + duration({days: 7}) WITH co, newTd, COUNT(newTd) AS newTransportDocumentsCreated RETURN CASE WHEN any(x in COLLECT(newTd) WHERE x>0) THEN false ELSE true END AS ruleSatisfied"
"For a given Customer Order, a new Transport Document cannot be created if a Truck has not been assigned to a previously created Transport Document within 5 days.","Activity: [""Create Transport Document"", ""Book Vehicles""], EntityType: [""Customer Order"", ""Transport Document""], Actor: []","MATCH (td:Entity {EntityType: ""Transport Document""})-[:REL]-(co:Entity {EntityType: ""Customer Order""})<-[:CORR]-(createEvent:Event {Activity: ""Create Transport Document""}) WHERE NOT EXISTS { MATCH (td)<-[:CORR]-(truckBookingEvent:Event {Activity: ""Book Vehicles""}) WHERE truckBookingEvent.timestamp < createEvent.timestamp + duration({days: 5}) } OPTIONAL MATCH (co)-[:REL]-(newTd:Entity {EntityType: ""Transport Document""})<-[:CORR]-(newBookTruckEvent:Event {Activity: ""Book Vehicles""}) WHERE newBookTruckEvent.timestamp > createEvent.timestamp + duration({days: 5}) WITH co, newTd, COUNT(newTd) AS transportDocumentsWithTruckBooking RETURN CASE WHEN any(x in COLLECT(newTd) WHERE x>0) THEN false ELSE true END AS ruleSatisfied"
"For a given Customer Order, a new Transport Document cannot be created if a Handling Unit has not been placed in stock for a previously created Transport Document within 3 days.","Activity: [""Create Transport Document"", ""Place in Stock""], EntityType: [""Customer Order"", ""Transport Document""], Actor: []","MATCH (td:Entity {EntityType: ""Transport Document""})-[:REL]-(co:Entity {EntityType: ""Customer Order""})<-[:CORR]-(createEvent:Event {Activity: ""Create Transport Document""}) WHERE NOT EXISTS { MATCH (td)<-[:CORR]-(placeInStockEvent:Event {Activity: ""Place in Stock""}) WHERE placeInStockEvent.timestamp < createEvent.timestamp + duration({days: 3}) } OPTIONAL MATCH (co)-[:REL]-(newTd:Entity {EntityType: ""Transport Document""})<-[:CORR]-(newPlaceInStockEvent:Event {Activity: ""Place in Stock""}) WHERE newPlaceInStockEvent.timestamp > createEvent.timestamp + duration({days: 3}) WITH co, newTd, COUNT(newTd) AS transportDocumentsWithStockPlacement RETURN CASE WHEN any(x in COLLECT(newTd) WHERE x>0) THEN false ELSE true END AS ruleSatisfied"
"For a given Customer Order, a new Transport Document cannot be created if a Vehicle has not been loaded for a previously created TD within 5 days.","Activity: [""Create Transport Document"", ""Load to Vehicle""], EntityType: [""Customer Order"", ""Transport Document""], Actor: []","MATCH (td:Entity {EntityType: ""Transport Document""})-[:REL]-(co:Entity {EntityType: ""Customer Order""})<-[:CORR]-(createEvent:Event {Activity: ""Create Transport Document""}) WHERE NOT EXISTS { MATCH (td)<-[:CORR]-(loadEvent:Event {Activity: ""Load to Vehicle""}) WHERE loadEvent.timestamp < createEvent.timestamp + duration({days: 5}) } OPTIONAL MATCH (co)-[:REL]-(newTd:Entity {EntityType: ""Transport Document""})<-[:CORR]-(newLoadEvent:Event {Activity: ""Load to Vehicle""}) WHERE newLoadEvent.timestamp > createEvent.timestamp + duration({days: 5}) WITH co, newTd, COUNT(newTd) AS transportDocumentsWithLoading RETURN CASE WHEN any(x in COLLECT(newTd) WHERE x>0) THEN false ELSE true END AS ruleSatisfied"
"Whenever a Customer Order is registered, all associated Transport Documents must have the ""Create Transport Document"" event executed at the same time.","Activity: [""Create Transport Document""], EntityType: [""Customer Order"", ""Transport Document""], Actor: []","MATCH (co:Entity {EntityType: ""Customer Order""})-[:REL]-(td:Entity {EntityType: ""Transport Document""}) MATCH (td)<-[:CORR]-(registerCOEvent:Event {Activity: ""Create Transport Document""}) WITH co, COUNT(DISTINCT registerCOEvent) AS registerCOEvents RETURN CASE WHEN any (x in COLLECT(registerCOEvents) WHERE x>1) THEN false ELSE true END AS ruleSatisfied"
"Trucks carrying multiple Containers must have the ""Order Empty Containers"" activity executed for all linked Containers together.","Activity: [""Order Empty Containers""], EntityType: [""Truck"", ""Container""], Actor: []","MATCH (t:Entity {EntityType: ""Truck""})-[:REL]-(c:Entity {EntityType: ""Container""}) MATCH (c)<-[:CORR]-(orderContainersEvent:Event {Activity: ""Order Empty Containers""}) WITH t, COUNT(DISTINCT orderContainersEvent) AS orderContainersEvents RETURN CASE WHEN any (x in COLLECT(orderContainersEvents) WHERE x>1) THEN false ELSE true END AS ruleSatisfied"
"Each Container should have the ""Pick Up Empty Container"" event occur simultaneously for all of its associated Handling Units.","Activity: [""Pick Up Empty Container""], EntityType: [""Container"", ""Handling Unit""], Actor: []","MATCH (c:Entity {EntityType: ""Container""})-[:REL]-(hu:Entity {EntityType: ""Handling Unit""}) MATCH (hu)<-[:CORR]-(pickupEvent:Event {Activity: ""Pick Up Empty Container""}) WITH c, COUNT(DISTINCT pickupEvent) AS pickupEvents RETURN CASE WHEN any (x in COLLECT(pickupEvents) WHERE x>1) THEN false ELSE true END AS ruleSatisfied"
"When Vehicles are booked for a Transport Document, all assigned Vehicles must be processed for ""Book Vehicles"" at the same time.","Activity: [""Book Vehicles""], EntityType: [""Transport Document"", ""Vehicle""], Actor: []","MATCH (td:Entity {EntityType: ""Transport Document""})-[:REL]-(v:Entity {EntityType: ""Vehicle""}) MATCH (v)<-[:CORR]-(bookVehiclesEvent:Event {Activity: ""Book Vehicles""}) WITH td, COUNT(DISTINCT bookVehiclesEvent) AS bookVehiclesEvents RETURN CASE WHEN any (x in COLLECT(bookVehiclesEvents) WHERE x>1) THEN false ELSE true END AS ruleSatisfied"
"Whenever a Truck transports multiple Containers, the ""Drive to Terminal"" event must be recorded simultaneously for all of them.","Activity: [""Drive to Terminal""], EntityType: [""Truck"", ""Container""], Actor: []","MATCH (t:Entity {EntityType: ""Truck""})-[:REL]-(c:Entity {EntityType: ""Container""}) MATCH (c)<-[:CORR]-(driveToTerminalEvent:Event {Activity: ""Drive to Terminal""}) WITH t, COUNT(DISTINCT driveToTerminalEvent) AS driveToTerminalEvents RETURN CASE WHEN any (x in COLLECT(driveToTerminalEvents) WHERE x>1) THEN false ELSE true END AS ruleSatisfied"
"Every Handling Unit inside a Container must be processed together for the ""Bring to Loading Bay"" activity.","Activity: [""Bring to Loading Bay""], EntityType: [""Container"", ""Handling Unit""], Actor: []","MATCH (c:Entity {EntityType: ""Container""})-[:REL]-(hu:Entity {EntityType: ""Handling Unit""}) MATCH (hu)<-[:CORR]-(bringToLoadingBayEvent:Event {Activity: ""Bring to Loading Bay""}) WITH c, COUNT(DISTINCT bringToLoadingBayEvent) AS bringToLoadingBayEvents RETURN CASE WHEN any (x in COLLECT(bringToLoadingBayEvents) WHERE x>1) THEN false ELSE true END AS ruleSatisfied"
"All Containers assigned to a Truck must undergo the ""Pick Up Empty Container"" event at the same time.","Activity: [""Pick Up Empty Container""], EntityType: [""Truck"", ""Container""], Actor: []","MATCH (t:Entity {EntityType: ""Truck""})-[:REL]-(c:Entity {EntityType: ""Container""}) MATCH (c)<-[:CORR]-(pickupEvent:Event {Activity: ""Pick Up Empty Container""}) WITH t, COUNT(DISTINCT pickupEvent) AS pickupEvents RETURN CASE WHEN any (x in COLLECT(pickupEvents) WHERE x>1) THEN false ELSE true END AS ruleSatisfied"
"The ""Order Empty Containers"" event should take place simultaneously for all Containers assigned to the same Truck.","Activity: [""Order Empty Containers""], EntityType: [""Truck"", ""Container""], Actor: []","MATCH (t:Entity {EntityType: ""Truck""})-[:REL]-(c:Entity {EntityType: ""Container""}) MATCH (c)<-[:CORR]-(orderContainersEvent:Event {Activity: ""Order Empty Containers""}) WITH t, COUNT(DISTINCT orderContainersEvent) AS orderContainersEvents RETURN CASE WHEN any (x in COLLECT(orderContainersEvents) WHERE x>1) THEN false ELSE true END AS ruleSatisfied"
"Vehicles assigned to a Transport Document must undergo the ""Reschedule Container"" activity simultaneously.","Activity: [""Reschedule Container""], EntityType: [""Transport Document"", ""Vehicle""], Actor: []","MATCH (td:Entity {EntityType: ""Transport Document""})-[:REL]-(v:Entity {EntityType: ""Vehicle""}) MATCH (v)<-[:CORR]-(rescheduleEvent:Event {Activity: ""Reschedule Container""}) WITH td, COUNT(DISTINCT rescheduleEvent) AS rescheduleEvents RETURN CASE WHEN any (x in COLLECT(rescheduleEvents) WHERE x>1) THEN false ELSE true END AS ruleSatisfied"
"For each Customer Order (CO), if a ""Register Customer Order"" event occurs, then all corresponding Transport Documents (TD) should also have a ""Create Transport Document"" event.","Activity: [""Register Customer Order"", ""Create Transport Document""], EntityType: [""Customer Order"", ""Transport Document""], Actor: []","MATCH (co:Entity {EntityType: ""Customer Order""})<-[:CORR]-(registerEvent:Event {Activity: ""Register Customer Order""}) MATCH (co)-[:REL]-(td:Entity {EntityType: ""Transport Document""}) WHERE NOT EXISTS { MATCH (td)<-[:CORR]-(createTDEvent:Event {Activity: ""Create Transport Document""}) } WITH COUNT(td) AS transportDocsWithoutCreation RETURN CASE WHEN transportDocsWithoutCreation = 0 THEN true ELSE false END AS ruleSatisfied"
"If a ""Book Vehicles"" event happens for a Transport Document (TD), then a ""Depart"" event must be recorded for all associated Vehicles.","Activity: [""Book Vehicles"", ""Depart""], EntityType: [""Transport Document"", ""Vehicle""], Actor: []","MATCH (td:Entity {EntityType: ""Transport Document""})<-[:CORR]-(bookVehiclesEvent:Event {Activity: ""Book Vehicles""}) MATCH (td)-[:REL]-(v:Entity {EntityType: ""Vehicle""}) WHERE NOT EXISTS { MATCH (v)<-[:CORR]-(departEvent:Event {Activity: ""Depart""}) } WITH COUNT(v) AS vehiclesWithoutDeparture RETURN CASE WHEN vehiclesWithoutDeparture = 0 THEN true ELSE false END AS ruleSatisfied"
"When a ""Drive to Terminal"" event occurs for a given Transport Document (TD), all associated Vehicles should reflect the ""Weigh"" event.","Activity: [""Drive to Terminal"", ""Weigh""], EntityType: [""Transport Document"", ""Vehicle""], Actor: []","MATCH (td:Entity {EntityType: ""Transport Document""})<-[:CORR]-(driveTerminalEvent:Event {Activity: ""Drive to Terminal""}) MATCH (td)-[:REL]-(v:Entity {EntityType: ""Vehicle""}) WHERE NOT EXISTS { MATCH (v)<-[:CORR]-(weighEvent:Event {Activity: ""Weigh""}) } WITH COUNT(v) AS vehiclesWithoutWeigh RETURN CASE WHEN vehiclesWithoutWeigh = 0 THEN true ELSE false END AS ruleSatisfied"
"If a ""Place in Stock"" event occurs for a Container (C), a corresponding ""Bring to Loading Bay"" event must be executed for every related Handling Unit (HU).","Activity: [""Place in Stock"", ""Bring to Loading Bay""], EntityType: [""Container"", ""Handling Unit""], Actor: []","MATCH (c:Entity {EntityType: ""Container""})<-[:CORR]-(placeStockEvent:Event {Activity: ""Place in Stock""}) MATCH (c)-[:REL]-(hu:Entity {EntityType: ""Handling Unit""}) WHERE NOT EXISTS { MATCH (hu)<-[:CORR]-(bringBayEvent:Event {Activity: ""Bring to Loading Bay""}) } WITH COUNT(hu) AS handlingUnitsWithoutLoadingBay RETURN CASE WHEN handlingUnitsWithoutLoadingBay = 0 THEN true ELSE false END AS ruleSatisfied"
"Whenever a ""Create Transport Document"" event is logged for a Customer Order (CO), every associated Transport Document (TD) must also have a ""Book Vehicles"" event.","Activity: [""Create Transport Document"", ""Book Vehicles""], EntityType: [""Customer Order"", ""Transport Document""], Actor: []","MATCH (co:Entity {EntityType: ""Customer Order""})<-[:CORR]-(createTDEvent:Event {Activity: ""Create Transport Document""}) MATCH (co)-[:REL]-(td:Entity {EntityType: ""Transport Document""}) WHERE NOT EXISTS { MATCH (td)<-[:CORR]-(bookVehiclesEvent:Event {Activity: ""Book Vehicles""}) } WITH COUNT(td) AS transportDocsWithoutBooking RETURN CASE WHEN transportDocsWithoutBooking = 0 THEN true ELSE false END AS ruleSatisfied"
"As soon as a ""Load Truck"" event happens for a Container, each associated Handling Unit (HU) must undergo a ""Weigh"" event.","Activity: [""Load Truck"", ""Weigh""], EntityType: [""Container"", ""Handling Unit""], Actor: []","MATCH (c:Entity {EntityType: ""Container""})<-[:CORR]-(loadTruckEvent:Event {Activity: ""Load Truck""}) MATCH (c)-[:REL]-(hu:Entity {EntityType: ""Handling Unit""}) WHERE NOT EXISTS { MATCH (hu)<-[:CORR]-(weighEvent:Event {Activity: ""Weigh""}) } WITH COUNT(hu) AS handlingUnitsWithoutWeigh RETURN CASE WHEN handlingUnitsWithoutWeigh = 0 THEN true ELSE false END AS ruleSatisfied"
"For each Customer Order (CO), if a ""Register Customer Order"" event occurs, then all corresponding Transport Documents (TD) should also have a ""Create Transport Document"" event within 7 days.","Activity: [""Register Customer Order"", ""Create Transport Document""], EntityType: [""Customer Order"", ""Transport Document""], Actor: []","MATCH (co:Entity {EntityType: ""Customer Order""})<-[:CORR]-(registerCOEvent:Event {Activity: ""Register Customer Order""}) MATCH (co)-[:REL]-(td:Entity {EntityType: ""Transport Document""}) WHERE NOT EXISTS { MATCH (td)<-[:CORR]-(createTDEvent:Event {Activity: ""Create Transport Document""}) WHERE createTDEvent.timestamp <= registerCOEvent.timestamp + duration({days: 7}) } RETURN CASE WHEN COUNT(td) = 0 THEN true ELSE false END AS ruleSatisfied"
"If a ""Book Vehicles"" event happens for a Transport Document (TD), then a ""Drive to Terminal"" event must be recorded for all associated Vehicles within 5 days.","Activity: [""Book Vehicles"", ""Drive to Terminal""], EntityType: [""Transport Document"", ""Vehicle""], Actor: []","MATCH (td:Entity {EntityType: ""Transport Document""})<-[:CORR]-(bookVehiclesEvent:Event {Activity: ""Book Vehicles""}) MATCH (td)-[:REL]-(v:Entity {EntityType: ""Vehicle""}) WHERE NOT EXISTS { MATCH (v)<-[:CORR]-(driveToTerminalEvent:Event {Activity: ""Drive to Terminal""}) WHERE driveToTerminalEvent.timestamp <= bookVehiclesEvent.timestamp + duration({days: 5}) } RETURN CASE WHEN COUNT(v) = 0 THEN true ELSE false END AS ruleSatisfied"
"When an ""Order Empty Containers"" event is recorded for a Truck, a corresponding ""Pick Up Empty Container"" event should occur for all related Containers within 10 days.","Activity: [""Order Empty Containers"", ""Pick Up Empty Container""], EntityType: [""Truck"", ""Container""], Actor: []","MATCH (t:Entity {EntityType: ""Truck""})<-[:CORR]-(orderContainersEvent:Event {Activity: ""Order Empty Containers""}) MATCH (t)-[:REL]-(c:Entity {EntityType: ""Container""}) WHERE NOT EXISTS { MATCH (c)<-[:CORR]-(pickupEvent:Event {Activity: ""Pick Up Empty Container""}) WHERE pickupEvent.timestamp <= orderContainersEvent.timestamp + duration({days: 10}) } RETURN CASE WHEN COUNT(c) = 0 THEN true ELSE false END AS ruleSatisfied"
"When a ""Pick Up Empty Container"" event occurs for a given Truck, all associated Containers should reflect the ""Place in Stock"" event within 5 days.","Activity: [""Pick Up Empty Container"", ""Place in Stock""], EntityType: [""Truck"", ""Container""], Actor: []","MATCH (t:Entity {EntityType: ""Truck""})<-[:CORR]-(pickupEvent:Event {Activity: ""Pick Up Empty Container""}) MATCH (t)-[:REL]-(c:Entity {EntityType: ""Container""}) WHERE NOT EXISTS { MATCH (c)<-[:CORR]-(placeStockEvent:Event {Activity: ""Place in Stock""}) WHERE placeStockEvent.timestamp <= pickupEvent.timestamp + duration({days: 5}) } RETURN CASE WHEN COUNT(c) = 0 THEN true ELSE false END AS ruleSatisfied"
"If a ""Bring to Loading Bay"" event occurs for a Container, a corresponding ""Load to Vehicle"" event must be executed for every related Handling Unit (HU) within 3 days.","Activity: [""Bring to Loading Bay"", ""Load to Vehicle""], EntityType: [""Container"", ""Handling Unit""], Actor: []","MATCH (c:Entity {EntityType: ""Container""})<-[:CORR]-(bringToBayEvent:Event {Activity: ""Bring to Loading Bay""}) MATCH (c)-[:REL]-(hu:Entity {EntityType: ""Handling Unit""}) WHERE NOT EXISTS { MATCH (hu)<-[:CORR]-(loadVehicleEvent:Event {Activity: ""Load to Vehicle""}) WHERE loadVehicleEvent.timestamp <= bringToBayEvent.timestamp + duration({days: 3}) } RETURN CASE WHEN COUNT(hu) = 0 THEN true ELSE false END AS ruleSatisfied"
"Whenever an order is registered in the system, all corresponding transport documents must be created within 7 days.","Activity: [""Register Customer Order"", ""Create Transport Document""], EntityType: [""Customer Order"", ""Transport Document""], Actor: []","MATCH (co:Entity {EntityType: ""Customer Order""})<-[:CORR]-(registerCOEvent:Event {Activity: ""Register Customer Order""}) MATCH (co)-[:REL]-(td:Entity {EntityType: ""Transport Document""}) WHERE NOT EXISTS { MATCH (td)<-[:CORR]-(createTDEvent:Event {Activity: ""Create Transport Document""}) WHERE createTDEvent.timestamp <= registerCOEvent.timestamp + duration({days: 7}) } RETURN CASE WHEN COUNT(td) = 0 THEN true ELSE false END AS ruleSatisfied"
"If a container is placed in stock, then all handling units stored inside it should also be brought to the loading bay within 5 days.","Activity: [""Place in Stock"", ""Bring to Loading Bay""], EntityType: [""Container"", ""Handling Unit""], Actor: []","MATCH (c:Entity {EntityType: ""Container""})<-[:CORR]-(placeStockEvent:Event {Activity: ""Place in Stock""}) MATCH (c)-[:REL]-(hu:Entity {EntityType: ""Handling Unit""}) WHERE NOT EXISTS { MATCH (hu)<-[:CORR]-(bringToBayEvent:Event {Activity: ""Bring to Loading Bay""}) WHERE bringToBayEvent.timestamp <= placeStockEvent.timestamp + duration({days: 5}) } RETURN CASE WHEN COUNT(hu) = 0 THEN true ELSE false END AS ruleSatisfied"
"When a transport document is created, the necessary vehicles should be booked within 2 days.","Activity: [""Create Transport Document"", ""Book Vehicles""], EntityType: [""Transport Document"", ""Vehicle""], Actor: []","MATCH (td:Entity {EntityType: ""Transport Document""})<-[:CORR]-(createTDEvent:Event {Activity: ""Create Transport Document""}) MATCH (td)-[:REL]-(v:Entity {EntityType: ""Vehicle""}) WHERE NOT EXISTS { MATCH (v)<-[:CORR]-(bookVehiclesEvent:Event {Activity: ""Book Vehicles""}) WHERE bookVehiclesEvent.timestamp <= createTDEvent.timestamp + duration({days: 2}) } RETURN CASE WHEN COUNT(v) = 0 THEN true ELSE false END AS ruleSatisfied"
"If a Transport Document is created and the next event is the vendor creating a ""Load Truck"" event, then ""Collect Goods"" must occur before the ""Place in Stock"" event.","Activity: [""Create Transport Document"", ""Load Truck"", ""Collect Goods"", ""Place in Stock""], EntityType: [""Transport Document""], Actor: []","MATCH (td:Entity {EntityType: ""Transport Document""})<-[:CORR]-(createTDEvent:Event {Activity: ""Create Transport Document""}) MATCH (td)<-[:CORR]-(loadTruckEvent:Event {Activity: ""Load Truck""})<-[:DF]-(createTDEvent) WHERE NOT EXISTS { MATCH (td)<-[:CORR]-(collectGoodsEvent:Event {Activity: ""Collect Goods""}) MATCH (td)<-[:CORR]-(placeInStockEvent:Event {Activity: ""Place in Stock""}) WHERE collectGoodsEvent.timestamp < placeInStockEvent.timestamp } RETURN CASE WHEN COUNT(td)>0 THEN false ELSE true END AS ruleSatisfied"
"If a Customer Order is registered and the next action is to record a ""Book Vehicles"" event, the system must ensure the ""Order Empty Containers"" event is recorded before the ""Place in Stock"" event.","Activity: [""Register Customer Order"", ""Book Vehicles"", ""Order Empty Containers"", ""Place in Stock""], EntityType: [""Customer Order""], Actor: []","MATCH (co:Entity {EntityType: ""Customer Order""})<-[:CORR]-(registerCOEvent:Event {Activity: ""Register Customer Order""}) MATCH (co)<-[:CORR]-(bookVehiclesEvent:Event {Activity: ""Book Vehicles""})<-[:DF]-(registerCOEvent) WHERE NOT EXISTS { MATCH (co)<-[:CORR]-(orderContainersEvent:Event {Activity: ""Order Empty Containers""}) MATCH (co)<-[:CORR]-(placeInStockEvent:Event {Activity: ""Place in Stock""}) WHERE orderContainersEvent.timestamp < placeInStockEvent.timestamp } RETURN CASE WHEN COUNT(co)>0 THEN false ELSE true END AS ruleSatisfied"
"If a Transport Document is created and the next action is receiving the ""Pick Up Empty Container"" event, then the system must ensure that the ""Register Customer Order"" event is created before the ""Place in Stock"" event.","Activity: [""Register Customer Order"", ""Create Transport Document"", ""Pick Up Empty Container"", ""Place in Stock""], EntityType: [""Transport Document""], Actor: []","MATCH (td:Entity {EntityType: ""Transport Document""})<-[:CORR]-(registerCOEvent:Event {Activity: ""Register Customer Order""}) MATCH (td)<-[:CORR]-(createTDEvent:Event {Activity: ""Create Transport Document""})<-[:DF]-(registerCOEvent) WHERE NOT EXISTS { MATCH (td)<-[:CORR]-(pickUpContainerEvent:Event {Activity: ""Pick Up Empty Container""}) MATCH (td)<-[:CORR]-(placeInStockEvent:Event {Activity: ""Place in Stock""}) WHERE pickUpContainerEvent.timestamp < placeInStockEvent.timestamp } RETURN CASE WHEN COUNT(td)>0 THEN false ELSE true END AS ruleSatisfied"
"For every Customer Order, if a ""Weigh"" event is recorded and the next action is to remove a ""Reschedule Container"" event, then a ""Book Vehicles"" event must be recorded before the ""Place in Stock"" event.","Activity: [""Weigh"", ""Reschedule Container"", ""Book Vehicles"", ""Place in Stock""], EntityType: [""Customer Order""], Actor: []","MATCH (co:Entity {EntityType: ""Customer Order""})<-[:CORR]-(weighEvent:Event {Activity: ""Weigh""}) MATCH (co)<-[:CORR]-(rescheduleContainerEvent:Event {Activity: ""Reschedule Container""})<-[:DF]-(weighEvent) WHERE NOT EXISTS { MATCH (co)<-[:CORR]-(bookVehiclesEvent:Event {Activity: ""Book Vehicles""}) MATCH (co)<-[:CORR]-(placeInStockEvent:Event {Activity: ""Place in Stock""}) WHERE bookVehiclesEvent.timestamp < placeInStockEvent.timestamp } RETURN CASE WHEN COUNT(co)>0 THEN false ELSE true END AS ruleSatisfied"
"If a Transport Document is created and the next event is creating a ""Load to Vehicle"" event for that Transport Document, then the system must ensure that ""Collect Goods"" is recorded before the ""Place in Stock"" event.","Activity: [""Create Transport Document"", ""Collect Goods"", ""Place in Stock""], EntityType: [""Transport Document""], Actor: []","MATCH (td:Entity {EntityType: ""Transport Document""})<-[:CORR]-(createTDEvent:Event {Activity: ""Create Transport Document""}) MATCH (td)<-[:CORR]-(loadToVehicleEvent:Event {Activity: ""Load to Vehicle""})<-[:DF]-(createTDEvent) WHERE NOT EXISTS { MATCH (td)<-[:CORR]-(collectGoodsEvent:Event {Activity: ""Collect Goods""}) MATCH (td)<-[:CORR]-(placeInStockEvent:Event {Activity: ""Place in Stock""}) WHERE collectGoodsEvent.timestamp < placeInStockEvent.timestamp } RETURN CASE WHEN COUNT(td)>0 THEN false ELSE true END AS ruleSatisfied"
"For every Transport Document, if a ""Weigh"" event is recorded and the next action is to remove a ""Reschedule Container"" event, then a ""Book Vehicles"" event must be recorded before the ""Place in Stock"" event.","Activity: [""Weigh"", ""Reschedule Container"", ""Book Vehicles"", ""Place in Stock""], EntityType: [""Transport Document""], Actor: []","MATCH (td:Entity {EntityType: ""Transport Document""})<-[:CORR]-(weighEvent:Event {Activity: ""Weigh""}) MATCH (td)<-[:CORR]-(rescheduleContainerEvent:Event {Activity: ""Reschedule Container""})<-[:DF]-(weighEvent) WHERE NOT EXISTS { MATCH (td)<-[:CORR]-(bookVehiclesEvent:Event {Activity: ""Book Vehicles""}) MATCH (td)<-[:CORR]-(placeInStockEvent:Event {Activity: ""Place in Stock""}) WHERE bookVehiclesEvent.timestamp < placeInStockEvent.timestamp } RETURN CASE WHEN COUNT(td)>0 THEN false ELSE true END AS ruleSatisfied"
"After a Customer Order is registered, a Load Truck must be done within 5 days, and the Weigh must follow.","Activity: [""Register Customer Order"", ""Load Truck"", ""Weigh""], EntityType: [""Customer Order""], Actor: []","MATCH (co:Entity {EntityType: ""Customer Order""})<-[:CORR]-(confirmationEvent:Event {Activity: ""Register Customer Order""}) WHERE NOT EXISTS{ MATCH (co)<-[:CORR]-(loadTruckEvent:Event {Activity: ""Load Truck""}) WHERE loadTruckEvent.timestamp <= confirmationEvent.timestamp + duration({days: 5}) MATCH (co)<-[:CORR]-(weighEvent:Event {Activity: ""Weigh""}) WHERE weighEvent.timestamp > loadTruckEvent.timestamp } RETURN CASE WHEN COUNT(co)>0 THEN false ELSE true END AS ruleSatisfied"
"For every Transport Document, when a Load Truck is recorded, the Weigh must be made within 10 days, followed by placing the goods in stock.","Activity: [""Load Truck"", ""Weigh"", ""Place in Stock""], EntityType: [""Transport Document""], Actor: []","MATCH (td:Entity {EntityType: ""Transport Document""})<-[:CORR]-(loadTruckEvent:Event {Activity: ""Load Truck""}) WHERE NOT EXISTS{ MATCH (td)<-[:CORR]-(weighEvent:Event {Activity: ""Weigh""}) WHERE weighEvent.timestamp <= loadTruckEvent.timestamp + duration({days: 10}) MATCH (td)<-[:CORR]-(placeInStockEvent:Event {Activity: ""Place in Stock""}) WHERE placeInStockEvent.timestamp > weighEvent.timestamp } RETURN CASE WHEN COUNT(td)>0 THEN false ELSE true END AS ruleSatisfied"
"If a Transport Document undergoes a ""Register Customer Order"" event, then the vehicle must be booked within 3 days, and the Load to Vehicle must occur afterward.","Activity: [""Register Customer Order"", ""Book Vehicles"", ""Load to Vehicle""], EntityType: [""Transport Document""], Actor: []","MATCH (td:Entity {EntityType: ""Transport Document""})<-[:CORR]-(orderEvent:Event {Activity: ""Register Customer Order""}) WHERE NOT EXISTS{ MATCH (td)<-[:CORR]-(bookVehicleEvent:Event {Activity: ""Book Vehicles""}) WHERE bookVehicleEvent.timestamp <= orderEvent.timestamp + duration({days: 3}) MATCH (td)<-[:CORR]-(loadToVehicleEvent:Event {Activity: ""Load to Vehicle""}) WHERE loadToVehicleEvent.timestamp > bookVehicleEvent.timestamp } RETURN CASE WHEN COUNT(td)>0 THEN false ELSE true END AS ruleSatisfied"
"After a Transport Document is registered, the Record Goods Receipt must be done within 5 days, and the Load to Vehicle should follow.","Activity: [""Register Customer Order"", ""Load to Vehicle"", ""Place in Stock""], EntityType: [""Transport Document""], Actor: []","MATCH (td:Entity {EntityType: ""Transport Document""})<-[:CORR]-(confirmationEvent:Event {Activity: ""Register Customer Order""}) WHERE NOT EXISTS{ MATCH (td)<-[:CORR]-(loadToVehicleEvent:Event {Activity: ""Load to Vehicle""}) WHERE loadToVehicleEvent.timestamp <= confirmationEvent.timestamp + duration({days: 5}) MATCH (td)<-[:CORR]-(placeInStockEvent:Event {Activity: ""Place in Stock""}) WHERE placeInStockEvent.timestamp > loadToVehicleEvent.timestamp } RETURN CASE WHEN COUNT(td)>0 THEN false ELSE true END AS ruleSatisfied"
"For every Transport Document, when the Load Truck event is recorded, the Load to Vehicle must happen within 10 days, followed by Place in Stock.","Activity: [""Load Truck"", ""Load to Vehicle"", ""Place in Stock""], EntityType: [""Transport Document""], Actor: []","MATCH (td:Entity {EntityType: ""Transport Document""})<-[:CORR]-(loadTruckEvent:Event {Activity: ""Load Truck""}) WHERE NOT EXISTS{ MATCH (td)<-[:CORR]-(loadToVehicleEvent:Event {Activity: ""Load to Vehicle""}) WHERE loadToVehicleEvent.timestamp <= loadTruckEvent.timestamp + duration({days: 10}) MATCH (td)<-[:CORR]-(placeInStockEvent:Event {Activity: ""Place in Stock""}) WHERE placeInStockEvent.timestamp > loadToVehicleEvent.timestamp } RETURN CASE WHEN COUNT(td)>0 THEN false ELSE true END AS ruleSatisfied"
"When a Transport Document is created, a Load Truck must occur within 7 days, and a Load to Vehicle must follow.","Activity: [""Create Transport Document"", ""Load Truck"", ""Load to Vehicle""], EntityType: [""Transport Document""], Actor: []","MATCH (td:Entity {EntityType: ""Transport Document""})<-[:CORR]-(createEvent:Event {Activity: ""Create Transport Document""}) WHERE NOT EXISTS{ MATCH (td)<-[:CORR]-(loadTruckEvent:Event {Activity: ""Load Truck""}) WHERE loadTruckEvent.timestamp <= createEvent.timestamp + duration({days: 7}) MATCH (td)<-[:CORR]-(loadToVehicleEvent:Event {Activity: ""Load to Vehicle""}) WHERE loadToVehicleEvent.timestamp > loadTruckEvent.timestamp } RETURN CASE WHEN COUNT(td)>0 THEN false ELSE true END AS ruleSatisfied"
No more than five transport documents can be created per week.,"Activity: [""Create Transport Document""], EntityType: [""Transport Document""], Actor: []","MATCH (td:Entity {EntityType: ""Transport Document""})<-[:CORR]-(createEvent:Event {Activity: ""Create Transport Document""}) WITH td, createEvent WITH td, COLLECT(createEvent.timestamp) AS timestamps WITH td, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 7})]) <= 5) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS tdRules RETURN ALL(rule IN tdRules WHERE rule = true) AS ruleHoldsForAllTDs"
A Customer Order must not have more than 3 vehicle bookings recorded in a single month.,"Activity: [""Book Vehicles""], EntityType: [""Customer Order""], Actor: []","MATCH (co:Entity {EntityType: ""Customer Order""})<-[:CORR]-(bookEvent:Event {Activity: ""Book Vehicles""}) WITH co, bookEvent WITH co, COLLECT(bookEvent.timestamp) AS timestamps WITH co, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 30})]) <= 3) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS coRules RETURN ALL(rule IN coRules WHERE rule = true) AS ruleHoldsForAllCOs"
A Customer Order should not have more than two empty container pickups on the same day.,"Activity: [""Pick Up Empty Container""], EntityType: [""Customer Order""], Actor: []","MATCH (co:Entity {EntityType: ""Customer Order""})<-[:CORR]-(pickupEvent:Event {Activity: ""Pick Up Empty Container""}) WITH co, pickupEvent WITH co, COLLECT(pickupEvent.timestamp) AS timestamps WITH co, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 1})]) <= 2) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS coRules RETURN ALL(rule IN coRules WHERE rule = true) AS ruleHoldsForAllCOs"
"No more than five ""Order Empty Containers"" actions can be performed on a single Container in a week.","Activity: [""Order Empty Containers""], EntityType: [""Container""], Actor: []","MATCH (container:Entity {EntityType: ""Container""})<-[:CORR]-(orderEvent:Event {Activity: ""Order Empty Containers""}) WITH container, orderEvent WITH container, COLLECT(orderEvent.timestamp) AS timestamps WITH container, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 7})]) <= 5) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS containerRules RETURN ALL(rule IN containerRules WHERE rule = true) AS ruleHoldsForAllContainers"
"A Truck should not have more than one ""Load Truck"" action recorded per day.","Activity: [""Load Truck""], EntityType: [""Truck""], Actor: []","MATCH (truck:Entity {EntityType: ""Truck""})<-[:CORR]-(loadEvent:Event {Activity: ""Load Truck""}) WITH truck, loadEvent WITH truck, COLLECT(loadEvent.timestamp) AS timestamps WITH truck, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 1})]) <= 1) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS turckRules RETURN ALL(rule IN truckRules WHERE rule = true) AS ruleHoldsForAllTrucks"
"No ""Depart"" action should occur more than once per week for any Vehicle.","Activity: [""Depart""], EntityType: [""Vehicle""], Actor: []","MATCH (vehicle:Entity {EntityType: ""Vehicle""})<-[:CORR]-(departEvent:Event {Activity: ""Depart""}) WITH vehicle, departEvent WITH vehicle, COLLECT(departEvent.timestamp) AS timestamps WITH vehicle, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 7})]) <= 1) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS vehicleRules RETURN ALL(rule IN vehicleRules WHERE rule = true) AS ruleHoldsForAllVehicles"
"A Container must not have more than five ""Place in Stock"" actions recorded in a month.","Activity: [""Place in Stock""], EntityType: [""Container""], Actor: []","MATCH (container:Entity {EntityType: ""Container""})<-[:CORR]-(placeEvent:Event {Activity: ""Place in Stock""}) WITH container, placeEvent WITH container, COLLECT(placeEvent.timestamp) AS timestamps WITH container, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 30})]) <= 5) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS containerRules RETURN ALL(rule IN containerRules WHERE rule = true) AS ruleHoldsForAllContainers"
"A Truck must not have more than three ""Weigh"" actions recorded in a day.","Activity: [""Weigh""], EntityType: [""Truck""], Actor: []","MATCH (truck:Entity {EntityType: ""Truck""})<-[:CORR]-(weighEvent:Event {Activity: ""Weigh""}) WITH truck, weighEvent WITH truck, COLLECT(weighEvent.timestamp) AS timestamps WITH truck, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 1})]) <= 3) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS truckRules RETURN ALL(rule IN truckRules WHERE rule = true) AS ruleHoldsForAllTrucks"
"A Vehicle should not have more than one ""Load to Vehicle"" action recorded per day.","Activity: [""Load to Vehicle""], EntityType: [""Vehicle""], Actor: []","MATCH (vehicle:Entity {EntityType: ""Vehicle""})<-[:CORR]-(loadEvent:Event {Activity: ""Load to Vehicle""}) WITH vehicle, loadEvent WITH vehicle, COLLECT(loadEvent.timestamp) AS timestamps WITH vehicle, REDUCE(ruleSatisfied = true, idx IN RANGE(0, SIZE(timestamps) - 1) | ruleSatisfied AND SIZE([t IN timestamps WHERE t >= timestamps[idx] AND t < timestamps[idx] + duration({days: 1})]) <= 1) AS ruleSatisfied WITH COLLECT(ruleSatisfied) AS vehicleRules RETURN ALL(rule IN vehicleRules WHERE rule = true) AS ruleHoldsForAllVehicles"
No customer orders should be registered between 8 PM and 6 AM.,"Activity: [""Register Customer Order""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Register Customer Order""}) WHERE time(e.timestamp).hour >= 20 OR time(e.timestamp).hour < 6 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Transport documents cannot be created between 10 PM and 4 AM.,"Activity: [""Create Transport Document""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Create Transport Document""}) WHERE time(e.timestamp).hour >= 22 OR time(e.timestamp).hour < 4 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Vehicles are not allowed to be booked between 7 PM and 7 AM.,"Activity: [""Book Vehicles""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Book Vehicles""}) WHERE time(e.timestamp).hour >= 19 OR time(e.timestamp).hour < 7 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Trucks must not be loaded from 9 AM to 5 PM.,"Activity: [""Load Truck""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Load Truck""}) WHERE time(e.timestamp).hour >= 9 AND time(e.timestamp).hour < 17 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Transport documents should not be created between 11 PM and 7 AM.,"Activity: [""Create Transport Document""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Create Transport Document""}) WHERE time(e.timestamp).hour >= 23 OR time(e.timestamp).hour < 7 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Vehicles must not be rescheduled between 6 AM and 12 PM.,"Activity: [""Reschedule Container""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Reschedule Container""}) WHERE time(e.timestamp).hour >= 6 AND time(e.timestamp).hour < 12 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
No transport documents should be cleared during business hours (9 AM - 6 PM).,"Activity: [""Create Transport Document""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Create Transport Document""}) WHERE time(e.timestamp).hour >= 9 AND time(e.timestamp).hour < 18 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Containers should not be ordered from midnight to 8 AM.,"Activity: [""Order Empty Containers""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Order Empty Containers""}) WHERE time(e.timestamp).hour >= 0 AND time(e.timestamp).hour < 8 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Customer orders must not be registered on Mondays.,"Activity: [""Register Customer Order""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Register Customer Order""}) WHERE date(e.timestamp).dayOfWeek = 1 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Transport documents cannot be created on Sundays.,"Activity: [""Create Transport Document""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Create Transport Document""}) WHERE date(e.timestamp).dayOfWeek = 7 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Vehicles cannot be booked on Fridays.,"Activity: [""Book Vehicles""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Book Vehicles""}) WHERE date(e.timestamp).dayOfWeek = 5 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Empty containers should not be ordered on the weekend.,"Activity: [""Order Empty Containers""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Order Empty Containers""}) WHERE date(e.timestamp).dayOfWeek IN [6, 7] RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Transport documents cannot be created on Tuesdays.,"Activity: [""Create Transport Document""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Create Transport Document""}) WHERE date(e.timestamp).dayOfWeek = 2 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Trucks should never be loaded on Wednesdays.,"Activity: [""Load Truck""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Load Truck""}) WHERE date(e.timestamp).dayOfWeek = 3 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Containers cannot be picked up on Sundays.,"Activity: [""Pick Up Empty Container""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Pick Up Empty Container""}) WHERE date(e.timestamp).dayOfWeek = 7 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
"The average count of ""Register Customer Order"" events on Mondays must stay below 3.","Activity: [""Register Customer Order""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Register Customer Order""}) WHERE date(e.timestamp).dayOfWeek = 1 WITH date(e.timestamp) AS eventDate, COUNT(e) AS eventsPerDay WITH AVG(eventsPerDay) AS avgEvents RETURN avgEvents <= 3 AS ruleSatisfied"
"On Tuesdays, the number of ""Create Transport Document"" events should not exceed 2 on average.","Activity: [""Create Transport Document""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Create Transport Document""}) WHERE date(e.timestamp).dayOfWeek = 2 WITH date(e.timestamp) AS eventDate, COUNT(e) AS eventsPerDay WITH AVG(eventsPerDay) AS avgEvents RETURN avgEvents <= 2 AS ruleSatisfied"
"The average number of ""Load Truck"" events on Wednesdays must not surpass 5.","Activity: [""Load Truck""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Load Truck""}) WHERE date(e.timestamp).dayOfWeek = 3 WITH date(e.timestamp) AS eventDate, COUNT(e) AS eventsPerDay WITH AVG(eventsPerDay) AS avgEvents RETURN avgEvents <= 5 AS ruleSatisfied"
"Thursdays should see no more than 4 ""Pick Up Empty Container"" events on average.","Activity: [""Pick Up Empty Container""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Pick Up Empty Container""}) WHERE date(e.timestamp).dayOfWeek = 4 WITH date(e.timestamp) AS eventDate, COUNT(e) AS eventsPerDay WITH AVG(eventsPerDay) AS avgEvents RETURN avgEvents <= 4 AS ruleSatisfied"
"The number of ""Drive to Terminal"" events on Fridays should stay under 3 on average.","Activity: [""Drive to Terminal""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Drive to Terminal""}) WHERE date(e.timestamp).dayOfWeek = 5 WITH date(e.timestamp) AS eventDate, COUNT(e) AS eventsPerDay WITH AVG(eventsPerDay) AS avgEvents RETURN avgEvents <= 3 AS ruleSatisfied"
"On Saturdays, the average number of ""Place in Stock"" events must not exceed 1.","Activity: [""Place in Stock""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Place in Stock""}) WHERE date(e.timestamp).dayOfWeek = 6 WITH date(e.timestamp) AS eventDate, COUNT(e) AS eventsPerDay WITH AVG(eventsPerDay) AS avgEvents RETURN avgEvents <= 1 AS ruleSatisfied"
"The average number of ""Bring to Loading Bay"" events on Sundays should be under 2.","Activity: [""Bring to Loading Bay""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Bring to Loading Bay""}) WHERE date(e.timestamp).dayOfWeek = 7 WITH date(e.timestamp) AS eventDate, COUNT(e) AS eventsPerDay WITH AVG(eventsPerDay) AS avgEvents RETURN avgEvents <= 2 AS ruleSatisfied"
"On Mondays, no more than 6 ""Load to Vehicle"" events should be recorded on average.","Activity: [""Load to Vehicle""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Load to Vehicle""}) WHERE date(e.timestamp).dayOfWeek = 1 WITH date(e.timestamp) AS eventDate, COUNT(e) AS eventsPerDay WITH AVG(eventsPerDay) AS avgEvents RETURN avgEvents <= 6 AS ruleSatisfied"
"The average number of ""Depart"" events on Tuesdays must remain below 3.","Activity: [""Depart""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Depart""}) WHERE date(e.timestamp).dayOfWeek = 2 WITH date(e.timestamp) AS eventDate, COUNT(e) AS eventsPerDay WITH AVG(eventsPerDay) AS avgEvents RETURN avgEvents <= 3 AS ruleSatisfied"
"On Wednesdays, the average count of ""Reschedule Container"" events must stay below 4.","Activity: [""Reschedule Container""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Reschedule Container""}) WHERE date(e.timestamp).dayOfWeek = 3 WITH date(e.timestamp) AS eventDate, COUNT(e) AS eventsPerDay WITH AVG(eventsPerDay) AS avgEvents RETURN avgEvents <= 4 AS ruleSatisfied"
"No more than 5 ""Register Customer Order"" events are allowed in any week.","Activity: [""Register Customer Order""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Register Customer Order""}) WHERE date(e.timestamp).dayOfWeek >= 1 AND date(e.timestamp).dayOfWeek <= 7 WITH date(e.timestamp).year AS year, date(e.timestamp).week AS week, COUNT(e) AS eventsPerWeek RETURN CASE WHEN MAX(eventsPerWeek) > 5 THEN false ELSE true END AS ruleSatisfied"
"Ensure that between Monday and Friday, no more than 3 ""Create Transport Document"" events happen in any week.","Activity: [""Create Transport Document""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Create Transport Document""}) WHERE date(e.timestamp).dayOfWeek >= 1 AND date(e.timestamp).dayOfWeek <= 5 WITH date(e.timestamp).year AS year, date(e.timestamp).week AS week, COUNT(e) AS eventsPerWeek RETURN CASE WHEN MAX(eventsPerWeek) > 3 THEN false ELSE true END AS ruleSatisfied"
"The number of ""Load Truck"" events from Wednesday to Saturday must not exceed 4 per week.","Activity: [""Load Truck""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Load Truck""}) WHERE date(e.timestamp).dayOfWeek >= 3 AND date(e.timestamp).dayOfWeek <= 6 WITH date(e.timestamp).year AS year, date(e.timestamp).week AS week, COUNT(e) AS eventsPerWeek RETURN CASE WHEN MAX(eventsPerWeek) > 4 THEN false ELSE true END AS ruleSatisfied"
"In any given week, no more than 6 events of ""Load to Vehicle"" should occur between Monday and Wednesday.","Activity: [""Load to Vehicle""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Load to Vehicle""}) WHERE date(e.timestamp).dayOfWeek >= 1 AND date(e.timestamp).dayOfWeek <= 3 WITH date(e.timestamp).year AS year, date(e.timestamp).week AS week, COUNT(e) AS eventsPerWeek RETURN CASE WHEN MAX(eventsPerWeek) > 6 THEN false ELSE true END AS ruleSatisfied"
"Limit the occurrence of ""Pick Up Empty Container"" events to a maximum of 2 from Thursday to Sunday for every week.","Activity: [""Pick Up Empty Container""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Pick Up Empty Container""}) WHERE date(e.timestamp).dayOfWeek >= 4 AND date(e.timestamp).dayOfWeek <= 7 WITH date(e.timestamp).year AS year, date(e.timestamp).week AS week, COUNT(e) AS eventsPerWeek RETURN CASE WHEN MAX(eventsPerWeek) > 2 THEN false ELSE true END AS ruleSatisfied"
"There must be no more than 5 ""Drive to Terminal"" events between Monday and Thursday in any given week.","Activity: [""Drive to Terminal""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Drive to Terminal""}) WHERE date(e.timestamp).dayOfWeek >= 1 AND date(e.timestamp).dayOfWeek <= 4 WITH date(e.timestamp).year AS year, date(e.timestamp).week AS week, COUNT(e) AS eventsPerWeek RETURN CASE WHEN MAX(eventsPerWeek) > 5 THEN false ELSE true END AS ruleSatisfied"
"The total number of ""Place in Stock"" events should not exceed 3 from Friday to Sunday in a week.","Activity: [""Place in Stock""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Place in Stock""}) WHERE date(e.timestamp).dayOfWeek >= 5 AND date(e.timestamp).dayOfWeek <= 7 WITH date(e.timestamp).year AS year, date(e.timestamp).week AS week, COUNT(e) AS eventsPerWeek RETURN CASE WHEN MAX(eventsPerWeek) > 3 THEN false ELSE true END AS ruleSatisfied"
"In each week, no more than 1 ""Bring to Loading Bay"" event should occur during the weekend (Saturday and Sunday).","Activity: [""Bring to Loading Bay""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Bring to Loading Bay""}) WHERE date(e.timestamp).dayOfWeek >= 6 AND date(e.timestamp).dayOfWeek <= 7 WITH date(e.timestamp).year AS year, date(e.timestamp).week AS week, COUNT(e) AS eventsPerWeek RETURN CASE WHEN MAX(eventsPerWeek) > 1 THEN false ELSE true END AS ruleSatisfied"
"The number of ""Load Truck"" events should not exceed 10 in any week.","Activity: [""Load Truck""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Load Truck""}) WHERE date(e.timestamp).dayOfWeek >= 1 AND date(e.timestamp).dayOfWeek <= 7 WITH date(e.timestamp).year AS year, date(e.timestamp).week AS week, COUNT(e) AS eventsPerWeek RETURN CASE WHEN MAX(eventsPerWeek) > 10 THEN false ELSE true END AS ruleSatisfied"
"Ensure that no more than 7 ""Depart"" events happen in a single week.","Activity: [""Depart""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Depart""}) WHERE date(e.timestamp).dayOfWeek >= 1 AND date(e.timestamp).dayOfWeek <= 7 WITH date(e.timestamp).year AS year, date(e.timestamp).week AS week, COUNT(e) AS eventsPerWeek RETURN CASE WHEN MAX(eventsPerWeek) > 7 THEN false ELSE true END AS ruleSatisfied"
The average time from the creation of a transport document for a customer order until the booking of vehicles for the related transport document is less than 5 days.,"Activity: [""Create Transport Document"", ""Book Vehicles""], EntityType: [""Customer Order"", ""Transport Document""], Actor: []","MATCH (e1:Event {Activity:""Create Transport Document""})-[:CORR]->(ent1:Entity {EntityType: ""Customer Order""})-[:REL]-(ent2:Entity {EntityType:""Transport Document""})<-[:CORR]-(e2:Event {Activity:""Book Vehicles""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp,e2.timestamp).seconds)) < (5*24*60*60) as ruleSatisfied"
"From recording a load truck for a customer order to the load to vehicle for the related transport document, less than 4 days should pass on average.","Activity: [""Load Truck"", ""Load to Vehicle""], EntityType: [""Customer Order"", ""Transport Document""], Actor: []","MATCH (e1:Event {Activity:""Load Truck""})-[:CORR]->(ent1:Entity {EntityType: ""Customer Order""})-[:REL]-(ent2:Entity {EntityType:""Transport Document""})<-[:CORR]-(e2:Event {Activity:""Load to Vehicle""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp,e2.timestamp).seconds)) < (4*24*60*60) as ruleSatisfied"
The average time from registering a Customer Order to creating a transport document for the related transport document is less than 5 days.,"Activity: [""Register Customer Order"", ""Create Transport Document""], EntityType: [""Customer Order"", ""Transport Document""], Actor: []","MATCH (e1:Event {Activity:""Register Customer Order""})-[:CORR]->(ent1:Entity {EntityType: ""Customer Order""})-[:REL]-(ent2:Entity {EntityType:""Transport Document""})<-[:CORR]-(e2:Event {Activity:""Create Transport Document""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp,e2.timestamp).seconds)) < (5*24*60*60) as ruleSatisfied"
"From recording a load truck for a customer order to the load to vehicle for the related transport document, less than 4 days should pass on average.","Activity: [""Load Truck"", ""Load to Vehicle""], EntityType: [""Customer Order"", ""Transport Document""], Actor: []","MATCH (e1:Event {Activity:""Load Truck""})-[:CORR]->(ent1:Entity {EntityType: ""Customer Order""})-[:REL]-(ent2:Entity {EntityType:""Transport Document""})<-[:CORR]-(e2:Event {Activity:""Load to Vehicle""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp,e2.timestamp).seconds)) < (4*24*60*60) as ruleSatisfied"
The average time from registering a customer order to placing goods in stock for the related handling unit should be less than 7 days.,"Activity: [""Register Customer Order"", ""Place in Stock""], EntityType: [""Customer Order"", ""Handling Unit""], Actor: []","MATCH (e1:Event {Activity:""Register Customer Order""})-[:CORR]->(ent1:Entity {EntityType: ""Customer Order""})-[:REL]-(ent2:Entity {EntityType:""Handling Unit""})<-[:CORR]-(e2:Event {Activity:""Place in Stock""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp,e2.timestamp).seconds)) < (7*24*60*60) as ruleSatisfied"
"If a Customer Order has more than 5 associated Transport Documents, it must be related to at least 2 Vehicles.","Activity: [], EntityType: [""Customer Order"", ""Transport Document"", ""Vehicle""], Actor: []","MATCH (ent1:Entity {EntityType: ""Customer Order""})-[:REL]-(ent2:Entity {EntityType: ""Transport Document""}) WITH ent1, COUNT(DISTINCT ent2) AS docCount WHERE docCount > 5 OPTIONAL MATCH (ent1)-[:REL]-(ent3:Entity {EntityType: ""Vehicle""}) WITH ent1, COUNT(DISTINCT ent3) AS vehicleCount WHERE vehicleCount < 2 RETURN CASE WHEN COUNT(ent1) > 0 THEN false ELSE true END AS ruleHolds"
A Transport Document referencing more than 3 Containers should be linked to at least 1 Truck.,"Activity: [], EntityType: [""Transport Document"", ""Container"", ""Truck""], Actor: []","MATCH (ent1:Entity {EntityType: ""Transport Document""})-[:REL]-(ent2:Entity {EntityType: ""Container""}) WITH ent1, COUNT(DISTINCT ent2) AS containerCount WHERE containerCount > 3 OPTIONAL MATCH (ent1)-[:REL]-(ent3:Entity {EntityType: ""Truck""}) WITH ent1, COUNT(DISTINCT ent3) AS truckCount WHERE truckCount < 1 RETURN CASE WHEN COUNT(ent1) > 0 THEN false ELSE true END AS ruleHolds"
"If a Truck carries more than 10 Containers, at least 5 Handling Units must be included.","Activity: [], EntityType: [""Truck"", ""Container"", ""Handling Unit""], Actor: []","MATCH (ent1:Entity {EntityType: ""Truck""})-[:REL]-(ent2:Entity {EntityType: ""Container""}) WITH ent1, COUNT(DISTINCT ent2) AS containerCount WHERE containerCount > 10 OPTIONAL MATCH (ent1)-[:REL]-(ent3:Entity {EntityType: ""Handling Unit""}) WITH ent1, COUNT(DISTINCT ent3) AS handlingUnitCount WHERE handlingUnitCount < 5 RETURN CASE WHEN COUNT(ent1) > 0 THEN false ELSE true END AS ruleHolds"
A single Transport Document that is linked to more than 2 Vehicles must also be related to at least 4 Customer Orders.,"Activity: [], EntityType: [""Transport Document"", ""Vehicle"", ""Customer Order""], Actor: []","MATCH (ent1:Entity {EntityType: ""Transport Document""})-[:REL]-(ent2:Entity {EntityType: ""Vehicle""}) WITH ent1, COUNT(DISTINCT ent2) AS vehicleCount WHERE vehicleCount > 2 OPTIONAL MATCH (ent1)-[:REL]-(ent3:Entity {EntityType: ""Customer Order""}) WITH ent1, COUNT(DISTINCT ent3) AS orderCount WHERE orderCount < 4 RETURN CASE WHEN COUNT(ent1) > 0 THEN false ELSE true END AS ruleHolds"
"If a Container is part of more than 8 Transport Documents, it must be linked to at least 3 different Trucks.","Activity: [], EntityType: [""Container"", ""Transport Document"", ""Truck""], Actor: []","MATCH (ent1:Entity {EntityType: ""Container""})-[:REL]-(ent2:Entity {EntityType: ""Transport Document""}) WITH ent1, COUNT(DISTINCT ent2) AS docCount WHERE docCount > 8 OPTIONAL MATCH (ent1)-[:REL]-(ent3:Entity {EntityType: ""Truck""}) WITH ent1, COUNT(DISTINCT ent3) AS truckCount WHERE truckCount < 3 RETURN CASE WHEN COUNT(ent1) > 0 THEN false ELSE true END AS ruleHolds"
A Vehicle transporting more than 20 Transport Documents must be used by at least 2 different Customer Orders.,"Activity: [], EntityType: [""Vehicle"", ""Transport Document"", ""Customer Order""], Actor: []","MATCH (ent1:Entity {EntityType: ""Vehicle""})-[:REL]-(ent2:Entity {EntityType: ""Transport Document""}) WITH ent1, COUNT(DISTINCT ent2) AS docCount WHERE docCount > 20 OPTIONAL MATCH (ent1)-[:REL]-(ent3:Entity {EntityType: ""Customer Order""}) WITH ent1, COUNT(DISTINCT ent3) AS orderCount WHERE orderCount < 2 RETURN CASE WHEN COUNT(ent1) > 0 THEN false ELSE true END AS ruleHolds"
"If a Handling Unit is stored within more than 5 Containers, at least 2 Transport Documents must reference it.","Activity: [], EntityType: [""Handling Unit"", ""Container"", ""Transport Document""], Actor: []","MATCH (ent1:Entity {EntityType: ""Handling Unit""})-[:REL]-(ent2:Entity {EntityType: ""Container""}) WITH ent1, COUNT(DISTINCT ent2) AS containerCount WHERE containerCount > 5 OPTIONAL MATCH (ent1)-[:REL]-(ent3:Entity {EntityType: ""Transport Document""}) WITH ent1, COUNT(DISTINCT ent3) AS docCount WHERE docCount < 2 RETURN CASE WHEN COUNT(ent1) > 0 THEN false ELSE true END AS ruleHolds"
A Forklift that handles more than 15 Handling Units should be responsible for at least 3 different Containers.,"Activity: [], EntityType: [""Forklift"", ""Handling Unit"", ""Container""], Actor: []","MATCH (ent1:Entity {EntityType: ""Forklift""})-[:REL]-(ent2:Entity {EntityType: ""Handling Unit""}) WITH ent1, COUNT(DISTINCT ent2) AS handlingUnitCount WHERE handlingUnitCount > 15 OPTIONAL MATCH (ent1)-[:REL]-(ent3:Entity {EntityType: ""Container""}) WITH ent1, COUNT(DISTINCT ent3) AS containerCount WHERE containerCount < 3 RETURN CASE WHEN COUNT(ent1) > 0 THEN false ELSE true END AS ruleHolds"
"If a Truck is assigned more than 7 Containers, it must be linked to at least 4 distinct Transport Documents.","Activity: [], EntityType: [""Truck"", ""Container"", ""Transport Document""], Actor: []","MATCH (ent1:Entity {EntityType: ""Truck""})-[:REL]-(ent2:Entity {EntityType: ""Container""}) WITH ent1, COUNT(DISTINCT ent2) AS containerCount WHERE containerCount > 7 OPTIONAL MATCH (ent1)-[:REL]-(ent3:Entity {EntityType: ""Transport Document""}) WITH ent1, COUNT(DISTINCT ent3) AS docCount WHERE docCount < 4 RETURN CASE WHEN COUNT(ent1) > 0 THEN false ELSE true END AS ruleHolds"
A Transport Document that covers more than 12 Handling Units should be linked to at least 5 different Vehicles.,"Activity: [], EntityType: [""Transport Document"", ""Handling Unit"", ""Vehicle""], Actor: []","MATCH (ent1:Entity {EntityType: ""Transport Document""})-[:REL]-(ent2:Entity {EntityType: ""Handling Unit""}) WITH ent1, COUNT(DISTINCT ent2) AS handlingUnitCount WHERE handlingUnitCount > 12 OPTIONAL MATCH (ent1)-[:REL]-(ent3:Entity {EntityType: ""Vehicle""}) WITH ent1, COUNT(DISTINCT ent3) AS vehicleCount WHERE vehicleCount < 5 RETURN CASE WHEN COUNT(ent1) > 0 THEN false ELSE true END AS ruleHolds"
"On average, ""Collect Goods"" directly followed by ""Load Truck"" should happen within 5 minutes.","Activity: [""Collect Goods"", ""Load Truck""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Collect Goods""})-[:DF]->(e2:Event {Activity:""Load Truck""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp, e2.timestamp).seconds)) < (5*60) as ruleSatisfied"
"The activity ""Pick Up Empty Container"" is directly followed by ""Place in Stock"" within 30 minutes on average.","Activity: [""Pick Up Empty Container"", ""Place in Stock""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Pick Up Empty Container""})-[:DF]->(e2:Event {Activity:""Place in Stock""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp, e2.timestamp).seconds)) < (30*60) as ruleSatisfied"
"When ""Reschedule Container"" is directly followed by ""Book Vehicles"", the average delay should not exceed 1 hour.","Activity: [""Reschedule Container"", ""Book Vehicles""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Reschedule Container""})-[:DF]->(e2:Event {Activity:""Book Vehicles""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp, e2.timestamp).seconds)) < (60*60) as ruleSatisfied"
"""Load Truck"" is directly followed by ""Drive to Terminal"" within 5 minutes on average.","Activity: [""Load Truck"", ""Drive to Terminal""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Load Truck""})-[:DF]->(e2:Event {Activity:""Drive to Terminal""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp, e2.timestamp).seconds)) < (5*60) as ruleSatisfied"
"The average time between ""Order Empty Containers"" directly followed by ""Pick Up Empty Container"" must be less than 45 minutes.","Activity: [""Order Empty Containers"", ""Pick Up Empty Container""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Order Empty Containers""})-[:DF]->(e2:Event {Activity:""Pick Up Empty Container""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp, e2.timestamp).seconds)) < (45*60) as ruleSatisfied"
"The time it takes from ""Depart"" directly followed by ""Weigh"" should not exceed 15 minutes on average.","Activity: [""Depart"", ""Weigh""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Depart""})-[:DF]->(e2:Event {Activity:""Weigh""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp, e2.timestamp).seconds)) < (15*60) as ruleSatisfied"
"Whenever ""Register Customer Order"" is directly followed by ""Create Transport Document"", this must happen within 10 minutes on average.","Activity: [""Register Customer Order"", ""Create Transport Document""], EntityType: [], Actor: []","MATCH (e1:Event {Activity:""Register Customer Order""})-[:DF]->(e2:Event {Activity:""Create Transport Document""}) WHERE e1.timestamp < e2.timestamp RETURN AVG(abs(duration.between(e1.timestamp, e2.timestamp).seconds)) < (10*60) as ruleSatisfied"
No Customer Order should be correlated to fewer than 8 events.,"Activity: [], EntityType: [""Customer Order""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Customer Order""}) WITH ent, COUNT(e) AS events WHERE events < 8 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
A Transport Document must not have more than 15 events associated with it.,"Activity: [], EntityType: [""Transport Document""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Transport Document""}) WITH ent, COUNT(e) AS events WHERE events > 15 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
No Container should be linked to fewer than 5 events.,"Activity: [], EntityType: [""Container""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Container""}) WITH ent, COUNT(e) AS events WHERE events < 5 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
A Truck may not have more than 12 correlated events.,"Activity: [], EntityType: [""Truck""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Truck""}) WITH ent, COUNT(e) AS events WHERE events > 12 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
Every Handling Unit should be involved in at least 6 events.,"Activity: [], EntityType: [""Handling Unit""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Handling Unit""}) WITH ent, COUNT(e) AS events WHERE events < 6 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
No vehicle should be linked to fewer than 10 events.,"Activity: [], EntityType: [""Vehicle""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Vehicle""}) WITH ent, COUNT(e) AS events WHERE events < 10 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
A Forklift must not be correlated with more than 9 events.,"Activity: [], EntityType: [""Forklift""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Forklift""}) WITH ent, COUNT(e) AS events WHERE events > 9 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
No Truck should have fewer than 7 events associated with it.,"Activity: [], EntityType: [""Truck""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Truck""}) WITH ent, COUNT(e) AS events WHERE events < 7 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
A Container may not have more than 20 correlated events.,"Activity: [], EntityType: [""Container""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Container""}) WITH ent, COUNT(e) AS events WHERE events > 20 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
No Customer Order may be related to fewer than 4 distinct activities.,"Activity: [], EntityType: [""Customer Order""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Customer Order""}) WITH ent, COUNT(DISTINCT e.Activity) AS activities WHERE activities < 4 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
A Transport Document must not be associated with more than 6 different activities.,"Activity: [], EntityType: [""Transport Document""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Transport Document""}) WITH ent, COUNT(DISTINCT e.Activity) AS activities WHERE activities > 6 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
No Container should be involved in fewer than 5 unique activities.,"Activity: [], EntityType: [""Container""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Container""}) WITH ent, COUNT(DISTINCT e.Activity) AS activities WHERE activities < 5 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
Each Truck must participate in at least 3 distinct types of activities.,"Activity: [], EntityType: [""Truck""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Truck""}) WITH ent, COUNT(DISTINCT e.Activity) AS activities WHERE activities < 3 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
No Handling Unit may be associated with more than 7 different activities.,"Activity: [], EntityType: [""Handling Unit""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Handling Unit""}) WITH ent, COUNT(DISTINCT e.Activity) AS activities WHERE activities > 7 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
No forklift should be involved in fewer than 2 different activities.,"Activity: [], EntityType: [""Forklift""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Forklift""}) WITH ent, COUNT(DISTINCT e.Activity) AS activities WHERE activities < 2 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
A Vehicle must not perform more than 9 unique activities.,"Activity: [], EntityType: [""Vehicle""], Actor: []","MATCH (e:Event)-[:CORR]->(ent:Entity {EntityType:""Vehicle""}) WITH ent, COUNT(DISTINCT e.Activity) AS activities WHERE activities > 9 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
