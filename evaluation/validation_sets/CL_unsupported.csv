NL input,Key Values,Cypher Query
"At least 3 events of type ""Register Customer Order"" or ""Create Transport Document"" must be performed for each customer order.","Activity: [""Register Customer Order"", ""Create Transport Document""], EntityType: [""Customer Order""], Actor: []","MATCH (ent:Entity {EntityType: ""Customer Order""}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event) WHERE event.Activity IN ['Register Customer Order', 'Create Transport Document'] WITH ent, COUNT(event) AS eventCount WHERE eventCount < 3 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
Each transport document must be associated with at least 5 events where either a transport document is created or a truck is booked.,"Activity: [""Create Transport Document"", ""Book Vehicles""], EntityType: [""Transport Document""], Actor: []","MATCH (ent:Entity {EntityType: ""Transport Document""}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event) WHERE event.Activity IN ['Create Transport Document', 'Book Vehicles'] WITH ent, COUNT(event) AS eventCount WHERE eventCount < 5 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
A customer order should have at least two recorded vehicle departures or container reschedules.,"Activity: [""Depart"", ""Reschedule Container""], EntityType: [""Customer Order""], Actor: []","MATCH (ent:Entity {EntityType: ""Customer Order""}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event) WHERE event.Activity IN ['Depart', 'Reschedule Container'] WITH ent, COUNT(event) AS eventCount WHERE eventCount < 2 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
At least 4 activities related to handling units or transport document updates should be logged for each handling unit.,"Activity: [""Bring to Loading Bay"", ""Create Transport Document""], EntityType: [""Handling Unit""], Actor: []","MATCH (ent:Entity {EntityType: ""Handling Unit""}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event) WHERE event.Activity IN ['Bring to Loading Bay', 'Create Transport Document'] WITH ent, COUNT(event) AS eventCount WHERE eventCount < 4 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
"Every transport document must have at least 3 events, either picking up an empty container or loading a truck.","Activity: [""Pick Up Empty Container"", ""Load Truck""], EntityType: [""Transport Document""], Actor: []","MATCH (ent:Entity {EntityType: ""Transport Document""}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event) WHERE event.Activity IN ['Pick Up Empty Container', 'Load Truck'] WITH ent, COUNT(event) AS eventCount WHERE eventCount < 3 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
"For each container, there must be at least 6 relevant actions, which could include weighing or placing it in stock.","Activity: [""Weigh"", ""Place in Stock""], EntityType: [""Container""], Actor: []","MATCH (ent:Entity {EntityType: ""Container""}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event) WHERE event.Activity IN ['Weigh', 'Place in Stock'] WITH ent, COUNT(event) AS eventCount WHERE eventCount < 6 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
"Each ""Customer Order"" must have at least 3 events of type ""Register Customer Order"" or ""Create Transport Document"".","Activity: [""Register Customer Order"", ""Create Transport Document""], EntityType: [""Customer Order""], Actor: []","MATCH (ent:Entity {EntityType: ""Customer Order""}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event) WHERE event.Activity IN ['Register Customer Order', 'Create Transport Document'] WITH ent, COUNT(event) AS eventCount WHERE eventCount < 3 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
"Each ""Vehicle"" must be associated with at least 4 events where either ""Book Vehicles"" or ""Load to Vehicle"" occurs.","Activity: [""Book Vehicles"", ""Load to Vehicle""], EntityType: [""Vehicle""], Actor: []","MATCH (ent:Entity {EntityType: ""Vehicle""}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event) WHERE event.Activity IN ['Book Vehicles', 'Load to Vehicle'] WITH ent, COUNT(event) AS eventCount WHERE eventCount < 4 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
"A ""Forklift"" must have at least 2 events of type ""Collect Goods"" or ""Load Truck"".","Activity: [""Collect Goods"", ""Load Truck""], EntityType: [""Forklift""], Actor: []","MATCH (ent:Entity {EntityType: ""Forklift""}) OPTIONAL MATCH (ent)<-[:CORR]-(event:Event) WHERE event.Activity IN ['Collect Goods', 'Load Truck'] WITH ent, COUNT(event) AS eventCount WHERE eventCount < 2 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
A customer order registration must not be immediately followed by creating a transport document or booking a vehicle.,"Activity: [""Register Customer Order"", ""Create Transport Document"", ""Book Vehicles""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Register Customer Order""})-[:DF]->(e2:Event) WHERE e2.Activity IN [""Create Transport Document"", ""Book Vehicles""] RETURN COUNT(e1) = 0 AS ruleSatisfied"
Placing in stock must not be directly followed by loading to a vehicle or scheduling a container reschedule.,"Activity: [""Place in Stock"", ""Load to Vehicle"", ""Reschedule Container""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Place in Stock""})-[:DF]->(e2:Event) WHERE e2.Activity IN [""Load to Vehicle"", ""Reschedule Container""] RETURN COUNT(e1) = 0 AS ruleSatisfied"
"If a vehicle departs, it must not be immediately followed by weighing or collecting goods.","Activity: [""Depart"", ""Weigh"", ""Collect Goods""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Depart""})-[:DF]->(e2:Event) WHERE e2.Activity IN [""Weigh"", ""Collect Goods""] RETURN COUNT(e1) = 0 AS ruleSatisfied"
No transport document creation should be followed immediately by picking up an empty container or driving to the terminal.,"Activity: [""Create Transport Document"", ""Pick Up Empty Container"", ""Drive to Terminal""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Transport Document""})-[:DF]->(e2:Event) WHERE e2.Activity IN [""Pick Up Empty Container"", ""Drive to Terminal""] RETURN COUNT(e1) = 0 AS ruleSatisfied"
Deleting a transport document must not be immediately followed by booking a vehicle or registering a customer order.,"Activity: [""Delete Purchase Order Item"", ""Book Vehicles"", ""Register Customer Order""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Delete Purchase Order Item""})-[:DF]->(e2:Event) WHERE e2.Activity IN [""Book Vehicles"", ""Register Customer Order""] RETURN COUNT(e1) = 0 AS ruleSatisfied"
Bringing to the loading bay must not be followed directly by weighing or picking up an empty container.,"Activity: [""Bring to Loading Bay"", ""Weigh"", ""Pick Up Empty Container""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Bring to Loading Bay""})-[:DF]->(e2:Event) WHERE e2.Activity IN [""Weigh"", ""Pick Up Empty Container""] RETURN COUNT(e1) = 0 AS ruleSatisfied"
"""Register Customer Order"" must not be immediately followed by ""Create Transport Document"" or ""Book Vehicles.""","Activity: [""Register Customer Order"", ""Create Transport Document"", ""Book Vehicles""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Register Customer Order""})-[:DF]->(e2:Event) WHERE e2.Activity IN [""Create Transport Document"", ""Book Vehicles""] RETURN COUNT(e1) = 0 AS ruleSatisfied"
"After ""Weigh,"" ""Load to Vehicle"" or ""Reschedule Container"" must not occur immediately.","Activity: [""Weigh"", ""Load to Vehicle"", ""Reschedule Container""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Weigh""})-[:DF]->(e2:Event) WHERE e2.Activity IN [""Load to Vehicle"", ""Reschedule Container""] RETURN COUNT(e1) = 0 AS ruleSatisfied"
"A ""Depart"" event must not immediately precede ""Weigh"" or ""Collect Goods.""","Activity: [""Depart"", ""Weigh"", ""Collect Goods""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Depart""})-[:DF]->(e2:Event) WHERE e2.Activity IN [""Weigh"", ""Collect Goods""] RETURN COUNT(e1) = 0 AS ruleSatisfied"
"On average, an entity of type ""Customer Order"" has exactly 3 events of type ""Register Customer Order"".","Activity: [""Register Customer Order""], EntityType: [""Customer Order""], Actor: []","MATCH (ent:Entity {EntityType: ""Customer Order""})<-[:CORR]-(e:Event {Activity: ""Register Customer Order""}) WITH ent, COUNT(e) AS orderCount RETURN AVG(orderCount) = 3 AS ruleSatisfied"
"On average, a ""Container"" entity has more than 2 events related to ""Order Empty Containers"".","Activity: [""Order Empty Containers""], EntityType: [""Container""], Actor: []","MATCH (ent:Entity {EntityType: ""Container""})<-[:CORR]-(e:Event {Activity: ""Order Empty Containers""}) WITH ent, COUNT(e) AS orderCount RETURN AVG(orderCount) > 2 AS ruleSatisfied"
"On average, each ""Transport Document"" entity should have at least 1 event for ""Create Transport Document"".","Activity: [""Create Transport Document""], EntityType: [""Transport Document""], Actor: []","MATCH (ent:Entity {EntityType: ""Transport Document""})<-[:CORR]-(e:Event {Activity: ""Create Transport Document""}) WITH ent, COUNT(e) AS docCount RETURN AVG(docCount) >= 1 AS ruleSatisfied"
"On average, a ""Truck"" entity has at least 2 events ""Load Truck"".","Activity: [""Load Truck""], EntityType: [""Truck""], Actor: []","MATCH (ent:Entity {EntityType: ""Truck""})<-[:CORR]-(e:Event {Activity: ""Load Truck""}) WITH ent, COUNT(e) AS loadCount RETURN AVG(loadCount) >= 2 AS ruleSatisfied"
"On average, a ""Forklift"" entity typically has fewer than 6 events of type ""Bring to Loading Bay"".","Activity: [""Bring to Loading Bay""], EntityType: [""Forklift""], Actor: []","MATCH (ent:Entity {EntityType: ""Forklift""})<-[:CORR]-(e:Event {Activity: ""Bring to Loading Bay""}) WITH ent, COUNT(e) AS loadingCount RETURN AVG(loadingCount) < 6 AS ruleSatisfied"
"On average, each ""Handling Unit"" is associated with exactly 4 instances where goods are collected.","Activity: [""Collect Goods""], EntityType: [""Handling Unit""], Actor: []","MATCH (ent:Entity {EntityType: ""Handling Unit""})<-[:CORR]-(e:Event {Activity: ""Collect Goods""}) WITH ent, COUNT(e) AS collectCount RETURN AVG(collectCount) = 4 AS ruleSatisfied"
"On average, a ""Customer Order"" has at least 2 occurrences where a transport document is created.","Activity: [""Create Transport Document""], EntityType: [""Customer Order""], Actor: []","MATCH (ent:Entity {EntityType: ""Customer Order""})<-[:CORR]-(e:Event {Activity: ""Create Transport Document""}) WITH ent, COUNT(e) AS orderCount RETURN AVG(orderCount) >= 2 AS ruleSatisfied"
"On average, a ""Container"" entity is involved in no more than 3 instances of rescheduling.","Activity: [""Reschedule Container""], EntityType: [""Container""], Actor: []","MATCH (ent:Entity {EntityType: ""Container""})<-[:CORR]-(e:Event {Activity: ""Reschedule Container""}) WITH ent, COUNT(e) AS scheduleCount RETURN AVG(scheduleCount) <= 3 AS ruleSatisfied"
"On average, each ""Vehicle"" has fewer than 5 occurrences where it is weighed.","Activity: [""Weigh""], EntityType: [""Vehicle""], Actor: []","MATCH (ent:Entity {EntityType: ""Vehicle""})<-[:CORR]-(e:Event {Activity: ""Weigh""}) WITH ent, COUNT(e) AS weighCount RETURN AVG(weighCount) < 5 AS ruleSatisfied"
"On average, every ""Transport Document"" should have at least one action where the vehicle departs.","Activity: [""Depart""], EntityType: [""Transport Document""], Actor: []","MATCH (ent:Entity {EntityType: ""Transport Document""})<-[:CORR]-(e:Event {Activity: ""Depart""}) WITH ent, COUNT(e) AS departCount RETURN AVG(departCount) >= 1 AS ruleSatisfied"
"On average, a ""Truck"" is linked to exactly 2 events where a truck is loaded.","Activity: [""Load Truck""], EntityType: [""Truck""], Actor: []","MATCH (ent:Entity {EntityType: ""Truck""})<-[:CORR]-(e:Event {Activity: ""Load Truck""}) WITH ent, COUNT(e) AS loadCount RETURN AVG(loadCount) = 2 AS ruleSatisfied"
"On average, every ""Register Customer Order"" activity is directly followed by less than 3 different events.","Activity: [""Register Customer Order""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Register Customer Order""})-[:DF]->(e2:Event) WITH e1, COUNT(DISTINCT e2) AS followingCount RETURN AVG(followingCount) < 3 AS ruleSatisfied"
"On average, each ""Order Empty Containers"" is directly followed by exactly 2 distinct events.","Activity: [""Order Empty Containers""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Order Empty Containers""})-[:DF]->(e2:Event) WITH e1, COUNT(DISTINCT e2) AS followingCount RETURN AVG(followingCount) = 2 AS ruleSatisfied"
"On average, each event of type ""Create Transport Document"" is directly followed by fewer than 4 different events.","Activity: [""Create Transport Document""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Create Transport Document""})-[:DF]->(e2:Event) WITH e1, COUNT(DISTINCT e2) AS followingCount RETURN AVG(followingCount) < 4 AS ruleSatisfied"
"On average, every ""Pick Up Empty Container"" activity is directly preceded by fewer than 2 different events.","Activity: [""Pick Up Empty Container""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Pick Up Empty Container""})<-[:DF]-(e1:Event) WITH e2, COUNT(DISTINCT e1) AS precedingCount RETURN AVG(precedingCount) < 2 AS ruleSatisfied"
"On average, every ""Bring to Loading Bay"" activity is immediately followed by fewer than 5 different events.","Activity: [""Bring to Loading Bay""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Bring to Loading Bay""})-[:DF]->(e2:Event) WITH e1, COUNT(DISTINCT e2) AS followingCount RETURN AVG(followingCount) < 5 AS ruleSatisfied"
"On average, each event of type ""Weigh"" is immediately preceded by more than 1 distinct event.","Activity: [""Weigh""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Weigh""})<-[:DF]-(e1:Event) WITH e2, COUNT(DISTINCT e1) AS precedingCount RETURN AVG(precedingCount) > 1 AS ruleSatisfied"
"On average, every ""Collect Goods"" activity is directly followed by fewer than 4 distinct events.","Activity: [""Collect Goods""], EntityType: [], Actor: []","MATCH (e1:Event {Activity: ""Collect Goods""})-[:DF]->(e2:Event) WITH e1, COUNT(DISTINCT e2) AS followingCount RETURN AVG(followingCount) < 4 AS ruleSatisfied"
"On average, the recording of a ""Depart"" event is directly preceded by more than 2 distinct events.","Activity: [""Depart""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Depart""})<-[:DF]-(e1:Event) WITH e2, COUNT(DISTINCT e1) AS precedingCount RETURN AVG(precedingCount) > 2 AS ruleSatisfied"
"On average, a ""Book Vehicles"" event is directly preceded by exactly 1 distinct event.","Activity: [""Book Vehicles""], EntityType: [], Actor: []","MATCH (e2:Event {Activity: ""Book Vehicles""})<-[:DF]-(e1:Event) WITH e2, COUNT(DISTINCT e1) AS precedingCount RETURN AVG(precedingCount) = 1 AS ruleSatisfied"
"The average time between ""Bring to Loading Bay"" and ""Register Customer Order"" must not exceed 5 days.","Activity: [""Bring to Loading Bay"", ""Register Customer Order""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Bring to Loading Bay"" AND e2.Activity = ""Register Customer Order"" WITH e1, e2, duration.between(e1.timestamp, e2.timestamp) AS serviceTime RETURN AVG(serviceTime.seconds) < (5 * 24 * 60 * 60) AS ruleSatisfied"
"The average time between ""Pick Up Empty Container"" and ""Weigh"" does not exceed 2 days.","Activity: [""Pick Up Empty Container"", ""Weigh""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Pick Up Empty Container"" AND e2.Activity = ""Weigh"" WITH e1, e2, duration.between(e1.timestamp, e2.timestamp) AS serviceTime RETURN AVG(serviceTime.seconds) < (2 * 24 * 60 * 60) AS ruleSatisfied"
"There are more than 7 days on average between ""Load Truck"" and ""Depart"".","Activity: [""Load Truck"", ""Depart""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Load Truck"" AND e2.Activity = ""Depart"" WITH e1, e2, duration.between(e1.timestamp, e2.timestamp) AS serviceTime RETURN AVG(serviceTime.seconds) > (7 * 24 * 60 * 60) AS ruleSatisfied"
"It takea more than 4 days, on average, between ""Load to Vehicle"" and ""Reschedule Container"".","Activity: [""Load to Vehicle"", ""Reschedule Container""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Load to Vehicle"" AND e2.Activity = ""Reschedule Container"" WITH e1, e2, duration.between(e1.timestamp, e2.timestamp) AS serviceTime RETURN AVG(serviceTime.seconds) > (4 * 24 * 60 * 60) AS ruleSatisfied"
"On average, the time between ""Place in Stock"" and ""Book Vehicles"" is greater than 3 days.","Activity: [""Place in Stock"", ""Book Vehicles""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Place in Stock"" AND e2.Activity = ""Book Vehicles"" WITH e1, e2, duration.between(e1.timestamp, e2.timestamp) AS serviceTime RETURN AVG(serviceTime.seconds) > (3 * 24 * 60 * 60) AS ruleSatisfied"
"The time taken between ""Create Transport Document"" and ""Depart"" must, on average, is greater than 2 days.","Activity: [""Create Transport Document"", ""Depart""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Create Transport Document"" AND e2.Activity = ""Depart"" WITH e1, e2, duration.between(e1.timestamp, e2.timestamp) AS serviceTime RETURN AVG(serviceTime.seconds) > (2 * 24 * 60 * 60) AS ruleSatisfied"
"When ""Drive to Terminal"" occurs, the average time between this and ""Order Empty Containers"" exceeds 5 days.","Activity: [""Drive to Terminal"", ""Order Empty Containers""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Drive to Terminal"" AND e2.Activity = ""Order Empty Containers"" WITH e1, e2, duration.between(e1.timestamp, e2.timestamp) AS serviceTime RETURN AVG(serviceTime.seconds) > (5 * 24 * 60 * 60) AS ruleSatisfied"
"The gap between ""Weigh"" and ""Load Truck"" averages more than 6 days.","Activity: [""Weigh"", ""Load Truck""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Weigh"" AND e2.Activity = ""Load Truck"" WITH e1, e2, duration.between(e1.timestamp, e2.timestamp) AS serviceTime RETURN AVG(serviceTime.seconds) > (6 * 24 * 60 * 60) AS ruleSatisfied"
"On average, ""Pick Up Empty Container"" and ""Place in Stock"" are more than 4 days away from each other.","Activity: [""Pick Up Empty Container"", ""Place in Stock""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Pick Up Empty Container"" AND e2.Activity = ""Place in Stock"" WITH e1, e2, duration.between(e1.timestamp, e2.timestamp) AS serviceTime RETURN AVG(serviceTime.seconds) > (4 * 24 * 60 * 60) AS ruleSatisfied"
"The average time taken between ""Load to Vehicle"" and ""Depart"" is greater than 1 day.","Activity: [""Load to Vehicle"", ""Depart""], EntityType: [], Actor: []","MATCH (e1:Event)-[:CORR]->(entity:Entity)<-[:CORR]-(e2:Event) WHERE e1.Activity = ""Load to Vehicle"" AND e2.Activity = ""Depart"" WITH e1, e2, duration.between(e1.timestamp, e2.timestamp) AS serviceTime RETURN AVG(serviceTime.seconds) > (1 * 24 * 60 * 60) AS ruleSatisfied"
A Customer Order cannot be registered before a transport document is created for that customer order.,"Activity: [""Register Customer Order"", ""Create Transport Document""], EntityType: [""Customer Order""], Actor: []",MATCH (e2:Event {Activity: 'Create Transport Document'})-[:CORR]->(ent:Entity {EntityType: 'Customer Order'}) MATCH (e1:Event {Activity: 'Register Customer Order'})-[:CORR]->(ent) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(e2) > 0 THEN false ELSE true END AS ruleSatisfied
A Truck must not be booked before it can be loaded.,"Activity: [""Book Vehicles"", ""Load Truck""], EntityType: [""Truck""], Actor: []",MATCH (e2:Event {Activity: 'Load Truck'})-[:CORR]->(ent:Entity {EntityType: 'Truck'}) MATCH (e1:Event {Activity: 'Book Vehicles'})-[:CORR]->(ent) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(e2) > 0 THEN false ELSE true END AS ruleSatisfied
An Empty Container should not be picked up before it is ordered.,"Activity: [""Order Empty Containers"", ""Pick Up Empty Container""], EntityType: [""Container""], Actor: []",MATCH (e2:Event {Activity: 'Order Empty Containers'})-[:CORR]->(ent:Entity {EntityType: 'Container'}) MATCH (e1:Event {Activity: 'Pick Up Empty Container'})-[:CORR]->(ent) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(e2) > 0 THEN false ELSE true END AS ruleSatisfied
"For a given customer order, goods cannot be collected before the customer order is registered.","Activity: [""Register Customer Order"", ""Collect Goods""], EntityType: [""Customer Order""], Actor: []",MATCH (e2:Event {Activity: 'Register Customer Order'})-[:CORR]->(ent:Entity {EntityType: 'Customer Order'}) MATCH (e1:Event {Activity: 'Collect Goods'})-[:CORR]->(ent) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(e2) > 0 THEN false ELSE true END AS ruleSatisfied
A Truck must not be weighed before it departs.,"Activity: [""Weigh"", ""Depart""], EntityType: [""Truck""], Actor: []",MATCH (e2:Event {Activity: 'Depart'})-[:CORR]->(ent:Entity {EntityType: 'Truck'}) MATCH (e1:Event {Activity: 'Weigh'})-[:CORR]->(ent) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(e2) > 0 THEN false ELSE true END AS ruleSatisfied
A Handling Unit must not be placed in stock before it is brought to the loading bay.,"Activity: [""Place in Stock"", ""Bring to Loading Bay""], EntityType: [""Handling Unit""], Actor: []",MATCH (e2:Event {Activity: 'Bring to Loading Bay'})-[:CORR]->(ent:Entity {EntityType: 'Handling Unit'}) MATCH (e1:Event {Activity: 'Place in Stock'})-[:CORR]->(ent) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(e2) > 0 THEN false ELSE true END AS ruleSatisfied
A Vehicle cannot be loaded before it arrives at the loading bay.,"Activity: [""Bring to Loading Bay"", ""Load to Vehicle""], EntityType: [""Vehicle""], Actor: []",MATCH (e2:Event {Activity: 'Bring to Loading Bay'})-[:CORR]->(ent:Entity {EntityType: 'Vehicle'}) MATCH (e1:Event {Activity: 'Load to Vehicle'})-[:CORR]->(ent) WHERE e1.timestamp < e2.timestamp RETURN CASE WHEN COUNT(e2) > 0 THEN false ELSE true END AS ruleSatisfied
"After a Customer Order is registered, either a transport document must be created or a vehicles must be booked for that customer order.","Activity: [""Register Customer Order"", ""Create Transport Document"", ""Book Vehicles""], EntityType: [""Customer Order""], Actor: []","MATCH (e1:Event {Activity: ""Register Customer Order""})-[:CORR]->(ent:Entity {EntityType: ""Customer Order""}) OPTIONAL MATCH (e2:Event {Activity: ""Create Transport Document""})-[:CORR]->(ent) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Book Vehicles""})-[:CORR]->(ent) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"If an empty container is ordered, it must either be picked up or loaded onto a vehicle after.","Activity: [""Order Empty Containers"", ""Pick Up Empty Container"", ""Load to Vehicle""], EntityType: [""Container""], Actor: []","MATCH (e1:Event {Activity: ""Order Empty Containers""})-[:CORR]->(ent:Entity {EntityType: ""Container""}) OPTIONAL MATCH (e2:Event {Activity: ""Pick Up Empty Container""})-[:CORR]->(ent) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Load to Vehicle""})-[:CORR]->(ent) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
A handling unit placed in stock must either be moved to the loading bay or loaded onto a vehicle afterwards.,"Activity: [""Place in Stock"", ""Bring to Loading Bay"", ""Load to Vehicle""], EntityType: [""Handling Unit""], Actor: []","MATCH (e1:Event {Activity: ""Place in Stock""})-[:CORR]->(ent:Entity {EntityType: ""Handling Unit""}) OPTIONAL MATCH (e2:Event {Activity: ""Bring to Loading Bay""})-[:CORR]->(ent) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Load to Vehicle""})-[:CORR]->(ent) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After a truck is weighed, it must either depart or be loaded.","Activity: [""Weigh"", ""Depart"", ""Load Truck""], EntityType: [""Truck""], Actor: []","MATCH (e1:Event {Activity: ""Weigh""})-[:CORR]->(ent:Entity {EntityType: ""Truck""}) OPTIONAL MATCH (e2:Event {Activity: ""Depart""})-[:CORR]->(ent) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Load Truck""})-[:CORR]->(ent) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Once a vehicle is loaded, it must either depart or be rescheduled.","Activity: [""Load to Vehicle"", ""Depart"", ""Reschedule Container""], EntityType: [""Vehicle""], Actor: []","MATCH (e1:Event {Activity: ""Load to Vehicle""})-[:CORR]->(ent:Entity {EntityType: ""Vehicle""}) OPTIONAL MATCH (e2:Event {Activity: ""Depart""})-[:CORR]->(ent) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Reschedule Container""})-[:CORR]->(ent) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After a container is picked up, it must either be placed in stock or loaded onto a vehicle.","Activity: [""Pick Up Empty Container"", ""Place in Stock"", ""Load to Vehicle""], EntityType: [""Container""], Actor: []","MATCH (e1:Event {Activity: ""Pick Up Empty Container""})-[:CORR]->(ent:Entity {EntityType: ""Container""}) OPTIONAL MATCH (e2:Event {Activity: ""Place in Stock""})-[:CORR]->(ent) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Load to Vehicle""})-[:CORR]->(ent) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After goods are collected for a handling unit, they must either be placed in stock or loaded onto a vehicle.","Activity: [""Collect Goods"", ""Place in Stock"", ""Load to Vehicle""], EntityType: [""Handling Unit""], Actor: []","MATCH (e1:Event {Activity: ""Collect Goods""})-[:CORR]->(ent:Entity {EntityType: ""Handling Unit""}) OPTIONAL MATCH (e2:Event {Activity: ""Place in Stock""})-[:CORR]->(ent) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Load to Vehicle""})-[:CORR]->(ent) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After a truck is loaded, it must either depart or reschedule container.","Activity: [""Load Truck"", ""Depart"", ""Reschedule Container""], EntityType: [""Truck""], Actor: []","MATCH (e1:Event {Activity: ""Load Truck""})-[:CORR]->(ent:Entity {EntityType: ""Truck""}) OPTIONAL MATCH (e2:Event {Activity: ""Depart""})-[:CORR]->(ent) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Reschedule Container""})-[:CORR]->(ent) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"Once a truck has been weighed, it must either depart or be loaded onto vehicle.","Activity: [""Weigh"", ""Depart"", ""Load Truck""], EntityType: [""Truck""], Actor: []","MATCH (e1:Event {Activity: ""Weigh""})-[:CORR]->(ent:Entity {EntityType: ""Truck""}) OPTIONAL MATCH (e2:Event {Activity: ""Depart""})-[:CORR]->(ent) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Load Truck""})-[:CORR]->(ent) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
"After a transport document is created, a truck must either be loaded or depart for that transport document.","Activity: [""Create Transport Document"", ""Load Truck"", ""Depart""], EntityType: [""Transport Document""], Actor: []","MATCH (e1:Event {Activity: ""Create Transport Document""})-[:CORR]->(ent:Entity {EntityType: ""Transport Document""}) OPTIONAL MATCH (e2:Event {Activity: ""Load Truck""})-[:CORR]->(ent) WHERE e1.timestamp < e2.timestamp OPTIONAL MATCH (e3:Event {Activity: ""Depart""})-[:CORR]->(ent) WHERE e1.timestamp < e3.timestamp WITH e1, count(e2) + count(e3) AS succeedingCount RETURN CASE WHEN any(e IN collect(succeedingCount) WHERE e = 0) THEN false ELSE true END AS ruleSatisfied"
A Customer Order must have no more than 4 associated Transport Documents on average.,"Activity: [], EntityType: [""Customer Order"", ""Transport Document""], Actor: []","MATCH (ent1:Entity {EntityType:""Customer Order""})-[:REL]-(ent2:Entity {EntityType:""Transport Document""}) WITH ent1, COUNT(DISTINCT ent2) AS relatedItemCount RETURN AVG(relatedItemCount) <= 4 AS ruleSatisfied"
A Transport Document should not have more than 6 related Containers on average.,"Activity: [], EntityType: [""Transport Document"", ""Container""], Actor: []","MATCH (ent1:Entity {EntityType:""Transport Document""})-[:REL]-(ent2:Entity {EntityType:""Container""}) WITH ent1, COUNT(DISTINCT ent2) AS relatedItemCount RETURN AVG(relatedItemCount) <= 6 AS ruleSatisfied"
A Transport Document may not contain an average of more than 7 related Containers.,"Activity: [], EntityType: [""Transport Document"", ""Container""], Actor: []","MATCH (ent1:Entity {EntityType:""Transport Document""})-[:REL]-(ent2:Entity {EntityType:""Container""}) WITH ent1, COUNT(DISTINCT ent2) AS relatedItemCount RETURN AVG(relatedItemCount) <= 7 AS ruleSatisfied"
A Truck should not have more than 2 associated Containers on average.,"Activity: [], EntityType: [""Truck"", ""Container""], Actor: []","MATCH (ent1:Entity {EntityType:""Truck""})-[:REL]-(ent2:Entity {EntityType:""Container""}) WITH ent1, COUNT(DISTINCT ent2) AS relatedItemCount RETURN AVG(relatedItemCount) <= 2 AS ruleSatisfied"
A Container may not have more than 4 related Handling Units on average.,"Activity: [], EntityType: [""Container"", ""Handling Unit""], Actor: []","MATCH (ent1:Entity {EntityType:""Container""})-[:REL]-(ent2:Entity {EntityType:""Handling Unit""}) WITH ent1, COUNT(DISTINCT ent2) AS relatedItemCount RETURN AVG(relatedItemCount) <= 4 AS ruleSatisfied"
A Container must not have more than 2 associated Handling Units on average.,"Activity: [], EntityType: [""Container"", ""Handling Unit""], Actor: []","MATCH (ent1:Entity {EntityType:""Container""})-[:REL]-(ent2:Entity {EntityType:""Handling Unit""}) WITH ent1, COUNT(DISTINCT ent2) AS relatedItemCount RETURN AVG(relatedItemCount) <= 2 AS ruleSatisfied"
A Transport Document should not have more than 8 related Vehicles on average.,"Activity: [], EntityType: [""Transport Document"", ""Vehicle""], Actor: []","MATCH (ent1:Entity {EntityType:""Transport Document""})-[:REL]-(ent2:Entity {EntityType:""Vehicle""}) WITH ent1, COUNT(DISTINCT ent2) AS relatedItemCount RETURN AVG(relatedItemCount) <= 8 AS ruleSatisfied"
A Vehicle may not have more than 5 related Transport Documents on average.,"Activity: [], EntityType: [""Vehicle"", ""Transport Document""], Actor: []","MATCH (ent1:Entity {EntityType:""Vehicle""})-[:REL]-(ent2:Entity {EntityType:""Transport Document""}) WITH ent1, COUNT(DISTINCT ent2) AS relatedItemCount RETURN AVG(relatedItemCount) <= 5 AS ruleSatisfied"
A Container should not have an average of more than 3 associated Handling Units.,"Activity: [], EntityType: [""Container"", ""Handling Unit""], Actor: []","MATCH (ent1:Entity {EntityType:""Container""})-[:REL]-(ent2:Entity {EntityType:""Handling Unit""}) WITH ent1, COUNT(DISTINCT ent2) AS relatedItemCount RETURN AVG(relatedItemCount) <= 3 AS ruleSatisfied"
A Truck should only have 4 or fewer associated Containers on average.,"Activity: [], EntityType: [""Truck"", ""Container""], Actor: []","MATCH (ent1:Entity {EntityType:""Truck""})-[:REL]-(ent2:Entity {EntityType:""Container""}) WITH ent1, COUNT(DISTINCT ent2) AS relatedItemCount RETURN AVG(relatedItemCount) <= 4 AS ruleSatisfied"
"There must be a time gap of at least 10 days between ""Register Customer Order"" and ""Create Transport Document"" for an entity of type Customer Order.","Activity: [""Register Customer Order"", ""Create Transport Document""], EntityType: [""Customer Order""], Actor: []","MATCH (ent:Entity {EntityType: ""Customer Order""})<-[:CORR]-(e1:Event {Activity: 'Register Customer Order'}) MATCH (ent)<-[:CORR]-(e2:Event {Activity: 'Create Transport Document'}) WITH ent, e1, e2, duration.between(e1.timestamp, e2.timestamp) AS serviceTime RETURN MIN(abs(serviceTime.seconds)) > (10 * 24 * 60 * 60) AS rule_satisfied"
"There should be no more than 7 days between ""Weigh"" and ""Place in Stock"" for any entity of type Container.","Activity: [""Weigh"", ""Place in Stock""], EntityType: [""Container""], Actor: []","MATCH (ent:Entity {EntityType: ""Container""})<-[:CORR]-(e1:Event {Activity: 'Weigh'}) MATCH (ent)<-[:CORR]-(e2:Event {Activity: 'Place in Stock'}) WITH ent, e1, e2, duration.between(e1.timestamp, e2.timestamp) AS serviceTime RETURN MAX(abs(serviceTime.seconds)) < (7 * 24 * 60 * 60) AS rule_satisfied"
"For Containers, the ""Pick Up Empty Container"" and ""Load to Vehicle"" activities must be separated by no more than 5 days.","Activity: [""Pick Up Empty Container"", ""Load to Vehicle""], EntityType: [""Container""], Actor: []","MATCH (ent:Entity {EntityType: ""Container""})<-[:CORR]-(e1:Event {Activity: 'Pick Up Empty Container'}) MATCH (ent)<-[:CORR]-(e2:Event {Activity: 'Load to Vehicle'}) WITH ent, e1, e2, duration.between(e1.timestamp, e2.timestamp) AS serviceTime RETURN MAX(abs(serviceTime.seconds)) < (5 * 24 * 60 * 60) AS rule_satisfied"
"For every Customer Order entity, a ""Register Customer Order"" and ""Create Transport Document"" event should never occur with more than 2 days between each other.","Activity: [""Register Customer Order"", ""Create Transport Document""], EntityType: [""Customer Order""], Actor: []","MATCH (ent:Entity {EntityType: ""Customer Order""})<-[:CORR]-(e1:Event {Activity: 'Register Customer Order'}) MATCH (ent)<-[:CORR]-(e2:Event {Activity: 'Create Transport Document'}) WITH ent, e1, e2, duration.between(e1.timestamp, e2.timestamp) AS serviceTime RETURN MAX(abs(serviceTime.seconds)) < (2 * 24 * 60 * 60) AS rule_satisfied"
"There must be a gap of at least 1 day between the ""Load Truck"" and ""Drive to Terminal"" activities for entities of type Truck.","Activity: [""Load Truck"", ""Drive to Terminal""], EntityType: [""Truck""], Actor: []","MATCH (ent:Entity {EntityType: ""Truck""})<-[:CORR]-(e1:Event {Activity: 'Load Truck'}) MATCH (ent)<-[:CORR]-(e2:Event {Activity: 'Drive to Terminal'}) WITH ent, e1, e2, duration.between(e1.timestamp, e2.timestamp) AS serviceTime RETURN MIN(abs(serviceTime.seconds)) > (1 * 24 * 60 * 60) AS rule_satisfied"
"There should be no more than 15 days between ""Register Customer Order"" and ""Create Transport Document"" for any entity of type Customer Order.","Activity: [""Register Customer Order"", ""Create Transport Document""], EntityType: [""Customer Order""], Actor: []","MATCH (ent:Entity {EntityType: ""Customer Order""})<-[:CORR]-(e1:Event {Activity: 'Create Transport Document'}) MATCH (ent)<-[:CORR]-(e2:Event {Activity: 'Register Customer Order'}) WITH ent, e1, e2, duration.between(e1.timestamp, e2.timestamp) AS serviceTime RETURN MAX(abs(serviceTime.seconds)) < (15 * 24 * 60 * 60) AS rule_satisfied"
The event of placing in stock should never be more than 7 days after the event of weighing for each container entity or vice-versa.,"Activity: [""Place in Stock"", ""Weigh""], EntityType: [""Container""], Actor: []","MATCH (ent:Entity {EntityType: ""Container""})<-[:CORR]-(e1:Event {Activity: 'Place in Stock'}) MATCH (ent)<-[:CORR]-(e2:Event {Activity: 'Weigh'}) WITH ent, e1, e2, duration.between(e1.timestamp, e2.timestamp) AS serviceTime RETURN MAX(abs(serviceTime.seconds)) < (7 * 24 * 60 * 60) AS rule_satisfied"
"For each Container entity, the event where an empty container is picked up and the event Depart occur within 5 days of each other.","Activity: [""Pick Up Empty Container"", ""Depart""], EntityType: [""Container""], Actor: []","MATCH (ent:Entity {EntityType: ""Container""})<-[:CORR]-(e1:Event {Activity: 'Pick Up Empty Container'}) MATCH (ent)<-[:CORR]-(e2:Event {Activity: 'Depart'}) WITH ent, e1, e2, duration.between(e1.timestamp, e2.timestamp) AS serviceTime RETURN MAX(abs(serviceTime.seconds)) < (5 * 24 * 60 * 60) AS rule_satisfied"
The event where a truck departs must never happen more than 2 days after the event of booking the vehicle for any transport document entity or vice-versa.,"Activity: [""Book Vehicles"", ""Depart""], EntityType: [""Transport Document""], Actor: []","MATCH (ent:Entity {EntityType: ""Transport Document""})<-[:CORR]-(e1:Event {Activity: 'Book Vehicles'}) MATCH (ent)<-[:CORR]-(e2:Event {Activity: 'Depart'}) WITH ent, e1, e2, duration.between(e1.timestamp, e2.timestamp) AS serviceTime RETURN MAX(abs(serviceTime.seconds)) < (2 * 24 * 60 * 60) AS rule_satisfied"
There must be no more than 15 days between the creation of a customer order and the creation of a transport document for any customer order entity.,"Activity: [""Register Customer Order"", ""Weigh""], EntityType: [""Create Transport Document""], Actor: []","MATCH (ent:Entity {EntityType: ""Customer Order""})<-[:CORR]-(e1:Event {Activity: 'Register Customer Order'}) MATCH (ent)<-[:CORR]-(e2:Event {Activity: 'Create Transport Document'}) WITH ent, e1, e2, duration.between(e1.timestamp, e2.timestamp) AS serviceTime RETURN MAX(serviceTime.seconds) < (15 * 24 * 60 * 60) AS rule_satisfied"
"If a ""Register Customer Order"" event occurs for a customer order, then no ""Create Transport Document"" event may occur for any of its associated transport documents within 48 hours.","Activity: [""Register Customer Order"", ""Create Transport Document""], EntityType: [""Customer Order"", ""Transport Document""], Actor: []","MATCH (order:Entity {EntityType: ""Customer Order""})<-[:CORR]-(registerEvent:Event {Activity: ""Register Customer Order""}) MATCH (transportDoc:Entity {EntityType: ""Transport Document""})<-[:CORR]-(createEvent:Event {Activity: ""Create Transport Document""}) WHERE createEvent.timestamp <= registerEvent.timestamp + duration({hours: 48}) AND EXISTS { MATCH (transportDoc)-[:REL]-(order) } RETURN CASE WHEN COUNT(order)>0 THEN false ELSE true END AS ruleSatisfied"
"When a ""Pick Up Empty Container"" event occurs for a container, no ""Collect Goods"" event may occur for any of its associated handling units within 24 hours.","Activity: [""Pick Up Empty Container"", ""Collect Goods""], EntityType: [""Container"", ""Handling Unit""], Actor: []","MATCH (container:Entity {EntityType: ""Container""})<-[:CORR]-(pickUpEvent:Event {Activity: ""Pick Up Empty Container""}) MATCH (handlingUnit:Entity {EntityType: ""Handling Unit""})<-[:CORR]-(collectEvent:Event {Activity: ""Collect Goods""}) WHERE collectEvent.timestamp <= pickUpEvent.timestamp + duration({hours: 24}) AND EXISTS { MATCH (handlingUnit)-[:REL]-(container) } RETURN CASE WHEN COUNT(container)>0 THEN false ELSE true END AS ruleSatisfied"
"If a ""Load Truck"" event occurs for a truck, no ""Drive to Terminal"" event may occur for any of its associated containers within 12 hours.","Activity: [""Load Truck"", ""Drive to Terminal""], EntityType: [""Truck"", ""Container""], Actor: []","MATCH (truck:Entity {EntityType: ""Truck""})<-[:CORR]-(loadEvent:Event {Activity: ""Load Truck""}) MATCH (container:Entity {EntityType: ""Container""})<-[:CORR]-(driveEvent:Event {Activity: ""Drive to Terminal""}) WHERE driveEvent.timestamp <= loadEvent.timestamp + duration({hours: 12}) AND EXISTS { MATCH (container)-[:REL]-(truck) } RETURN CASE WHEN COUNT(truck)>0 THEN false ELSE true END AS ruleSatisfied"
"If a ""Weigh"" event occurs for a vehicle, no ""Place in Stock"" event may occur for any of its associated handling units within 6 hours.","Activity: [""Weigh"", ""Place in Stock""], EntityType: [""Vehicle"", ""Handling Unit""], Actor: []","MATCH (vehicle:Entity {EntityType: ""Vehicle""})<-[:CORR]-(weighEvent:Event {Activity: ""Weigh""}) MATCH (handlingUnit:Entity {EntityType: ""Handling Unit""})<-[:CORR]-(placeEvent:Event {Activity: ""Place in Stock""}) WHERE placeEvent.timestamp <= weighEvent.timestamp + duration({hours: 6}) AND EXISTS { MATCH (handlingUnit)-[:REL]-(vehicle) } RETURN CASE WHEN COUNT(vehicle)>0 THEN false ELSE true END AS ruleSatisfied"
"If a ""Book Vehicles"" event occurs for a transport document, no ""Order Empty Containers"" event may occur for any of its associated containers within 15 hours.","Activity: [""Book Vehicles"", ""Order Empty Containers""], EntityType: [""Transport Document"", ""Container""], Actor: []","MATCH (doc:Entity {EntityType: ""Transport Document""})<-[:CORR]-(bookEvent:Event {Activity: ""Book Vehicles""}) MATCH (container:Entity {EntityType: ""Container""})<-[:CORR]-(orderEvent:Event {Activity: ""Order Empty Containers""}) WHERE orderEvent.timestamp <= bookEvent.timestamp + duration({hours: 15}) AND EXISTS { MATCH (container)-[:REL]-(doc) } RETURN CASE WHEN COUNT(doc)>0 THEN false ELSE true END AS ruleSatisfied"
"When a ""Place in Stock"" event occurs for a truck, no ""Bring to Loading Bay"" event may occur for any of its associated containers within 24 hours.","Activity: [""Place in Stock"", ""Bring to Loading Bay""], EntityType: [""Truck"", ""Container""], Actor: []","MATCH (truck:Entity {EntityType: ""Truck""})<-[:CORR]-(placeEvent:Event {Activity: ""Place in Stock""}) MATCH (container:Entity {EntityType: ""Container""})<-[:CORR]-(loadingBayEvent:Event {Activity: ""Bring to Loading Bay""}) WHERE loadingBayEvent.timestamp <= placeEvent.timestamp + duration({hours: 24}) AND EXISTS { MATCH (container)-[:REL]-(truck) } RETURN CASE WHEN COUNT(truck)>0 THEN false ELSE true END AS ruleSatisfied"
"If a ""Load to Vehicle"" event occurs for a vehicle, no ""Reschedule Container"" event may occur for any of its associated containers within 12 hours.","Activity: [""Load to Vehicle"", ""Reschedule Container""], EntityType: [""Vehicle"", ""Container""], Actor: []","MATCH (vehicle:Entity {EntityType: ""Vehicle""})<-[:CORR]-(loadEvent:Event {Activity: ""Load to Vehicle""}) MATCH (container:Entity {EntityType: ""Container""})<-[:CORR]-(rescheduleEvent:Event {Activity: ""Reschedule Container""}) WHERE rescheduleEvent.timestamp <= loadEvent.timestamp + duration({hours: 12}) AND EXISTS { MATCH (container)-[:REL]-(vehicle) } RETURN CASE WHEN COUNT(vehicle)>0 THEN false ELSE true END AS ruleSatisfied"
"If a ""Pick Up Empty Container"" event occurs for a container, no ""Place in Stock"" event may occur for any of its associated handling units within 36 hours.","Activity: [""Pick Up Empty Container"", ""Place in Stock""], EntityType: [""Container"", ""Handling Unit""], Actor: []","MATCH (container:Entity {EntityType: ""Container""})<-[:CORR]-(pickUpEvent:Event {Activity: ""Pick Up Empty Container""}) MATCH (handlingUnit:Entity {EntityType: ""Handling Unit""})<-[:CORR]-(placeStockEvent:Event {Activity: ""Place in Stock""}) WHERE placeStockEvent.timestamp <= pickUpEvent.timestamp + duration({hours: 36}) AND EXISTS { MATCH (handlingUnit)-[:REL]-(container) } RETURN CASE WHEN COUNT(container)>0 THEN false ELSE true END AS ruleSatisfied"
"If a ""Load Truck"" event occurs for a truck, no ""Reschedule Container"" event may occur for any of its associated containers within 24 hours.","Activity: [""Load Truck"", ""Reschedule Container""], EntityType: [""Truck"", ""Container""], Actor: []","MATCH (truck:Entity {EntityType: ""Truck""})<-[:CORR]-(loadEvent:Event {Activity: ""Load Truck""}) MATCH (container:Entity {EntityType: ""Container""})<-[:CORR]-(rescheduleEvent:Event {Activity: ""Reschedule Container""}) WHERE rescheduleEvent.timestamp <= loadEvent.timestamp + duration({hours: 24}) AND EXISTS { MATCH (container)-[:REL]-(truck) } RETURN CASE WHEN COUNT(truck)>0 THEN false ELSE true END AS ruleSatisfied"
"For every Customer Order, the ""Register Customer Order"" event must occur at least three times before the ""Create Transport Document"" event can happen.","Activities: [""Register Customer Order"", ""Create Transport Document""], EntityType: [""Customer Order""], Actor: []","MATCH (e1:Event {Activity: ""Register Customer Order""})-[:CORR]->(ent:Entity {EntityType: ""Customer Order""}) OPTIONAL MATCH (e2:Event {Activity: ""Create Transport Document""})-[:CORR]->(ent) WHERE e1.timestamp < e2.timestamp WITH ent, COUNT(e1) AS registerCount WHERE registerCount < 3 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
"Before a ""Book Vehicles"" event occurs, at least 2 ""Create Transport Document"" events should have happened for the same transport document.","Activities: [""Create Transport Document"", ""Book Vehicles""], EntityType: [""Transport Document""], Actor: []","MATCH (e1:Event {Activity: ""Create Transport Document""})-[:CORR]->(ent:Entity {EntityType: ""Transport Document""}) OPTIONAL MATCH (e2:Event {Activity: ""Book Vehicles""})-[:CORR]->(ent) WHERE e1.timestamp < e2.timestamp WITH ent, COUNT(e1) AS documentCount WHERE documentCount < 2 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
"Before an ""Order Empty Containers"" event occurs, at least 2 ""Create Transport Document"" events must have been recorded for the same transport document.","Activities: [""Create Transport Document"", ""Order Empty Containers""], EntityType: [""Transport Document""], Actor: []","MATCH (e1:Event {Activity: ""Create Transport Document""})-[:CORR]->(ent:Entity {EntityType: ""Transport Document""}) OPTIONAL MATCH (e2:Event {Activity: ""Order Empty Containers""})-[:CORR]->(ent) WHERE e1.timestamp < e2.timestamp WITH ent, COUNT(e1) AS documentCount WHERE documentCount < 2 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
"A ""Pick Up Empty Container"" event cannot occur for any container unless at least two ""Order Empty Containers"" events have already occurred for that container.","Activities: [""Order Empty Containers"", ""Pick Up Empty Container""], EntityType: [""Container""], Actor: []","MATCH (e1:Event {Activity: ""Order Empty Containers""})-[:CORR]->(ent:Entity {EntityType: ""Container""}) OPTIONAL MATCH (e2:Event {Activity: ""Pick Up Empty Container""})-[:CORR]->(ent) WHERE e1.timestamp < e2.timestamp WITH ent, COUNT(e1) AS orderCount WHERE orderCount < 2 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
"Before a ""Collect Goods"" event happens, at least three ""Pick Up Empty Container"" events must have been recorded for the container.","Activities: [""Pick Up Empty Container"", ""Collect Goods""], EntityType: [""Container""], Actor: []","MATCH (e2:Event {Activity: ""Collect Goods""})-[:CORR]->(ent:Entity {EntityType: ""Container""}) OPTIONAL MATCH (e1:Event {Activity: ""Pick Up Empty Container""})-[:CORR]->(ent) WHERE e1.timestamp < e2.timestamp WITH ent, e2, COUNT(e1) AS pickUpCount WHERE pickUpCount < 3 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied"
"Before a ""Load Truck"" event happens, at least 2 ""Collect Goods"" events must have been recorded for the same container.","Activities: [""Collect Goods"", ""Load Truck""], EntityType: [""Container""], Actor: []","MATCH (e2:Event {Activity: ""Load Truck""})-[:CORR]->(ent:Entity {EntityType: ""Container""}) OPTIONAL MATCH (e1:Event {Activity: ""Collect Goods""})-[:CORR]->(ent) WHERE e1.timestamp < e2.timestamp WITH ent, e2, COUNT(e1) AS collectCount WHERE collectCount < 2 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied "
"For a ""Drive to Terminal"" event to occur, at least two ""Load Truck"" events must have been recorded for the same truck.","Activities: [""Load Truck"", ""Drive to Terminal""], EntityType: [""Truck""], Actor: []","MATCH (e2:Event {Activity: ""Drive to Terminal""})-[:CORR]->(ent:Entity {EntityType: ""Truck""}) OPTIONAL MATCH (e1:Event {Activity: ""Load Truck""})-[:CORR]->(ent) WHERE e1.timestamp < e2.timestamp WITH ent, e2, COUNT(e1) AS loadCount WHERE loadCount < 2 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied "
"A ""Weigh"" event can only occur after at least two ""Drive to Terminal"" events have been recorded for the truck.","Activities: [""Drive to Terminal"", ""Weigh""], EntityType: [""Truck""], Actor: []","MATCH (e2:Event {Activity: ""Weigh""})-[:CORR]->(ent:Entity {EntityType: ""Truck""}) OPTIONAL MATCH (e1:Event {Activity: ""Drive to Terminal""})-[:CORR]->(ent) WHERE e1.timestamp < e2.timestamp WITH ent, e2, COUNT(e1) AS driveCount WHERE driveCount < 2 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied "
"Before a ""Place in Stock"" event can be recorded, at least two ""Weigh"" events must have been recorded for the corresponding handling unit.","Activities: [""Weigh"", ""Place in Stock""], EntityType: [""Handling Unit""], Actor: []","MATCH (e2:Event {Activity: ""Place in Stock""})-[:CORR]->(ent:Entity {EntityType: ""Handling Unit""}) OPTIONAL MATCH (e1:Event {Activity: ""Weigh""})-[:CORR]->(ent) WHERE e1.timestamp < e2.timestamp WITH ent, e2, COUNT(e1) AS weighCount WHERE weighCount < 2 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied "
"Before a ""Bring to Loading Bay"" event can occur, at least three ""Place in Stock"" events must have been recorded for the corresponding handling unit.","Activities: [""Place in Stock"", ""Bring to Loading Bay""], EntityType: [""Handling Unit""], Actor: []","MATCH (e2:Event {Activity: ""Bring to Loading Bay""})-[:CORR]->(ent:Entity {EntityType: ""Handling Unit""}) OPTIONAL MATCH (e1:Event {Activity: ""Place in Stock""})-[:CORR]->(ent) WHERE e1.timestamp < e2.timestamp WITH ent, e2, COUNT(e1) AS placeCount WHERE placeCount < 3 RETURN CASE WHEN COUNT(ent) > 0 THEN false ELSE true END AS ruleSatisfied "
At least 3 customer orders have not yet been registered.,"Activity: [""Register Customer Order""], EntityType: [""Customer Order""], Actor: []",MATCH (ent:Entity {EntityType: 'Customer Order'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'Register Customer Order'})-[:CORR]->(ent) } RETURN COUNT(ent) >= 3 AS ruleSatisfied
There are at least 7 transport documents for which no vehicle has been booked.,"Activity: [""Book Vehicles""], EntityType: [""Transport Document""], Actor: []",MATCH (ent:Entity {EntityType: 'Transport Document'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'Book Vehicles'})-[:CORR]->(ent) } RETURN COUNT(ent) >= 7 AS ruleSatisfied
There are at least 6 trucks where no weigh event has been recorded.,"Activity: [""Weigh""], EntityType: [""Truck""], Actor: []",MATCH (ent:Entity {EntityType: 'Truck'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'Weigh'})-[:CORR]->(ent) } RETURN COUNT(ent) >= 6 AS ruleSatisfied
At least 8 containers have not yet been loaded to vehicles.,"Activity: [""Load to Vehicle""], EntityType: [""Container""], Actor: []",MATCH (ent:Entity {EntityType: 'Container'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'Load to Vehicle'})-[:CORR]->(ent) } RETURN COUNT(ent) >= 8 AS ruleSatisfied
At least 5 transport documents exist where no collect goods event has been recorded.,"Activity: [""Collect Goods""], EntityType: [""Transport Document""], Actor: []",MATCH (ent:Entity {EntityType: 'Transport Document'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'Collect Goods'})-[:CORR]->(ent) } RETURN COUNT(ent) >= 5 AS ruleSatisfied
"There are at least 4 ""Container"" entities for which no ""Pick Up Empty Container"" event has occurred.","Activity: [""Pick Up Empty Container""], EntityType: [""Container""], Actor: []",MATCH (ent:Entity {EntityType: 'Container'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'Pick Up Empty Container'})-[:CORR]->(ent) } RETURN COUNT(ent) >= 4 AS ruleSatisfied
"At least 5 ""Truck"" entities exist without a ""Place in Stock"" event.","Activity: [""Place in Stock""], EntityType: [""Truck""], Actor: []",MATCH (ent:Entity {EntityType: 'Truck'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'Place in Stock'})-[:CORR]->(ent) } RETURN COUNT(ent) >= 5 AS ruleSatisfied
"There are at least 7 ""Container"" entities that do not have a ""Load Truck"" event linked to them.","Activity: [""Load Truck""], EntityType: [""Container""], Actor: []",MATCH (ent:Entity {EntityType: 'Container'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'Load Truck'})-[:CORR]->(ent) } RETURN COUNT(ent) >= 7 AS ruleSatisfied
"At least 4 ""Transport Document"" entities exist for which no ""Reschedule Container"" event has been performed.","Activity: [""Reschedule Container""], EntityType: [""Transport Document""], Actor: []",MATCH (ent:Entity {EntityType: 'Transport Document'}) WHERE NOT EXISTS { MATCH (event:Event {Activity: 'Reschedule Container'})-[:CORR]->(ent) } RETURN COUNT(ent) >= 4 AS ruleSatisfied
No more than 10 customer orders should be registered on the same day.,"Activity: [""Register Customer Order""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Register Customer Order""}) WITH date(e.timestamp).year AS year, date(e.timestamp).month AS month, date(e.timestamp).day AS day, COUNT(e) AS eventsPerDay RETURN CASE WHEN MAX(eventsPerDay) > 10 THEN false ELSE true END AS ruleSatisfied"
There must not be more than 8 transport documents created on any single day.,"Activity: [""Create Transport Document""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Create Transport Document""}) WITH date(e.timestamp).year AS year, date(e.timestamp).month AS month, date(e.timestamp).day AS day, COUNT(e) AS eventsPerDay RETURN CASE WHEN MAX(eventsPerDay) > 8 THEN false ELSE true END AS ruleSatisfied"
At most 6 containers should be picked up per day.,"Activity: [""Pick Up Empty Container""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Pick Up Empty Container""}) WITH date(e.timestamp).year AS year, date(e.timestamp).month AS month, date(e.timestamp).day AS day, COUNT(e) AS eventsPerDay RETURN CASE WHEN MAX(eventsPerDay) > 6 THEN false ELSE true END AS ruleSatisfied"
The number of recorded vehicle bookings should not exceed 3 daily.,"Activity: [""Book Vehicles""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Book Vehicles""}) WITH date(e.timestamp).year AS year, date(e.timestamp).month AS month, date(e.timestamp).day AS day, COUNT(e) AS eventsPerDay RETURN CASE WHEN MAX(eventsPerDay) > 3 THEN false ELSE true END AS ruleSatisfied"
No more than 4 goods should be collected per day.,"Activity: [""Collect Goods""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Collect Goods""}) WITH date(e.timestamp).year AS year, date(e.timestamp).month AS month, date(e.timestamp).day AS day, COUNT(e) AS eventsPerDay RETURN CASE WHEN MAX(eventsPerDay) > 4 THEN false ELSE true END AS ruleSatisfied"
"""Create Transport Document"" should occur no more than 15 times in a week.","Activity: [""Create Transport Document""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Create Transport Document""}) WITH date(e.timestamp).year AS year, date(e.timestamp).week AS week, COUNT(e) AS eventsPerWeek RETURN CASE WHEN MAX(eventsPerWeek) > 15 THEN false ELSE true END AS ruleSatisfied"
"A maximum of 20 ""Pick Up Empty Container"" events can occur in a calendar month.","Activity: [""Pick Up Empty Container""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Pick Up Empty Container""}) WITH date(e.timestamp).year AS year, date(e.timestamp).month AS month, COUNT(e) AS eventsPerMonth RETURN CASE WHEN MAX(eventsPerMonth) > 20 THEN false ELSE true END AS ruleSatisfied"
"""Book Vehicles"" must not be logged more than 10 times within a fiscal quarter.","Activity: [""Book Vehicles""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Book Vehicles""}) WITH date(e.timestamp).year AS year, date(e.timestamp).quarter AS quarter, COUNT(e) AS eventsPerQuarter RETURN CASE WHEN MAX(eventsPerQuarter) > 10 THEN false ELSE true END AS ruleSatisfied"
"On Mondays in April 2023, customer orders should not be registered.","Activity: [""Register Customer Order""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Register Customer Order""}) WHERE date(e.timestamp).year = 2023 AND date(e.timestamp).month = 4 AND date(e.timestamp).dayOfWeek = 1 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
It is prohibited to record a goods receipt on weekends in Q4 of 2021.,"Activity: [""Collect Goods""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Collect Goods""}) WHERE date(e.timestamp).year = 2021 AND date(e.timestamp).month >= 10 AND date(e.timestamp).month <= 12 AND date(e.timestamp).dayOfWeek IN [6, 7] RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
"Between June and August 2020, vehicles must not be booked on a Wednesday.","Activity: [""Book Vehicles""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Book Vehicles""}) WHERE date(e.timestamp).year = 2020 AND date(e.timestamp).month >= 6 AND date(e.timestamp).month <= 8 AND date(e.timestamp).dayOfWeek = 3 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
"Between February and May 2022, transport documents must not be created on Sundays.","Activity: [""Create Transport Document""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Create Transport Document""}) WHERE date(e.timestamp).year = 2022 AND date(e.timestamp).month >= 2 AND date(e.timestamp).month <= 5 AND date(e.timestamp).dayOfWeek = 7 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
"The activity ""Register Customer Order"" must not be performed on a Monday in March 2021.","Activity: [""Register Customer Order""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Register Customer Order""}) WHERE date(e.timestamp).year = 2021 AND date(e.timestamp).month = 3 AND date(e.timestamp).dayOfWeek = 1 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
"The event ""Load Truck"" is not allowed on weekends in the first half of 2022.","Activity: [""Load Truck""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Load Truck""}) WHERE date(e.timestamp).year = 2022 AND date(e.timestamp).month >= 1 AND date(e.timestamp).month <= 6 AND date(e.timestamp).dayOfWeek IN [6, 7] RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
"The action ""Weigh"" must not happen on a Friday in July 2020.","Activity: [""Weigh""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Weigh""}) WHERE date(e.timestamp).year = 2020 AND date(e.timestamp).month = 7 AND date(e.timestamp).dayOfWeek = 5 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
"The ""Load to Vehicle"" event must not occur on a Wednesday in Q3 of 2021.","Activity: [""Load to Vehicle""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Load to Vehicle""}) WHERE date(e.timestamp).year = 2021 AND date(e.timestamp).month >= 7 AND date(e.timestamp).month <= 9 AND date(e.timestamp).dayOfWeek = 3 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
"""Place in Stock"" should not be recorded on any Sunday in 2025.","Activity: [""Place in Stock""], EntityType: [], Actor: []","MATCH (e:Event {Activity: ""Place in Stock""}) WHERE date(e.timestamp).year = 2025 AND date(e.timestamp).dayOfWeek = 7 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Events corresponding to vehicles may only be processed on Fridays.,"Activity: [], EntityType: [""Vehicle""], Actor: []","MATCH (ent:Entity {EntityType: ""Vehicle""})<-[:CORR]-(e:Event) WHERE date(e.timestamp).dayOfWeek <> 5 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Actions related to handling units must only be handled on Wednesdays.,"Activity: [], EntityType: [""Handling Unit""], Actor: []","MATCH (ent:Entity {EntityType: ""Handling Unit""})<-[:CORR]-(e:Event) WHERE date(e.timestamp).dayOfWeek <> 3 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
All actions on a truck must be executed on Thursdays only.,"Activity: [], EntityType: [""Truck""], Actor: []","MATCH (ent:Entity {EntityType: ""Truck""})<-[:CORR]-(e:Event) WHERE date(e.timestamp).dayOfWeek <> 4 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Any events concerning a forklift should take place exclusively on Sundays.,"Activity: [], EntityType: [""Forklift""], Actor: []","MATCH (ent:Entity {EntityType: ""Forklift""})<-[:CORR]-(e:Event) WHERE date(e.timestamp).dayOfWeek <> 7 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Transactions involving vehicles are only valid on Saturdays.,"Activity: [], EntityType: [""Vehicle""], Actor: []","MATCH (ent:Entity {EntityType: ""Vehicle""})<-[:CORR]-(e:Event) WHERE date(e.timestamp).dayOfWeek <> 6 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
It is not allowed that events correlated to transport documents are performed on Tuesdays or Fridays.,"Activity: [], EntityType: [""Transport Document""], Actor: []","MATCH (ent:Entity {EntityType: ""Transport Document""})<-[:CORR]-(e:Event) WHERE date(e.timestamp).dayOfWeek IN [2, 5] RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Events related to a customer order must not be processed on Mondays and Thursdays.,"Activity: [], EntityType: [""Customer Order""], Actor: []","MATCH (ent:Entity {EntityType: ""Customer Order""})<-[:CORR]-(e:Event) WHERE date(e.timestamp).dayOfWeek IN [1, 4] RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Activities concerning trucks cannot be worked on Sundays and Wednesdays.,"Activity: [], EntityType: [""Truck""], Actor: []","MATCH (ent:Entity {EntityType: ""Truck""})<-[:CORR]-(e:Event) WHERE date(e.timestamp).dayOfWeek IN [7, 3] RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
No event linked to a forklift may be handled on Saturdays and Tuesdays.,"Activity: [], EntityType: [""Forklift""], Actor: []","MATCH (ent:Entity {EntityType: ""Forklift""})<-[:CORR]-(e:Event) WHERE date(e.timestamp).dayOfWeek IN [6, 2] RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Actions regarding customer orders cannot be processed on Mondays and Fridays.,"Activity: [], EntityType: [""Customer Order""], Actor: []","MATCH (ent:Entity {EntityType: ""Customer Order""})<-[:CORR]-(e:Event) WHERE date(e.timestamp).dayOfWeek IN [1, 5] RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
A forklift must not be worked on during the period from 5 PM to 11 AM.,"Activity: [], EntityType: [""Forklift""], Actor: []","MATCH (ent:Entity {EntityType: ""Forklift""})<-[:CORR]-(e:Event) WHERE (time(e.timestamp).hour >= 17 OR time(e.timestamp).hour < 11) RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
No events related to a truck may occur between 3 PM and 9 AM.,"Activity: [], EntityType: [""Truck""], Actor: []","MATCH (ent:Entity {EntityType: ""Truck""})<-[:CORR]-(e:Event) WHERE (time(e.timestamp).hour >= 15 OR time(e.timestamp).hour < 9) RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
No handling unit may be handled from 8 AM until 2 PM.,"Activity: [], EntityType: [""Handling Unit""], Actor: []","MATCH (ent:Entity {EntityType: ""Handling Unit""})<-[:CORR]-(e:Event) WHERE time(e.timestamp).hour >= 8 AND time(e.timestamp).hour < 14 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
A vehicle is prohibited from being worked on between 11 PM and 6 AM.,"Activity: [], EntityType: [""Vehicle""], Actor: []","MATCH (ent:Entity {EntityType: ""Vehicle""})<-[:CORR]-(e:Event) WHERE (time(e.timestamp).hour >= 23 OR time(e.timestamp).hour < 6) RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
"Between 10 AM and 5 PM, no actions should occur for any forklift.","Activity: [], EntityType: [""Forklift""], Actor: []","MATCH (ent:Entity {EntityType: ""Forklift""})<-[:CORR]-(e:Event) WHERE time(e.timestamp).hour >= 10 AND time(e.timestamp).hour < 17 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Transport documents should not be processed from 1 AM to 4 AM.,"Activity: [], EntityType: [""Transport Document""], Actor: []","MATCH (ent:Entity {EntityType: ""Transport Document""})<-[:CORR]-(e:Event) WHERE time(e.timestamp).hour >= 1 AND time(e.timestamp).hour < 4 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
No events on handling units are allowed between 6 PM and 9 AM.,"Activity: [], EntityType: [""Handling Unit""], Actor: []","MATCH (ent:Entity {EntityType: ""Handling Unit""})<-[:CORR]-(e:Event) WHERE (time(e.timestamp).hour >= 18 OR time(e.timestamp).hour < 9) RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Trucks must not be worked on during the time between 12 PM and 3 PM.,"Activity: [], EntityType: [""Truck""], Actor: []","MATCH (ent:Entity {EntityType: ""Truck""})<-[:CORR]-(e:Event) WHERE time(e.timestamp).hour >= 12 AND time(e.timestamp).hour < 15 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
"Between 7 AM and 11 AM, it is not allowed to work on forklifts.","Activity: [], EntityType: [""Forklift""], Actor: []","MATCH (ent:Entity {EntityType: ""Forklift""})<-[:CORR]-(e:Event) WHERE time(e.timestamp).hour >= 7 AND time(e.timestamp).hour < 11 RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
Customer orders should never be worked on from 9 PM to 5 AM.,"Activity: [], EntityType: [""Customer Order""], Actor: []","MATCH (ent:Entity {EntityType: ""Customer Order""})<-[:CORR]-(e:Event) WHERE (time(e.timestamp).hour >= 21 OR time(e.timestamp).hour < 5) RETURN CASE WHEN COUNT(e) > 0 THEN false ELSE true END AS ruleSatisfied"
A Transport Document created on a Monday cannot be loaded onto a Vehicle on a Friday.,"Activity: [""Create Transport Document"", ""Load to Vehicle""], EntityType: [""Transport Document""], Actor: []","MATCH (e1:Event {Activity: ""Create Transport Document""})-[:CORR]->(ent:Entity {EntityType: ""Transport Document""}) MATCH (e2:Event {Activity: ""Load to Vehicle""})-[:CORR]->(ent) WHERE date(e1.timestamp).dayOfWeek = 1 AND date(e2.timestamp).dayOfWeek = 5 RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
A Truck cannot be weighed on a Thursday if it was loaded on a Tuesday.,"Activity: [""Load Truck"", ""Weigh""], EntityType: [""Truck""], Actor: []","MATCH (e1:Event {Activity: ""Load Truck""})-[:CORR]->(ent:Entity {EntityType: ""Truck""}) MATCH (e2:Event {Activity: ""Weigh""})-[:CORR]->(ent) WHERE date(e1.timestamp).dayOfWeek = 2 AND date(e2.timestamp).dayOfWeek = 4 RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
A Customer Order cannot be processed on a Wednesday if the Transport Document for the same order was created on a Monday.,"Activity: [""Register Customer Order"", ""Create Transport Document""], EntityType: [""Customer Order""], Actor: []","MATCH (e1:Event {Activity: ""Create Transport Document""})-[:CORR]->(ent:Entity {EntityType: ""Customer Order""}) MATCH (e2:Event {Activity: ""Register Customer Order""})-[:CORR]->(ent) WHERE date(e1.timestamp).dayOfWeek = 1 AND date(e2.timestamp).dayOfWeek = 3 RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
A Truck cannot collect ggods on a Thursday if the Truck was weighed on a Tuesday.,"Activity: [""Weigh"", ""Collect Goods""], EntityType: [""Truck""], Actor: []","MATCH (e1:Event {Activity: ""Weigh""})-[:CORR]->(ent:Entity {EntityType: ""Truck""}) MATCH (e2:Event {Activity: ""Collect Goods""})-[:CORR]->(ent) WHERE date(e1.timestamp).dayOfWeek = 2 AND date(e2.timestamp).dayOfWeek = 4 RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
A Vehicle cannot be driven to the terminal on a Wednesday if it was booked on a Monday.,"Activity: [""Book Vehicles"", ""Drive to Terminal""], EntityType: [""Vehicle""], Actor: []","MATCH (e1:Event {Activity: ""Book Vehicles""})-[:CORR]->(ent:Entity {EntityType: ""Vehicle""}) MATCH (e2:Event {Activity: ""Drive to Terminal""})-[:CORR]->(ent) WHERE date(e1.timestamp).dayOfWeek = 1 AND date(e2.timestamp).dayOfWeek = 3 RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
A Container cannot be driven to the terminal on a Friday if the Container was placed in stock on a Tuesday.,"Activity: [""Place in Stock"", ""Drive to Terminal""], EntityType: [""Container""], Actor: []","MATCH (e1:Event {Activity: ""Place in Stock""})-[:CORR]->(ent:Entity {EntityType: ""Container""}) MATCH (e2:Event {Activity: ""Drive to Terminal""})-[:CORR]->(ent) WHERE date(e1.timestamp).dayOfWeek = 2 AND date(e2.timestamp).dayOfWeek = 5 RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
For a given container a Truck cannot be unloaded on a Tuesday if the Container was placed in stock on a Thursday.,"Activity: [""Place in Stock"", ""Unload Truck""], EntityType: [""Container""], Actor: []","MATCH (e1:Event {Activity: ""Place in Stock""})-[:CORR]->(ent:Entity {EntityType: ""Container""}) MATCH (e2:Event {Activity: ""Unload Truck""})-[:CORR]->(ent) WHERE date(e1.timestamp).dayOfWeek = 4 AND date(e2.timestamp).dayOfWeek = 2 RETURN CASE WHEN COUNT(ent)>0 THEN false ELSE true END AS ruleSatisfied"
"For every ""Customer Order"", when the ""Register Customer Order"" event occurs, a ""Create Transport Document"" event must follow for the ""Customer Order"", and a ""Book Vehicles"" event must take place for every associated ""Transport Document"".","Activity: [""Register Customer Order"", ""Create Transport Document"", ""Book Vehicles""], EntityType: [""Customer Order"", ""Transport Document""], Actor: []","MATCH (order:Entity {EntityType: ""Customer Order""})<-[:CORR]-(registerEvent:Event {Activity: ""Register Customer Order""}) WHERE NOT EXISTS{ MATCH (order)<-[:CORR]-(createEvent:Event {Activity: ""Create Transport Document""}) MATCH (order)-[:REL]-(transportDoc:Entity {EntityType: ""Transport Document""})<-[:CORR]-(bookEvent:Event {Activity: ""Book Vehicles""}) } RETURN CASE WHEN COUNT(order)>0 THEN false ELSE true END AS ruleSatisfied"
"For every ""Truck"", if the ""Load Truck"" event is triggered, a ""Weigh"" event must be registered for the ""Truck"", and the ""Drive to Terminal"" event must also happen for every associated ""Container"".","Activity: [""Load Truck"", ""Weigh"", ""Drive to Terminal""], EntityType: [""Truck"", ""Container""], Actor: []","MATCH (truck:Entity {EntityType: ""Truck""})<-[:CORR]-(loadTruckEvent:Event {Activity: ""Load Truck""}) WHERE NOT EXISTS{ MATCH (truck)<-[:CORR]-(weighEvent:Event {Activity: ""Weigh""}) MATCH (truck)-[:REL]-(container:Entity {EntityType: ""Container""})<-[:CORR]-(driveEvent:Event {Activity: ""Drive to Terminal""}) } RETURN CASE WHEN COUNT(truck)>0 THEN false ELSE true END AS ruleSatisfied"
"For every ""Transport Document"", when a ""Create Transport Document"" event happens, a ""Pick Up Empty Container"" event must occur for the ""Transport Document"", and a ""Load Truck"" event should be logged for all associated ""Truck"".","Activity: [""Create Transport Document"", ""Pick Up Empty Container"", ""Load Truck""], EntityType: [""Transport Document"", ""Truck""], Actor: []","MATCH (transportDoc:Entity {EntityType: ""Transport Document""})<-[:CORR]-(createEvent:Event {Activity: ""Create Transport Document""}) WHERE NOT EXISTS{ MATCH (transportDoc)<-[:CORR]-(pickUpEvent:Event {Activity: ""Pick Up Empty Container""}) MATCH (transportDoc)-[:REL]-(truck:Entity {EntityType: ""Truck""})<-[:CORR]-(loadTruckEvent:Event {Activity: ""Load Truck""}) } RETURN CASE WHEN COUNT(transportDoc)>0 THEN false ELSE true END AS ruleSatisfied"
"For every ""Customer Order"", if the ""Order Empty Containers"" event takes place, the ""Place in Stock"" event must occur for the ""Customer Order"", and a ""Book Vehicles"" event must take place for all associated ""Transport Document"".","Activity: [""Order Empty Containers"", ""Place in Stock"", ""Book Vehicles""], EntityType: [""Customer Order"", ""Transport Document""], Actor: []","MATCH (order:Entity {EntityType: ""Customer Order""})<-[:CORR]-(orderEvent:Event {Activity: ""Order Empty Containers""}) WHERE NOT EXISTS{ MATCH (order)<-[:CORR]-(placeInStockEvent:Event {Activity: ""Place in Stock""}) MATCH (order)-[:REL]-(transportDoc:Entity {EntityType: ""Transport Document""})<-[:CORR]-(bookVehicleEvent:Event {Activity: ""Book Vehicles""}) } RETURN CASE WHEN COUNT(order)>0 THEN false ELSE true END AS ruleSatisfied"
"For each ""Handling Unit"", if a ""Place in Stock"" event occurs, a ""Load to Vehicle"" event must happen for the ""Handling Unit"", and a ""Pick Up Empty Container"" event should occur for all associated ""Container"".","Activity: [""Place in Stock"", ""Load to Vehicle"", ""Pick Up Empty Container""], EntityType: [""Handling Unit"", ""Container""], Actor: []","MATCH (handlingUnit:Entity {EntityType: ""Handling Unit""})<-[:CORR]-(placeInStockEvent:Event {Activity: ""Place in Stock""}) WHERE NOT EXISTS{ MATCH (handlingUnit)<-[:CORR]-(loadToVehicleEvent:Event {Activity: ""Load to Vehicle""}) MATCH (handlingUnit)-[:REL]-(container:Entity {EntityType: ""Container""})<-[:CORR]-(pickUpEvent:Event {Activity: ""Pick Up Empty Container""}) } RETURN CASE WHEN COUNT(handlingUnit)>0 THEN false ELSE true END AS ruleSatisfied"
"For every ""Truck"", when a ""Weigh"" event is triggered, a ""Load Truck"" event should occur for the ""Truck"", and a ""Place in Stock"" event must happen for all associated ""Handling Unit"".","Activity: [""Weigh"", ""Load Truck"", ""Place in Stock""], EntityType: [""Truck"", ""Handling Unit""], Actor: []","MATCH (truck:Entity {EntityType: ""Truck""})<-[:CORR]-(weighEvent:Event {Activity: ""Weigh""}) WHERE NOT EXISTS{ MATCH (truck)<-[:CORR]-(loadTruckEvent:Event {Activity: ""Load Truck""}) MATCH (truck)-[:REL]- (handlingUnit:Entity {EntityType: ""Handling Unit""})<-[:CORR]-(placeInStockEvent:Event {Activity: ""Place in Stock""}) } RETURN CASE WHEN COUNT(truck)>0 THEN false ELSE true END AS ruleSatisfied"
"For every ""Transport Document"", when the ""Book Vehicles"" event occurs, a ""Create Transport Document"" event must be logged for the ""Transport Document"", and a ""Load Truck"" event should occur for all associated ""Truck"".","Activity: [""Book Vehicles"", ""Create Transport Document"", ""Load Truck""], EntityType: [""Transport Document"", ""Truck""], Actor: []","MATCH (transportDoc:Entity {EntityType: ""Transport Document""})<-[:CORR]-(bookVehicleEvent:Event {Activity: ""Book Vehicles""}) WHERE NOT EXISTS{ MATCH (transportDoc)<-[:CORR]-(createEvent:Event {Activity: ""Create Transport Document""}) MATCH (transportDoc)-[:REL]-(truck:Entity {EntityType: ""Truck""})<-[:CORR]-(loadTruckEvent:Event {Activity: ""Load Truck""}) } RETURN CASE WHEN COUNT(transportDoc)>0 THEN false ELSE true END AS ruleSatisfied"
"For each ""Handling Unit"", when a ""Pick Up Empty Container"" event occurs, a ""Load Truck"" event must happen for the ""Handling Unit"", and a ""Place in Stock"" event should occur for all associated ""Container"".","Activity: [""Pick Up Empty Container"", ""Load Truck"", ""Place in Stock""], EntityType: [""Handling Unit"", ""Container""], Actor: []","MATCH (handlingUnit:Entity {EntityType: ""Handling Unit""})<-[:CORR]-(pickUpEvent:Event {Activity: ""Pick Up Empty Container""}) WHERE NOT EXISTS{ MATCH (handlingUnit)<-[:CORR]-(loadTruckEvent:Event {Activity: ""Load Truck""}) MATCH (handlingUnit)-[:REL]-(container:Entity {EntityType: ""Container""})<-[:CORR]-(placeInStockEvent:Event {Activity: ""Place in Stock""}) } RETURN CASE WHEN COUNT(handlingUnit)>0 THEN false ELSE true END AS ruleSatisfied"
"For every ""Customer Order"", if an ""Order Empty Containers"" event occurs, a ""Place in Stock"" event must occur for the ""Customer Order"", and a ""Create Transport Document"" event must happen for all associated ""Transport Document"".","Activity: [""Order Empty Containers"", ""Place in Stock"", ""Create Transport Document""], EntityType: [""Customer Order"", ""Transport Document""], Actor: []","MATCH (order:Entity {EntityType: ""Customer Order""})<-[:CORR]-(orderEvent:Event {Activity: ""Order Empty Containers""}) WHERE NOT EXISTS{ MATCH (order)<-[:CORR]-(placeInStockEvent:Event {Activity: ""Place in Stock""}) MATCH (order)-[:REL]-(transportDoc:Entity {EntityType: ""Transport Document""})<-[:CORR]-(createEvent:Event {Activity: ""Create Transport Document""}) } RETURN CASE WHEN COUNT(order)>0 THEN false ELSE true END AS ruleSatisfied"
"For every Customer Order, if a ""Register Customer Order"" event occurs, then all Transport Document entities related to the Customer Order must have a ""Create Transport Document"" event occur, and all Container entities related to the Transport Document must have a ""Pick Up Empty Container"" event occur.","Activity: [""Register Customer Order"", ""Create Transport Document"", ""Pick Up Empty Container""], EntityType: [""Customer Order"", ""Transport Document"", ""Container""], Actor: []","MATCH (customerOrder:Entity {EntityType: ""Customer Order""})<-[:CORR]-(registerEvent:Event {Activity: ""Register Customer Order""}) MATCH (customerOrder)-[:REL]-(transportDocument:Entity {EntityType: ""Transport Document""}) WHERE NOT EXISTS { MATCH (transportDocument)<-[:CORR]-(createEvent:Event {Activity: ""Create Transport Document""})  MATCH (transportDocument)-[:REL]-(container:Entity {EntityType: ""Container""}) WHERE NOT EXISTS { MATCH (container)<-[:CORR]-(pickupEvent:Event {Activity: ""Pick Up Empty Container""}) } } RETURN CASE WHEN COUNT(customerOrder) > 0 THEN false ELSE true END AS ruleSatisfied"
"For every Truck, if a ""Load Truck"" event occurs, then all Handling Unit entities associated with the Truck must have a ""Place in Stock"" event occur, and all Forklift entities related to the Handling Unit must have a ""Collect Goods"" event occur.","Activity: [""Load Truck"", ""Place in Stock"", ""Collect Goods""], EntityType: [""Truck"", ""Handling Unit"", ""Forklift""], Actor: []","MATCH (truck:Entity {EntityType: ""Truck""})<-[:CORR]-(loadEvent:Event {Activity: ""Load Truck""}) MATCH (truck)-[:REL]-(handlingUnit:Entity {EntityType: ""Handling Unit""}) WHERE NOT EXISTS { MATCH (handlingUnit)<-[:CORR]-(placeEvent:Event {Activity: ""Place in Stock""})  MATCH (handlingUnit)-[:REL]-(forklift:Entity {EntityType: ""Forklift""}) WHERE NOT EXISTS { MATCH (forklift)<-[:CORR]-(collectEvent:Event {Activity: ""Collect Goods""}) } } RETURN CASE WHEN COUNT(truck) > 0 THEN false ELSE true END AS ruleSatisfied"
"For every Container, if an ""Order Empty Containers"" event occurs, then all Transport Document entities associated with the Container must have a ""Create Transport Document"" event occur, and all Truck entities related to the Transport Document must have a ""Drive to Terminal"" event occur.","Activity: [""Order Empty Containers"", ""Create Transport Document"", ""Drive to Terminal""], EntityType: [""Container"", ""Transport Document"", ""Truck""], Actor: []","MATCH (container:Entity {EntityType: ""Container""})<-[:CORR]-(orderEvent:Event {Activity: ""Order Empty Containers""}) MATCH (container)-[:REL]-(transportDocument:Entity {EntityType: ""Transport Document""}) WHERE NOT EXISTS { MATCH (transportDocument)<-[:CORR]-(createEvent:Event {Activity: ""Create Transport Document""})  MATCH (transportDocument)-[:REL]-(truck:Entity {EntityType: ""Truck""}) WHERE NOT EXISTS { MATCH (truck)<-[:CORR]-(driveEvent:Event {Activity: ""Drive to Terminal""})} } RETURN CASE WHEN COUNT(container) > 0 THEN false ELSE true END AS ruleSatisfied"
"For every Vehicle, if a ""Book Vehicles"" event occurs, then all Truck entities related to the Vehicle must have a ""Weigh"" event occur, and all Container entities related to the Truck must have a ""Place in Stock"" event occur.","Activity: [""Book Vehicles"", ""Weigh"", ""Place in Stock""], EntityType: [""Vehicle"", ""Truck"", ""Container""], Actor: []","MATCH (vehicle:Entity {EntityType: ""Vehicle""})<-[:CORR]-(bookEvent:Event {Activity: ""Book Vehicles""}) MATCH (vehicle)-[:REL]-(truck:Entity {EntityType: ""Truck""}) WHERE NOT EXISTS { MATCH (truck)<-[:CORR]-(weighEvent:Event {Activity: ""Weigh""})  MATCH (truck)-[:REL]-(container:Entity {EntityType: ""Container""}) WHERE NOT EXISTS { MATCH (container)<-[:CORR]-(placeEvent:Event {Activity: ""Place in Stock""}) }} RETURN CASE WHEN COUNT(vehicle) > 0 THEN false ELSE true END AS ruleSatisfied"
"For every Transport Document, if a ""Create Transport Document"" event occurs, then all Container entities related to the Transport Document must have a ""Pick Up Empty Container"" event occur, and all Truck entities related to the Container must have a ""Load Truck"" event occur.","Activity: [""Create Transport Document"", ""Pick Up Empty Container"", ""Load Truck""], EntityType: [""Transport Document"", ""Container"", ""Truck""], Actor: []","MATCH (transportDocument:Entity {EntityType: ""Transport Document""})<-[:CORR]-(createEvent:Event {Activity: ""Create Transport Document""}) MATCH (transportDocument)-[:REL]-(container:Entity {EntityType: ""Container""}) WHERE NOT EXISTS { MATCH (container)<-[:CORR]-(pickupEvent:Event {Activity: ""Pick Up Empty Container""})  MATCH (container)-[:REL]-(truck:Entity {EntityType: ""Truck""}) WHERE NOT EXISTS { MATCH (truck)<-[:CORR]-(loadEvent:Event {Activity: ""Load Truck""})} } RETURN CASE WHEN COUNT(transportDocument) > 0 THEN false ELSE true END AS ruleSatisfied"
"For every Forklift, if a ""Collect Goods"" event occurs, then all Handling Unit entities related to the Forklift must have a ""Place in Stock"" event occur, and all Truck entities related to the Handling Unit must have a ""Load Truck"" event occur.","Activity: [""Collect Goods"", ""Place in Stock"", ""Load Truck""], EntityType: [""Forklift"", ""Handling Unit"", ""Truck""], Actor: []","MATCH (forklift:Entity {EntityType: ""Forklift""})<-[:CORR]-(collectEvent:Event {Activity: ""Collect Goods""}) MATCH (forklift)-[:REL]-(handlingUnit:Entity {EntityType: ""Handling Unit""}) WHERE NOT EXISTS { MATCH (handlingUnit)<-[:CORR]-(placeEvent:Event {Activity: ""Place in Stock""})  MATCH (handlingUnit)-[:REL]-(truck:Entity {EntityType: ""Truck""}) WHERE NOT EXISTS { MATCH (truck)<-[:CORR]-(loadEvent:Event {Activity: ""Load Truck""}) }} RETURN CASE WHEN COUNT(forklift) > 0 THEN false ELSE true END AS ruleSatisfied"
"For every Customer Order, if a ""Place in Stock"" event occurs, then all Handling Unit entities related to the Customer Order must have a ""Load to Vehicle"" event occur, and all Vehicle entities related to the Handling Unit must have a ""Depart"" event occur.","Activity: [""Place in Stock"", ""Load to Vehicle"", ""Depart""], EntityType: [""Customer Order"", ""Handling Unit"", ""Vehicle""], Actor: []","MATCH (customerOrder:Entity {EntityType: ""Customer Order""})<-[:CORR]-(placeEvent:Event {Activity: ""Place in Stock""}) MATCH (customerOrder)-[:REL]-(handlingUnit:Entity {EntityType: ""Handling Unit""}) WHERE NOT EXISTS { MATCH (handlingUnit)<-[:CORR]-(loadEvent:Event {Activity: ""Load to Vehicle""})  MATCH (handlingUnit)-[:REL]-(vehicle:Entity {EntityType: ""Vehicle""}) WHERE NOT EXISTS { MATCH (vehicle)<-[:CORR]-(departEvent:Event {Activity: ""Depart""}) }} RETURN CASE WHEN COUNT(customerOrder) > 0 THEN false ELSE true END AS ruleSatisfied"
"For every Truck, if a ""Load Truck"" event occurs, then all Container entities related to the Truck must have a ""Weigh"" event occur, and all Transport Document entities related to the Container must have a ""Create Transport Document"" event occur.","Activity: [""Load Truck"", ""Weigh"", ""Create Transport Document""], EntityType: [""Truck"", ""Container"", ""Transport Document""], Actor: []","MATCH (truck:Entity {EntityType: ""Truck""})<-[:CORR]-(loadEvent:Event {Activity: ""Load Truck""}) MATCH (truck)-[:REL]-(container:Entity {EntityType: ""Container""}) WHERE NOT EXISTS { MATCH (container)<-[:CORR]-(weighEvent:Event {Activity: ""Weigh""})  MATCH (container)-[:REL]-(transportDocument:Entity {EntityType: ""Transport Document""}) WHERE NOT EXISTS { MATCH (transportDocument)<-[:CORR]-(createEvent:Event {Activity: ""Create Transport Document""}) }} RETURN CASE WHEN COUNT(truck) > 0 THEN false ELSE true END AS ruleSatisfied"
"For every Vehicle, if a ""Drive to Terminal"" event occurs, then all Truck entities related to the Vehicle must have a ""Pick Up Empty Container"" event occur, and all Container entities related to the Truck must have a ""Place in Stock"" event occur.","Activity: [""Drive to Terminal"", ""Pick Up Empty Container"", ""Place in Stock""], EntityType: [""Vehicle"", ""Truck"", ""Container""], Actor: []","MATCH (vehicle:Entity {EntityType: ""Vehicle""})<-[:CORR]-(driveEvent:Event {Activity: ""Drive to Terminal""}) MATCH (vehicle)-[:REL]-(truck:Entity {EntityType: ""Truck""}) WHERE NOT EXISTS { MATCH (truck)<-[:CORR]-(pickupEvent:Event {Activity: ""Pick Up Empty Container""})  MATCH (truck)-[:REL]-(container:Entity {EntityType: ""Container""}) WHERE NOT EXISTS { MATCH (container)<-[:CORR]-(placeEvent:Event {Activity: ""Place in Stock""}) }} RETURN CASE WHEN COUNT(vehicle) > 0 THEN false ELSE true END AS ruleSatisfied"
A customer order with more than 5 handling units may not be linked to more than 5 containers.,"Activity: [], EntityType: [""Customer Order"", ""Handling Unit"", ""Container""], Actor: []","MATCH (ent1:Entity {EntityType:""Customer Order""})-[:REL]-(ent2:Entity {EntityType:""Handling Unit""}) WITH ent1, COUNT(DISTINCT ent2) AS unitCount WHERE unitCount > 5 OPTIONAL MATCH (ent1)-[:REL]-(ent3:Entity {EntityType:""Container""}) WITH ent1, COUNT(DISTINCT ent3) AS containerCount WHERE containerCount > 5 RETURN CASE WHEN COUNT(ent1) > 0 THEN false ELSE true END AS ruleHolds"
"If a truck is assigned to more than 3 forklifts, it may not be assigned to more than 3 vehicles.","Activity: [], EntityType: [""Truck"", ""Forklift"", ""Vehicle""], Actor: []","MATCH (ent1:Entity {EntityType:""Truck""})-[:REL]-(ent2:Entity {EntityType:""Forklift""}) WITH ent1, COUNT(DISTINCT ent2) AS forkliftCount WHERE forkliftCount > 3 OPTIONAL MATCH (ent1)-[:REL]-(ent3:Entity {EntityType:""Vehicle""}) WITH ent1, COUNT(DISTINCT ent3) AS vehicleCount WHERE vehicleCount > 3 RETURN CASE WHEN COUNT(ent1) > 0 THEN false ELSE true END AS ruleHolds"
A transport document with more than 4 forklifts may not be linked to more than 4 trucks.,"Activity: [], EntityType: [""Transport Document"", ""Forklift"", ""Truck""], Actor: []","MATCH (ent1:Entity {EntityType:""Transport Document""})-[:REL]-(ent2:Entity {EntityType:""Forklift""}) WITH ent1, COUNT(DISTINCT ent2) AS forkliftCount WHERE forkliftCount > 4 OPTIONAL MATCH (ent1)-[:REL]-(ent3:Entity {EntityType:""Truck""}) WITH ent1, COUNT(DISTINCT ent3) AS truckCount WHERE truckCount > 4 RETURN CASE WHEN COUNT(ent1) > 0 THEN false ELSE true END AS ruleHolds"
"If a container is associated with more than 2 trucks, it may not be associated with more than 2 forklifts.","Activity: [], EntityType: [""Container"", ""Truck"", ""Forklift""], Actor: []","MATCH (ent1:Entity {EntityType:""Container""})-[:REL]-(ent2:Entity {EntityType:""Truck""}) WITH ent1, COUNT(DISTINCT ent2) AS truckCount WHERE truckCount > 2 OPTIONAL MATCH (ent1)-[:REL]-(ent3:Entity {EntityType:""Forklift""}) WITH ent1, COUNT(DISTINCT ent3) AS forkliftCount WHERE forkliftCount > 2 RETURN CASE WHEN COUNT(ent1) > 0 THEN false ELSE true END AS ruleHolds"
A handling unit with more than 3 trucks may not be assigned to more than 3 vehicles.,"Activity: [], EntityType: [""Handling Unit"", ""Truck"", ""Vehicle""], Actor: []","MATCH (ent1:Entity {EntityType:""Handling Unit""})-[:REL]-(ent2:Entity {EntityType:""Truck""}) WITH ent1, COUNT(DISTINCT ent2) AS truckCount WHERE truckCount > 3 OPTIONAL MATCH (ent1)-[:REL]-(ent3:Entity {EntityType:""Vehicle""}) WITH ent1, COUNT(DISTINCT ent3) AS vehicleCount WHERE vehicleCount > 3 RETURN CASE WHEN COUNT(ent1) > 0 THEN false ELSE true END AS ruleHolds"
"If a truck is linked to more than 2 vehicles, it may not be linked to more than 2 forklifts.","Activity: [], EntityType: [""Truck"", ""Vehicle"", ""Forklift""], Actor: []","MATCH (ent1:Entity {EntityType:""Truck""})-[:REL]-(ent2:Entity {EntityType:""Vehicle""}) WITH ent1, COUNT(DISTINCT ent2) AS vehicleCount WHERE vehicleCount > 2 OPTIONAL MATCH (ent1)-[:REL]-(ent3:Entity {EntityType:""Forklift""}) WITH ent1, COUNT(DISTINCT ent3) AS forkliftCount WHERE forkliftCount > 2 RETURN CASE WHEN COUNT(ent1) > 0 THEN false ELSE true END AS ruleHolds"
A vehicle with more than 3 handling units may not be linked to more than 3 containers.,"Activity: [], EntityType: [""Vehicle"", ""Handling Unit"", ""Container""], Actor: []","MATCH (ent1:Entity {EntityType:""Vehicle""})-[:REL]-(ent2:Entity {EntityType:""Handling Unit""}) WITH ent1, COUNT(DISTINCT ent2) AS handlingUnitCount WHERE handlingUnitCount > 3 OPTIONAL MATCH (ent1)-[:REL]-(ent3:Entity {EntityType:""Container""}) WITH ent1, COUNT(DISTINCT ent3) AS containerCount WHERE containerCount > 3 RETURN CASE WHEN COUNT(ent1) > 0 THEN false ELSE true END AS ruleHolds"
"If a forklift is associated with more than 2 vehicles, it may not be associated with more than 2 trucks.","Activity: [], EntityType: [""Forklift"", ""Vehicle"", ""Truck""], Actor: []","MATCH (ent1:Entity {EntityType:""Forklift""})-[:REL]-(ent2:Entity {EntityType:""Vehicle""}) WITH ent1, COUNT(DISTINCT ent2) AS vehicleCount WHERE vehicleCount > 2 OPTIONAL MATCH (ent1)-[:REL]-(ent3:Entity {EntityType:""Truck""}) WITH ent1, COUNT(DISTINCT ent3) AS truckCount WHERE truckCount > 2 RETURN CASE WHEN COUNT(ent1) > 0 THEN false ELSE true END AS ruleHolds"
A truck with more than 3 vehicles may not be linked to more than 3 containers.,"Activity: [], EntityType: [""Truck"", ""Vehicle"", ""Container""], Actor: []","MATCH (ent1:Entity {EntityType:""Truck""})-[:REL]-(ent2:Entity {EntityType:""Vehicle""}) WITH ent1, COUNT(DISTINCT ent2) AS vehicleCount WHERE vehicleCount > 3 OPTIONAL MATCH (ent1)-[:REL]-(ent3:Entity {EntityType:""Container""}) WITH ent1, COUNT(DISTINCT ent3) AS containerCount WHERE containerCount > 3 RETURN CASE WHEN COUNT(ent1) > 0 THEN false ELSE true END AS ruleHolds"
A vehicle with more than 3 containers may not be linked to more than 3 forklifts.,"Activity: [], EntityType: [""Vehicle"", ""Container"", ""Forklift""], Actor: []","MATCH (ent1:Entity {EntityType:""Vehicle""})-[:REL]-(ent2:Entity {EntityType:""Container""}) WITH ent1, COUNT(DISTINCT ent2) AS containerCount WHERE containerCount > 3 OPTIONAL MATCH (ent1)-[:REL]-(ent3:Entity {EntityType:""Forklift""}) WITH ent1, COUNT(DISTINCT ent3) AS forkliftCount WHERE forkliftCount > 3 RETURN CASE WHEN COUNT(ent1) > 0 THEN false ELSE true END AS ruleHolds"
